{"version":3,"sources":["editor.tsx","button-menu.tsx","CodeEditor.tsx","index.tsx"],"names":["Editor","_ref","lang","theme","shortcuts","props","snippetString","commands","completions","ghostText","keybindingString","editorRef","code","replaceCompleter","onChange","onSelectionChange","onBlur","commandsList","useRef","useEffect","current","ace","require","Autocomplete","for","editor","keybindings","JSON","parse","length","forEach","binding","_editorRef$current$ed","name","stringify","bindKey","bindkey","newCommand","addCommand","completer","_editorRef$current$ed2","keyboardHandler","init","snippetManager","snippets","snippetsLang","snippetsAddRemove","Object","entries","register","parseSnippetFile","unregister","customCompleter","getCompletions","session","pos","prefix","callback","completers","pop","addCompleter","inline","aceInline","AceInline","testCompletion","snippet","show","hide","console","log","_jsx","AceEditor","ref","mode","value","StyledDiv","styled","div","withConfig","displayName","componentId","_StyledStyledDiv2","_styled","p","$_css2","_StyledStyledDiv","$_css","StyledRegSpan","span","StyledSpan","StyledButton","button","themeProp","primary","primaryColor","creatIcon","size","arguments","undefined","CustomIcon","Icons","concat","Info","info","infoRef","_ThemeProvider","children","keys","_jsxs","className","style","css","map","class","Button","_ref2","executeAll","toggle","setToggle","useState","alwaysOn","showWithIcon","onClick","_button$commands","toggledCommands","classToggle","classList","contains","hasText","feather","iconSize","Set","_ref3","buttonGroup","buttons","execute","buttonRef","Menu","_ref4","menu","groups","group","index","toggleOnlyOne","defaultOptions","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","animatedScroll","fadeFoldWidgets","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","tabSize","width","debounceChangePeriod","GlobalCSS","createGlobalStyle","_templateObject","_taggedTemplateLiteral","isDisabled","inject","StyledCodeEditor","_StyledStyledCodeEditor","withStreamlitConnection","args","disabled","setCode","aceEditor","infoTextRef","baseSession","keepFocus","reset","timeoutId","createSnippets","snippetRaw","Array","isArray","split","c","join","snippetAddRemove","setSnippetAddRemove","keybindingAddRemove","setKeybindingAddRemove","clearTimeout","onChangeHandler","newCode","includes","outgoingMode","getSession","$modeId","Streamlit","setComponentValue","id","v1","slice","type","text","selected","getSelectedText","cursor","getCursorPosition","onSelectionChangeHandler","selectedText","onEditorBlur","event","getValue","description","win","mac","exec","unsecureCopyTextToClipboard","resetEditor","setMode","setKeyboardHandler","handlers","currentHandler","indexOf","$keybindingId","document","getElementById","execCommand","keyCode","key","dispatchEvent","KeyboardEvent","targetQueryString","target","querySelector","innerText","add","timeout","setTimeout","remove","_infoTextRef$current","responseType","cursorPos","line","getLine","row","replace","start","column","end","snippetText","setSession","snippetsPlusMinus","snippetsPlus","snippetsMinus","snippetsToAdd","snippetsToRemove","langMode","error","snippetConcatText","snippetMap","snip","content","lineCount","match","snippetsSession","createEditSession","moveCursorTo","renderer","scrollCursorIntoView","keybindingsJSON","_editor$completer$key","_editor$commands$comm","keybindingsSession","_document$querySelect","_document$querySelect2","_document$querySelect3","querySelectorAll","el","_args$condition","command","condition","warn","_args$timeout","_args$timeout2","_aceEditor$current","containsNumsStr","singleCommand","textField","createElement","body","appendChild","select","resizeObserver","ResizeObserver","_entries$0$contentBox","setFrameHeight","contentBoxSize","blockSize","contentRect","height","themeChoice","isDarkTheme","base","componentContainerProps","infoArg","menuArg","focusArg","codeArg","rest","editorArgsString","menuArgsString","infoArgsString","buttonArgsString","themeString","useMemo","revertedArgs","trim","heightProps","minLines","maxLines","aceEditorProps","partProps","aceProps","revertedButtons","revertedTheme","customButtonTheme","customButtons","ButtonSet","revertedMenu","menuTheme","ButtonMenu","revertedInfo","infoTheme","InfoBar","globalCSS","divElem","observe","disconnect","ReactDOM","render","React","StrictMode","CodeEditor"],"mappings":"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","file":"static/js/main.b5a85557.chunk.js","sourcesContent":["import { useEffect, useRef} from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\n\nexport interface KeyBinding {\n    bindkey: string | object,\n    name: string\n}\n\nexport interface EditorKeyBindings {\n  commands?: KeyBinding[],\n  completer?: KeyBinding[]\n}\n\nexport type EditorProps = {\n    code: string,\n    lang: string,\n    theme: string,\n    shortcuts: string,\n    props: any,\n    editorRef: any,\n    snippetString: string,\n    ghostText: string,\n    commands: object[],\n    completions: object[],\n    keybindingString: string,\n    replaceCompleter: boolean,\n    onChange: (value: string, event?: any) => void,\n    onSelectionChange: (value: any, event?: any) => void,\n    onBlur: (event: any, editor?: any) => void\n  }\n  \nexport const Editor = ({ lang, theme, shortcuts, props, snippetString, commands, completions, ghostText, keybindingString, editorRef, code, replaceCompleter, onChange, onSelectionChange, onBlur }: EditorProps ) => {\n    \n  let commandsList = useRef<object[]>(commands);\n  useEffect(() => {\n    if(editorRef.current){\n\n      // Add/remove keybindings\n      ace.require('ace/autocomplete').Autocomplete.for(editorRef.current.editor);\n      const keybindings = JSON.parse(keybindingString) as EditorKeyBindings;\n      if(keybindings.commands && keybindings.commands.length > 0){\n        // const bindkeySelector = editorRef.current.editor.commands.platform as string;\n        keybindings.commands.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.commands.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.commands.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.commands.addCommand(newCommand);\n                commandsList.current= [...commandsList.current, newCommand];\n              }\n            }\n   \n        });\n      }\n      if(keybindings.completer && keybindings.completer.length > 0){\n        // const bindkeySelector = editorRef.current.editor.completer.keyboardHandler.platform as string;\n        keybindings.completer.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.completer.keyboardHandler.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.completer.keyboardHandler.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.completer.keyboardHandler.addCommand(newCommand);\n              }\n            }\n        });\n      }\n\n      // Add/remove snippets\n      ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current.editor);\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      const snippets = JSON.parse(snippetString) as object;\n      for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)){\n        if(snippetsAddRemove[0])\n          snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang)\n        \n        if(snippetsAddRemove[1])\n          snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang)\n      }\n\n      // Add completions\n      if (completions.length > 0) {\n        const customCompleter = {\n          getCompletions: (\n              editor: ace.Ace.Editor,\n              session: ace.Ace.EditSession,\n              pos: ace.Ace.Point,\n              prefix: string,\n              callback: ace.Ace.CompleterCallback\n          ): void => {\n              callback(\n                  null,\n                  (completions as ace.Ace.Completion[])\n              );\n            },\n          };\n        if(replaceCompleter) {\n          editorRef.current.editor.completers.pop();\n        }\n        ace.require(\"ace/ext/language_tools\").addCompleter(customCompleter);\n      }\n    }\n  }, [snippetString, keybindingString]);\n\n  useEffect(() => {\n    if(editorRef.current && ghostText !== \"\"){\n      const aceInline = ace.require(\"ace/autocomplete/inline\").AceInline;\n      const inline = new aceInline();\n      const testCompletion: ace.Ace.Completion = {\n        snippet: ghostText,\n      }\n      const result = inline.show(editorRef.current.editor, testCompletion, \"\");\n      !result && inline.hide() && console.log(\"failed to show ghost text\");\n    }\n  }, [ghostText, editorRef]);\n\n  return (\n          <AceEditor\n           ref={editorRef}\n           name=\"REACT_ACE_EDITOR\"\n           mode={lang}\n           theme={theme}\n           value={code}\n           keyboardHandler={shortcuts}\n           commands={commandsList.current}\n           onChange={onChange}\n           onSelectionChange={onSelectionChange}\n           onBlur={onBlur}\n           {...props}/>\n  );\n};","// import styled, { ThemeProvider, css } from \"styled-components\"\nimport { useRef, useState } from \"react\"\nimport styled, { ThemeProvider } from 'styled-components/macro'\nimport * as Icons from \"react-feather\"\n\n\nexport interface customInfoText {\n  name: string,\n  class?: string,\n  style?: object,\n  theme?: object\n}\n\nexport interface infoBar {\n  name?: string,\n  css?: string,\n  style?: object,\n  info?: customInfoText[]\n}\n\nexport interface customButton {\n  name: string,\n  feather?: string,\n  iconSize?: number,\n  primary?: boolean,\n  hasText?: boolean,\n  showWithIcon?: boolean,\n  alwaysOn?: boolean,\n  commands?: any[],\n  toggledCommands?: any[],\n  bindKey?: string | object,\n  class?: string,\n  style?: object,\n  theme?: object, \n  classToggle?: string,\n}\n\nexport interface buttonGroup {\n  name: string,\n  buttons: customButton[],\n  style?: object,\n  toggleOnlyOne?: boolean,\n}\n\nexport interface menu {\n  style?: object,\n  css?: string,\n  groups?: buttonGroup[]\n}\n\nexport const StyledDiv = styled.div``;\nexport const StyledRegSpan = styled.span``;\n\nexport const StyledSpan = styled.span`\n  height: 2.5rem;\n  line-height: 2.5rem;\n  margin: 0px 0.4rem 0.15rem 0.4rem;\n  opacity: 0;\n  transform: scale(0);\n  transition: opacity 300ms 150ms, transform 300ms 150ms;\n`;\n\nexport const StyledButton = styled.button<{primary?: boolean, themeProp: string, theme: object}>`\n  border: none;\n  border-radius: 5px;\n  background: none;\n  height: 2.5rem;\n  line-height: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  position: absolute;\n  transform: scale(0);\n  transition: opacity 20ms 300ms, transform 20ms 300ms;\n  z-index: 9994;\n  :focus {\n    outline: none;\n  }\n  span{\n    color: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transform-origin: right;\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover span {\n    color: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n    opacity: 1;\n    transform: scale(1);\n  }\n  svg {\n    stroke: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover svg {\n    stroke: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n  }\n`;\n\nexport type iconKey = keyof typeof Icons;\n\nexport const creatIcon = (name: iconKey, size = 16) => {\n  const CustomIcon = Icons[name];\n  return <CustomIcon size={`${size}`} />;\n}\n\nexport type CustomInfoBar = {\n  theme: object,\n  info: infoBar,\n  infoRef: any,\n}\n\nexport const Info = ({info, theme, infoRef}: CustomInfoBar) => {\n\n  return (\n    <ThemeProvider theme={theme}>\n      {(Object.keys(info).length === 0) ? `` : <StyledDiv key=\"info_bar\" className={\"custom_info_bar \" + (info.name? info.name : \"\")} css={info.css} style={info.style}>\n        {<StyledRegSpan ref={infoRef} key=\"code_editor_info_message\" className=\"code_editor-info message\">\n          </StyledRegSpan>}\n        {(info.info || []).map((info: customInfoText)=>(\n          <StyledRegSpan key={\"info_\" + info.name} className={info.class} style={info.style}>\n            {info.name}\n          </StyledRegSpan>\n        ))}\n      </StyledDiv>}\n    </ThemeProvider>);\n}\n  \nexport type CustomButtonType = {\n  button: customButton, \n  theme: object, \n  themeProp: string, \n  executeAll: (ref: React.RefObject<HTMLButtonElement>, commands: any[]) => void\n}\nexport const Button = ({button, theme, themeProp, executeAll}: CustomButtonType) => {\n  const [toggle, setToggle] = useState(false);     //this toggle is currently not being used\n  const ref = useRef<HTMLButtonElement>(null);\n\n  const execute = (commands: any[], toggledCommands?: any[]) => {\n    if(button.classToggle){\n      setToggle(!toggle);\n      if (ref.current){\n        ref.current.classList.toggle(button.classToggle);\n        if(ref.current.classList.contains(button.classToggle))\n          executeAll(ref, commands);\n        else\n          executeAll(ref, toggledCommands ?? commands);\n      }\n      else \n        executeAll(ref, toggle? toggledCommands?? commands : commands);\n    } \n    else \n      executeAll(ref, commands);\n  }\n\n  return (\n    <StyledButton \n      ref={ref}\n      primary={button.primary? button.primary : false} \n      className={(button.class? button.class: \"\" ) + (button.alwaysOn? \" always-on\" : \"\") + (button.showWithIcon? \" with-icon\" : \"\") }\n      themeProp={themeProp}\n      style={button.style} \n      theme={theme}\n      onClick={() => execute(button.commands ?? [], button.toggledCommands)}>\n        {(button.hasText && button.name)? <StyledSpan >{button.name}</StyledSpan> : ``}\n        {button.feather? creatIcon(button.feather as iconKey || \"X\", button.iconSize) : \"\"}\n    </StyledButton>\n  )\n}\n\nexport type CustomButtonSet = \n{\n  theme: object,\n  themeProp: string,\n  buttonGroup: buttonGroup,\n  executeAll: (commands: any[]) => void \n}\n  \nexport const Set = ({buttonGroup, executeAll, theme, themeProp}: CustomButtonSet) => {\n\n  const execute = (buttonRef: React.RefObject<HTMLButtonElement>, commands: any[]) => {\n    // Do things here that depend on which button is clicked using buttonRef.current\n    if(commands)\n      executeAll(commands);\n  }\n\n  return (\n      <ThemeProvider theme={theme}>\n        {buttonGroup.buttons.map( (button) => (\n        <Button \n          key={buttonGroup.name + \"_\" + button.name}\n          button={button}\n          themeProp={themeProp}\n          theme={theme}\n          executeAll={(ref, commands) => execute(ref, commands)}/>\n      ))}\n    </ThemeProvider>\n  )\n}\n  \nexport type CustomMenu = \n{\n  menu : menu,\n  theme: object,\n  themeProp: string,\n  executeAll: (commands: any[]) => void\n}\n  \nexport const Menu = ({menu, executeAll, theme, themeProp}: CustomMenu) => {\n\n  const execute = (buttonRef: React.RefObject<HTMLButtonElement>, commands: any[]) => {\n    // Do things here that depend on which button is clicked using buttonRef.current\n    if(commands)\n      executeAll(commands);\n  }\n  \n  return (\n    <ThemeProvider theme={theme}>\n      {(Object.keys(menu).length === 0 )? \"\" : <StyledDiv key=\"menu_bar\" className=\"custom_menu\" style={menu.style} css={menu.css}>\n        {!menu.groups? `` : menu.groups.map((group: buttonGroup, index) => (\n          <StyledDiv key={\"group_\" + group.name + index} className={\"menu_group \" + group.name} style={group.style} data-one-toggle-only={group.toggleOnlyOne} >\n              {group.buttons.map((button: customButton,)=>(\n                <Button \n                  key={group.name + \"_\" + button.name}\n                  button={button}\n                  themeProp={themeProp}\n                  theme={theme}\n                  executeAll={(ref, commands) => execute(ref, commands)}/>\n              ))}\n          </StyledDiv>\n        ))}\n      </StyledDiv>}\n    </ThemeProvider>\n  )\n}","import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport {v1} from 'uuid';\nimport styled, { createGlobalStyle } from \"styled-components/macro\"\nimport { useState, useRef, useEffect, useMemo } from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport { Editor } from './editor';\nimport { Menu as ButtonMenu, Set as ButtonSet, customButton, buttonGroup, Info as InfoBar } from \"./button-menu\"\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst defaultOptions = {\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: false,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250,\n}\n\nconst GlobalCSS = createGlobalStyle<{isDisabled?: boolean, inject: string}>`\n  html {\n    opacity: ${props => props.isDisabled? \"0.5\": \"1\"};\n    cursor: ${props => props.isDisabled? \"not-allowed\": \"auto\"};\n    pointer-events: ${props => props.isDisabled? \"none\": \"auto\"};\n  }\n  ${props => props.inject}\n`\nconst StyledCodeEditor = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  // const [keybindingAddRemove, setKeybindingAddRemove] = useState([\"\",\"\"]);\n\n  const aceEditor = useRef<AceEditor>(null);\n  const infoTextRef = useRef<HTMLSpanElement>(null);\n  const baseSession = useRef<ace.Ace.EditSession | null>(null);\n  const keepFocus = useRef<boolean>(false);\n  const reset = useRef<boolean>(false);\n\n  var timeoutId: NodeJS.Timeout;\n\n  /**\n    * This function takes as input either a snippetText string that is expected\n    * to be already formatted like the text in a SnippetFile or a dictionary or \n    * and array of dictionaries. For the first case, it just returns the input.\n    * For the second and third case, a (SnippetFile format) string is constructed\n    * from the dict(s) and returned. Learn more about snippets {@link  here}\n    * @param snippetRaw snippets to be converted to a single snippetText string\n    * @returns {string} snippetText\n    */\n  const createSnippets = (snippetRaw: string | object | [object]): string => {\n    return (typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(({ name, code }) =>\n    ([\n      'snippet ' + name,\n      code.split('\\n')\n        .map((c: string) => '\\t' + c)\n        .join('\\n'),\n    ].join('\\n'))\n    ).join('\\n'))\n  }\n  const [snippetAddRemove, setSnippetAddRemove] = useState({[args['lang']] : [createSnippets(args[\"snippets\"][0]), createSnippets(args[\"snippets\"][1])]});\n  const [keybindingAddRemove, setKeybindingAddRemove] = useState(args['keybindings']);\n\n\n  useEffect(() => {\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if(aceEditor.current && keepFocus.current){\n      aceEditor.current.editor.focus();\n      keepFocus.current = false;\n    }\n  }, [keepFocus.current]);\n\n  // To reasons for the useEffect here: \n  //   1. to set the focus on the editor only when the focus argument has changed to true.\n  //   2. to set the focus on the editor after rendering the component at which point, the \n  //      editor should be ready.\n  useEffect(() => {\n    if(aceEditor.current && args.focus){\n      aceEditor.current.editor.focus();\n    }\n  }, [args.focus]);\n\n  const onChangeHandler = (newCode: string) => {\n    setCode(newCode);\n\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"debounce\") && aceEditor.current && aceEditor.current.editor) {\n      const editor = aceEditor.current.editor as any;\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      Streamlit.setComponentValue({id: v1().slice(0,8), type: \"change\", lang: outgoingMode, text: newCode, selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    }\n  }\n  \n  const onSelectionChangeHandler = (selectedText: any) => {\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"select\") && aceEditor.current && aceEditor.current.editor) {\n      const editor = aceEditor.current.editor as any;\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      Streamlit.setComponentValue({id: v1().slice(0,8), type: \"selection\", lang: outgoingMode, text: code, selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    }\n  }\n\n  const onEditorBlur = (event: any, editor: any) => {\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"blur\") && editor) {\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      setCode(editor.getValue());\n      Streamlit.setComponentValue({id: v1().slice(0,8), type: \"blur\", lang: outgoingMode, text: editor.getValue(), selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    }\n  }\n\n  // commands is an array of objects containing functions\n  // that the editor can be triggered to call.\n  const commands = { commands: [\n    {\n      name: 'submit', //name for the key binding.\n      description: \"Send 'submit' response\", //description of the command\n      bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n      exec: (editor: any) => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({id: v1().slice(0,8), type: \"submit\", lang: outgoingMode, text: editor.getValue(), selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n      }\n    },\n    {\n      name: 'saveState',\n      description: \"Save state\",\n      bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n      exec: (editor: ace.Ace.Editor) => {\n        setCode(editor.getValue());\n      }\n    },\n    {\n      name: 'copyAll',\n      description: \"Copy all text to clipboard\",\n      exec: (editor: ace.Ace.Editor) => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    },\n    {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    },\n    {\n      name: 'keepFocus',\n      description: \"Return cursor to editor\",\n      exec: () => {\n        keepFocus.current = true;\n      }\n    },\n    {\n      name: \"setMode\",\n      description: \"Set language mode\",\n      exec: (editor: ace.Ace.Editor, lang: string) => {\n          if(lang && typeof lang === \"string\")\n            editor.getSession().setMode(\"ace/mode/\" + lang);\n      },\n      readOnly: true\n    },\n    {\n      name: \"changeShortcuts\",\n      description: \"Switch shortcuts\",\n      exec: (editor: any, shortcuts?: string) => {\n        if(shortcuts && typeof shortcuts === \"string\")\n          editor.setKeyboardHandler(\"ace/keyboard/\" + shortcuts);\n        else {\n          //rotate through the available keyboard handlers\n          const handlers = [\"ace/keyboard/vim\", \"ace/keyboard/emacs\", \"ace/keyboard/sublime\", \"ace/keyboard/vscode\"];\n          const currentHandler = handlers[(handlers.indexOf(editor.$keybindingId) + 1) % 4];\n          editor.setKeyboardHandler(currentHandler);\n        }\n      },\n      readOnly: true\n    },\n    {\n      name: 'toggleKeyboardShortcuts',\n      exec: (editor: ace.Ace.Editor) => {\n        if(!document.getElementById('kbshortcutmenu'))\n          editor.execCommand('showKeyboardShortcuts');\n        else \n          editor.execCommand('simulateKeyPress', {type:\"keydown\", keyCode: 27});\n      }\n    },\n    {\n      name: 'simulateKeyPress',\n      exec: (editor: ace.Ace.Editor, args: {type: string, key?: string, keyCode?: number}) => {\n        if(args.key)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'key': args.key})); \n        else if(args.keyCode)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'keyCode': args.keyCode})); \n      }\n    },\n    {\n      name: 'infoMessage',\n      description: \"Display message in info bar\",\n      exec: (editor: ace.Ace.Editor, args: {text: string, timeout?: number, classToggle?: string, targetQueryString?: string} ) => {\n        if(args.targetQueryString){\n          const target = document.querySelector(args.targetQueryString) as HTMLElement;\n          if(target){\n            target.innerText = args.text;\n            target.classList.add(args.classToggle || \"\")\n            if(args.timeout){\n              timeoutId = setTimeout(() => {\n                target.classList.remove(args.classToggle || \"\");\n              }, args.timeout);\n            }\n          }\n        }\n        else if(infoTextRef.current){\n          infoTextRef.current.innerText = args.text;\n          infoTextRef.current.classList.add(args.classToggle || \"\");\n          if(args.timeout){\n            timeoutId = setTimeout(() => {\n              infoTextRef.current?.classList.remove(args.classToggle || \"\");\n            }, args.timeout);\n          }\n        }\n      }\n    },\n    {\n      name: 'response', //name for the key binding.\n      description: \"Send custom response\", //description of the command\n      exec: (editor: any, responseType = \"\") => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({id: v1().slice(0,8), type: responseType, lang: outgoingMode, text: editor.getValue(), selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n      }\n    },\n    {\n      name: 'returnSelection', //name for the key binding.\n      description: \"Send selected text to Streamlit\", //description of the command\n      exec: (editor: any) => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({id: v1().slice(0,8), type: \"selection\", lang: outgoingMode, text: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n      }\n    },\n    {\n      name: 'appendGhostText',\n      description: \"Add ghost test to end of line\",\n      bindKey: { win: 'Ctrl-/', mac: 'Command-Alt-N' },\n      exec: (editor: any) => {\n        const ghostText = args['ghost_text'];\n        if(ghostText){\n          const cursorPos = editor.getCursorPosition();\n          const line = editor.session.getLine(cursorPos.row);\n          editor.session.replace({start: {row: cursorPos.row, column: line.length}, end: {row: cursorPos.row, column: line.length}}, ghostText);\n        }\n      }\n    },\n    {\n      name: 'editSnippets',\n      description: \"Edit snippets\",\n      bindKey: { win: 'Ctrl-Alt-N', mac: 'Command-Alt-N' },\n      exec: (editor: any) => {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"snippets\"){\n            const snippetText = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            if(outgoingMode === \"snippets\"){}\n            try{\n              const snippetsPlusMinus = snippetText.split(\"###~~~\")[1];\n              const [snippetsPlus, snippetsMinus] = snippetsPlusMinus.split(\"###---\");\n              const snippetsToAdd = snippetsPlus.split(\"###+++\")[1];\n              const snippetsToRemove = snippetsMinus;\n              const langMode = editor.getSession().$modeId.split(\"/\").pop();\n              setSnippetAddRemove({[langMode] : [snippetAddRemove[langMode][0] + snippetsToAdd, snippetAddRemove[langMode][1] + snippetsToRemove]});\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const langMode = editor.getSession().$modeId.split(\"/\").pop()\n          const snippetConcatText = `\\n###~~~#(DO NOT EDIT THIS LINE)\n# Commented out above are all the snippets that are currently\n# registered for ${args['lang']} mode.\n\\n\\n###+++#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to add below this line.\\n\\n\\n\\n\n\\n\\n\\n###---#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to remove below this line.\\n\\n\\n\\n\\n\\n\\n`;\n          const snippetText = \"#\" + createSnippets(snippetManager.snippetMap[langMode].map((snip: any) => ({name: snip.name, code: snip.content}))).replace(/\\n/g, \"\\n#\") + snippetConcatText;\n          // snippetManager.files[editor.getSession().$modeId].snippetText\n          const lineCount = (snippetText.match(/\\n/g) || []).length;\n          baseSession.current = editor.getSession();\n          const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n          editor.setSession(snippetsSession);\n          const cursorPos = {row: (lineCount - 15)>0? lineCount - 15 : 0, column: 0};\n          editor.moveCursorTo(cursorPos.row, cursorPos.column);\n          editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n        }\n      }\n    },\n    {\n      name: 'editKeyBindings',\n      description: \"Edit keybindings\",\n      bindKey: { win: 'Ctrl-Alt-B', mac: 'Command-Alt-B' },\n      exec: (editor: any) => {\n        ace.require('ace/autocomplete').Autocomplete.for(editor);\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"json\"){\n            const keybindingsJSON = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            try{\n              setKeybindingAddRemove(JSON.parse(keybindingsJSON));\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const keybindings = {commands: {}, completer: {}};\n          if(editor.completer && editor.completer.keyboardHandler.commands){\n            keybindings.completer = Object.keys(editor.completer.keyboardHandler.commands).map((key: any) => ({bindkey: editor.completer.keyboardHandler.commands[key].bindKey ?? \"\", name: editor.completer.keyboardHandler.commands[key].name}));\n          }\n          if(editor.commands.commands){\n            keybindings.commands = Object.keys(editor.commands.commands).map((key: any) => ({bindkey: editor.commands.commands[key].bindKey ?? \"\", name: editor.commands.commands[key].name}));\n          }\n          const keybindingsJSON = JSON.stringify(keybindings, undefined, 2);\n          baseSession.current = editor.getSession();\n          const keybindingsSession = ace.createEditSession(keybindingsJSON, \"ace/mode/json\");\n          editor.setSession(keybindingsSession);\n        }\n      }\n    },\n    {\n      name: 'exitSession', //name for the key binding.\n      bindKey: { win: 'Esc', mac: 'Esc' },\n      description: \"Return to main session (keep changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          const mode = editor.getSession().$modeId.split(\"/\").pop();\n          if (mode === \"snippets\")\n            editor.execCommand(\"editSnippets\");\n          else if (mode === \"json\")\n            editor.execCommand(\"editKeyBindings\");\n        }\n      }\n    },\n    {\n      name: 'abandonSession', //name for the key binding.\n      bindKey: { win: 'Ctrl-Alt-Esc', mac: 'Command-Alt-Esc' },\n      description: \"Return to main session (discard changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n        }\n      }\n    },\n    {\n      name: 'classART', //name for the key binding.\n      description: \"Add/Remove/Toggle class for element\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, type: string, class: string}) => {\n        if(args.targetQueryString && args.type && args.class){\n          switch(args.type){\n            case \"add\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.add(args.class));\n              break;\n            case \"remove\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.remove(args.class));\n              break;\n            case \"toggle\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.toggle(args.class));\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    {\n      name: 'conditionalExecute', //name for the key binding.\n      description: \"Execute command if element exists\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, command: any[], condition?: boolean}) => {\n        if(args.targetQueryString && args.command && Array.isArray(args.command)){\n          if(!(args.condition ?? true) === !document.querySelector(args.targetQueryString)){\n            typeof args.command[0] === \"string\" ? execute(args.command[0], args.command[1]) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n        }\n      }\n    },\n    {\n      name: 'delayedExecute', //name for the key binding.\n      description: \"Execute command after a period of time\", //description of the command\n      exec: (editor: any, args: { command: string | any[], timeout?: number}) => {\n        if(args.command){\n          if(Array.isArray(args.command) && args.command.length === 2){\n            typeof args.command[0] === \"string\" ? setTimeout(() => {execute(args.command[0], args.command[1])}, args.timeout ?? defaultProps.debounceChangePeriod) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n          else if(typeof args.command === \"string\"){\n            setTimeout(() => {\n              execute(args.command as string);\n            }, args.timeout ?? defaultProps.debounceChangePeriod);\n          }\n        }\n      }\n    }\n  ]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach((key: any) => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\" || Array.isArray(args[key]);\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`Function - execute: failed to parse/execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  const executeAll = (commands: any[]) => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"Function - executeAll: improper command format! Singular commands must contain name of command as first element and arguments as second element.\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"Function - executeAll: failed to parse/execute command(s)!\");\n      }\n    });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  // This useEffect is used to reset the editor when the code argument changes and\n  // the allow_reset argument is true. The allow_reset argument only impacts the\n  // behavior of the component when the component has a fixed key argument because\n  // changing the key argument results in the creation of a new component instance.\n  // Everything would be reset anyways.\n  useEffect(() => {\n    if (args['allow_reset'] === true && args['code'] !== code) {\n      reset.current = !reset.current;\n      resetEditor();\n    }\n  }, [args['code']]);\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n\n  const {info: infoArg, menu: menuArg, focus: focusArg, code: codeArg, ...rest} = args;\n  const editorArgsString = JSON.stringify(rest);\n  const menuArgsString = JSON.stringify(menuArg);\n  const infoArgsString = JSON.stringify(infoArg);\n  const buttonArgsString = JSON.stringify(args['buttons']);\n  const themeString = JSON.stringify(theme);\n  const snippets = JSON.stringify(snippetAddRemove);\n\n  /**\n   * This section contains the main sub-components (child components). These components are wrapped in useMemos\n   * in order to prevent unnecessary re-rendering of the components. This is listed as one of its use cases in the\n   * React docs ({@link https://beta.reactjs.org/reference/react/useMemo#skipping-re-rendering-of-components Skipping re-rendering of components})\n   *\n   * This component is the editor component that is rendered. It is only re-rendered when\n   * certain properties change. This is important because we should account for the possibility that the editor \n   * is being used at any given moment. Unnecessary and frequent re-rendering of the editor (for outside reasons\n   * especially) can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    const keybindings = JSON.stringify(keybindingAddRemove);\n    const revertedArgs = JSON.parse(editorArgsString);\n\n    // Create commands for each button\n    if(revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach((button: any) => {\n          commands.commands = [...commands.commands, {\n            name: (button.name as string).trim().replace(/\\s+/g, '_') + '_button',\n            bindKey: button.bindKey,\n            description: \"Execute '\" + button.name + \"' button command(s)\",\n            exec: () => {\n            executeAll(button.commands);\n          }}];\n      });\n    }\n\n    let heightProps = {};\n    if(typeof revertedArgs['height'] === \"number\") \n      heightProps = {minLines: 1, maxLines: revertedArgs['height']};\n    else if(typeof revertedArgs['height'] === \"string\") \n      heightProps = {height: revertedArgs['height']};\n    else if(Array.isArray(revertedArgs['height']) && revertedArgs['height'].length === 2) \n      heightProps = {minLines: revertedArgs['height'][0], maxLines: revertedArgs['height'][1]};\n\n    const aceEditorProps = { ...defaultEditorProps, ...revertedArgs['editor_props'] };\n    const aceOptions = { ...defaultOptions, ...revertedArgs['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps,...heightProps, ...revertedArgs['props'] };\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n    return (\n        <Editor\n         editorRef={aceEditor}\n         code={code} \n         lang={revertedArgs['lang']} \n         theme={themeProp} \n         shortcuts={revertedArgs['shortcuts']} \n         snippetString={snippets} \n         ghostText={revertedArgs['ghost_text']}\n         commands={commands.commands} \n         completions={revertedArgs['completions']}\n         replaceCompleter={revertedArgs['replace_completer']}\n         keybindingString={keybindings} \n         props={aceProps} \n         onChange={onChangeHandler}\n         onSelectionChange={onSelectionChangeHandler}\n         onBlur={onEditorBlur}  \n        />\n      );\n  }, [editorArgsString, themeProp, snippets, keybindingAddRemove, reset.current]);\n\n  const buttons = useMemo(() => {\n    const revertedButtons = JSON.parse(buttonArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme ?? {};\n    const customButtons = {buttons: (revertedButtons ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      < ButtonSet\n       buttonGroup={customButtons} \n       theme={customButtonTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [buttonArgsString, themeString, themeProp]);\n\n  const menu = useMemo(() => {\n    const revertedMenu = JSON.parse(menuArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme ?? {};\n    return (\n      <ButtonMenu\n       menu={revertedMenu} \n       theme={menuTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [menuArgsString, themeString, themeProp]);\n\n  const info = useMemo(() => {\n    const revertedInfo = JSON.parse(infoArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme ?? {};\n    return (\n      <InfoBar\n       infoRef={infoTextRef} \n       info={revertedInfo} \n       theme={infoTheme} />\n    );\n  }, [infoArgsString, themeString]);\n\n  const globalCSS = useMemo(() => {\n    return (\n      <GlobalCSS isDisabled={disabled} inject={componentContainerProps.globalCSS} />\n    );\n  }, [componentContainerProps.globalCSS, disabled]);\n\n  return (\n    <StyledCodeEditor ref={observe} style={componentContainerProps.style} css={componentContainerProps.css} className={\"streamlit_code-editor \" + theme?.base ?? \"\" } >\n      {globalCSS}\n      {editor}\n      {buttons}\n      {menu}\n      {info}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)\n","// / <reference types=\"styled-components/cssprop\" />\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CodeEditor from \"./CodeEditor\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CodeEditor />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}