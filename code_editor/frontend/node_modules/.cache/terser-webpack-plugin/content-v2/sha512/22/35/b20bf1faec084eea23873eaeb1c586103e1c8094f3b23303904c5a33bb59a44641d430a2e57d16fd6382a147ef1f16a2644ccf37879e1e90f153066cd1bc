{"code":"ace.define(\"ace/ext/rtl\",[\"require\",\"exports\",\"module\",\"ace/editor\",\"ace/config\"],(function(e,t,i){\"use strict\";var n=[{name:\"leftToRight\",bindKey:{win:\"Ctrl-Alt-Shift-L\",mac:\"Command-Alt-Shift-L\"},exec:function(e){e.session.$bidiHandler.setRtlDirection(e,!1)},readOnly:!0},{name:\"rightToLeft\",bindKey:{win:\"Ctrl-Alt-Shift-R\",mac:\"Command-Alt-Shift-R\"},exec:function(e){e.session.$bidiHandler.setRtlDirection(e,!0)},readOnly:!0}],r=e(\"../editor\").Editor;function o(e,t){var i=t.getSelection().lead;t.session.$bidiHandler.isRtlLine(i.row)&&0===i.column&&(t.session.$bidiHandler.isMoveLeftOperation&&i.row>0?t.getSelection().moveCursorTo(i.row-1,t.session.getLine(i.row-1).length):t.getSelection().isEmpty()?i.column+=1:i.setPosition(i.row,i.column+1))}function s(e){e.editor.session.$bidiHandler.isMoveLeftOperation=/gotoleft|selectleft|backspace|removewordleft/.test(e.command.name)}function d(e,t){var i=t.session;if(i.$bidiHandler.currentRow=null,i.$bidiHandler.isRtlLine(e.start.row)&&\"insert\"===e.action&&e.lines.length>1)for(var n=e.start.row;n<e.end.row;n++)i.getLine(n+1).charAt(0)!==i.$bidiHandler.RLE&&(i.doc.$lines[n+1]=i.$bidiHandler.RLE+i.getLine(n+1))}function l(e,t){var i=t.session.$bidiHandler,n=t.$textLayer.$lines.cells,r=t.layerConfig.width-t.layerConfig.padding+\"px\";n.forEach((function(e){var t=e.element.style;i&&i.isRtlLine(e.row)?(t.direction=\"rtl\",t.textAlign=\"right\",t.width=r):(t.direction=\"\",t.textAlign=\"\",t.width=\"\")}))}function a(e){var t=e.$textLayer.$lines;function i(e){var t=e.element.style;t.direction=t.textAlign=t.width=\"\"}t.cells.forEach(i),t.cellCache.forEach(i)}e(\"../config\").defineOptions(r.prototype,\"editor\",{rtlText:{set:function(e){e?(this.on(\"change\",d),this.on(\"changeSelection\",o),this.renderer.on(\"afterRender\",l),this.commands.on(\"exec\",s),this.commands.addCommands(n)):(this.off(\"change\",d),this.off(\"changeSelection\",o),this.renderer.off(\"afterRender\",l),this.commands.off(\"exec\",s),this.commands.removeCommands(n),a(this.renderer)),this.renderer.updateFull()}},rtl:{set:function(e){this.session.$bidiHandler.$isRtl=e,e?(this.setOption(\"rtlText\",!1),this.renderer.on(\"afterRender\",l),this.session.$bidiHandler.seenBidi=!0):(this.renderer.off(\"afterRender\",l),a(this.renderer)),this.renderer.updateFull()}}})})),ace.require([\"ace/ext/rtl\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"c1903c653b4d919274d726d9625711b2.js","input":"ace.define(\"ace/ext/rtl\", [\"require\", \"exports\", \"module\", \"ace/editor\", \"ace/config\"], function (require, exports, module) {\n  \"use strict\";\n\n  var commands = [{\n    name: \"leftToRight\",\n    bindKey: {\n      win: \"Ctrl-Alt-Shift-L\",\n      mac: \"Command-Alt-Shift-L\"\n    },\n    exec: function (editor) {\n      editor.session.$bidiHandler.setRtlDirection(editor, false);\n    },\n    readOnly: true\n  }, {\n    name: \"rightToLeft\",\n    bindKey: {\n      win: \"Ctrl-Alt-Shift-R\",\n      mac: \"Command-Alt-Shift-R\"\n    },\n    exec: function (editor) {\n      editor.session.$bidiHandler.setRtlDirection(editor, true);\n    },\n    readOnly: true\n  }];\n  var Editor = require(\"../editor\").Editor;\n  require(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    rtlText: {\n      set: function (val) {\n        if (val) {\n          this.on(\"change\", onChange);\n          this.on(\"changeSelection\", onChangeSelection);\n          this.renderer.on(\"afterRender\", updateLineDirection);\n          this.commands.on(\"exec\", onCommandEmitted);\n          this.commands.addCommands(commands);\n        } else {\n          this.off(\"change\", onChange);\n          this.off(\"changeSelection\", onChangeSelection);\n          this.renderer.off(\"afterRender\", updateLineDirection);\n          this.commands.off(\"exec\", onCommandEmitted);\n          this.commands.removeCommands(commands);\n          clearTextLayer(this.renderer);\n        }\n        this.renderer.updateFull();\n      }\n    },\n    rtl: {\n      set: function (val) {\n        this.session.$bidiHandler.$isRtl = val;\n        if (val) {\n          this.setOption(\"rtlText\", false);\n          this.renderer.on(\"afterRender\", updateLineDirection);\n          this.session.$bidiHandler.seenBidi = true;\n        } else {\n          this.renderer.off(\"afterRender\", updateLineDirection);\n          clearTextLayer(this.renderer);\n        }\n        this.renderer.updateFull();\n      }\n    }\n  });\n  function onChangeSelection(e, editor) {\n    var lead = editor.getSelection().lead;\n    if (editor.session.$bidiHandler.isRtlLine(lead.row)) {\n      if (lead.column === 0) {\n        if (editor.session.$bidiHandler.isMoveLeftOperation && lead.row > 0) {\n          editor.getSelection().moveCursorTo(lead.row - 1, editor.session.getLine(lead.row - 1).length);\n        } else {\n          if (editor.getSelection().isEmpty()) lead.column += 1;else lead.setPosition(lead.row, lead.column + 1);\n        }\n      }\n    }\n  }\n  function onCommandEmitted(commadEvent) {\n    commadEvent.editor.session.$bidiHandler.isMoveLeftOperation = /gotoleft|selectleft|backspace|removewordleft/.test(commadEvent.command.name);\n  }\n  function onChange(delta, editor) {\n    var session = editor.session;\n    session.$bidiHandler.currentRow = null;\n    if (session.$bidiHandler.isRtlLine(delta.start.row) && delta.action === 'insert' && delta.lines.length > 1) {\n      for (var row = delta.start.row; row < delta.end.row; row++) {\n        if (session.getLine(row + 1).charAt(0) !== session.$bidiHandler.RLE) session.doc.$lines[row + 1] = session.$bidiHandler.RLE + session.getLine(row + 1);\n      }\n    }\n  }\n  function updateLineDirection(e, renderer) {\n    var session = renderer.session;\n    var $bidiHandler = session.$bidiHandler;\n    var cells = renderer.$textLayer.$lines.cells;\n    var width = renderer.layerConfig.width - renderer.layerConfig.padding + \"px\";\n    cells.forEach(function (cell) {\n      var style = cell.element.style;\n      if ($bidiHandler && $bidiHandler.isRtlLine(cell.row)) {\n        style.direction = \"rtl\";\n        style.textAlign = \"right\";\n        style.width = width;\n      } else {\n        style.direction = \"\";\n        style.textAlign = \"\";\n        style.width = \"\";\n      }\n    });\n  }\n  function clearTextLayer(renderer) {\n    var lines = renderer.$textLayer.$lines;\n    lines.cells.forEach(clear);\n    lines.cellCache.forEach(clear);\n    function clear(cell) {\n      var style = cell.element.style;\n      style.direction = style.textAlign = style.width = \"\";\n    }\n  }\n});\n(function () {\n  ace.require([\"ace/ext/rtl\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}