{"code":"ace.define(\"ace/mode/jexl_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),i=e(\"./text_highlight_rules\").TextHighlightRules,r=function(){var e=this.createKeywordMapper({keyword:\"return|var|function|and|or|not|if|for|while|do|continue|break\",\"constant.language\":\"null\",\"support.function\":\"empty|size|new\"},\"identifier\");this.$rules={start:[{token:\"comment\",regex:\"\\\\/\\\\/.*$\"},{token:\"comment\",regex:\"##.*$\"},{token:\"comment\",regex:\"\\\\/\\\\*\",next:\"comment\"},{token:[\"comment\",\"text\"],regex:\"(#pragma)(\\\\s.*$)\"},{token:\"string\",regex:'[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'},{token:\"string\",regex:\"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"},{token:\"string\",regex:\"`\",push:[{token:\"constant.language.escape\",regex:\"\\\\\\\\(?:x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|u{[0-9a-fA-F]{1,6}}||.)\"},{token:\"string\",regex:\"`\",next:\"pop\"},{token:\"lparen\",regex:\"\\\\${\",push:[{token:\"rparen\",regex:\"}\",next:\"pop\"},{include:\"start\"}]},{defaultToken:\"string\"}]},{token:\"constant.numeric\",regex:/0(?:[xX][0-9a-fA-F][0-9a-fA-F_]*|[bB][01][01_]*)[LlSsDdFfYy]?\\b/},{token:\"constant.numeric\",regex:/[+-]?\\d[\\d_]*(?:(?:\\.[\\d_]*)?(?:[eE][+-]?[\\d_]+)?)?[LlSsDdFfYy]?\\b/},{token:\"constant.language.boolean\",regex:\"(?:true|false)\\\\b\"},{token:\"string.regexp\",regex:\"~/\",push:[{token:\"constant.language.escape\",regex:\"\\\\\\\\/\"},{token:\"string.regexp\",regex:\"$|/\",next:\"pop\"},{defaultToken:\"string.regexp\"}]},{token:e,regex:\"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"},{token:\"keyword.operator\",regex:\"&&|\\\\|\\\\||!|&|\\\\||\\\\^|~|\\\\?|:|\\\\?\\\\?|==|!=|<|<=|>|>=|=~|!~|=\\\\^|=\\\\$|!\\\\$|\\\\+|\\\\-|\\\\*|%|\\\\/|=\"},{token:\"lparen\",regex:\"[[({]\"},{token:\"rparen\",regex:\"[\\\\])}]\"},{token:\"text\",regex:\"\\\\s+\"},{token:\"punctuation\",regex:\"[,.]\"},{token:\"storage.type.annotation\",regex:\"@[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"}],comment:[{token:\"comment\",regex:\"\\\\*\\\\/\",next:\"start\"},{defaultToken:\"comment\"}]},this.normalizeRules()};o.inherits(r,i),t.JexlHighlightRules=r})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var o=e(\"../../lib/oop\"),i=e(\"../../range\").Range,r=e(\"./fold_mode\").FoldMode,a=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};o.inherits(a,r),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var o=e.getLine(n);if(this.singleLineBlockCommentRe.test(o)&&!this.startRegionRe.test(o)&&!this.tripleStarBlockCommentRe.test(o))return\"\";var i=this._getFoldWidgetBase(e,t,n);return!i&&this.startRegionRe.test(o)?\"start\":i},this.getFoldWidgetRange=function(e,t,n,o){var i,r=e.getLine(n);if(this.startRegionRe.test(r))return this.getCommentRegionBlock(e,r,n);if(i=r.match(this.foldingStartMarker)){var a=i.index;if(i[1])return this.openingBracketBlock(e,i[1],n,a);var g=e.getCommentFoldRange(n,a+i[0].length,1);return g&&!g.isMultiLine()&&(o?g=this.getSectionRange(e,n):\"all\"!=t&&(g=null)),g}if(\"markbegin\"!==t&&(i=r.match(this.foldingStopMarker))){a=i.index+i[0].length;return i[1]?this.closingBracketBlock(e,i[1],n,a):e.getCommentFoldRange(n,a,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),o=n.search(/\\S/),r=t,a=n.length,g=t+=1,s=e.getLength();++t<s;){var l=(n=e.getLine(t)).search(/\\S/);if(-1!==l){if(o>l)break;var c=this.getFoldWidgetRange(e,\"all\",t);if(c){if(c.start.row<=r)break;if(c.isMultiLine())t=c.end.row;else if(o==l)break}g=t}}return new i(r,a,g,e.getLine(g).length)},this.getCommentRegionBlock=function(e,t,n){for(var o=t.search(/\\s*$/),r=e.getLength(),a=n,g=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,s=1;++n<r;){t=e.getLine(n);var l=g.exec(t);if(l&&(l[1]?s--:s++,!s))break}if(n>a)return new i(a,o,n,t.length)}}.call(a.prototype)})),ace.define(\"ace/mode/jexl\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/jexl_highlight_rules\",\"ace/mode/text\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),i=e(\"./jexl_highlight_rules\").JexlHighlightRules,r=e(\"./text\").Mode,a=e(\"./folding/cstyle\").FoldMode,g=function(){this.HighlightRules=i,this.$behaviour=this.$defaultBehaviour,this.foldingRules=new a};o.inherits(g,r),function(){this.lineCommentStart=[\"//\",\"##\"],this.blockComment={start:\"/*\",end:\"*/\"},this.$id=\"ace/mode/jexl\"}.call(g.prototype),t.Mode=g})),ace.require([\"ace/mode/jexl\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"fa95126bdfa0ba114acbde5eb9d93143.js","input":"ace.define(\"ace/mode/jexl_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var JexlHighlightRules = function () {\n    var keywords = \"return|var|function|and|or|not|if|for|while|do|continue|break\";\n    var buildinConstants = \"null\";\n    var supportFunc = \"empty|size|new\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"constant.language\": buildinConstants,\n      \"support.function\": supportFunc\n    }, \"identifier\");\n    var escapedRe = \"\\\\\\\\(?:x[0-9a-fA-F]{2}|\" +\n    // hex\n    \"u[0-9a-fA-F]{4}|\" +\n    // unicode\n    \"u{[0-9a-fA-F]{1,6}}|\" +\n    // es6 unicode\n    \"|.)\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"\\\\/\\\\/.*$\"\n      }, {\n        token: \"comment\",\n        regex: \"##.*$\"\n      }, {\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: [\"comment\", \"text\"],\n        regex: \"(#pragma)(\\\\s.*$)\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // single line\n        regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n      }, {\n        token: \"string\",\n        // multi line string\n        regex: \"`\",\n        push: [{\n          token: \"constant.language.escape\",\n          regex: escapedRe\n        }, {\n          token: \"string\",\n          regex: \"`\",\n          next: \"pop\"\n        }, {\n          token: \"lparen\",\n          //interpolation\n          regex: \"\\\\${\",\n          push: [{\n            token: \"rparen\",\n            regex: \"}\",\n            next: \"pop\"\n          }, {\n            include: \"start\"\n          }]\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: /0(?:[xX][0-9a-fA-F][0-9a-fA-F_]*|[bB][01][01_]*)[LlSsDdFfYy]?\\b/\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: /[+-]?\\d[\\d_]*(?:(?:\\.[\\d_]*)?(?:[eE][+-]?[\\d_]+)?)?[LlSsDdFfYy]?\\b/\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false)\\\\b\"\n      }, {\n        token: \"string.regexp\",\n        regex: \"~/\",\n        push: [{\n          token: \"constant.language.escape\",\n          regex: \"\\\\\\\\/\"\n        }, {\n          token: \"string.regexp\",\n          regex: \"$|/\",\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.regexp\"\n        }]\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"&&|\\\\|\\\\||!|&|\\\\||\\\\^|~|\\\\?|:|\\\\?\\\\?|==|!=|<|<=|>|>=|=~|!~|=\\\\^|=\\\\$|!\\\\$|\\\\+|\\\\-|\\\\*|%|\\\\/|=\"\n      }, {\n        token: \"lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }, {\n        token: \"punctuation\",\n        regex: \"[,.]\"\n      }, {\n        token: \"storage.type.annotation\",\n        regex: \"@[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  oop.inherits(JexlHighlightRules, TextHighlightRules);\n  exports.JexlHighlightRules = JexlHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/jexl\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/jexl_highlight_rules\", \"ace/mode/text\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var JexlHighlightRules = require(\"./jexl_highlight_rules\").JexlHighlightRules;\n  var TextMode = require(\"./text\").Mode;\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = JexlHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"//\", \"##\"];\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/jexl\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/jexl\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}