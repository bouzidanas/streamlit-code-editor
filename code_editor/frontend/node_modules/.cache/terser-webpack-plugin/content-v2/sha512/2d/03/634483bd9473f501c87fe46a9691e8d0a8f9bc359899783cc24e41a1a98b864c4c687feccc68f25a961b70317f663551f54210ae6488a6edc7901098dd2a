{"code":"ace.define(\"ace/ext/whitespace\",[\"require\",\"exports\",\"module\",\"ace/lib/lang\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/lang\");t.$detectIndentation=function(e,t){for(var n=[],r=[],i=0,o=0,s=Math.min(e.length,1e3),a=0;a<s;a++){var c=e[a];if(/^\\s*[^*+\\-\\s]/.test(c)){if(\"\\t\"==c[0])i++,o=-Number.MAX_VALUE;else{var g=c.match(/^ */)[0].length;if(g&&\"\\t\"!=c[g]){var l=g-o;!(l>0)||o%l||g%l||(r[l]=(r[l]||0)+1),n[g]=(n[g]||0)+1}o=g}for(;a<s&&\"\\\\\"==c[c.length-1];)c=e[a++]}}function h(e){for(var t=0,r=e;r<n.length;r+=e)t+=n[r]||0;return t}var u=r.reduce((function(e,t){return e+t}),0),f={score:0,length:0},d=0;for(a=1;a<12;a++){var p=h(a);1==a?(d=p,p=n[1]?.9:.8,n.length||(p=0)):p/=d,r[a]&&(p+=r[a]/u),p>f.score&&(f={score:p,length:a})}if(f.score&&f.score>1.4)var v=f.length;return i>d+1?((1==v||d<i/4||f.score<1.8)&&(v=void 0),{ch:\"\\t\",length:v}):d>i+1?{ch:\" \",length:v}:void 0},t.detectIndentation=function(e){var n=e.getLines(0,1e3),r=t.$detectIndentation(n)||{};return r.ch&&e.setUseSoftTabs(\" \"==r.ch),r.length&&e.setTabSize(r.length),r},t.trimTrailingSpace=function(e,t){var n=e.getDocument(),r=n.getAllLines(),i=t&&t.trimEmpty?-1:0,o=[],s=-1;t&&t.keepCursorPosition&&(e.selection.rangeCount?e.selection.rangeList.ranges.forEach((function(e,t,n){var r=n[t+1];r&&r.cursor.row==e.cursor.row||o.push(e.cursor)})):o.push(e.selection.getCursor()),s=0);for(var a=o[s]&&o[s].row,c=0,g=r.length;c<g;c++){var l=r[c],h=l.search(/\\s+$/);c==a&&(h<o[s].column&&h>i&&(h=o[s].column),s++,a=o[s]?o[s].row:-1),h>i&&n.removeInLine(c,h,l.length)}},t.convertIndentation=function(e,t,n){var i=e.getTabString()[0],o=e.getTabSize();n||(n=o),t||(t=i);for(var s=\"\\t\"==t?t:r.stringRepeat(t,n),a=e.doc,c=a.getAllLines(),g={},l={},h=0,u=c.length;h<u;h++){var f=c[h].match(/^\\s*/)[0];if(f){var d=e.$getStringScreenWidth(f)[0],p=Math.floor(d/o),v=d%o,m=g[p]||(g[p]=r.stringRepeat(s,p));(m+=l[v]||(l[v]=r.stringRepeat(\" \",v)))!=f&&(a.removeInLine(h,0,f.length),a.insertInLine({row:h,column:0},m))}}e.setTabSize(n),e.setUseSoftTabs(\" \"==t)},t.$parseStringArg=function(e){var t={};/t/.test(e)?t.ch=\"\\t\":/s/.test(e)&&(t.ch=\" \");var n=e.match(/\\d+/);return n&&(t.length=parseInt(n[0],10)),t},t.$parseArg=function(e){return e?\"string\"==typeof e?t.$parseStringArg(e):\"string\"==typeof e.text?t.$parseStringArg(e.text):e:{}},t.commands=[{name:\"detectIndentation\",description:\"Detect indentation from content\",exec:function(e){t.detectIndentation(e.session)}},{name:\"trimTrailingSpace\",description:\"Trim trailing whitespace\",exec:function(e,n){t.trimTrailingSpace(e.session,n)}},{name:\"convertIndentation\",description:\"Convert indentation to ...\",exec:function(e,n){var r=t.$parseArg(n);t.convertIndentation(e.session,r.ch,r.length)}},{name:\"setIndentation\",description:\"Set indentation\",exec:function(e,n){var r=t.$parseArg(n);r.length&&e.session.setTabSize(r.length),r.ch&&e.session.setUseSoftTabs(\" \"==r.ch)}}]})),ace.require([\"ace/ext/whitespace\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"f15ae1ce58cf3647f84af06d215cb003.js","input":"ace.define(\"ace/ext/whitespace\", [\"require\", \"exports\", \"module\", \"ace/lib/lang\"], function (require, exports, module) {\n  \"use strict\";\n\n  var lang = require(\"../lib/lang\");\n  exports.$detectIndentation = function (lines, fallback) {\n    var stats = [];\n    var changes = [];\n    var tabIndents = 0;\n    var prevSpaces = 0;\n    var max = Math.min(lines.length, 1000);\n    for (var i = 0; i < max; i++) {\n      var line = lines[i];\n      if (!/^\\s*[^*+\\-\\s]/.test(line)) continue;\n      if (line[0] == \"\\t\") {\n        tabIndents++;\n        prevSpaces = -Number.MAX_VALUE;\n      } else {\n        var spaces = line.match(/^ */)[0].length;\n        if (spaces && line[spaces] != \"\\t\") {\n          var diff = spaces - prevSpaces;\n          if (diff > 0 && !(prevSpaces % diff) && !(spaces % diff)) changes[diff] = (changes[diff] || 0) + 1;\n          stats[spaces] = (stats[spaces] || 0) + 1;\n        }\n        prevSpaces = spaces;\n      }\n      while (i < max && line[line.length - 1] == \"\\\\\") line = lines[i++];\n    }\n    function getScore(indent) {\n      var score = 0;\n      for (var i = indent; i < stats.length; i += indent) score += stats[i] || 0;\n      return score;\n    }\n    var changesTotal = changes.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n    var first = {\n      score: 0,\n      length: 0\n    };\n    var spaceIndents = 0;\n    for (var i = 1; i < 12; i++) {\n      var score = getScore(i);\n      if (i == 1) {\n        spaceIndents = score;\n        score = stats[1] ? 0.9 : 0.8;\n        if (!stats.length) score = 0;\n      } else score /= spaceIndents;\n      if (changes[i]) score += changes[i] / changesTotal;\n      if (score > first.score) first = {\n        score: score,\n        length: i\n      };\n    }\n    if (first.score && first.score > 1.4) var tabLength = first.length;\n    if (tabIndents > spaceIndents + 1) {\n      if (tabLength == 1 || spaceIndents < tabIndents / 4 || first.score < 1.8) tabLength = undefined;\n      return {\n        ch: \"\\t\",\n        length: tabLength\n      };\n    }\n    if (spaceIndents > tabIndents + 1) return {\n      ch: \" \",\n      length: tabLength\n    };\n  };\n  exports.detectIndentation = function (session) {\n    var lines = session.getLines(0, 1000);\n    var indent = exports.$detectIndentation(lines) || {};\n    if (indent.ch) session.setUseSoftTabs(indent.ch == \" \");\n    if (indent.length) session.setTabSize(indent.length);\n    return indent;\n  };\n  exports.trimTrailingSpace = function (session, options) {\n    var doc = session.getDocument();\n    var lines = doc.getAllLines();\n    var min = options && options.trimEmpty ? -1 : 0;\n    var cursors = [],\n      ci = -1;\n    if (options && options.keepCursorPosition) {\n      if (session.selection.rangeCount) {\n        session.selection.rangeList.ranges.forEach(function (x, i, ranges) {\n          var next = ranges[i + 1];\n          if (next && next.cursor.row == x.cursor.row) return;\n          cursors.push(x.cursor);\n        });\n      } else {\n        cursors.push(session.selection.getCursor());\n      }\n      ci = 0;\n    }\n    var cursorRow = cursors[ci] && cursors[ci].row;\n    for (var i = 0, l = lines.length; i < l; i++) {\n      var line = lines[i];\n      var index = line.search(/\\s+$/);\n      if (i == cursorRow) {\n        if (index < cursors[ci].column && index > min) index = cursors[ci].column;\n        ci++;\n        cursorRow = cursors[ci] ? cursors[ci].row : -1;\n      }\n      if (index > min) doc.removeInLine(i, index, line.length);\n    }\n  };\n  exports.convertIndentation = function (session, ch, len) {\n    var oldCh = session.getTabString()[0];\n    var oldLen = session.getTabSize();\n    if (!len) len = oldLen;\n    if (!ch) ch = oldCh;\n    var tab = ch == \"\\t\" ? ch : lang.stringRepeat(ch, len);\n    var doc = session.doc;\n    var lines = doc.getAllLines();\n    var cache = {};\n    var spaceCache = {};\n    for (var i = 0, l = lines.length; i < l; i++) {\n      var line = lines[i];\n      var match = line.match(/^\\s*/)[0];\n      if (match) {\n        var w = session.$getStringScreenWidth(match)[0];\n        var tabCount = Math.floor(w / oldLen);\n        var reminder = w % oldLen;\n        var toInsert = cache[tabCount] || (cache[tabCount] = lang.stringRepeat(tab, tabCount));\n        toInsert += spaceCache[reminder] || (spaceCache[reminder] = lang.stringRepeat(\" \", reminder));\n        if (toInsert != match) {\n          doc.removeInLine(i, 0, match.length);\n          doc.insertInLine({\n            row: i,\n            column: 0\n          }, toInsert);\n        }\n      }\n    }\n    session.setTabSize(len);\n    session.setUseSoftTabs(ch == \" \");\n  };\n  exports.$parseStringArg = function (text) {\n    var indent = {};\n    if (/t/.test(text)) indent.ch = \"\\t\";else if (/s/.test(text)) indent.ch = \" \";\n    var m = text.match(/\\d+/);\n    if (m) indent.length = parseInt(m[0], 10);\n    return indent;\n  };\n  exports.$parseArg = function (arg) {\n    if (!arg) return {};\n    if (typeof arg == \"string\") return exports.$parseStringArg(arg);\n    if (typeof arg.text == \"string\") return exports.$parseStringArg(arg.text);\n    return arg;\n  };\n  exports.commands = [{\n    name: \"detectIndentation\",\n    description: \"Detect indentation from content\",\n    exec: function (editor) {\n      exports.detectIndentation(editor.session);\n    }\n  }, {\n    name: \"trimTrailingSpace\",\n    description: \"Trim trailing whitespace\",\n    exec: function (editor, args) {\n      exports.trimTrailingSpace(editor.session, args);\n    }\n  }, {\n    name: \"convertIndentation\",\n    description: \"Convert indentation to ...\",\n    exec: function (editor, arg) {\n      var indent = exports.$parseArg(arg);\n      exports.convertIndentation(editor.session, indent.ch, indent.length);\n    }\n  }, {\n    name: \"setIndentation\",\n    description: \"Set indentation\",\n    exec: function (editor, arg) {\n      var indent = exports.$parseArg(arg);\n      indent.length && editor.session.setTabSize(indent.length);\n      indent.ch && editor.session.setUseSoftTabs(indent.ch == \" \");\n    }\n  }];\n});\n(function () {\n  ace.require([\"ace/ext/whitespace\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}