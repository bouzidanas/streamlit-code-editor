{"code":"ace.define(\"ace/mode/cirru_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,o){\"use strict\";var r=e(\"../lib/oop\"),i=e(\"./text_highlight_rules\").TextHighlightRules,n=function(){this.$rules={start:[{token:\"constant.numeric\",regex:/[\\d\\.]+/},{token:\"comment.line.double-dash\",regex:/--/,next:\"comment\"},{token:\"storage.modifier\",regex:/\\(/},{token:\"storage.modifier\",regex:/,/,next:\"line\"},{token:\"support.function\",regex:/[^\\(\\)\"\\s{}\\[\\]]+/,next:\"line\"},{token:\"string.quoted.double\",regex:/\"/,next:\"string\"},{token:\"storage.modifier\",regex:/\\)/}],comment:[{token:\"comment.line.double-dash\",regex:/ +[^\\n]+/,next:\"start\"}],string:[{token:\"string.quoted.double\",regex:/\"/,next:\"line\"},{token:\"constant.character.escape\",regex:/\\\\/,next:\"escape\"},{token:\"string.quoted.double\",regex:/[^\\\\\"]+/}],escape:[{token:\"constant.character.escape\",regex:/./,next:\"string\"}],line:[{token:\"constant.numeric\",regex:/[\\d\\.]+/},{token:\"markup.raw\",regex:/^\\s*/,next:\"start\"},{token:\"storage.modifier\",regex:/\\$/,next:\"start\"},{token:\"variable.parameter\",regex:/[^\\(\\)\"\\s{}\\[\\]]+/},{token:\"storage.modifier\",regex:/\\(/,next:\"start\"},{token:\"storage.modifier\",regex:/\\)/},{token:\"markup.raw\",regex:/^ */,next:\"start\"},{token:\"string.quoted.double\",regex:/\"/,next:\"string\"}]}};r.inherits(n,i),t.CirruHighlightRules=n})),ace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"],(function(e,t,o){\"use strict\";var r=e(\"../../lib/oop\"),i=e(\"./fold_mode\").FoldMode,n=e(\"../../range\").Range,s=t.FoldMode=function(){};r.inherits(s,i),function(){this.commentBlock=function(e,t){var o=/\\S/,r=e.getLine(t),i=r.search(o);if(-1!=i&&\"#\"==r[i]){for(var s=r.length,a=e.getLength(),g=t,c=t;++t<a;){var d=(r=e.getLine(t)).search(o);if(-1!=d){if(\"#\"!=r[d])break;c=t}}if(c>g){var l=e.getLine(c).length;return new n(g,s,c,l)}}},this.getFoldWidgetRange=function(e,t,o){var r=this.indentationBlock(e,o);return r||((r=this.commentBlock(e,o))||void 0)},this.getFoldWidget=function(e,t,o){var r=e.getLine(o),i=r.search(/\\S/),n=e.getLine(o+1),s=e.getLine(o-1),a=s.search(/\\S/),g=n.search(/\\S/);if(-1==i)return e.foldWidgets[o-1]=-1!=a&&a<g?\"start\":\"\",\"\";if(-1==a){if(i==g&&\"#\"==r[i]&&\"#\"==n[i])return e.foldWidgets[o-1]=\"\",e.foldWidgets[o+1]=\"\",\"start\"}else if(a==i&&\"#\"==r[i]&&\"#\"==s[i]&&-1==e.getLine(o-2).search(/\\S/))return e.foldWidgets[o-1]=\"start\",e.foldWidgets[o+1]=\"\",\"\";return e.foldWidgets[o-1]=-1!=a&&a<i?\"start\":\"\",i<g?\"start\":\"\"}}.call(s.prototype)})),ace.define(\"ace/mode/cirru\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/cirru_highlight_rules\",\"ace/mode/folding/coffee\"],(function(e,t,o){\"use strict\";var r=e(\"../lib/oop\"),i=e(\"./text\").Mode,n=e(\"./cirru_highlight_rules\").CirruHighlightRules,s=e(\"./folding/coffee\").FoldMode,a=function(){this.HighlightRules=n,this.foldingRules=new s,this.$behaviour=this.$defaultBehaviour};r.inherits(a,i),function(){this.lineCommentStart=\"--\",this.$id=\"ace/mode/cirru\"}.call(a.prototype),t.Mode=a})),ace.require([\"ace/mode/cirru\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"2d71403578a87efc7ae5ddab2e621ac3.js","input":"ace.define(\"ace/mode/cirru_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var CirruHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: 'constant.numeric',\n        regex: /[\\d\\.]+/\n      }, {\n        token: 'comment.line.double-dash',\n        regex: /--/,\n        next: 'comment'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\(/\n      }, {\n        token: 'storage.modifier',\n        regex: /,/,\n        next: 'line'\n      }, {\n        token: 'support.function',\n        regex: /[^\\(\\)\"\\s{}\\[\\]]+/,\n        next: 'line'\n      }, {\n        token: 'string.quoted.double',\n        regex: /\"/,\n        next: 'string'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\)/\n      }],\n      comment: [{\n        token: 'comment.line.double-dash',\n        regex: / +[^\\n]+/,\n        next: 'start'\n      }],\n      string: [{\n        token: 'string.quoted.double',\n        regex: /\"/,\n        next: 'line'\n      }, {\n        token: 'constant.character.escape',\n        regex: /\\\\/,\n        next: 'escape'\n      }, {\n        token: 'string.quoted.double',\n        regex: /[^\\\\\"]+/\n      }],\n      escape: [{\n        token: 'constant.character.escape',\n        regex: /./,\n        next: 'string'\n      }],\n      line: [{\n        token: 'constant.numeric',\n        regex: /[\\d\\.]+/\n      }, {\n        token: 'markup.raw',\n        regex: /^\\s*/,\n        next: 'start'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\$/,\n        next: 'start'\n      }, {\n        token: 'variable.parameter',\n        regex: /[^\\(\\)\"\\s{}\\[\\]]+/\n      }, {\n        token: 'storage.modifier',\n        regex: /\\(/,\n        next: 'start'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\)/\n      }, {\n        token: 'markup.raw',\n        regex: /^ */,\n        next: 'start'\n      }, {\n        token: 'string.quoted.double',\n        regex: /\"/,\n        next: 'string'\n      }]\n    };\n  };\n  oop.inherits(CirruHighlightRules, TextHighlightRules);\n  exports.CirruHighlightRules = CirruHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var Range = require(\"../../range\").Range;\n  var FoldMode = exports.FoldMode = function () {};\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.commentBlock = function (session, row) {\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      range = this.commentBlock(session, row);\n      if (range) return range;\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/cirru\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/cirru_highlight_rules\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var CirruHighlightRules = require(\"./cirru_highlight_rules\").CirruHighlightRules;\n  var CoffeeFoldMode = require(\"./folding/coffee\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = CirruHighlightRules;\n    this.foldingRules = new CoffeeFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.$id = \"ace/mode/cirru\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/cirru\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}