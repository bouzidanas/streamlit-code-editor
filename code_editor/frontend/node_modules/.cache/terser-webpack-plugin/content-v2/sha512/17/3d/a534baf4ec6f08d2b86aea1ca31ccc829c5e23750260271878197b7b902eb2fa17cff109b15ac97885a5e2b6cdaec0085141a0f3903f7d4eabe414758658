{"code":"ace.define(\"ace/mode/zeek_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,o){\"use strict\";var r=e(\"../lib/oop\"),n=e(\"./text_highlight_rules\").TextHighlightRules,a=function(){this.$rules={start:[{token:\"comment.line\",regex:\"#.*$\"},{token:\"string.double\",regex:/\"/,next:\"string-state\"},{token:\"string.regexp\",regex:\"(/)(?=.*/)\",next:\"pattern-state\"},{token:[\"keyword.other\",\"meta.preprocessor\"],regex:/(@(?:load-plugin|load-sigs|load|unload))(.*$)/},{token:\"keyword.other\",regex:/@(?:DEBUG|DIR|FILENAME|deprecated|if|ifdef|ifndef|else|endif)/},{token:[\"keyword.other\",\"meta.preprocessor\",\"keyword.operator\",\"meta.preprocessor\"],regex:/(@prefixes)(\\s*)(\\+?=)(.*$)/},{token:\"storage.modifier.attribute\",regex:/\\&\\b(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|error_handler|type_column|deprecated)\\b/},{token:\"constant.language\",regex:/\\b(?:T|F)\\b/},{token:\"constant.numeric.port\",regex:/\\b\\d{1,5}\\/(?:udp|tcp|icmp|unknown)\\b/},{token:\"constant.numeric.addr\",regex:/\\b(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\b/,comment:\"IPv4 address\"},{token:\"constant.numeric.addr\",regex:/\\[(?:[0-9a-fA-F]{0,4}:){2,7}(?:[0-9a-fA-F]{0,4})?(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2}))?\\]/,comment:\"IPv6 address\"},{token:\"constant.numeric.float.decimal.interval\",regex:/(?:(?:\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d*[eE][+-]?\\d+|\\d*\\.\\d*)|\\d+)\\s*(?:day|hr|min|msec|usec|sec)s?/},{token:\"constant.numeric.float.decimal\",regex:/\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d*[eE][+-]?\\d+|\\d*\\.\\d*/},{token:\"constant.numeric.hostname\",regex:/\\b[A-Za-z0-9][A-Za-z0-9\\-]*(?:\\.[A-Za-z0-9][A-Za-z0-9\\-]*)+\\b/},{token:\"constant.numeric.integer.hexadecimal\",regex:/\\b0x[0-9a-fA-F]+\\b/},{token:\"constant.numeric.integer.decimal\",regex:/\\b\\d+\\b/},{token:\"keyword.operator\",regex:/==|!=|<=|<|>=|>/},{token:\"keyword.operator\",regex:/(&&)|(\\|\\|)|(!)/},{token:\"keyword.operator\",regex:/=|\\+=|-=/},{token:\"keyword.operator\",regex:/\\+\\+|\\+|--|-|\\*|\\/|%/},{token:\"keyword.operator\",regex:/&|\\||\\^|~/},{token:\"keyword.operator\",regex:/\\b(?:in|as|is)\\b/},{token:\"punctuation.terminator\",regex:/;/},{token:\"punctuation.accessor\",regex:/\\??\\$/},{token:\"punctuation.accessor\",regex:/::/},{token:\"keyword.operator\",regex:/\\?/},{token:\"punctuation.separator\",regex:/:/},{token:\"punctuation.separator\",regex:/,/},{token:[\"keyword.other\",\"meta.namespace\",\"entity.name.namespace\"],regex:/(module)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)/},{token:\"keyword.other\",regex:/\\bexport\\b/},{token:\"keyword.control.conditional\",regex:/\\b(?:if|else)\\b/},{token:\"keyword.control\",regex:/\\b(?:for|while)\\b/},{token:\"keyword.control\",regex:/\\b(?:return|break|next|continue|fallthrough)\\b/},{token:\"keyword.control\",regex:/\\b(?:switch|default|case)\\b/},{token:\"keyword.other\",regex:/\\b(?:add|delete)\\b/},{token:\"keyword.other\",regex:/\\bprint\\b/},{token:\"keyword.control\",regex:/\\b(?:when|timeout|schedule)\\b/},{token:[\"keyword.other\",\"meta.struct.record\",\"entity.name.struct.record\",\"meta.struct.record\",\"punctuation.separator\",\"meta.struct.record\",\"storage.type.struct.record\"],regex:/\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)(\\s*\\b)(record)\\b/},{token:[\"keyword.other\",\"meta.enum\",\"entity.name.enum\",\"meta.enum\",\"punctuation.separator\",\"meta.enum\",\"storage.type.enum\"],regex:/\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)(\\s*\\b)(enum)\\b/},{token:[\"keyword.other\",\"meta.type\",\"entity.name.type\",\"meta.type\",\"punctuation.separator\"],regex:/\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)/},{token:[\"keyword.other\",\"meta.struct.record\",\"storage.type.struct.record\",\"meta.struct.record\",\"entity.name.struct.record\"],regex:/\\b(redef)(\\s+)(record)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/},{token:[\"keyword.other\",\"meta.enum\",\"storage.type.enum\",\"meta.enum\",\"entity.name.enum\"],regex:/\\b(redef)(\\s+)(enum)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/},{token:[\"storage.type\",\"text\",\"entity.name.function.event\"],regex:/\\b(event)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/},{token:[\"storage.type\",\"text\",\"entity.name.function.hook\"],regex:/\\b(hook)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/},{token:[\"storage.type\",\"text\",\"entity.name.function\"],regex:/\\b(function)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/},{token:\"keyword.other\",regex:/\\bredef\\b/},{token:\"storage.type\",regex:/\\bany\\b/},{token:\"storage.type\",regex:/\\b(?:enum|record|set|table|vector)\\b/},{token:[\"storage.type\",\"text\",\"keyword.operator\",\"text\",\"storage.type\"],regex:/\\b(opaque)(\\s+)(of)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/},{token:\"keyword.operator\",regex:/\\bof\\b/},{token:\"storage.type\",regex:/\\b(?:addr|bool|count|double|file|int|interval|pattern|port|string|subnet|time)\\b/},{token:\"storage.type\",regex:/\\b(?:function|hook|event)\\b/},{token:\"storage.modifier\",regex:/\\b(?:global|local|const|option)\\b/},{token:\"entity.name.function.call\",regex:/\\b[A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*(?=s*\\()/},{token:\"punctuation.section.block.begin\",regex:/\\{/},{token:\"punctuation.section.block.end\",regex:/\\}/},{token:\"punctuation.section.brackets.begin\",regex:/\\[/},{token:\"punctuation.section.brackets.end\",regex:/\\]/},{token:\"punctuation.section.parens.begin\",regex:/\\(/},{token:\"punctuation.section.parens.end\",regex:/\\)/}],\"string-state\":[{token:\"constant.character.escape\",regex:/\\\\./},{token:\"string.double\",regex:/\"/,next:\"start\"},{token:\"constant.other.placeholder\",regex:/%-?[0-9]*(\\.[0-9]+)?[DTdxsefg]/},{token:\"string.double\",regex:\".\"}],\"pattern-state\":[{token:\"constant.character.escape\",regex:/\\\\./},{token:\"string.regexp\",regex:\"/\",next:\"start\"},{token:\"string.regexp\",regex:\".\"}]},this.normalizeRules()};a.metaData={fileTypes:[\"bro\",\"zeek\"],name:\"Zeek\",scopeName:\"source.zeek\"},r.inherits(a,n),t.ZeekHighlightRules=a})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,o){\"use strict\";var r=e(\"../../lib/oop\"),n=e(\"../../range\").Range,a=e(\"./fold_mode\").FoldMode,i=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};r.inherits(i,a),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,o){var r=e.getLine(o);if(this.singleLineBlockCommentRe.test(r)&&!this.startRegionRe.test(r)&&!this.tripleStarBlockCommentRe.test(r))return\"\";var n=this._getFoldWidgetBase(e,t,o);return!n&&this.startRegionRe.test(r)?\"start\":n},this.getFoldWidgetRange=function(e,t,o,r){var n,a=e.getLine(o);if(this.startRegionRe.test(a))return this.getCommentRegionBlock(e,a,o);if(n=a.match(this.foldingStartMarker)){var i=n.index;if(n[1])return this.openingBracketBlock(e,n[1],o,i);var s=e.getCommentFoldRange(o,i+n[0].length,1);return s&&!s.isMultiLine()&&(r?s=this.getSectionRange(e,o):\"all\"!=t&&(s=null)),s}if(\"markbegin\"!==t&&(n=a.match(this.foldingStopMarker))){i=n.index+n[0].length;return n[1]?this.closingBracketBlock(e,n[1],o,i):e.getCommentFoldRange(o,i,-1)}},this.getSectionRange=function(e,t){for(var o=e.getLine(t),r=o.search(/\\S/),a=t,i=o.length,s=t+=1,g=e.getLength();++t<g;){var c=(o=e.getLine(t)).search(/\\S/);if(-1!==c){if(r>c)break;var d=this.getFoldWidgetRange(e,\"all\",t);if(d){if(d.start.row<=a)break;if(d.isMultiLine())t=d.end.row;else if(r==c)break}s=t}}return new n(a,i,s,e.getLine(s).length)},this.getCommentRegionBlock=function(e,t,o){for(var r=t.search(/\\s*$/),a=e.getLength(),i=o,s=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,g=1;++o<a;){t=e.getLine(o);var c=s.exec(t);if(c&&(c[1]?g--:g++,!g))break}if(o>i)return new n(i,r,o,t.length)}}.call(i.prototype)})),ace.define(\"ace/mode/zeek\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/zeek_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,o){\"use strict\";var r=e(\"../lib/oop\"),n=e(\"./text\").Mode,a=e(\"./zeek_highlight_rules\").ZeekHighlightRules,i=e(\"./folding/cstyle\").FoldMode,s=function(){this.HighlightRules=a,this.foldingRules=new i};r.inherits(s,n),function(){this.lineCommentStart=\"#\",this.$id=\"ace/mode/zeek\"}.call(s.prototype),t.Mode=s})),ace.require([\"ace/mode/zeek\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"6e34bfc52860482a2a0ea897664137fb.js","input":"ace.define(\"ace/mode/zeek_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var ZeekHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.line\",\n        regex: \"#.*$\"\n      }, {\n        token: \"string.double\",\n        regex: /\"/,\n        next: \"string-state\"\n      }, {\n        token: \"string.regexp\",\n        regex: \"(/)(?=.*/)\",\n        next: \"pattern-state\"\n      }, {\n        token: [\"keyword.other\", \"meta.preprocessor\"],\n        regex: /(@(?:load-plugin|load-sigs|load|unload))(.*$)/\n      }, {\n        token: \"keyword.other\",\n        regex: /@(?:DEBUG|DIR|FILENAME|deprecated|if|ifdef|ifndef|else|endif)/\n      }, {\n        token: [\"keyword.other\", \"meta.preprocessor\", \"keyword.operator\", \"meta.preprocessor\"],\n        regex: /(@prefixes)(\\s*)(\\+?=)(.*$)/\n      }, {\n        token: \"storage.modifier.attribute\",\n        regex: /\\&\\b(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|error_handler|type_column|deprecated)\\b/\n      }, {\n        token: \"constant.language\",\n        regex: /\\b(?:T|F)\\b/\n      }, {\n        token: \"constant.numeric.port\",\n        regex: /\\b\\d{1,5}\\/(?:udp|tcp|icmp|unknown)\\b/\n      }, {\n        token: \"constant.numeric.addr\",\n        regex: /\\b(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\b/,\n        comment: \"IPv4 address\"\n      }, {\n        token: \"constant.numeric.addr\",\n        regex: /\\[(?:[0-9a-fA-F]{0,4}:){2,7}(?:[0-9a-fA-F]{0,4})?(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2}))?\\]/,\n        comment: \"IPv6 address\"\n      }, {\n        token: \"constant.numeric.float.decimal.interval\",\n        regex: /(?:(?:\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d*[eE][+-]?\\d+|\\d*\\.\\d*)|\\d+)\\s*(?:day|hr|min|msec|usec|sec)s?/\n      }, {\n        token: \"constant.numeric.float.decimal\",\n        regex: /\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d*[eE][+-]?\\d+|\\d*\\.\\d*/\n      }, {\n        token: \"constant.numeric.hostname\",\n        regex: /\\b[A-Za-z0-9][A-Za-z0-9\\-]*(?:\\.[A-Za-z0-9][A-Za-z0-9\\-]*)+\\b/\n      }, {\n        token: \"constant.numeric.integer.hexadecimal\",\n        regex: /\\b0x[0-9a-fA-F]+\\b/\n      }, {\n        token: \"constant.numeric.integer.decimal\",\n        regex: /\\b\\d+\\b/\n      }, {\n        token: \"keyword.operator\",\n        regex: /==|!=|<=|<|>=|>/\n      }, {\n        token: \"keyword.operator\",\n        regex: /(&&)|(\\|\\|)|(!)/\n      }, {\n        token: \"keyword.operator\",\n        regex: /=|\\+=|-=/\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\+\\+|\\+|--|-|\\*|\\/|%/\n      }, {\n        token: \"keyword.operator\",\n        regex: /&|\\||\\^|~/\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\b(?:in|as|is)\\b/\n      }, {\n        token: \"punctuation.terminator\",\n        regex: /;/\n      }, {\n        token: \"punctuation.accessor\",\n        regex: /\\??\\$/\n      }, {\n        token: \"punctuation.accessor\",\n        regex: /::/\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\?/\n      }, {\n        token: \"punctuation.separator\",\n        regex: /:/\n      }, {\n        token: \"punctuation.separator\",\n        regex: /,/\n      }, {\n        token: [\"keyword.other\", \"meta.namespace\", \"entity.name.namespace\"],\n        regex: /(module)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)/\n      }, {\n        token: \"keyword.other\",\n        regex: /\\bexport\\b/\n      }, {\n        token: \"keyword.control.conditional\",\n        regex: /\\b(?:if|else)\\b/\n      }, {\n        token: \"keyword.control\",\n        regex: /\\b(?:for|while)\\b/\n      }, {\n        token: \"keyword.control\",\n        regex: /\\b(?:return|break|next|continue|fallthrough)\\b/\n      }, {\n        token: \"keyword.control\",\n        regex: /\\b(?:switch|default|case)\\b/\n      }, {\n        token: \"keyword.other\",\n        regex: /\\b(?:add|delete)\\b/\n      }, {\n        token: \"keyword.other\",\n        regex: /\\bprint\\b/\n      }, {\n        token: \"keyword.control\",\n        regex: /\\b(?:when|timeout|schedule)\\b/\n      }, {\n        token: [\"keyword.other\", \"meta.struct.record\", \"entity.name.struct.record\", \"meta.struct.record\", \"punctuation.separator\", \"meta.struct.record\", \"storage.type.struct.record\"],\n        regex: /\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)(\\s*\\b)(record)\\b/\n      }, {\n        token: [\"keyword.other\", \"meta.enum\", \"entity.name.enum\", \"meta.enum\", \"punctuation.separator\", \"meta.enum\", \"storage.type.enum\"],\n        regex: /\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)(\\s*\\b)(enum)\\b/\n      }, {\n        token: [\"keyword.other\", \"meta.type\", \"entity.name.type\", \"meta.type\", \"punctuation.separator\"],\n        regex: /\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)/\n      }, {\n        token: [\"keyword.other\", \"meta.struct.record\", \"storage.type.struct.record\", \"meta.struct.record\", \"entity.name.struct.record\"],\n        regex: /\\b(redef)(\\s+)(record)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/\n      }, {\n        token: [\"keyword.other\", \"meta.enum\", \"storage.type.enum\", \"meta.enum\", \"entity.name.enum\"],\n        regex: /\\b(redef)(\\s+)(enum)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/\n      }, {\n        token: [\"storage.type\", \"text\", \"entity.name.function.event\"],\n        regex: /\\b(event)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/\n      }, {\n        token: [\"storage.type\", \"text\", \"entity.name.function.hook\"],\n        regex: /\\b(hook)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/\n      }, {\n        token: [\"storage.type\", \"text\", \"entity.name.function\"],\n        regex: /\\b(function)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/\n      }, {\n        token: \"keyword.other\",\n        regex: /\\bredef\\b/\n      }, {\n        token: \"storage.type\",\n        regex: /\\bany\\b/\n      }, {\n        token: \"storage.type\",\n        regex: /\\b(?:enum|record|set|table|vector)\\b/\n      }, {\n        token: [\"storage.type\", \"text\", \"keyword.operator\", \"text\", \"storage.type\"],\n        regex: /\\b(opaque)(\\s+)(of)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\bof\\b/\n      }, {\n        token: \"storage.type\",\n        regex: /\\b(?:addr|bool|count|double|file|int|interval|pattern|port|string|subnet|time)\\b/\n      }, {\n        token: \"storage.type\",\n        regex: /\\b(?:function|hook|event)\\b/\n      }, {\n        token: \"storage.modifier\",\n        regex: /\\b(?:global|local|const|option)\\b/\n      }, {\n        token: \"entity.name.function.call\",\n        regex: /\\b[A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*(?=s*\\()/\n      }, {\n        token: \"punctuation.section.block.begin\",\n        regex: /\\{/\n      }, {\n        token: \"punctuation.section.block.end\",\n        regex: /\\}/\n      }, {\n        token: \"punctuation.section.brackets.begin\",\n        regex: /\\[/\n      }, {\n        token: \"punctuation.section.brackets.end\",\n        regex: /\\]/\n      }, {\n        token: \"punctuation.section.parens.begin\",\n        regex: /\\(/\n      }, {\n        token: \"punctuation.section.parens.end\",\n        regex: /\\)/\n      }],\n      // state: start\n      \"string-state\": [{\n        token: \"constant.character.escape\",\n        regex: /\\\\./\n      }, {\n        token: \"string.double\",\n        regex: /\"/,\n        next: \"start\"\n      }, {\n        token: \"constant.other.placeholder\",\n        regex: /%-?[0-9]*(\\.[0-9]+)?[DTdxsefg]/\n      }, {\n        token: \"string.double\",\n        regex: \".\"\n      }],\n      // state: string-state\n      \"pattern-state\": [{\n        token: \"constant.character.escape\",\n        regex: /\\\\./\n      }, {\n        token: \"string.regexp\",\n        regex: \"/\",\n        next: \"start\"\n      }, {\n        token: \"string.regexp\",\n        regex: \".\"\n      }] // state: pattern-state\n    };\n    this.normalizeRules();\n  };\n  ZeekHighlightRules.metaData = {\n    fileTypes: [\"bro\", \"zeek\"],\n    name: \"Zeek\",\n    scopeName: \"source.zeek\"\n  };\n  oop.inherits(ZeekHighlightRules, TextHighlightRules);\n  exports.ZeekHighlightRules = ZeekHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/zeek\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/zeek_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var ZeekHighlightRules = require(\"./zeek_highlight_rules\").ZeekHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = ZeekHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/zeek\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/zeek\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}