{"code":"ace.define(\"ace/ext/hardwrap\",[\"require\",\"exports\",\"module\",\"ace/range\",\"ace/editor\",\"ace/config\"],(function(e,t,n){\"use strict\";var r=e(\"../range\").Range;function a(e,t){for(var n=t.column||e.getOption(\"printMarginColumn\"),a=0!=t.allowMerge,o=Math.min(t.startRow,t.endRow),s=Math.max(t.startRow,t.endRow),i=e.session;o<=s;){var l=i.getLine(o);if(l.length>n){if(g=m(l,n,5)){var c=/^\\s*/.exec(l)[0];i.replace(new r(o,g.start,o,g.end),\"\\n\"+c)}s++}else if(a&&/\\S/.test(l)&&o!=s){var d=i.getLine(o+1);if(d&&/\\S/.test(d)){var g,f=l.replace(/\\s+$/,\"\"),h=d.replace(/^\\s+/,\"\"),u=f+\" \"+h;if((g=m(u,n,5))&&g.start>f.length||u.length<n){var p=new r(o,f.length,o+1,d.length-h.length);i.replace(p,\" \"),o--,s--}else f.length<l.length&&i.remove(new r(o,f.length,o,l.length))}}o++}function m(e,t,n){if(!(e.length<t)){var r=e.slice(0,t),a=e.slice(t),o=/^(?:(\\s+)|(\\S+)(\\s+))/.exec(a),s=/(?:(\\s+)|(\\s+)(\\S+))$/.exec(r),i=0,l=0;return s&&!s[2]&&(i=t-s[1].length,l=t),o&&!o[2]&&(i||(i=t),l=t+o[1].length),i?{start:i,end:l}:s&&s[2]&&s.index>n?{start:s.index,end:s.index+s[2].length}:o&&o[2]?{start:i=t+o[2].length,end:i+o[3].length}:void 0}}}function o(e){if(\"insertstring\"==e.command.name&&/\\S/.test(e.args)){var t=e.editor,n=t.selection.cursor;if(n.column<=t.renderer.$printMarginColumn)return;var r=t.session.$undoManager.$lastDelta;a(t,{startRow:n.row,endRow:n.row,allowMerge:!1}),r!=t.session.$undoManager.$lastDelta&&t.session.markUndoGroup()}}var s=e(\"../editor\").Editor;e(\"../config\").defineOptions(s.prototype,\"editor\",{hardWrap:{set:function(e){e?this.commands.on(\"afterExec\",o):this.commands.off(\"afterExec\",o)},value:!1}}),t.hardWrap=a})),ace.require([\"ace/ext/hardwrap\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"70e10934385fd59b8aec9a8b0f4b10fb.js","input":"ace.define(\"ace/ext/hardwrap\", [\"require\", \"exports\", \"module\", \"ace/range\", \"ace/editor\", \"ace/config\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  function hardWrap(editor, options) {\n    var max = options.column || editor.getOption(\"printMarginColumn\");\n    var allowMerge = options.allowMerge != false;\n    var row = Math.min(options.startRow, options.endRow);\n    var endRow = Math.max(options.startRow, options.endRow);\n    var session = editor.session;\n    while (row <= endRow) {\n      var line = session.getLine(row);\n      if (line.length > max) {\n        var space = findSpace(line, max, 5);\n        if (space) {\n          var indentation = /^\\s*/.exec(line)[0];\n          session.replace(new Range(row, space.start, row, space.end), \"\\n\" + indentation);\n        }\n        endRow++;\n      } else if (allowMerge && /\\S/.test(line) && row != endRow) {\n        var nextLine = session.getLine(row + 1);\n        if (nextLine && /\\S/.test(nextLine)) {\n          var trimmedLine = line.replace(/\\s+$/, \"\");\n          var trimmedNextLine = nextLine.replace(/^\\s+/, \"\");\n          var mergedLine = trimmedLine + \" \" + trimmedNextLine;\n          var space = findSpace(mergedLine, max, 5);\n          if (space && space.start > trimmedLine.length || mergedLine.length < max) {\n            var replaceRange = new Range(row, trimmedLine.length, row + 1, nextLine.length - trimmedNextLine.length);\n            session.replace(replaceRange, \" \");\n            row--;\n            endRow--;\n          } else if (trimmedLine.length < line.length) {\n            session.remove(new Range(row, trimmedLine.length, row, line.length));\n          }\n        }\n      }\n      row++;\n    }\n    function findSpace(line, max, min) {\n      if (line.length < max) return;\n      var before = line.slice(0, max);\n      var after = line.slice(max);\n      var spaceAfter = /^(?:(\\s+)|(\\S+)(\\s+))/.exec(after);\n      var spaceBefore = /(?:(\\s+)|(\\s+)(\\S+))$/.exec(before);\n      var start = 0;\n      var end = 0;\n      if (spaceBefore && !spaceBefore[2]) {\n        start = max - spaceBefore[1].length;\n        end = max;\n      }\n      if (spaceAfter && !spaceAfter[2]) {\n        if (!start) start = max;\n        end = max + spaceAfter[1].length;\n      }\n      if (start) {\n        return {\n          start: start,\n          end: end\n        };\n      }\n      if (spaceBefore && spaceBefore[2] && spaceBefore.index > min) {\n        return {\n          start: spaceBefore.index,\n          end: spaceBefore.index + spaceBefore[2].length\n        };\n      }\n      if (spaceAfter && spaceAfter[2]) {\n        start = max + spaceAfter[2].length;\n        return {\n          start: start,\n          end: start + spaceAfter[3].length\n        };\n      }\n    }\n  }\n  function wrapAfterInput(e) {\n    if (e.command.name == \"insertstring\" && /\\S/.test(e.args)) {\n      var editor = e.editor;\n      var cursor = editor.selection.cursor;\n      if (cursor.column <= editor.renderer.$printMarginColumn) return;\n      var lastDelta = editor.session.$undoManager.$lastDelta;\n      hardWrap(editor, {\n        startRow: cursor.row,\n        endRow: cursor.row,\n        allowMerge: false\n      });\n      if (lastDelta != editor.session.$undoManager.$lastDelta) editor.session.markUndoGroup();\n    }\n  }\n  var Editor = require(\"../editor\").Editor;\n  require(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    hardWrap: {\n      set: function (val) {\n        if (val) {\n          this.commands.on(\"afterExec\", wrapAfterInput);\n        } else {\n          this.commands.off(\"afterExec\", wrapAfterInput);\n        }\n      },\n      value: false\n    }\n  });\n  exports.hardWrap = hardWrap;\n});\n(function () {\n  ace.require([\"ace/ext/hardwrap\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}