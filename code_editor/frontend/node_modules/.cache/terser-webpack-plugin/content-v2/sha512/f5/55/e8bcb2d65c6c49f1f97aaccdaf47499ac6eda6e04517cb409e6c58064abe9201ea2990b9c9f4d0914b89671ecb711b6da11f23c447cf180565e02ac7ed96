{"code":"ace.define(\"ace/mode/turtle_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,r){\"use strict\";var i=e(\"../lib/oop\"),o=e(\"./text_highlight_rules\").TextHighlightRules,n=function(){this.$rules={start:[{include:\"#comments\"},{include:\"#strings\"},{include:\"#base-prefix-declarations\"},{include:\"#string-language-suffixes\"},{include:\"#string-datatype-suffixes\"},{include:\"#relative-urls\"},{include:\"#xml-schema-types\"},{include:\"#rdf-schema-types\"},{include:\"#owl-types\"},{include:\"#qnames\"},{include:\"#punctuation-operators\"}],\"#base-prefix-declarations\":[{token:\"keyword.other.prefix.turtle\",regex:/@(?:base|prefix)/}],\"#comments\":[{token:[\"punctuation.definition.comment.turtle\",\"comment.line.hash.turtle\"],regex:/(#)(.*$)/}],\"#owl-types\":[{token:\"support.type.datatype.owl.turtle\",regex:/owl:[a-zA-Z]+/}],\"#punctuation-operators\":[{token:\"keyword.operator.punctuation.turtle\",regex:/;|,|\\.|\\(|\\)|\\[|\\]/}],\"#qnames\":[{token:\"entity.name.other.qname.turtle\",regex:/(?:[a-zA-Z][-_a-zA-Z0-9]*)?:(?:[_a-zA-Z][-_a-zA-Z0-9]*)?/}],\"#rdf-schema-types\":[{token:\"support.type.datatype.rdf.schema.turtle\",regex:/rdfs?:[a-zA-Z]+|(?:^|\\s)a(?:\\s|$)/}],\"#relative-urls\":[{token:\"string.quoted.other.relative.url.turtle\",regex:/</,push:[{token:\"string.quoted.other.relative.url.turtle\",regex:/>/,next:\"pop\"},{defaultToken:\"string.quoted.other.relative.url.turtle\"}]}],\"#string-datatype-suffixes\":[{token:\"keyword.operator.datatype.suffix.turtle\",regex:/\\^\\^/}],\"#string-language-suffixes\":[{token:[\"keyword.operator.language.suffix.turtle\",\"constant.language.suffix.turtle\"],regex:/(?!\")(@)([a-z]+(?:\\-[a-z0-9]+)*)/}],\"#strings\":[{token:\"string.quoted.triple.turtle\",regex:/\"\"\"/,push:[{token:\"string.quoted.triple.turtle\",regex:/\"\"\"/,next:\"pop\"},{defaultToken:\"string.quoted.triple.turtle\"}]},{token:\"string.quoted.double.turtle\",regex:/\"/,push:[{token:\"string.quoted.double.turtle\",regex:/\"/,next:\"pop\"},{token:\"invalid.string.newline\",regex:/$/},{token:\"constant.character.escape.turtle\",regex:/\\\\./},{defaultToken:\"string.quoted.double.turtle\"}]}],\"#xml-schema-types\":[{token:\"support.type.datatype.xml.schema.turtle\",regex:/xsd?:[a-z][a-zA-Z]+/}]},this.normalizeRules()};n.metaData={fileTypes:[\"ttl\",\"nt\"],name:\"Turtle\",scopeName:\"source.turtle\"},i.inherits(n,o),t.TurtleHighlightRules=n})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,r){\"use strict\";var i=e(\"../../lib/oop\"),o=e(\"../../range\").Range,n=e(\"./fold_mode\").FoldMode,l=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};i.inherits(l,n),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,r){var i=e.getLine(r);if(this.singleLineBlockCommentRe.test(i)&&!this.startRegionRe.test(i)&&!this.tripleStarBlockCommentRe.test(i))return\"\";var o=this._getFoldWidgetBase(e,t,r);return!o&&this.startRegionRe.test(i)?\"start\":o},this.getFoldWidgetRange=function(e,t,r,i){var o,n=e.getLine(r);if(this.startRegionRe.test(n))return this.getCommentRegionBlock(e,n,r);if(o=n.match(this.foldingStartMarker)){var l=o.index;if(o[1])return this.openingBracketBlock(e,o[1],r,l);var s=e.getCommentFoldRange(r,l+o[0].length,1);return s&&!s.isMultiLine()&&(i?s=this.getSectionRange(e,r):\"all\"!=t&&(s=null)),s}if(\"markbegin\"!==t&&(o=n.match(this.foldingStopMarker))){l=o.index+o[0].length;return o[1]?this.closingBracketBlock(e,o[1],r,l):e.getCommentFoldRange(r,l,-1)}},this.getSectionRange=function(e,t){for(var r=e.getLine(t),i=r.search(/\\S/),n=t,l=r.length,s=t+=1,a=e.getLength();++t<a;){var u=(r=e.getLine(t)).search(/\\S/);if(-1!==u){if(i>u)break;var g=this.getFoldWidgetRange(e,\"all\",t);if(g){if(g.start.row<=n)break;if(g.isMultiLine())t=g.end.row;else if(i==u)break}s=t}}return new o(n,l,s,e.getLine(s).length)},this.getCommentRegionBlock=function(e,t,r){for(var i=t.search(/\\s*$/),n=e.getLength(),l=r,s=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,a=1;++r<n;){t=e.getLine(r);var u=s.exec(t);if(u&&(u[1]?a--:a++,!a))break}if(r>l)return new o(l,i,r,t.length)}}.call(l.prototype)})),ace.define(\"ace/mode/turtle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/turtle_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,r){\"use strict\";var i=e(\"../lib/oop\"),o=e(\"./text\").Mode,n=e(\"./turtle_highlight_rules\").TurtleHighlightRules,l=e(\"./folding/cstyle\").FoldMode,s=function(){this.HighlightRules=n,this.foldingRules=new l};i.inherits(s,o),function(){this.$id=\"ace/mode/turtle\"}.call(s.prototype),t.Mode=s})),ace.require([\"ace/mode/turtle\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"e74214b21a2185fa8a6810d7dba832b1.js","input":"ace.define(\"ace/mode/turtle_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from turtle.tmLanguage (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var TurtleHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: \"#comments\"\n      }, {\n        include: \"#strings\"\n      }, {\n        include: \"#base-prefix-declarations\"\n      }, {\n        include: \"#string-language-suffixes\"\n      }, {\n        include: \"#string-datatype-suffixes\"\n      }, {\n        include: \"#relative-urls\"\n      }, {\n        include: \"#xml-schema-types\"\n      }, {\n        include: \"#rdf-schema-types\"\n      }, {\n        include: \"#owl-types\"\n      }, {\n        include: \"#qnames\"\n      }, {\n        include: \"#punctuation-operators\"\n      }],\n      \"#base-prefix-declarations\": [{\n        token: \"keyword.other.prefix.turtle\",\n        regex: /@(?:base|prefix)/\n      }],\n      \"#comments\": [{\n        token: [\"punctuation.definition.comment.turtle\", \"comment.line.hash.turtle\"],\n        regex: /(#)(.*$)/\n      }],\n      \"#owl-types\": [{\n        token: \"support.type.datatype.owl.turtle\",\n        regex: /owl:[a-zA-Z]+/\n      }],\n      \"#punctuation-operators\": [{\n        token: \"keyword.operator.punctuation.turtle\",\n        regex: /;|,|\\.|\\(|\\)|\\[|\\]/\n      }],\n      \"#qnames\": [{\n        token: \"entity.name.other.qname.turtle\",\n        regex: /(?:[a-zA-Z][-_a-zA-Z0-9]*)?:(?:[_a-zA-Z][-_a-zA-Z0-9]*)?/\n      }],\n      \"#rdf-schema-types\": [{\n        token: \"support.type.datatype.rdf.schema.turtle\",\n        regex: /rdfs?:[a-zA-Z]+|(?:^|\\s)a(?:\\s|$)/\n      }],\n      \"#relative-urls\": [{\n        token: \"string.quoted.other.relative.url.turtle\",\n        regex: /</,\n        push: [{\n          token: \"string.quoted.other.relative.url.turtle\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quoted.other.relative.url.turtle\"\n        }]\n      }],\n      \"#string-datatype-suffixes\": [{\n        token: \"keyword.operator.datatype.suffix.turtle\",\n        regex: /\\^\\^/\n      }],\n      \"#string-language-suffixes\": [{\n        token: [\"keyword.operator.language.suffix.turtle\", \"constant.language.suffix.turtle\"],\n        regex: /(?!\")(@)([a-z]+(?:\\-[a-z0-9]+)*)/\n      }],\n      \"#strings\": [{\n        token: \"string.quoted.triple.turtle\",\n        regex: /\"\"\"/,\n        push: [{\n          token: \"string.quoted.triple.turtle\",\n          regex: /\"\"\"/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quoted.triple.turtle\"\n        }]\n      }, {\n        token: \"string.quoted.double.turtle\",\n        regex: /\"/,\n        push: [{\n          token: \"string.quoted.double.turtle\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"invalid.string.newline\",\n          regex: /$/\n        }, {\n          token: \"constant.character.escape.turtle\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.double.turtle\"\n        }]\n      }],\n      \"#xml-schema-types\": [{\n        token: \"support.type.datatype.xml.schema.turtle\",\n        regex: /xsd?:[a-z][a-zA-Z]+/\n      }]\n    };\n    this.normalizeRules();\n  };\n  TurtleHighlightRules.metaData = {\n    fileTypes: [\"ttl\", \"nt\"],\n    name: \"Turtle\",\n    scopeName: \"source.turtle\"\n  };\n  oop.inherits(TurtleHighlightRules, TextHighlightRules);\n  exports.TurtleHighlightRules = TurtleHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/turtle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/turtle_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var TurtleHighlightRules = require(\"./turtle_highlight_rules\").TurtleHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = TurtleHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/turtle\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/turtle\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}