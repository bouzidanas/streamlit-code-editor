{"code":"ace.define(\"ace/mode/nasal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,n,t){\"use strict\";var a=e(\"../lib/oop\"),o=e(\"./text_highlight_rules\").TextHighlightRules,i=function(){this.$rules={start:[{token:\"constant.other.allcaps.nasal\",regex:/\\b[[:upper:]_][[:upper:][:digit:]_]*\\b(?![\\.\\(\\'\\\"])/,comment:\"Match identifiers in ALL_CAPS as constants, except when followed by `.`, `(`, `'`, or `\\\"`.\"},{todo:{token:[\"support.class.nasal\",\"meta.function.nasal\",\"entity.name.function.nasal\",\"meta.function.nasal\",\"keyword.operator.nasal\",\"meta.function.nasal\",\"storage.type.function.nasal\",\"meta.function.nasal\",\"punctuation.definition.parameters.begin.nasal\"],regex:/([a-zA-Z_?.$][\\w?.$]*)(\\.)([a-zA-Z_?.$][\\w?.$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,push:[{token:\"punctuation.definition.parameters.end.nasal\",regex:/\\)/,next:\"pop\"},{include:\"$self\"},{token:\"variable.parameter.nasal\",regex:/\\w/},{defaultToken:\"meta.function.nasal\"}]},comment:\"match stuff like: Sound.play = func() { \\u2026 }\"},{todo:{token:[\"entity.name.function.nasal\",\"meta.function.nasal\",\"keyword.operator.nasal\",\"meta.function.nasal\",\"storage.type.function.nasal\",\"meta.function.nasal\",\"punctuation.definition.parameters.begin.nasal\"],regex:/([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,push:[{token:\"punctuation.definition.parameters.end.nasal\",regex:/\\)/,next:\"pop\"},{include:\"$self\"},{token:\"variable.parameter.nasal\",regex:/\\w/},{defaultToken:\"meta.function.nasal\"}]},comment:\"match stuff like: play = func() { \\u2026 }\"},{todo:{token:[\"entity.name.function.nasal\",\"meta.function.nasal\",\"keyword.operator.nasal\",\"meta.function.nasal\",\"storage.type.function.nasal\",\"meta.function.nasal\",\"punctuation.definition.parameters.begin.nasal\"],regex:/([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*\\(\\s*)(func)(\\s*)(\\()/,push:[{token:\"punctuation.definition.parameters.end.nasal\",regex:/\\)/,next:\"pop\"},{include:\"$self\"},{token:\"variable.parameter.nasal\",regex:/\\w/},{defaultToken:\"meta.function.nasal\"}]},comment:\"match stuff like: play = (func() { \\u2026 }\"},{todo:{token:[\"entity.name.function.nasal\",\"meta.function.hash.nasal\",\"storage.type.function.nasal\",\"meta.function.hash.nasal\",\"punctuation.definition.parameters.begin.nasal\"],regex:/\\b([a-zA-Z_?.$][\\w?.$]*)(\\s*:\\s*\\b)(func)(\\s*)(\\()/,push:[{token:\"punctuation.definition.parameters.end.nasal\",regex:/\\)/,next:\"pop\"},{include:\"$self\"},{token:\"variable.parameter.nasal\",regex:/\\w/},{defaultToken:\"meta.function.hash.nasal\"}]},comment:\"match stuff like: foobar: func() { \\u2026 }\"},{todo:{token:[\"storage.type.function.nasal\",\"meta.function.nasal\",\"punctuation.definition.parameters.begin.nasal\"],regex:/\\b(func)(\\s*)(\\()/,push:[{token:\"punctuation.definition.parameters.end.nasal\",regex:/\\)/,next:\"pop\"},{include:\"$self\"},{token:\"variable.parameter.nasal\",regex:/\\w/},{defaultToken:\"meta.function.nasal\"}]},comment:\"match stuff like: func() { \\u2026 }\"},{token:[\"keyword.operator.new.nasal\",\"meta.class.instance.constructor\",\"entity.name.type.instance.nasal\"],regex:/(new)(\\s+)(\\w+(?:\\.\\w*)?)/},{token:\"keyword.control.nasal\",regex:/\\b(?:if|else|elsif|while|for|foreach|forindex)\\b/},{token:\"keyword.control.nasal\",regex:/\\b(?:break(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|continue(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|[A-Z]{2,16}(?=\\s*;(?:[^\\)#;]*?;){0,2}[^\\)#;]*?\\)))\\b/},{token:\"keyword.operator.nasal\",regex:/!|\\*|\\-|\\+|~|\\/|==|=|!=|<=|>=|<|>|!|\\?|\\:|\\*=|\\/=|\\+=|\\-=|~=|\\.\\.\\.|\\b(?:and|or)\\b/},{token:\"variable.language.nasal\",regex:/\\b(?:me|arg|parents|obj)\\b/},{token:\"storage.type.nasal\",regex:/\\b(?:return|var)\\b/},{token:\"constant.language.nil.nasal\",regex:/\\bnil\\b/},{token:\"punctuation.definition.string.begin.nasal\",regex:/'/,push:[{token:\"punctuation.definition.string.end.nasal\",regex:/'/,next:\"pop\"},{token:\"constant.character.escape.nasal\",regex:/\\\\'/},{defaultToken:\"string.quoted.single.nasal\"}],comment:\"Single quoted strings\"},{token:\"punctuation.definition.string.begin.nasal\",regex:/\"/,push:[{token:\"punctuation.definition.string.end.nasal\",regex:/\"/,next:\"pop\"},{token:\"constant.character.escape.nasal\",regex:/\\\\(?:x[\\da-fA-F]{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|r|n|t|\\\\|\")/},{token:\"constant.character.escape.nasal\",regex:/%(?:%|(?:\\d+\\$)?[+-]?(?:[ 0]|'.{1})?-?\\d*(?:\\.\\d+)?[bcdeEufFgGosxX])/},{defaultToken:\"string.quoted.double.nasal\"}],comment:\"Double quoted strings\"},{token:[\"punctuation.definition.string.begin.nasal\",\"string.other\",\"punctuation.definition.string.end.nasal\"],regex:/(`)(.)(`)/,comment:\"Single-byte ASCII character constants\"},{token:[\"punctuation.definition.comment.nasal\",\"comment.line.hash.nasal\"],regex:/(#)(.*$)/,comment:\"Comments\"},{token:\"constant.numeric.nasal\",regex:/(?:(?:\\b[0-9]+)?\\.)?\\b[0-9]+(?:[eE][-+]?[0-9]+)?\\b/,comment:\"Integers, floats, and scientific format\"},{token:\"constant.numeric.nasal\",regex:/0[x|X][0-9a-fA-F]+/,comment:\"Hex codes\"},{token:\"punctuation.terminator.statement.nasal\",regex:/\\;/},{token:[\"punctuation.section.scope.begin.nasal\",\"punctuation.section.scope.end.nasal\"],regex:/(\\[)(\\])/},{todo:{token:\"punctuation.section.scope.begin.nasal\",regex:/\\{/,push:[{token:\"punctuation.section.scope.end.nasal\",regex:/\\}/,next:\"pop\"},{include:\"$self\"}]}},{todo:{token:\"punctuation.section.scope.begin.nasal\",regex:/\\(/,push:[{token:\"punctuation.section.scope.end.nasal\",regex:/\\)/,next:\"pop\"},{include:\"$self\"}]}},{token:\"invalid.illegal\",regex:/%|\\$|@|&|\\^|\\||\\\\|`/,comment:\"Illegal characters\"},{todo:{comment:\"TODO: Symbols in hash keys\"},comment:\"TODO: Symbols in hash keys\"},{token:\"variable.language.nasal\",regex:/\\b(?:append|bind|call|caller|chr|closure|cmp|compile|contains|delete|die|find|ghosttype|id|int|keys|left|num|pop|right|setsize|size|sort|split|sprintf|streq|substr|subvec|typeof|readline)\\b/,comment:\"Core functions\"},{token:\"variable.language.nasal\",regex:/\\b(?:abort|abs|aircraftToCart|addcommand|airportinfo|airwaysRoute|assert|carttogeod|cmdarg|courseAndDistance|createDiscontinuity|createViaTo|createWP|createWPFrom|defined|directory|fgcommand|findAirportsByICAO|findAirportsWithinRange|findFixesByID|findNavaidByFrequency|findNavaidsByFrequency|findNavaidsByID|findNavaidsWithinRange|finddata|flightplan|geodinfo|geodtocart|get_cart_ground_intersection|getprop|greatCircleMove|interpolate|isa|logprint|magvar|maketimer|start|stop|restart|maketimestamp|md5|navinfo|parse_markdown|parsexml|print|printf|printlog|rand|registerFlightPlanDelegate|removecommand|removelistener|resolvepath|setlistener|_setlistener|setprop|srand|systime|thisfunc|tileIndex|tilePath|values)\\b/,comment:\"FG ext core functions\"},{token:\"variable.language.nasal\",regex:/\\b(?:singleShot|isRunning|simulatedTime)\\b/,comment:\"FG ext core functions\"},{token:\"constant.language.nasal\",regex:/\\b(?:D2R|FPS2KT|FT2M|GAL2L|IN2M|KG2LB|KT2FPS|KT2MPS|LG2GAL|LB2KG|M2FT|M2IN|M2NM|MPS2KT|NM2M|R2D)\\b/,comment:\"FG ext core constants\"},{token:\"support.function.nasal\",regex:/\\b(?:addChild|addChildren|alias|clearValue|equals|getAliasTarget|getAttribute|getBoolValue|getChild|getChildren|getIndex|getName|getNode|getParent|getPath|getType|getValue|getValues|initNode|remove|removeAllChildren|removeChild|removeChildren|setAttribute|setBoolValue|setDoubleValue|setIntValue|setValue|setValues|unalias|compileCondition|condition|copy|dump|getNode|nodeList|runBinding|setAll|wrap|wrapNode)\\b/,comment:\"FG func props\"},{token:\"support.class.nasal\",regex:/\\bNode\\b/,comment:\"FG node class\"},{token:\"variable.language.nasal\",regex:/\\b(?:props|globals)\\b/,comment:\"FG func props variables\"},{todo:{token:[\"support.function.nasal\",\"punctuation.definition.arguments.begin.nasal\"],regex:/\\b([a-zA-Z_?$][\\w?$]*)(\\()/,push:[{token:\"punctuation.definition.arguments.end.nasal\",regex:/\\)/,next:\"pop\"},{include:\"$self\"},{defaultToken:\"meta.function-call.nasal\"}]},comment:\"function call\"}]},this.normalizeRules()};i.metaData={fileTypes:[\"nas\"],name:\"Nasal\",scopeName:\"source.nasal\"},a.inherits(i,o),n.NasalHighlightRules=i})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,n,t){\"use strict\";var a=e(\"../../lib/oop\"),o=e(\"../../range\").Range,i=e(\"./fold_mode\").FoldMode,s=n.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};a.inherits(s,i),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,n,t){var a=e.getLine(t);if(this.singleLineBlockCommentRe.test(a)&&!this.startRegionRe.test(a)&&!this.tripleStarBlockCommentRe.test(a))return\"\";var o=this._getFoldWidgetBase(e,n,t);return!o&&this.startRegionRe.test(a)?\"start\":o},this.getFoldWidgetRange=function(e,n,t,a){var o,i=e.getLine(t);if(this.startRegionRe.test(i))return this.getCommentRegionBlock(e,i,t);if(o=i.match(this.foldingStartMarker)){var s=o.index;if(o[1])return this.openingBracketBlock(e,o[1],t,s);var r=e.getCommentFoldRange(t,s+o[0].length,1);return r&&!r.isMultiLine()&&(a?r=this.getSectionRange(e,t):\"all\"!=n&&(r=null)),r}if(\"markbegin\"!==n&&(o=i.match(this.foldingStopMarker))){s=o.index+o[0].length;return o[1]?this.closingBracketBlock(e,o[1],t,s):e.getCommentFoldRange(t,s,-1)}},this.getSectionRange=function(e,n){for(var t=e.getLine(n),a=t.search(/\\S/),i=n,s=t.length,r=n+=1,l=e.getLength();++n<l;){var c=(t=e.getLine(n)).search(/\\S/);if(-1!==c){if(a>c)break;var u=this.getFoldWidgetRange(e,\"all\",n);if(u){if(u.start.row<=i)break;if(u.isMultiLine())n=u.end.row;else if(a==c)break}r=n}}return new o(i,s,r,e.getLine(r).length)},this.getCommentRegionBlock=function(e,n,t){for(var a=n.search(/\\s*$/),i=e.getLength(),s=t,r=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,l=1;++t<i;){n=e.getLine(t);var c=r.exec(n);if(c&&(c[1]?l--:l++,!l))break}if(t>s)return new o(s,a,t,n.length)}}.call(s.prototype)})),ace.define(\"ace/mode/nasal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/nasal_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,n,t){\"use strict\";var a=e(\"../lib/oop\"),o=e(\"./text\").Mode,i=e(\"./nasal_highlight_rules\").NasalHighlightRules,s=e(\"./folding/cstyle\").FoldMode,r=function(){this.HighlightRules=i,this.foldingRules=new s};a.inherits(r,o),function(){this.$id=\"ace/mode/nasal\"}.call(r.prototype),n.Mode=r})),ace.require([\"ace/mode/nasal\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"3b2aa54a93b84d0881ffe50c87c67dc5.js","input":"ace.define(\"ace/mode/nasal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* ***** BEGIN LICENSE BLOCK *****\n  * Distributed under the BSD license:\n  *\n  * Copyright (c) 2012, Ajax.org B.V.\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions are met:\n  *     * Redistributions of source code must retain the above copyright\n  *       notice, this list of conditions and the following disclaimer.\n  *     * Redistributions in binary form must reproduce the above copyright\n  *       notice, this list of conditions and the following disclaimer in the\n  *       documentation and/or other materials provided with the distribution.\n  *     * Neither the name of Ajax.org B.V. nor the\n  *       names of its contributors may be used to endorse or promote products\n  *       derived from this software without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  *\n  * ***** END LICENSE BLOCK ***** */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var NasalHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: \"constant.other.allcaps.nasal\",\n        regex: /\\b[[:upper:]_][[:upper:][:digit:]_]*\\b(?![\\.\\(\\'\\\"])/,\n        comment: \"Match identifiers in ALL_CAPS as constants, except when followed by `.`, `(`, `'`, or `\\\"`.\"\n      }, {\n        todo: {\n          token: [\"support.class.nasal\", \"meta.function.nasal\", \"entity.name.function.nasal\", \"meta.function.nasal\", \"keyword.operator.nasal\", \"meta.function.nasal\", \"storage.type.function.nasal\", \"meta.function.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /([a-zA-Z_?.$][\\w?.$]*)(\\.)([a-zA-Z_?.$][\\w?.$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.nasal\"\n          }]\n        },\n        comment: \"match stuff like: Sound.play = func() { … }\"\n      }, {\n        todo: {\n          token: [\"entity.name.function.nasal\", \"meta.function.nasal\", \"keyword.operator.nasal\", \"meta.function.nasal\", \"storage.type.function.nasal\", \"meta.function.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.nasal\"\n          }]\n        },\n        comment: \"match stuff like: play = func() { … }\"\n      }, {\n        todo: {\n          token: [\"entity.name.function.nasal\", \"meta.function.nasal\", \"keyword.operator.nasal\", \"meta.function.nasal\", \"storage.type.function.nasal\", \"meta.function.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*\\(\\s*)(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.nasal\"\n          }]\n        },\n        comment: \"match stuff like: play = (func() { … }\"\n      }, {\n        todo: {\n          token: [\"entity.name.function.nasal\", \"meta.function.hash.nasal\", \"storage.type.function.nasal\", \"meta.function.hash.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /\\b([a-zA-Z_?.$][\\w?.$]*)(\\s*:\\s*\\b)(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.hash.nasal\"\n          }]\n        },\n        comment: \"match stuff like: foobar: func() { … }\"\n      }, {\n        todo: {\n          token: [\"storage.type.function.nasal\", \"meta.function.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /\\b(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.nasal\"\n          }]\n        },\n        comment: \"match stuff like: func() { … }\"\n      }, {\n        token: [\"keyword.operator.new.nasal\", \"meta.class.instance.constructor\", \"entity.name.type.instance.nasal\"],\n        regex: /(new)(\\s+)(\\w+(?:\\.\\w*)?)/\n      }, {\n        token: \"keyword.control.nasal\",\n        regex: /\\b(?:if|else|elsif|while|for|foreach|forindex)\\b/\n      }, {\n        token: \"keyword.control.nasal\",\n        regex: /\\b(?:break(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|continue(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|[A-Z]{2,16}(?=\\s*;(?:[^\\)#;]*?;){0,2}[^\\)#;]*?\\)))\\b/\n      }, {\n        token: \"keyword.operator.nasal\",\n        regex: /!|\\*|\\-|\\+|~|\\/|==|=|!=|<=|>=|<|>|!|\\?|\\:|\\*=|\\/=|\\+=|\\-=|~=|\\.\\.\\.|\\b(?:and|or)\\b/\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:me|arg|parents|obj)\\b/\n      }, {\n        token: \"storage.type.nasal\",\n        regex: /\\b(?:return|var)\\b/\n      }, {\n        token: \"constant.language.nil.nasal\",\n        regex: /\\bnil\\b/\n      }, {\n        token: \"punctuation.definition.string.begin.nasal\",\n        regex: /'/,\n        push: [{\n          token: \"punctuation.definition.string.end.nasal\",\n          regex: /'/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.nasal\",\n          regex: /\\\\'/\n        }, {\n          defaultToken: \"string.quoted.single.nasal\"\n        }],\n        comment: \"Single quoted strings\"\n      }, {\n        token: \"punctuation.definition.string.begin.nasal\",\n        regex: /\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.nasal\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.nasal\",\n          regex: /\\\\(?:x[\\da-fA-F]{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|r|n|t|\\\\|\")/\n        }, {\n          token: \"constant.character.escape.nasal\",\n          regex: /%(?:%|(?:\\d+\\$)?[+-]?(?:[ 0]|'.{1})?-?\\d*(?:\\.\\d+)?[bcdeEufFgGosxX])/\n        }, {\n          defaultToken: \"string.quoted.double.nasal\"\n        }],\n        comment: \"Double quoted strings\"\n      }, {\n        token: [\"punctuation.definition.string.begin.nasal\", \"string.other\", \"punctuation.definition.string.end.nasal\"],\n        regex: /(`)(.)(`)/,\n        comment: \"Single-byte ASCII character constants\"\n      }, {\n        token: [\"punctuation.definition.comment.nasal\", \"comment.line.hash.nasal\"],\n        regex: /(#)(.*$)/,\n        comment: \"Comments\"\n      }, {\n        token: \"constant.numeric.nasal\",\n        regex: /(?:(?:\\b[0-9]+)?\\.)?\\b[0-9]+(?:[eE][-+]?[0-9]+)?\\b/,\n        comment: \"Integers, floats, and scientific format\"\n      }, {\n        token: \"constant.numeric.nasal\",\n        regex: /0[x|X][0-9a-fA-F]+/,\n        comment: \"Hex codes\"\n      }, {\n        token: \"punctuation.terminator.statement.nasal\",\n        regex: /\\;/\n      }, {\n        token: [\"punctuation.section.scope.begin.nasal\", \"punctuation.section.scope.end.nasal\"],\n        regex: /(\\[)(\\])/\n      }, {\n        todo: {\n          token: \"punctuation.section.scope.begin.nasal\",\n          regex: /\\{/,\n          push: [{\n            token: \"punctuation.section.scope.end.nasal\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }]\n        }\n      }, {\n        todo: {\n          token: \"punctuation.section.scope.begin.nasal\",\n          regex: /\\(/,\n          push: [{\n            token: \"punctuation.section.scope.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }]\n        }\n      }, {\n        token: \"invalid.illegal\",\n        regex: /%|\\$|@|&|\\^|\\||\\\\|`/,\n        comment: \"Illegal characters\"\n      }, {\n        todo: {\n          comment: \"TODO: Symbols in hash keys\"\n        },\n        comment: \"TODO: Symbols in hash keys\"\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:append|bind|call|caller|chr|closure|cmp|compile|contains|delete|die|find|ghosttype|id|int|keys|left|num|pop|right|setsize|size|sort|split|sprintf|streq|substr|subvec|typeof|readline)\\b/,\n        comment: \"Core functions\"\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:abort|abs|aircraftToCart|addcommand|airportinfo|airwaysRoute|assert|carttogeod|cmdarg|courseAndDistance|createDiscontinuity|createViaTo|createWP|createWPFrom|defined|directory|fgcommand|findAirportsByICAO|findAirportsWithinRange|findFixesByID|findNavaidByFrequency|findNavaidsByFrequency|findNavaidsByID|findNavaidsWithinRange|finddata|flightplan|geodinfo|geodtocart|get_cart_ground_intersection|getprop|greatCircleMove|interpolate|isa|logprint|magvar|maketimer|start|stop|restart|maketimestamp|md5|navinfo|parse_markdown|parsexml|print|printf|printlog|rand|registerFlightPlanDelegate|removecommand|removelistener|resolvepath|setlistener|_setlistener|setprop|srand|systime|thisfunc|tileIndex|tilePath|values)\\b/,\n        comment: \"FG ext core functions\"\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:singleShot|isRunning|simulatedTime)\\b/,\n        comment: \"FG ext core functions\"\n      }, {\n        token: \"constant.language.nasal\",\n        regex: /\\b(?:D2R|FPS2KT|FT2M|GAL2L|IN2M|KG2LB|KT2FPS|KT2MPS|LG2GAL|LB2KG|M2FT|M2IN|M2NM|MPS2KT|NM2M|R2D)\\b/,\n        comment: \"FG ext core constants\"\n      }, {\n        token: \"support.function.nasal\",\n        regex: /\\b(?:addChild|addChildren|alias|clearValue|equals|getAliasTarget|getAttribute|getBoolValue|getChild|getChildren|getIndex|getName|getNode|getParent|getPath|getType|getValue|getValues|initNode|remove|removeAllChildren|removeChild|removeChildren|setAttribute|setBoolValue|setDoubleValue|setIntValue|setValue|setValues|unalias|compileCondition|condition|copy|dump|getNode|nodeList|runBinding|setAll|wrap|wrapNode)\\b/,\n        comment: \"FG func props\"\n      }, {\n        token: \"support.class.nasal\",\n        regex: /\\bNode\\b/,\n        comment: \"FG node class\"\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:props|globals)\\b/,\n        comment: \"FG func props variables\"\n      }, {\n        todo: {\n          token: [\"support.function.nasal\", \"punctuation.definition.arguments.begin.nasal\"],\n          regex: /\\b([a-zA-Z_?$][\\w?$]*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.arguments.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            defaultToken: \"meta.function-call.nasal\"\n          }]\n        },\n        comment: \"function call\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  NasalHighlightRules.metaData = {\n    fileTypes: [\"nas\"],\n    name: \"Nasal\",\n    scopeName: \"source.nasal\"\n  };\n  oop.inherits(NasalHighlightRules, TextHighlightRules);\n  exports.NasalHighlightRules = NasalHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/nasal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/nasal_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /* ***** BEGIN LICENSE BLOCK *****\n  * Distributed under the BSD license:\n  *\n  * Copyright (c) 2012, Ajax.org B.V.\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions are met:\n  *     * Redistributions of source code must retain the above copyright\n  *       notice, this list of conditions and the following disclaimer.\n  *     * Redistributions in binary form must reproduce the above copyright\n  *       notice, this list of conditions and the following disclaimer in the\n  *       documentation and/or other materials provided with the distribution.\n  *     * Neither the name of Ajax.org B.V. nor the\n  *       names of its contributors may be used to endorse or promote products\n  *       derived from this software without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  *\n  * ***** END LICENSE BLOCK ***** */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var NasalHighlightRules = require(\"./nasal_highlight_rules\").NasalHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = NasalHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/nasal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/nasal\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}