{"code":"ace.define(\"ace/mode/terraform_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,r){\"use strict\";var n=e(\"../lib/oop\"),o=e(\"./text_highlight_rules\").TextHighlightRules,i=function(){this.$rules={start:[{token:[\"storage.function.terraform\"],regex:\"\\\\b(output|resource|data|variable|module|export)\\\\b\"},{token:\"variable.terraform\",regex:\"\\\\$\\\\s\",push:[{token:\"keyword.terraform\",regex:\"(-var-file|-var)\"},{token:\"variable.terraform\",regex:\"\\\\n|$\",next:\"pop\"},{include:\"strings\"},{include:\"variables\"},{include:\"operators\"},{defaultToken:\"text\"}]},{token:\"language.support.class\",regex:\"\\\\b(timeouts|provider|connection|provisioner|lifecycleprovider|atlas)\\\\b\"},{token:\"singleline.comment.terraform\",regex:\"#.*$\"},{token:\"singleline.comment.terraform\",regex:\"//.*$\"},{token:\"multiline.comment.begin.terraform\",regex:/\\/\\*/,push:\"blockComment\"},{token:\"storage.function.terraform\",regex:\"^\\\\s*(locals|terraform)\\\\s*{\"},{token:\"paren.lparen\",regex:\"[[({]\"},{token:\"paren.rparen\",regex:\"[\\\\])}]\"},{include:\"constants\"},{include:\"strings\"},{include:\"operators\"},{include:\"variables\"}],blockComment:[{regex:/\\*\\//,token:\"multiline.comment.end.terraform\",next:\"pop\"},{defaultToken:\"comment\"}],constants:[{token:\"constant.language.terraform\",regex:\"\\\\b(true|false|yes|no|on|off|EOF)\\\\b\"},{token:\"constant.numeric.terraform\",regex:\"(\\\\b([0-9]+)([kKmMgG]b?)?\\\\b)|(\\\\b(0x[0-9A-Fa-f]+)([kKmMgG]b?)?\\\\b)\"}],variables:[{token:[\"variable.assignment.terraform\",\"keyword.operator\"],regex:\"\\\\b([a-zA-Z_]+)(\\\\s*=)\"}],interpolated_variables:[{token:\"variable.terraform\",regex:\"\\\\b(var|self|count|path|local)\\\\b(?:\\\\.*[a-zA-Z_-]*)?\"}],strings:[{token:\"punctuation.quote.terraform\",regex:\"'\",push:[{token:\"punctuation.quote.terraform\",regex:\"'\",next:\"pop\"},{include:\"escaped_chars\"},{defaultToken:\"string\"}]},{token:\"punctuation.quote.terraform\",regex:'\"',push:[{token:\"punctuation.quote.terraform\",regex:'\"',next:\"pop\"},{include:\"interpolation\"},{include:\"escaped_chars\"},{defaultToken:\"string\"}]}],escaped_chars:[{token:\"constant.escaped_char.terraform\",regex:\"\\\\\\\\.\"}],operators:[{token:\"keyword.operator\",regex:\"\\\\?|:|==|!=|>|<|>=|<=|&&|\\\\|\\\\||!|%|&|\\\\*|\\\\+|\\\\-|/|=\"}],interpolation:[{token:\"punctuation.interpolated.begin.terraform\",regex:\"\\\\$?\\\\$\\\\{\",push:[{token:\"punctuation.interpolated.end.terraform\",regex:\"\\\\}\",next:\"pop\"},{include:\"interpolated_variables\"},{include:\"operators\"},{include:\"constants\"},{include:\"strings\"},{include:\"functions\"},{include:\"parenthesis\"},{defaultToken:\"punctuation\"}]}],functions:[{token:\"keyword.function.terraform\",regex:\"\\\\b(abs|basename|base64decode|base64encode|base64gzip|base64sha256|base64sha512|bcrypt|ceil|chomp|chunklist|cidrhost|cidrnetmask|cidrsubnet|coalesce|coalescelist|compact|concat|contains|dirname|distinct|element|file|floor|flatten|format|formatlist|indent|index|join|jsonencode|keys|length|list|log|lookup|lower|map|matchkeys|max|merge|min|md5|pathexpand|pow|replace|rsadecrypt|sha1|sha256|sha512|signum|slice|sort|split|substr|timestamp|timeadd|title|transpose|trimspace|upper|urlencode|uuid|values|zipmap)\\\\b\"}],parenthesis:[{token:\"paren.lparen\",regex:\"\\\\[\"},{token:\"paren.rparen\",regex:\"\\\\]\"}]},this.normalizeRules()};n.inherits(i,o),t.TerraformHighlightRules=i})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,r){\"use strict\";var n=e(\"../../lib/oop\"),o=e(\"../../range\").Range,i=e(\"./fold_mode\").FoldMode,a=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};n.inherits(a,i),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,r){var n=e.getLine(r);if(this.singleLineBlockCommentRe.test(n)&&!this.startRegionRe.test(n)&&!this.tripleStarBlockCommentRe.test(n))return\"\";var o=this._getFoldWidgetBase(e,t,r);return!o&&this.startRegionRe.test(n)?\"start\":o},this.getFoldWidgetRange=function(e,t,r,n){var o,i=e.getLine(r);if(this.startRegionRe.test(i))return this.getCommentRegionBlock(e,i,r);if(o=i.match(this.foldingStartMarker)){var a=o.index;if(o[1])return this.openingBracketBlock(e,o[1],r,a);var s=e.getCommentFoldRange(r,a+o[0].length,1);return s&&!s.isMultiLine()&&(n?s=this.getSectionRange(e,r):\"all\"!=t&&(s=null)),s}if(\"markbegin\"!==t&&(o=i.match(this.foldingStopMarker))){a=o.index+o[0].length;return o[1]?this.closingBracketBlock(e,o[1],r,a):e.getCommentFoldRange(r,a,-1)}},this.getSectionRange=function(e,t){for(var r=e.getLine(t),n=r.search(/\\S/),i=t,a=r.length,s=t+=1,l=e.getLength();++t<l;){var c=(r=e.getLine(t)).search(/\\S/);if(-1!==c){if(n>c)break;var g=this.getFoldWidgetRange(e,\"all\",t);if(g){if(g.start.row<=i)break;if(g.isMultiLine())t=g.end.row;else if(n==c)break}s=t}}return new o(i,a,s,e.getLine(s).length)},this.getCommentRegionBlock=function(e,t,r){for(var n=t.search(/\\s*$/),i=e.getLength(),a=r,s=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,l=1;++r<i;){t=e.getLine(r);var c=s.exec(t);if(c&&(c[1]?l--:l++,!l))break}if(r>a)return new o(a,n,r,t.length)}}.call(a.prototype)})),ace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"],(function(e,t,r){\"use strict\";var n=e(\"../range\").Range,o=function(){};(function(){this.checkOutdent=function(e,t){return!!/^\\s+$/.test(e)&&/^\\s*\\}/.test(t)},this.autoOutdent=function(e,t){var r=e.getLine(t).match(/^(\\s*\\})/);if(!r)return 0;var o=r[1].length,i=e.findMatchingBracket({row:t,column:o});if(!i||i.row==t)return 0;var a=this.$getIndent(e.getLine(i.row));e.replace(new n(t,0,t,o-1),a)},this.$getIndent=function(e){return e.match(/^\\s*/)[0]}}).call(o.prototype),t.MatchingBraceOutdent=o})),ace.define(\"ace/mode/terraform\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/terraform_highlight_rules\",\"ace/mode/folding/cstyle\",\"ace/mode/matching_brace_outdent\"],(function(e,t,r){\"use strict\";var n=e(\"../lib/oop\"),o=e(\"./text\").Mode,i=e(\"./terraform_highlight_rules\").TerraformHighlightRules,a=e(\"./folding/cstyle\").FoldMode,s=e(\"./matching_brace_outdent\").MatchingBraceOutdent,l=function(){o.call(this),this.HighlightRules=i,this.$outdent=new s,this.$behaviour=this.$defaultBehaviour,this.foldingRules=new a};n.inherits(l,o),function(){this.lineCommentStart=[\"#\",\"//\"],this.blockComment={start:\"/*\",end:\"*/\"},this.$id=\"ace/mode/terraform\"}.call(l.prototype),t.Mode=l})),ace.require([\"ace/mode/terraform\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"1e36261460e26c4dcee8de7a9181b4ee.js","input":"ace.define(\"ace/mode/terraform_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var TerraformHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: ['storage.function.terraform'],\n        regex: '\\\\b(output|resource|data|variable|module|export)\\\\b'\n      }, {\n        token: \"variable.terraform\",\n        regex: \"\\\\$\\\\s\",\n        push: [{\n          token: \"keyword.terraform\",\n          regex: \"(-var-file|-var)\"\n        }, {\n          token: \"variable.terraform\",\n          regex: \"\\\\n|$\",\n          next: \"pop\"\n        }, {\n          include: \"strings\"\n        }, {\n          include: \"variables\"\n        }, {\n          include: \"operators\"\n        }, {\n          defaultToken: \"text\"\n        }]\n      }, {\n        token: \"language.support.class\",\n        regex: \"\\\\b(timeouts|provider|connection|provisioner|lifecycleprovider|atlas)\\\\b\"\n      }, {\n        token: \"singleline.comment.terraform\",\n        regex: '#.*$'\n      }, {\n        token: \"singleline.comment.terraform\",\n        regex: '//.*$'\n      }, {\n        token: \"multiline.comment.begin.terraform\",\n        regex: /\\/\\*/,\n        push: \"blockComment\"\n      }, {\n        token: \"storage.function.terraform\",\n        regex: \"^\\\\s*(locals|terraform)\\\\s*{\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        include: \"constants\"\n      }, {\n        include: \"strings\"\n      }, {\n        include: \"operators\"\n      }, {\n        include: \"variables\"\n      }],\n      blockComment: [{\n        regex: /\\*\\//,\n        token: \"multiline.comment.end.terraform\",\n        next: \"pop\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"constants\": [{\n        token: \"constant.language.terraform\",\n        regex: \"\\\\b(true|false|yes|no|on|off|EOF)\\\\b\"\n      }, {\n        token: \"constant.numeric.terraform\",\n        regex: \"(\\\\b([0-9]+)([kKmMgG]b?)?\\\\b)|(\\\\b(0x[0-9A-Fa-f]+)([kKmMgG]b?)?\\\\b)\"\n      }],\n      \"variables\": [{\n        token: [\"variable.assignment.terraform\", \"keyword.operator\"],\n        regex: \"\\\\b([a-zA-Z_]+)(\\\\s*=)\"\n      }],\n      \"interpolated_variables\": [{\n        token: \"variable.terraform\",\n        regex: \"\\\\b(var|self|count|path|local)\\\\b(?:\\\\.*[a-zA-Z_-]*)?\"\n      }],\n      \"strings\": [{\n        token: \"punctuation.quote.terraform\",\n        regex: \"'\",\n        push: [{\n          token: 'punctuation.quote.terraform',\n          regex: \"'\",\n          next: 'pop'\n        }, {\n          include: \"escaped_chars\"\n        }, {\n          defaultToken: 'string'\n        }]\n      }, {\n        token: \"punctuation.quote.terraform\",\n        regex: '\"',\n        push: [{\n          token: 'punctuation.quote.terraform',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          include: \"interpolation\"\n        }, {\n          include: \"escaped_chars\"\n        }, {\n          defaultToken: 'string'\n        }]\n      }],\n      \"escaped_chars\": [{\n        token: \"constant.escaped_char.terraform\",\n        regex: \"\\\\\\\\.\"\n      }],\n      \"operators\": [{\n        token: \"keyword.operator\",\n        regex: \"\\\\?|:|==|!=|>|<|>=|<=|&&|\\\\|\\\\\\||!|%|&|\\\\*|\\\\+|\\\\-|/|=\"\n      }],\n      \"interpolation\": [{\n        token: \"punctuation.interpolated.begin.terraform\",\n        regex: \"\\\\$?\\\\$\\\\{\",\n        push: [{\n          token: \"punctuation.interpolated.end.terraform\",\n          regex: \"\\\\}\",\n          next: \"pop\"\n        }, {\n          include: \"interpolated_variables\"\n        }, {\n          include: \"operators\"\n        }, {\n          include: \"constants\"\n        }, {\n          include: \"strings\"\n        }, {\n          include: \"functions\"\n        }, {\n          include: \"parenthesis\"\n        }, {\n          defaultToken: \"punctuation\"\n        }]\n      }],\n      \"functions\": [{\n        token: \"keyword.function.terraform\",\n        regex: \"\\\\b(abs|basename|base64decode|base64encode|base64gzip|base64sha256|base64sha512|bcrypt|ceil|chomp|chunklist|cidrhost|cidrnetmask|cidrsubnet|coalesce|coalescelist|compact|concat|contains|dirname|distinct|element|file|floor|flatten|format|formatlist|indent|index|join|jsonencode|keys|length|list|log|lookup|lower|map|matchkeys|max|merge|min|md5|pathexpand|pow|replace|rsadecrypt|sha1|sha256|sha512|signum|slice|sort|split|substr|timestamp|timeadd|title|transpose|trimspace|upper|urlencode|uuid|values|zipmap)\\\\b\"\n      }],\n      \"parenthesis\": [{\n        token: \"paren.lparen\",\n        regex: \"\\\\[\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"\\\\]\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  oop.inherits(TerraformHighlightRules, TextHighlightRules);\n  exports.TerraformHighlightRules = TerraformHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/terraform\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/terraform_highlight_rules\", \"ace/mode/folding/cstyle\", \"ace/mode/matching_brace_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var TerraformHighlightRules = require(\"./terraform_highlight_rules\").TerraformHighlightRules;\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var Mode = function () {\n    TextMode.call(this);\n    this.HighlightRules = TerraformHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"#\", \"//\"];\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/terraform\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/terraform\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}