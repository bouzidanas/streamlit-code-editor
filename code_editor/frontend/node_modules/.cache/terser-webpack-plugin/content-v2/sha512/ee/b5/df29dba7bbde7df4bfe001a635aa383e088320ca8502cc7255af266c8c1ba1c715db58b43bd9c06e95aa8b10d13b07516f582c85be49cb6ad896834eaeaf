{"code":"ace.define(\"ace/mode/fsl_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),i=e(\"./text_highlight_rules\").TextHighlightRules,a=function(){this.$rules={start:[{token:\"punctuation.definition.comment.mn\",regex:/\\/\\*/,push:[{token:\"punctuation.definition.comment.mn\",regex:/\\*\\//,next:\"pop\"},{defaultToken:\"comment.block.fsl\"}]},{token:\"comment.line.fsl\",regex:/\\/\\//,push:[{token:\"comment.line.fsl\",regex:/$/,next:\"pop\"},{defaultToken:\"comment.line.fsl\"}]},{token:\"entity.name.function\",regex:/\\${/,push:[{token:\"entity.name.function\",regex:/}/,next:\"pop\"},{defaultToken:\"keyword.other\"}],comment:\"js outcalls\"},{token:\"constant.numeric\",regex:/[0-9]*\\.[0-9]*\\.[0-9]*/,comment:\"semver\"},{token:\"constant.language.fslLanguage\",regex:\"(?:graph_layout|machine_name|machine_author|machine_license|machine_comment|machine_language|machine_version|machine_reference|npm_name|graph_layout|on_init|on_halt|on_end|on_terminate|on_finalize|on_transition|on_action|on_stochastic_action|on_legal|on_main|on_forced|on_validation|on_validation_failure|on_transition_refused|on_forced_transition_refused|on_action_refused|on_enter|on_exit|start_states|end_states|terminal_states|final_states|fsl_version)\\\\s*:\"},{token:\"keyword.control.transition.fslArrow\",regex:/<->|<-|->|<=>|=>|<=|<~>|~>|<~|<-=>|<=->|<-~>|<~->|<=~>|<~=>/},{token:\"constant.numeric.fslProbability\",regex:/[0-9]+%/,comment:\"edge probability annotation\"},{token:\"constant.character.fslAction\",regex:/\\'[^']*\\'/,comment:\"action annotation\"},{token:\"string.quoted.double.fslLabel.doublequoted\",regex:/\\\"[^\"]*\\\"/,comment:\"fsl label annotation\"},{token:\"entity.name.tag.fslLabel.atom\",regex:/[a-zA-Z0-9_.+&()#@!?,]/,comment:\"fsl label annotation\"}]},this.normalizeRules()};a.metaData={fileTypes:[\"fsl\",\"fsl_state\"],name:\"FSL\",scopeName:\"source.fsl\"},o.inherits(a,i),t.FSLHighlightRules=a})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var o=e(\"../../lib/oop\"),i=e(\"../../range\").Range,a=e(\"./fold_mode\").FoldMode,s=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};o.inherits(s,a),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var o=e.getLine(n);if(this.singleLineBlockCommentRe.test(o)&&!this.startRegionRe.test(o)&&!this.tripleStarBlockCommentRe.test(o))return\"\";var i=this._getFoldWidgetBase(e,t,n);return!i&&this.startRegionRe.test(o)?\"start\":i},this.getFoldWidgetRange=function(e,t,n,o){var i,a=e.getLine(n);if(this.startRegionRe.test(a))return this.getCommentRegionBlock(e,a,n);if(i=a.match(this.foldingStartMarker)){var s=i.index;if(i[1])return this.openingBracketBlock(e,i[1],n,s);var r=e.getCommentFoldRange(n,s+i[0].length,1);return r&&!r.isMultiLine()&&(o?r=this.getSectionRange(e,n):\"all\"!=t&&(r=null)),r}if(\"markbegin\"!==t&&(i=a.match(this.foldingStopMarker))){s=i.index+i[0].length;return i[1]?this.closingBracketBlock(e,i[1],n,s):e.getCommentFoldRange(n,s,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),o=n.search(/\\S/),a=t,s=n.length,r=t+=1,l=e.getLength();++t<l;){var c=(n=e.getLine(t)).search(/\\S/);if(-1!==c){if(o>c)break;var g=this.getFoldWidgetRange(e,\"all\",t);if(g){if(g.start.row<=a)break;if(g.isMultiLine())t=g.end.row;else if(o==c)break}r=t}}return new i(a,s,r,e.getLine(r).length)},this.getCommentRegionBlock=function(e,t,n){for(var o=t.search(/\\s*$/),a=e.getLength(),s=n,r=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,l=1;++n<a;){t=e.getLine(n);var c=r.exec(t);if(c&&(c[1]?l--:l++,!l))break}if(n>s)return new i(s,o,n,t.length)}}.call(s.prototype)})),ace.define(\"ace/mode/fsl\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/fsl_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),i=e(\"./text\").Mode,a=e(\"./fsl_highlight_rules\").FSLHighlightRules,s=e(\"./folding/cstyle\").FoldMode,r=function(){this.HighlightRules=a,this.foldingRules=new s};o.inherits(r,i),function(){this.lineCommentStart=\"//\",this.blockComment={start:\"/*\",end:\"*/\"},this.$id=\"ace/mode/fsl\",this.snippetFileId=\"ace/snippets/fsl\"}.call(r.prototype),t.Mode=r})),ace.require([\"ace/mode/fsl\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"9199c7a08b0c9f79ba3453946d76ffd8.js","input":"ace.define(\"ace/mode/fsl_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var FSLHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: \"punctuation.definition.comment.mn\",\n        regex: /\\/\\*/,\n        push: [{\n          token: \"punctuation.definition.comment.mn\",\n          regex: /\\*\\//,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.block.fsl\"\n        }]\n      }, {\n        token: \"comment.line.fsl\",\n        regex: /\\/\\//,\n        push: [{\n          token: \"comment.line.fsl\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.line.fsl\"\n        }]\n      }, {\n        token: \"entity.name.function\",\n        regex: /\\${/,\n        push: [{\n          token: \"entity.name.function\",\n          regex: /}/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"keyword.other\"\n        }],\n        comment: \"js outcalls\"\n      }, {\n        token: \"constant.numeric\",\n        regex: /[0-9]*\\.[0-9]*\\.[0-9]*/,\n        comment: \"semver\"\n      }, {\n        token: \"constant.language.fslLanguage\",\n        regex: \"(?:\" + \"graph_layout|machine_name|machine_author|machine_license|machine_comment|machine_language\" + \"|machine_version|machine_reference|npm_name|graph_layout|on_init|on_halt|on_end|on_terminate|on_finalize|on_transition\" + \"|on_action|on_stochastic_action|on_legal|on_main|on_forced|on_validation|on_validation_failure|on_transition_refused|on_forced_transition_refused\" + \"|on_action_refused|on_enter|on_exit|start_states|end_states|terminal_states|final_states|fsl_version\" + \")\\\\s*:\"\n      }, {\n        token: \"keyword.control.transition.fslArrow\",\n        regex: /<->|<-|->|<=>|=>|<=|<~>|~>|<~|<-=>|<=->|<-~>|<~->|<=~>|<~=>/\n      }, {\n        token: \"constant.numeric.fslProbability\",\n        regex: /[0-9]+%/,\n        comment: \"edge probability annotation\"\n      }, {\n        token: \"constant.character.fslAction\",\n        regex: /\\'[^']*\\'/,\n        comment: \"action annotation\"\n      }, {\n        token: \"string.quoted.double.fslLabel.doublequoted\",\n        regex: /\\\"[^\"]*\\\"/,\n        comment: \"fsl label annotation\"\n      }, {\n        token: \"entity.name.tag.fslLabel.atom\",\n        regex: /[a-zA-Z0-9_.+&()#@!?,]/,\n        comment: \"fsl label annotation\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  FSLHighlightRules.metaData = {\n    fileTypes: [\"fsl\", \"fsl_state\"],\n    name: \"FSL\",\n    scopeName: \"source.fsl\"\n  };\n  oop.inherits(FSLHighlightRules, TextHighlightRules);\n  exports.FSLHighlightRules = FSLHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/fsl\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/fsl_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var FSLHighlightRules = require(\"./fsl_highlight_rules\").FSLHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = FSLHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/fsl\";\n    this.snippetFileId = \"ace/snippets/fsl\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/fsl\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}