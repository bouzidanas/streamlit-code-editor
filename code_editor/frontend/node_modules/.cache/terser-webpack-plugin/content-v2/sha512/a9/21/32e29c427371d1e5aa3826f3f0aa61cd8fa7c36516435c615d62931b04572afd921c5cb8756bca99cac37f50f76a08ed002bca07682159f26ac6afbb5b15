{"code":"ace.define(\"ace/mode/logiql_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),r=e(\"./text_highlight_rules\").TextHighlightRules,i=function(){this.$rules={start:[{token:\"comment.block\",regex:\"/\\\\*\",push:[{token:\"comment.block\",regex:\"\\\\*/\",next:\"pop\"},{defaultToken:\"comment.block\"}]},{token:\"comment.single\",regex:\"//.*\"},{token:\"constant.numeric\",regex:\"\\\\d+(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?[fd]?\"},{token:\"string\",regex:'\"',push:[{token:\"string\",regex:'\"',next:\"pop\"},{defaultToken:\"string\"}]},{token:\"constant.language\",regex:\"\\\\b(true|false)\\\\b\"},{token:\"entity.name.type.logicblox\",regex:\"`[a-zA-Z_:]+(\\\\d|\\\\a)*\\\\b\"},{token:\"keyword.start\",regex:\"->\",comment:\"Constraint\"},{token:\"keyword.start\",regex:\"--\\x3e\",comment:\"Level 1 Constraint\"},{token:\"keyword.start\",regex:\"<-\",comment:\"Rule\"},{token:\"keyword.start\",regex:\"<--\",comment:\"Level 1 Rule\"},{token:\"keyword.end\",regex:\"\\\\.\",comment:\"Terminator\"},{token:\"keyword.other\",regex:\"!\",comment:\"Negation\"},{token:\"keyword.other\",regex:\",\",comment:\"Conjunction\"},{token:\"keyword.other\",regex:\";\",comment:\"Disjunction\"},{token:\"keyword.operator\",regex:\"<=|>=|!=|<|>\",comment:\"Equality\"},{token:\"keyword.other\",regex:\"@\",comment:\"Equality\"},{token:\"keyword.operator\",regex:\"\\\\+|-|\\\\*|/\",comment:\"Arithmetic operations\"},{token:\"keyword\",regex:\"::\",comment:\"Colon colon\"},{token:\"support.function\",regex:\"\\\\b(agg\\\\s*<<)\",push:[{include:\"$self\"},{token:\"support.function\",regex:\">>\",next:\"pop\"}]},{token:\"storage.modifier\",regex:\"\\\\b(lang:[\\\\w:]*)\"},{token:[\"storage.type\",\"text\"],regex:\"(export|sealed|clauses|block|alias|alias_all)(\\\\s*\\\\()(?=`)\"},{token:\"entity.name\",regex:\"[a-zA-Z_][a-zA-Z_0-9:]*(@prev|@init|@final)?(?=(\\\\(|\\\\[))\"},{token:\"variable.parameter\",regex:\"([a-zA-Z][a-zA-Z_0-9]*|_)\\\\s*(?=(,|\\\\.|<-|->|\\\\)|\\\\]|=))\"}]},this.normalizeRules()};o.inherits(i,r),t.LogiQLHighlightRules=i})),ace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"],(function(e,t,n){\"use strict\";var o=e(\"../../lib/oop\"),r=e(\"./fold_mode\").FoldMode,i=e(\"../../range\").Range,a=t.FoldMode=function(){};o.inherits(a,r),function(){this.commentBlock=function(e,t){var n=/\\S/,o=e.getLine(t),r=o.search(n);if(-1!=r&&\"#\"==o[r]){for(var a=o.length,s=e.getLength(),c=t,g=t;++t<s;){var l=(o=e.getLine(t)).search(n);if(-1!=l){if(\"#\"!=o[l])break;g=t}}if(g>c){var u=e.getLine(g).length;return new i(c,a,g,u)}}},this.getFoldWidgetRange=function(e,t,n){var o=this.indentationBlock(e,n);return o||((o=this.commentBlock(e,n))||void 0)},this.getFoldWidget=function(e,t,n){var o=e.getLine(n),r=o.search(/\\S/),i=e.getLine(n+1),a=e.getLine(n-1),s=a.search(/\\S/),c=i.search(/\\S/);if(-1==r)return e.foldWidgets[n-1]=-1!=s&&s<c?\"start\":\"\",\"\";if(-1==s){if(r==c&&\"#\"==o[r]&&\"#\"==i[r])return e.foldWidgets[n-1]=\"\",e.foldWidgets[n+1]=\"\",\"start\"}else if(s==r&&\"#\"==o[r]&&\"#\"==a[r]&&-1==e.getLine(n-2).search(/\\S/))return e.foldWidgets[n-1]=\"start\",e.foldWidgets[n+1]=\"\",\"\";return e.foldWidgets[n-1]=-1!=s&&s<r?\"start\":\"\",r<c?\"start\":\"\"}}.call(a.prototype)})),ace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"],(function(e,t,n){\"use strict\";var o=e(\"../range\").Range,r=function(){};(function(){this.checkOutdent=function(e,t){return!!/^\\s+$/.test(e)&&/^\\s*\\}/.test(t)},this.autoOutdent=function(e,t){var n=e.getLine(t).match(/^(\\s*\\})/);if(!n)return 0;var r=n[1].length,i=e.findMatchingBracket({row:t,column:r});if(!i||i.row==t)return 0;var a=this.$getIndent(e.getLine(i.row));e.replace(new o(t,0,t,r-1),a)},this.$getIndent=function(e){return e.match(/^\\s*/)[0]}}).call(r.prototype),t.MatchingBraceOutdent=r})),ace.define(\"ace/mode/logiql\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/logiql_highlight_rules\",\"ace/mode/folding/coffee\",\"ace/token_iterator\",\"ace/range\",\"ace/mode/matching_brace_outdent\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),r=e(\"./text\").Mode,i=e(\"./logiql_highlight_rules\").LogiQLHighlightRules,a=e(\"./folding/coffee\").FoldMode,s=e(\"../token_iterator\").TokenIterator,c=e(\"../range\").Range,g=e(\"./matching_brace_outdent\").MatchingBraceOutdent,l=function(){this.HighlightRules=i,this.foldingRules=new a,this.$outdent=new g,this.$behaviour=this.$defaultBehaviour};o.inherits(l,r),function(){this.lineCommentStart=\"//\",this.blockComment={start:\"/*\",end:\"*/\"},this.getNextLineIndent=function(e,t,n){var o=this.$getIndent(t),r=this.getTokenizer().getLineTokens(t,e),i=r.tokens,a=r.state;if(/comment|string/.test(a))return o;if(i.length&&\"comment.single\"==i[i.length-1].type)return o;t.match();return/(-->|<--|<-|->|{)\\s*$/.test(t)&&(o+=n),o},this.checkOutdent=function(e,t,n){return!!this.$outdent.checkOutdent(t,n)||(\"\\n\"===n||\"\\r\\n\"===n)&&!!/^\\s+/.test(t)},this.autoOutdent=function(e,t,n){if(!this.$outdent.autoOutdent(t,n)){var o=t.getLine(n),r=o.match(/^\\s+/),i=o.lastIndexOf(\".\")+1;if(!r||!n||!i)return 0;t.getLine(n+1);var a=this.getMatching(t,{row:n,column:i});if(!a||a.start.row==n)return 0;i=r[0].length;var s=this.$getIndent(t.getLine(a.start.row));t.replace(new c(n+1,0,n+1,i),s)}},this.getMatching=function(e,t,n){void 0==t&&(t=e.selection.lead),\"object\"==typeof t&&(n=t.column,t=t.row);var o,r=e.getTokenAt(t,n),i=\"keyword.start\",a=\"keyword.end\";if(r){if(r.type==i){(g=new s(e,t,n)).step=g.stepForward}else{if(r.type!=a)return;var g;(g=new s(e,t,n)).step=g.stepBackward}for(;(o=g.step())&&o.type!=i&&o.type!=a;);if(o&&o.type!=r.type){var l=g.getCurrentTokenColumn();t=g.getCurrentTokenRow();return new c(t,l,t,l+o.value.length)}}},this.$id=\"ace/mode/logiql\"}.call(l.prototype),t.Mode=l})),ace.require([\"ace/mode/logiql\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"849d0cb0357a18f361464da559a6aa7e.js","input":"ace.define(\"ace/mode/logiql_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* THIS FILE WAS AUTOGENERATED FROM tool\\LogicBlox.tmbundle\\Syntaxes\\LogicBlox.tmLanguage (UUID: 59bf5022-e261-453f-b1cb-9f9fa0712413) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var LogiQLHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: 'comment.block',\n        regex: '/\\\\*',\n        push: [{\n          token: 'comment.block',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block'\n        }]\n      }, {\n        token: 'comment.single',\n        regex: '//.*'\n      }, {\n        token: 'constant.numeric',\n        regex: '\\\\d+(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?[fd]?'\n      }, {\n        token: 'string',\n        regex: '\"',\n        push: [{\n          token: 'string',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          defaultToken: 'string'\n        }]\n      }, {\n        token: 'constant.language',\n        regex: '\\\\b(true|false)\\\\b'\n      }, {\n        token: 'entity.name.type.logicblox',\n        regex: '`[a-zA-Z_:]+(\\\\d|\\\\a)*\\\\b'\n      }, {\n        token: 'keyword.start',\n        regex: '->',\n        comment: 'Constraint'\n      }, {\n        token: 'keyword.start',\n        regex: '-->',\n        comment: 'Level 1 Constraint'\n      }, {\n        token: 'keyword.start',\n        regex: '<-',\n        comment: 'Rule'\n      }, {\n        token: 'keyword.start',\n        regex: '<--',\n        comment: 'Level 1 Rule'\n      }, {\n        token: 'keyword.end',\n        regex: '\\\\.',\n        comment: 'Terminator'\n      }, {\n        token: 'keyword.other',\n        regex: '!',\n        comment: 'Negation'\n      }, {\n        token: 'keyword.other',\n        regex: ',',\n        comment: 'Conjunction'\n      }, {\n        token: 'keyword.other',\n        regex: ';',\n        comment: 'Disjunction'\n      }, {\n        token: 'keyword.operator',\n        regex: '<=|>=|!=|<|>',\n        comment: 'Equality'\n      }, {\n        token: 'keyword.other',\n        regex: '@',\n        comment: 'Equality'\n      }, {\n        token: 'keyword.operator',\n        regex: '\\\\+|-|\\\\*|/',\n        comment: 'Arithmetic operations'\n      }, {\n        token: 'keyword',\n        regex: '::',\n        comment: 'Colon colon'\n      }, {\n        token: 'support.function',\n        regex: '\\\\b(agg\\\\s*<<)',\n        push: [{\n          include: '$self'\n        }, {\n          token: 'support.function',\n          regex: '>>',\n          next: 'pop'\n        }]\n      }, {\n        token: 'storage.modifier',\n        regex: '\\\\b(lang:[\\\\w:]*)'\n      }, {\n        token: ['storage.type', 'text'],\n        regex: '(export|sealed|clauses|block|alias|alias_all)(\\\\s*\\\\()(?=`)'\n      }, {\n        token: 'entity.name',\n        regex: '[a-zA-Z_][a-zA-Z_0-9:]*(@prev|@init|@final)?(?=(\\\\(|\\\\[))'\n      }, {\n        token: 'variable.parameter',\n        regex: '([a-zA-Z][a-zA-Z_0-9]*|_)\\\\s*(?=(,|\\\\.|<-|->|\\\\)|\\\\]|=))'\n      }]\n    };\n    this.normalizeRules();\n  };\n  oop.inherits(LogiQLHighlightRules, TextHighlightRules);\n  exports.LogiQLHighlightRules = LogiQLHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var Range = require(\"../../range\").Range;\n  var FoldMode = exports.FoldMode = function () {};\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.commentBlock = function (session, row) {\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      range = this.commentBlock(session, row);\n      if (range) return range;\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/logiql\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/logiql_highlight_rules\", \"ace/mode/folding/coffee\", \"ace/token_iterator\", \"ace/range\", \"ace/mode/matching_brace_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var LogiQLHighlightRules = require(\"./logiql_highlight_rules\").LogiQLHighlightRules;\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n  var TokenIterator = require(\"../token_iterator\").TokenIterator;\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var Mode = function () {\n    this.HighlightRules = LogiQLHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n      if (/comment|string/.test(endState)) return indent;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment.single\") return indent;\n      var match = line.match();\n      if (/(-->|<--|<-|->|{)\\s*$/.test(line)) indent += tab;\n      return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n      if (this.$outdent.checkOutdent(line, input)) return true;\n      if (input !== \"\\n\" && input !== \"\\r\\n\") return false;\n      if (!/^\\s+/.test(line)) return false;\n      return true;\n    };\n    this.autoOutdent = function (state, doc, row) {\n      if (this.$outdent.autoOutdent(doc, row)) return;\n      var prevLine = doc.getLine(row);\n      var match = prevLine.match(/^\\s+/);\n      var column = prevLine.lastIndexOf(\".\") + 1;\n      if (!match || !row || !column) return 0;\n      var line = doc.getLine(row + 1);\n      var startRange = this.getMatching(doc, {\n        row: row,\n        column: column\n      });\n      if (!startRange || startRange.start.row == row) return 0;\n      column = match[0].length;\n      var indent = this.$getIndent(doc.getLine(startRange.start.row));\n      doc.replace(new Range(row + 1, 0, row + 1, column), indent);\n    };\n    this.getMatching = function (session, row, column) {\n      if (row == undefined) row = session.selection.lead;\n      if (typeof row == \"object\") {\n        column = row.column;\n        row = row.row;\n      }\n      var startToken = session.getTokenAt(row, column);\n      var KW_START = \"keyword.start\",\n        KW_END = \"keyword.end\";\n      var tok;\n      if (!startToken) return;\n      if (startToken.type == KW_START) {\n        var it = new TokenIterator(session, row, column);\n        it.step = it.stepForward;\n      } else if (startToken.type == KW_END) {\n        var it = new TokenIterator(session, row, column);\n        it.step = it.stepBackward;\n      } else return;\n      while (tok = it.step()) {\n        if (tok.type == KW_START || tok.type == KW_END) break;\n      }\n      if (!tok || tok.type == startToken.type) return;\n      var col = it.getCurrentTokenColumn();\n      var row = it.getCurrentTokenRow();\n      return new Range(row, col, row, col + tok.value.length);\n    };\n    this.$id = \"ace/mode/logiql\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/logiql\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}