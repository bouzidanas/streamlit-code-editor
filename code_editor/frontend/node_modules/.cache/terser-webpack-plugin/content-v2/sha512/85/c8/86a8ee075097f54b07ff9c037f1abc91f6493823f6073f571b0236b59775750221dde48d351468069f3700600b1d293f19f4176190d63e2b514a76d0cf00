{"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var i=e(\"../lib/oop\"),o=e(\"./text_highlight_rules\").TextHighlightRules,r=function(){this.$rules={start:[{token:\"comment.doc.tag\",regex:\"@\\\\w+(?=\\\\s|$)\"},r.getTagRule(),{defaultToken:\"comment.doc.body\",caseInsensitive:!0}]}};i.inherits(r,o),r.getTagRule=function(e){return{token:\"comment.doc.tag.storage.type\",regex:\"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"}},r.getStartRule=function(e){return{token:\"comment.doc\",regex:/\\/\\*\\*(?!\\/)/,next:e}},r.getEndRule=function(e){return{token:\"comment.doc\",regex:\"\\\\*\\\\/\",next:e}},t.DocCommentHighlightRules=r})),ace.define(\"ace/mode/swift_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var i=e(\"../lib/oop\"),o=e(\"../lib/lang\"),r=e(\"./doc_comment_highlight_rules\").DocCommentHighlightRules,a=e(\"./text_highlight_rules\").TextHighlightRules,s=function(){var e=this.createKeywordMapper({\"variable.language\":\"\",keyword:\"__COLUMN__|__FILE__|__FUNCTION__|__LINE__|as|associativity|break|case|class|continue|default|deinit|didSet|do|dynamicType|else|enum|extension|fallthrough|for|func|get|if|import|in|infix|init|inout|is|left|let|let|mutating|new|none|nonmutating|operator|override|postfix|precedence|prefix|protocol|return|right|safe|Self|self|set|struct|subscript|switch|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|convenience|dynamic|final|infix|lazy|mutating|nonmutating|optional|override|postfix|prefix|required|static|guard|defer\",\"storage.type\":\"bool|double|Double|extension|float|Float|int|Int|open|internal|fileprivate|private|public|string|String\",\"constant.language\":\"false|Infinity|NaN|nil|no|null|null|off|on|super|this|true|undefined|yes\",\"support.function\":\"\"},\"identifier\");function t(e,t){var n=t.nestable||t.interpolation,i=t.interpolation&&t.interpolation.nextState||\"start\",r={regex:e+(t.multiline?\"\":\"(?=.)\"),token:\"string.start\"},a=[t.escape&&{regex:t.escape,token:\"character.escape\"},t.interpolation&&{token:\"paren.quasi.start\",regex:o.escapeRegExp(t.interpolation.lead+t.interpolation.open),push:i},t.error&&{regex:t.error,token:\"error.invalid\"},{regex:e+(t.multiline?\"\":\"|$\"),token:\"string.end\",next:n?\"pop\":\"start\"},{defaultToken:\"string\"}].filter(Boolean);if(n?r.push=a:r.next=a,!t.interpolation)return r;var s=t.interpolation.open,l=t.interpolation.close;return[{regex:\"[\"+o.escapeRegExp(s+l)+\"]\",onMatch:function(e,t,n){return this.next=e==s?this.nextState:\"\",e==s&&n.length?(n.unshift(\"start\",t),\"paren\"):e==l&&n.length&&(n.shift(),this.next=n.shift(),-1!=this.next.indexOf(\"string\"))?\"paren.quasi.end\":e==s?\"paren.lparen\":\"paren.rparen\"},nextState:i},r]}this.$rules={start:[t('\"\"\"',{escape:/\\\\(?:[0\\\\tnr\"']|u{[a-fA-F1-9]{0,8}})/,interpolation:{lead:\"\\\\\",open:\"(\",close:\")\"},error:/\\\\./,multiline:!0}),t('\"',{escape:/\\\\(?:[0\\\\tnr\"']|u{[a-fA-F1-9]{0,8}})/,interpolation:{lead:\"\\\\\",open:\"(\",close:\")\"},error:/\\\\./,multiline:!1}),[{token:\"comment\",regex:/\\/\\//,next:[r.getTagRule(),{token:\"comment\",regex:\"$|^\",next:\"start\"},{defaultToken:\"comment\",caseInsensitive:!0}]},r.getStartRule(\"doc-start\"),{token:\"comment.start\",regex:/\\/\\*/,stateName:\"nested_comment\",push:[r.getTagRule(),{token:\"comment.start\",regex:/\\/\\*/,push:\"nested_comment\"},{token:\"comment.end\",regex:\"\\\\*\\\\/\",next:\"pop\"},{defaultToken:\"comment\",caseInsensitive:!0}]}],{regex:/@[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,token:\"variable.parameter\"},{regex:/[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,token:e},{token:\"constant.numeric\",regex:/[+-]?(?:0(?:b[01]+|o[0-7]+|x[\\da-fA-F])|\\d+(?:(?:\\.\\d*)?(?:[PpEe][+-]?\\d+)?)\\b)/},{token:\"keyword.operator\",regex:/--|\\+\\+|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?:|[!$%&*+\\-~\\/^]=?/,next:\"start\"},{token:\"punctuation.operator\",regex:/[?:,;.]/,next:\"start\"},{token:\"paren.lparen\",regex:/[\\[({]/,next:\"start\"},{token:\"paren.rparen\",regex:/[\\])}]/}]},this.embedRules(r,\"doc-\",[r.getEndRule(\"start\")]),this.normalizeRules()};i.inherits(s,a),t.HighlightRules=s,t.SwiftHighlightRules=s})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var i=e(\"../../lib/oop\"),o=e(\"../../range\").Range,r=e(\"./fold_mode\").FoldMode,a=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};i.inherits(a,r),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var i=e.getLine(n);if(this.singleLineBlockCommentRe.test(i)&&!this.startRegionRe.test(i)&&!this.tripleStarBlockCommentRe.test(i))return\"\";var o=this._getFoldWidgetBase(e,t,n);return!o&&this.startRegionRe.test(i)?\"start\":o},this.getFoldWidgetRange=function(e,t,n,i){var o,r=e.getLine(n);if(this.startRegionRe.test(r))return this.getCommentRegionBlock(e,r,n);if(o=r.match(this.foldingStartMarker)){var a=o.index;if(o[1])return this.openingBracketBlock(e,o[1],n,a);var s=e.getCommentFoldRange(n,a+o[0].length,1);return s&&!s.isMultiLine()&&(i?s=this.getSectionRange(e,n):\"all\"!=t&&(s=null)),s}if(\"markbegin\"!==t&&(o=r.match(this.foldingStopMarker))){a=o.index+o[0].length;return o[1]?this.closingBracketBlock(e,o[1],n,a):e.getCommentFoldRange(n,a,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),i=n.search(/\\S/),r=t,a=n.length,s=t+=1,l=e.getLength();++t<l;){var g=(n=e.getLine(t)).search(/\\S/);if(-1!==g){if(i>g)break;var c=this.getFoldWidgetRange(e,\"all\",t);if(c){if(c.start.row<=r)break;if(c.isMultiLine())t=c.end.row;else if(i==g)break}s=t}}return new o(r,a,s,e.getLine(s).length)},this.getCommentRegionBlock=function(e,t,n){for(var i=t.search(/\\s*$/),r=e.getLength(),a=n,s=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,l=1;++n<r;){t=e.getLine(n);var g=s.exec(t);if(g&&(g[1]?l--:l++,!l))break}if(n>a)return new o(a,i,n,t.length)}}.call(a.prototype)})),ace.define(\"ace/mode/swift\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/swift_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var i=e(\"../lib/oop\"),o=e(\"./text\").Mode,r=e(\"./swift_highlight_rules\").HighlightRules,a=e(\"./folding/cstyle\").FoldMode,s=function(){this.HighlightRules=r,this.foldingRules=new a,this.$behaviour=this.$defaultBehaviour};i.inherits(s,o),function(){this.lineCommentStart=\"//\",this.blockComment={start:\"/*\",end:\"*/\",nestable:!0},this.$id=\"ace/mode/swift\"}.call(s.prototype),t.Mode=s})),ace.require([\"ace/mode/swift\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"fd1c57547ff93f70def41faa4fe53d05.js","input":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@\\\\w+(?=\\\\s|$)\"\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc.body\",\n        caseInsensitive: true\n      }]\n    };\n  };\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: /\\/\\*\\*(?!\\/)/,\n      next: start\n    };\n  };\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/swift_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var lang = require(\"../lib/lang\");\n  var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var SwiftHighlightRules = function () {\n    var keywordMapper = this.createKeywordMapper({\n      \"variable.language\": \"\",\n      \"keyword\": \"__COLUMN__|__FILE__|__FUNCTION__|__LINE__\" + \"|as|associativity|break|case|class|continue|default|deinit|didSet\" + \"|do|dynamicType|else|enum|extension|fallthrough|for|func|get|if|import\" + \"|in|infix|init|inout|is|left|let|let|mutating|new|none|nonmutating\" + \"|operator|override|postfix|precedence|prefix|protocol|return|right\" + \"|safe|Self|self|set|struct|subscript|switch|Type|typealias\" + \"|unowned|unsafe|var|weak|where|while|willSet\" + \"|convenience|dynamic|final|infix|lazy|mutating|nonmutating|optional|override|postfix\" + \"|prefix|required|static|guard|defer\",\n      \"storage.type\": \"bool|double|Double\" + \"|extension|float|Float|int|Int|open|internal|fileprivate|private|public|string|String\",\n      \"constant.language\": \"false|Infinity|NaN|nil|no|null|null|off|on|super|this|true|undefined|yes\",\n      \"support.function\": \"\"\n    }, \"identifier\");\n    function string(start, options) {\n      var nestable = options.nestable || options.interpolation;\n      var interpStart = options.interpolation && options.interpolation.nextState || \"start\";\n      var mainRule = {\n        regex: start + (options.multiline ? \"\" : \"(?=.)\"),\n        token: \"string.start\"\n      };\n      var nextState = [options.escape && {\n        regex: options.escape,\n        token: \"character.escape\"\n      }, options.interpolation && {\n        token: \"paren.quasi.start\",\n        regex: lang.escapeRegExp(options.interpolation.lead + options.interpolation.open),\n        push: interpStart\n      }, options.error && {\n        regex: options.error,\n        token: \"error.invalid\"\n      }, {\n        regex: start + (options.multiline ? \"\" : \"|$\"),\n        token: \"string.end\",\n        next: nestable ? \"pop\" : \"start\"\n      }, {\n        defaultToken: \"string\"\n      }].filter(Boolean);\n      if (nestable) mainRule.push = nextState;else mainRule.next = nextState;\n      if (!options.interpolation) return mainRule;\n      var open = options.interpolation.open;\n      var close = options.interpolation.close;\n      var counter = {\n        regex: \"[\" + lang.escapeRegExp(open + close) + \"]\",\n        onMatch: function (val, state, stack) {\n          this.next = val == open ? this.nextState : \"\";\n          if (val == open && stack.length) {\n            stack.unshift(\"start\", state);\n            return \"paren\";\n          }\n          if (val == close && stack.length) {\n            stack.shift();\n            this.next = stack.shift();\n            if (this.next.indexOf(\"string\") != -1) return \"paren.quasi.end\";\n          }\n          return val == open ? \"paren.lparen\" : \"paren.rparen\";\n        },\n        nextState: interpStart\n      };\n      return [counter, mainRule];\n    }\n    function comments() {\n      return [{\n        token: \"comment\",\n        regex: /\\/\\//,\n        next: [DocCommentHighlightRules.getTagRule(), {\n          token: \"comment\",\n          regex: \"$|^\",\n          next: \"start\"\n        }, {\n          defaultToken: \"comment\",\n          caseInsensitive: true\n        }]\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment.start\",\n        regex: /\\/\\*/,\n        stateName: \"nested_comment\",\n        push: [DocCommentHighlightRules.getTagRule(), {\n          token: \"comment.start\",\n          regex: /\\/\\*/,\n          push: \"nested_comment\"\n        }, {\n          token: \"comment.end\",\n          regex: \"\\\\*\\\\/\",\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment\",\n          caseInsensitive: true\n        }]\n      }];\n    }\n    this.$rules = {\n      start: [string('\"\"\"', {\n        escape: /\\\\(?:[0\\\\tnr\"']|u{[a-fA-F1-9]{0,8}})/,\n        interpolation: {\n          lead: \"\\\\\",\n          open: \"(\",\n          close: \")\"\n        },\n        error: /\\\\./,\n        multiline: true\n      }), string('\"', {\n        escape: /\\\\(?:[0\\\\tnr\"']|u{[a-fA-F1-9]{0,8}})/,\n        interpolation: {\n          lead: \"\\\\\",\n          open: \"(\",\n          close: \")\"\n        },\n        error: /\\\\./,\n        multiline: false\n      }), comments(), {\n        regex: /@[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n        token: \"variable.parameter\"\n      }, {\n        regex: /[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n        token: keywordMapper\n      }, {\n        token: \"constant.numeric\",\n        regex: /[+-]?(?:0(?:b[01]+|o[0-7]+|x[\\da-fA-F])|\\d+(?:(?:\\.\\d*)?(?:[PpEe][+-]?\\d+)?)\\b)/\n      }, {\n        token: \"keyword.operator\",\n        regex: /--|\\+\\+|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?:|[!$%&*+\\-~\\/^]=?/,\n        next: \"start\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[?:,;.]/,\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[({]/,\n        next: \"start\"\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\])}]/\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n  oop.inherits(SwiftHighlightRules, TextHighlightRules);\n  exports.HighlightRules = SwiftHighlightRules;\n  exports.SwiftHighlightRules = SwiftHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/swift\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/swift_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var HighlightRules = require(\"./swift_highlight_rules\").HighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\",\n      nestable: true\n    };\n    this.$id = \"ace/mode/swift\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/swift\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}