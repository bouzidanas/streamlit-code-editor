{"code":"ace.define(\"ace/mode/alda_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),a=e(\"./text_highlight_rules\").TextHighlightRules,i=function(){this.$rules={pitch:[{token:\"variable.parameter.operator.pitch.alda\",regex:/(?:[+\\-]+|\\=)/},{token:\"\",regex:\"\",next:\"timing\"}],timing:[{token:\"string.quoted.operator.timing.alda\",regex:/\\d+(?:s|ms)?/},{token:\"\",regex:\"\",next:\"start\"}],start:[{token:[\"constant.language.instrument.alda\",\"constant.language.instrument.alda\",\"meta.part.call.alda\",\"storage.type.nickname.alda\",\"meta.part.call.alda\"],regex:/^([a-zA-Z]{2}[\\w\\-+\\'()]*)((?:\\s*\\/\\s*[a-zA-Z]{2}[\\w\\-+\\'()]*)*)(?:(\\s*)(\\\"[a-zA-Z]{2}[\\w\\-+\\'()]*\\\"))?(\\s*:)/},{token:[\"text\",\"entity.other.inherited-class.voice.alda\",\"text\"],regex:/^(\\s*)(V\\d+)(:)/},{token:\"comment.line.number-sign.alda\",regex:/#.*$/},{token:\"entity.name.function.pipe.measure.alda\",regex:/\\|/},{token:\"comment.block.inline.alda\",regex:/\\(comment\\b/,push:[{token:\"comment.block.inline.alda\",regex:/\\)/,next:\"pop\"},{defaultToken:\"comment.block.inline.alda\"}]},{token:\"entity.name.function.marker.alda\",regex:/%[a-zA-Z]{2}[\\w\\-+\\'()]*/},{token:\"entity.name.function.at-marker.alda\",regex:/@[a-zA-Z]{2}[\\w\\-+\\'()]*/},{token:\"keyword.operator.octave-change.alda\",regex:/\\bo\\d+\\b/},{token:\"keyword.operator.octave-shift.alda\",regex:/[><]/},{token:\"keyword.operator.repeat.alda\",regex:/\\*\\s*\\d+/},{token:\"string.quoted.operator.timing.alda\",regex:/[.]|r\\d*(?:s|ms)?/},{token:\"text\",regex:/([cdefgab])/,next:\"pitch\"},{token:\"string.quoted.operator.timing.alda\",regex:/~/,next:\"timing\"},{token:\"punctuation.section.embedded.cram.alda\",regex:/\\}/,next:\"timing\"},{token:\"constant.numeric.subchord.alda\",regex:/\\//},{todo:{token:\"punctuation.section.embedded.cram.alda\",regex:/\\{/,push:[{token:\"punctuation.section.embedded.cram.alda\",regex:/\\}/,next:\"pop\"},{include:\"$self\"}]}},{todo:{token:\"keyword.control.sequence.alda\",regex:/\\[/,push:[{token:\"keyword.control.sequence.alda\",regex:/\\]/,next:\"pop\"},{include:\"$self\"}]}},{token:\"meta.inline.clojure.alda\",regex:/\\(/,push:[{token:\"meta.inline.clojure.alda\",regex:/\\)/,next:\"pop\"},{include:\"source.clojure\"},{defaultToken:\"meta.inline.clojure.alda\"}]}]},this.normalizeRules()};i.metaData={scopeName:\"source.alda\",fileTypes:[\"alda\"],name:\"Alda\"},o.inherits(i,a),t.AldaHighlightRules=i})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var o=e(\"../../lib/oop\"),a=e(\"../../range\").Range,i=e(\"./fold_mode\").FoldMode,r=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};o.inherits(r,i),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var o=e.getLine(n);if(this.singleLineBlockCommentRe.test(o)&&!this.startRegionRe.test(o)&&!this.tripleStarBlockCommentRe.test(o))return\"\";var a=this._getFoldWidgetBase(e,t,n);return!a&&this.startRegionRe.test(o)?\"start\":a},this.getFoldWidgetRange=function(e,t,n,o){var a,i=e.getLine(n);if(this.startRegionRe.test(i))return this.getCommentRegionBlock(e,i,n);if(a=i.match(this.foldingStartMarker)){var r=a.index;if(a[1])return this.openingBracketBlock(e,a[1],n,r);var l=e.getCommentFoldRange(n,r+a[0].length,1);return l&&!l.isMultiLine()&&(o?l=this.getSectionRange(e,n):\"all\"!=t&&(l=null)),l}if(\"markbegin\"!==t&&(a=i.match(this.foldingStopMarker))){r=a.index+a[0].length;return a[1]?this.closingBracketBlock(e,a[1],n,r):e.getCommentFoldRange(n,r,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),o=n.search(/\\S/),i=t,r=n.length,l=t+=1,s=e.getLength();++t<s;){var d=(n=e.getLine(t)).search(/\\S/);if(-1!==d){if(o>d)break;var g=this.getFoldWidgetRange(e,\"all\",t);if(g){if(g.start.row<=i)break;if(g.isMultiLine())t=g.end.row;else if(o==d)break}l=t}}return new a(i,r,l,e.getLine(l).length)},this.getCommentRegionBlock=function(e,t,n){for(var o=t.search(/\\s*$/),i=e.getLength(),r=n,l=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,s=1;++n<i;){t=e.getLine(n);var d=l.exec(t);if(d&&(d[1]?s--:s++,!s))break}if(n>r)return new a(r,o,n,t.length)}}.call(r.prototype)})),ace.define(\"ace/mode/alda\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/alda_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),a=e(\"./text\").Mode,i=e(\"./alda_highlight_rules\").AldaHighlightRules,r=e(\"./folding/cstyle\").FoldMode,l=function(){this.HighlightRules=i,this.foldingRules=new r};o.inherits(l,a),function(){this.$id=\"ace/mode/alda\"}.call(l.prototype),t.Mode=l})),ace.require([\"ace/mode/alda\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"74b384b34f6390c175d50bb0e80c5431.js","input":"ace.define(\"ace/mode/alda_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from ../../src/alda.JSON-tmLanguage (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var AldaHighlightRules = function () {\n    this.$rules = {\n      pitch: [{\n        token: \"variable.parameter.operator.pitch.alda\",\n        regex: /(?:[+\\-]+|\\=)/\n      }, {\n        token: \"\",\n        regex: \"\",\n        next: \"timing\"\n      }],\n      timing: [{\n        token: \"string.quoted.operator.timing.alda\",\n        regex: /\\d+(?:s|ms)?/\n      }, {\n        token: \"\",\n        regex: \"\",\n        next: \"start\"\n      }],\n      start: [{\n        token: [\"constant.language.instrument.alda\", \"constant.language.instrument.alda\", \"meta.part.call.alda\", \"storage.type.nickname.alda\", \"meta.part.call.alda\"],\n        regex: /^([a-zA-Z]{2}[\\w\\-+\\'()]*)((?:\\s*\\/\\s*[a-zA-Z]{2}[\\w\\-+\\'()]*)*)(?:(\\s*)(\\\"[a-zA-Z]{2}[\\w\\-+\\'()]*\\\"))?(\\s*:)/\n      }, {\n        token: [\"text\", \"entity.other.inherited-class.voice.alda\", \"text\"],\n        regex: /^(\\s*)(V\\d+)(:)/\n      }, {\n        token: \"comment.line.number-sign.alda\",\n        regex: /#.*$/\n      }, {\n        token: \"entity.name.function.pipe.measure.alda\",\n        regex: /\\|/\n      }, {\n        token: \"comment.block.inline.alda\",\n        regex: /\\(comment\\b/,\n        push: [{\n          token: \"comment.block.inline.alda\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.block.inline.alda\"\n        }]\n      }, {\n        token: \"entity.name.function.marker.alda\",\n        regex: /%[a-zA-Z]{2}[\\w\\-+\\'()]*/\n      }, {\n        token: \"entity.name.function.at-marker.alda\",\n        regex: /@[a-zA-Z]{2}[\\w\\-+\\'()]*/\n      }, {\n        token: \"keyword.operator.octave-change.alda\",\n        regex: /\\bo\\d+\\b/\n      }, {\n        token: \"keyword.operator.octave-shift.alda\",\n        regex: /[><]/\n      }, {\n        token: \"keyword.operator.repeat.alda\",\n        regex: /\\*\\s*\\d+/\n      }, {\n        token: \"string.quoted.operator.timing.alda\",\n        regex: /[.]|r\\d*(?:s|ms)?/\n      }, {\n        token: \"text\",\n        regex: /([cdefgab])/,\n        next: \"pitch\"\n      }, {\n        token: \"string.quoted.operator.timing.alda\",\n        regex: /~/,\n        next: \"timing\"\n      }, {\n        token: \"punctuation.section.embedded.cram.alda\",\n        regex: /\\}/,\n        next: \"timing\"\n      }, {\n        token: \"constant.numeric.subchord.alda\",\n        regex: /\\//\n      }, {\n        todo: {\n          token: \"punctuation.section.embedded.cram.alda\",\n          regex: /\\{/,\n          push: [{\n            token: \"punctuation.section.embedded.cram.alda\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }]\n        }\n      }, {\n        todo: {\n          token: \"keyword.control.sequence.alda\",\n          regex: /\\[/,\n          push: [{\n            token: \"keyword.control.sequence.alda\",\n            regex: /\\]/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }]\n        }\n      }, {\n        token: \"meta.inline.clojure.alda\",\n        regex: /\\(/,\n        push: [{\n          token: \"meta.inline.clojure.alda\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"source.clojure\"\n        }, {\n          defaultToken: \"meta.inline.clojure.alda\"\n        }]\n      }]\n    };\n    this.normalizeRules();\n  };\n  AldaHighlightRules.metaData = {\n    scopeName: \"source.alda\",\n    fileTypes: [\"alda\"],\n    name: \"Alda\"\n  };\n  oop.inherits(AldaHighlightRules, TextHighlightRules);\n  exports.AldaHighlightRules = AldaHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/alda\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/alda_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var AldaHighlightRules = require(\"./alda_highlight_rules\").AldaHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = AldaHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/alda\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/alda\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}