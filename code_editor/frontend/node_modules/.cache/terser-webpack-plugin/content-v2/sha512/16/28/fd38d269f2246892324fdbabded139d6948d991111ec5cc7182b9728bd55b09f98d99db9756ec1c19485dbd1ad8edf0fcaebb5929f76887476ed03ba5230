{"code":"ace.define(\"ace/snippets\",[\"require\",\"exports\",\"module\",\"ace/lib/dom\",\"ace/lib/oop\",\"ace/lib/event_emitter\",\"ace/lib/lang\",\"ace/range\",\"ace/range_list\",\"ace/keyboard/hash_handler\",\"ace/tokenizer\",\"ace/clipboard\",\"ace/editor\"],(function(e,t,n){\"use strict\";var i=e(\"./lib/dom\"),r=e(\"./lib/oop\"),o=e(\"./lib/event_emitter\").EventEmitter,s=e(\"./lib/lang\"),a=e(\"./range\").Range,c=e(\"./range_list\").RangeList,p=e(\"./keyboard/hash_handler\").HashHandler,u=e(\"./tokenizer\").Tokenizer,h=e(\"./clipboard\"),l={CURRENT_WORD:function(e){return e.session.getTextRange(e.session.getWordRange())},SELECTION:function(e,t,n){var i=e.session.getTextRange();return n?i.replace(/\\n\\r?([ \\t]*\\S)/g,\"\\n\"+n+\"$1\"):i},CURRENT_LINE:function(e){return e.session.getLine(e.getCursorPosition().row)},PREV_LINE:function(e){return e.session.getLine(e.getCursorPosition().row-1)},LINE_INDEX:function(e){return e.getCursorPosition().row},LINE_NUMBER:function(e){return e.getCursorPosition().row+1},SOFT_TABS:function(e){return e.session.getUseSoftTabs()?\"YES\":\"NO\"},TAB_SIZE:function(e){return e.session.getTabSize()},CLIPBOARD:function(e){return h.getText&&h.getText()},FILENAME:function(e){return/[^/\\\\]*$/.exec(this.FILEPATH(e))[0]},FILENAME_BASE:function(e){return/[^/\\\\]*$/.exec(this.FILEPATH(e))[0].replace(/\\.[^.]*$/,\"\")},DIRECTORY:function(e){return this.FILEPATH(e).replace(/[^/\\\\]*$/,\"\")},FILEPATH:function(e){return\"/not implemented.txt\"},WORKSPACE_NAME:function(){return\"Unknown\"},FULLNAME:function(){return\"Unknown\"},BLOCK_COMMENT_START:function(e){var t=e.session.$mode||{};return t.blockComment&&t.blockComment.start||\"\"},BLOCK_COMMENT_END:function(e){var t=e.session.$mode||{};return t.blockComment&&t.blockComment.end||\"\"},LINE_COMMENT:function(e){return(e.session.$mode||{}).lineCommentStart||\"\"},CURRENT_YEAR:d.bind(null,{year:\"numeric\"}),CURRENT_YEAR_SHORT:d.bind(null,{year:\"2-digit\"}),CURRENT_MONTH:d.bind(null,{month:\"numeric\"}),CURRENT_MONTH_NAME:d.bind(null,{month:\"long\"}),CURRENT_MONTH_NAME_SHORT:d.bind(null,{month:\"short\"}),CURRENT_DATE:d.bind(null,{day:\"2-digit\"}),CURRENT_DAY_NAME:d.bind(null,{weekday:\"long\"}),CURRENT_DAY_NAME_SHORT:d.bind(null,{weekday:\"short\"}),CURRENT_HOUR:d.bind(null,{hour:\"2-digit\",hour12:!1}),CURRENT_MINUTE:d.bind(null,{minute:\"2-digit\"}),CURRENT_SECOND:d.bind(null,{second:\"2-digit\"})};function d(e){var t=(new Date).toLocaleString(\"en-us\",e);return 1==t.length?\"0\"+t:t}l.SELECTED_TEXT=l.SELECTION;var g=function(){function e(){this.snippetMap={},this.snippetNameMap={},this.variables=l}return e.prototype.getTokenizer=function(){return e.$tokenizer||this.createTokenizer()},e.prototype.createTokenizer=function(){function t(e){return e=e.substr(1),/^\\d+$/.test(e)?[{tabstopId:parseInt(e,10)}]:[{text:e}]}function n(e){return\"(?:[^\\\\\\\\\"+e+\"]|\\\\\\\\.)\"}var i={regex:\"/(\"+n(\"/\")+\"+)/\",onMatch:function(e,t,n){var i=n[0];return i.fmtString=!0,i.guard=e.slice(1,-1),i.flag=\"\",\"\"},next:\"formatString\"};return e.$tokenizer=new u({start:[{regex:/\\\\./,onMatch:function(e,t,n){var i=e[1];return(\"}\"==i&&n.length||-1!=\"`$\\\\\".indexOf(i))&&(e=i),[e]}},{regex:/}/,onMatch:function(e,t,n){return[n.length?n.shift():e]}},{regex:/\\$(?:\\d+|\\w+)/,onMatch:t},{regex:/\\$\\{[\\dA-Z_a-z]+/,onMatch:function(e,n,i){var r=t(e.substr(1));return i.unshift(r[0]),r},next:\"snippetVar\"},{regex:/\\n/,token:\"newline\",merge:!1}],snippetVar:[{regex:\"\\\\|\"+n(\"\\\\|\")+\"*\\\\|\",onMatch:function(e,t,n){var i=e.slice(1,-1).replace(/\\\\[,|\\\\]|,/g,(function(e){return 2==e.length?e[1]:\"\\0\"})).split(\"\\0\").map((function(e){return{value:e}}));return n[0].choices=i,[i[0]]},next:\"start\"},i,{regex:\"([^:}\\\\\\\\]|\\\\\\\\.)*:?\",token:\"\",next:\"start\"}],formatString:[{regex:/:/,onMatch:function(e,t,n){return n.length&&n[0].expectElse?(n[0].expectElse=!1,n[0].ifEnd={elseEnd:n[0]},[n[0].ifEnd]):\":\"}},{regex:/\\\\./,onMatch:function(e,t,n){var i=e[1];return\"}\"==i&&n.length||-1!=\"`$\\\\\".indexOf(i)?e=i:\"n\"==i?e=\"\\n\":\"t\"==i?e=\"\\t\":-1!=\"ulULE\".indexOf(i)&&(e={changeCase:i,local:i>\"a\"}),[e]}},{regex:\"/\\\\w*}\",onMatch:function(e,t,n){var i=n.shift();return i&&(i.flag=e.slice(1,-1)),this.next=i&&i.tabstopId?\"start\":\"\",[i||e]},next:\"start\"},{regex:/\\$(?:\\d+|\\w+)/,onMatch:function(e,t,n){return[{text:e.slice(1)}]}},{regex:/\\${\\w+/,onMatch:function(e,t,n){var i={text:e.slice(2)};return n.unshift(i),[i]},next:\"formatStringVar\"},{regex:/\\n/,token:\"newline\",merge:!1},{regex:/}/,onMatch:function(e,t,n){var i=n.shift();return this.next=i&&i.tabstopId?\"start\":\"\",[i||e]},next:\"start\"}],formatStringVar:[{regex:/:\\/\\w+}/,onMatch:function(e,t,n){return n[0].formatFunction=e.slice(2,-1),[n.shift()]},next:\"formatString\"},i,{regex:/:[\\?\\-+]?/,onMatch:function(e,t,n){\"+\"==e[1]&&(n[0].ifEnd=n[0]),\"?\"==e[1]&&(n[0].expectElse=!0)},next:\"formatString\"},{regex:\"([^:}\\\\\\\\]|\\\\\\\\.)*:?\",token:\"\",next:\"formatString\"}]}),e.$tokenizer},e.prototype.tokenizeTmSnippet=function(e,t){return this.getTokenizer().getLineTokens(e,t).tokens.map((function(e){return e.value||e}))},e.prototype.getVariableValue=function(e,t,n){if(/^\\d+$/.test(t))return(this.variables.__||{})[t]||\"\";if(/^[A-Z]\\d+$/.test(t))return(this.variables[t[0]+\"__\"]||{})[t.substr(1)]||\"\";if(t=t.replace(/^TM_/,\"\"),!this.variables.hasOwnProperty(t))return\"\";var i=this.variables[t];return\"function\"==typeof i&&(i=this.variables[t](e,t,n)),null==i?\"\":i},e.prototype.tmStrFormat=function(e,t,n){if(!t.fmt)return e;var i=t.flag||\"\",r=t.guard;r=new RegExp(r,i.replace(/[^gim]/g,\"\"));var o=\"string\"==typeof t.fmt?this.tokenizeTmSnippet(t.fmt,\"formatString\"):t.fmt,s=this,a=e.replace(r,(function(){var e=s.variables.__;s.variables.__=[].slice.call(arguments);for(var t=s.resolveVariables(o,n),i=\"E\",r=0;r<t.length;r++){var a=t[r];if(\"object\"==typeof a)if(t[r]=\"\",a.changeCase&&a.local){var c=t[r+1];c&&\"string\"==typeof c&&(\"u\"==a.changeCase?t[r]=c[0].toUpperCase():t[r]=c[0].toLowerCase(),t[r+1]=c.substr(1))}else a.changeCase&&(i=a.changeCase);else\"U\"==i?t[r]=a.toUpperCase():\"L\"==i&&(t[r]=a.toLowerCase())}return s.variables.__=e,t.join(\"\")}));return a},e.prototype.tmFormatFunction=function(e,t,n){return\"upcase\"==t.formatFunction?e.toUpperCase():\"downcase\"==t.formatFunction?e.toLowerCase():e},e.prototype.resolveVariables=function(e,t){for(var n=[],i=\"\",r=!0,o=0;o<e.length;o++){var s=e[o];if(\"string\"!=typeof s){if(s){if(r=!1,s.fmtString){var a=e.indexOf(s,o+1);-1==a&&(a=e.length),s.fmt=e.slice(o+1,a),o=a}if(s.text){var c=this.getVariableValue(t,s.text,i)+\"\";s.fmtString&&(c=this.tmStrFormat(c,s,t)),s.formatFunction&&(c=this.tmFormatFunction(c,s,t)),c&&!s.ifEnd?(n.push(c),p(s)):!c&&s.ifEnd&&p(s.ifEnd)}else s.elseEnd?p(s.elseEnd):(null!=s.tabstopId||null!=s.changeCase)&&n.push(s)}}else n.push(s),\"\\n\"==s?(r=!0,i=\"\"):r&&(i=/^\\t*/.exec(s)[0],r=/\\S/.test(s))}function p(t){var n=e.indexOf(t,o+1);-1!=n&&(o=n)}return n},e.prototype.getDisplayTextForSnippet=function(e,t){return f.call(this,e,t).text},e.prototype.insertSnippetForSelection=function(e,t,n){void 0===n&&(n={});var i=f.call(this,e,t,n),r=e.getSelectionRange(),o=e.session.replace(r,i.text),s=new m(e),a=e.inVirtualSelectionMode&&e.selection.index;s.addTabstops(i.tabstops,r.start,o,a)},e.prototype.insertSnippet=function(e,t,n){void 0===n&&(n={});var i=this;if(e.inVirtualSelectionMode)return i.insertSnippetForSelection(e,t,n);e.forEachSelection((function(){i.insertSnippetForSelection(e,t,n)}),null,{keepOrder:!0}),e.tabstopManager&&e.tabstopManager.tabNext()},e.prototype.$getScope=function(e){var t=e.session.$mode.$id||\"\";if(\"html\"===(t=t.split(\"/\").pop())||\"php\"===t){\"php\"!==t||e.session.$mode.inlinePhp||(t=\"html\");var n=e.getCursorPosition(),i=e.session.getState(n.row);\"object\"===typeof i&&(i=i[0]),i.substring&&(\"js-\"==i.substring(0,3)?t=\"javascript\":\"css-\"==i.substring(0,4)?t=\"css\":\"php-\"==i.substring(0,4)&&(t=\"php\"))}return t},e.prototype.getActiveScopes=function(e){var t=this.$getScope(e),n=[t],i=this.snippetMap;return i[t]&&i[t].includeScopes&&n.push.apply(n,i[t].includeScopes),n.push(\"_\"),n},e.prototype.expandWithTab=function(e,t){var n=this,i=e.forEachSelection((function(){return n.expandSnippetForSelection(e,t)}),null,{keepOrder:!0});return i&&e.tabstopManager&&e.tabstopManager.tabNext(),i},e.prototype.expandSnippetForSelection=function(e,t){var n,i=e.getCursorPosition(),r=e.session.getLine(i.row),o=r.substring(0,i.column),s=r.substr(i.column),a=this.snippetMap;return this.getActiveScopes(e).some((function(e){var t=a[e];return t&&(n=this.findMatchingSnippet(t,o,s)),!!n}),this),!!n&&(t&&t.dryRun||(e.session.doc.removeInLine(i.row,i.column-n.replaceBefore.length,i.column+n.replaceAfter.length),this.variables.M__=n.matchBefore,this.variables.T__=n.matchAfter,this.insertSnippetForSelection(e,n.content),this.variables.M__=this.variables.T__=null),!0)},e.prototype.findMatchingSnippet=function(e,t,n){for(var i=e.length;i--;){var r=e[i];if((!r.startRe||r.startRe.test(t))&&((!r.endRe||r.endRe.test(n))&&(r.startRe||r.endRe)))return r.matchBefore=r.startRe?r.startRe.exec(t):[\"\"],r.matchAfter=r.endRe?r.endRe.exec(n):[\"\"],r.replaceBefore=r.triggerRe?r.triggerRe.exec(t)[0]:\"\",r.replaceAfter=r.endTriggerRe?r.endTriggerRe.exec(n)[0]:\"\",r}},e.prototype.register=function(e,t){var n=this.snippetMap,i=this.snippetNameMap,r=this;function o(e){return e&&!/^\\^?\\(.*\\)\\$?$|^\\\\b$/.test(e)&&(e=\"(?:\"+e+\")\"),e||\"\"}function a(e,t,n){return e=o(e),t=o(t),n?(e=t+e)&&\"$\"!=e[e.length-1]&&(e+=\"$\"):(e+=t)&&\"^\"!=e[0]&&(e=\"^\"+e),new RegExp(e)}function c(e){e.scope||(e.scope=t||\"_\"),t=e.scope,n[t]||(n[t]=[],i[t]={});var o=i[t];if(e.name){var c=o[e.name];c&&r.unregister(c),o[e.name]=e}n[t].push(e),e.prefix&&(e.tabTrigger=e.prefix),!e.content&&e.body&&(e.content=Array.isArray(e.body)?e.body.join(\"\\n\"):e.body),e.tabTrigger&&!e.trigger&&(!e.guard&&/^\\w/.test(e.tabTrigger)&&(e.guard=\"\\\\b\"),e.trigger=s.escapeRegExp(e.tabTrigger)),(e.trigger||e.guard||e.endTrigger||e.endGuard)&&(e.startRe=a(e.trigger,e.guard,!0),e.triggerRe=new RegExp(e.trigger),e.endRe=a(e.endTrigger,e.endGuard,!0),e.endTriggerRe=new RegExp(e.endTrigger))}e||(e=[]),Array.isArray(e)?e.forEach(c):Object.keys(e).forEach((function(t){c(e[t])})),this._signal(\"registerSnippets\",{scope:t})},e.prototype.unregister=function(e,t){var n=this.snippetMap,i=this.snippetNameMap;function r(e){var r=i[e.scope||t];if(r&&r[e.name]){delete r[e.name];var o=n[e.scope||t],s=o&&o.indexOf(e);s>=0&&o.splice(s,1)}}e.content?r(e):Array.isArray(e)&&e.forEach(r)},e.prototype.parseSnippetFile=function(e){e=e.replace(/\\r/g,\"\");for(var t,n=[],i={},r=/^#.*|^({[\\s\\S]*})\\s*$|^(\\S+) (.*)$|^((?:\\n*\\t.*)+)/gm;t=r.exec(e);){if(t[1])try{i=JSON.parse(t[1]),n.push(i)}catch(c){}if(t[4])i.content=t[4].replace(/^\\t/gm,\"\"),n.push(i),i={};else{var o=t[2],s=t[3];if(\"regex\"==o){var a=/\\/((?:[^\\/\\\\]|\\\\.)*)|$/g;i.guard=a.exec(s)[1],i.trigger=a.exec(s)[1],i.endTrigger=a.exec(s)[1],i.endGuard=a.exec(s)[1]}else\"snippet\"==o?(i.tabTrigger=s.match(/^\\S*/)[0],i.name||(i.name=s)):o&&(i[o]=s)}}return n},e.prototype.getSnippetByName=function(e,t){var n,i=this.snippetNameMap;return this.getActiveScopes(t).some((function(t){var r=i[t];return r&&(n=r[e]),!!n}),this),n},e}();r.implement(g.prototype,o);var f=function(e,t,n){void 0===n&&(n={});var i=e.getCursorPosition(),r=e.session.getLine(i.row),o=e.session.getTabString(),s=r.match(/^\\s*/)[0];i.column<s.length&&(s=s.slice(0,i.column)),t=t.replace(/\\r/g,\"\");var a=this.tokenizeTmSnippet(t);a=(a=this.resolveVariables(a,e)).map((function(e){return\"\\n\"!=e||n.excludeExtraIndent?\"string\"==typeof e?e.replace(/\\t/g,o):e:e+s}));var c=[];a.forEach((function(e,t){if(\"object\"==typeof e){var n=e.tabstopId,i=c[n];if(i||((i=c[n]=[]).index=n,i.value=\"\",i.parents={}),-1===i.indexOf(e)){e.choices&&!i.choices&&(i.choices=e.choices),i.push(e);var r=a.indexOf(e,t+1);if(-1!==r){var o=a.slice(t+1,r);o.some((function(e){return\"object\"===typeof e}))&&!i.value?i.value=o:!o.length||i.value&&\"string\"===typeof i.value||(i.value=o.join(\"\"))}}}})),c.forEach((function(e){e.length=0}));var p={};function u(e){for(var t=[],n=0;n<e.length;n++){var i=e[n];if(\"object\"==typeof i){if(p[i.tabstopId])continue;i=t[e.lastIndexOf(i,n-1)]||{tabstopId:i.tabstopId}}t[n]=i}return t}for(var h=0;h<a.length;h++){var l=a[h];if(\"object\"==typeof l){var d=l.tabstopId,g=c[d],f=a.indexOf(l,h+1);if(p[d])p[d]===l&&(delete p[d],Object.keys(p).forEach((function(e){g.parents[e]=!0})));else{p[d]=l;var m=g.value;\"string\"!==typeof m?m=u(m):l.fmt&&(m=this.tmStrFormat(m,l,e)),a.splice.apply(a,[h+1,Math.max(0,f-h)].concat(m,l)),-1===g.indexOf(l)&&g.push(l)}}}var b=0,v=0,x=\"\";return a.forEach((function(e){if(\"string\"===typeof e){var t=e.split(\"\\n\");t.length>1?(v=t[t.length-1].length,b+=t.length-1):v+=e.length,x+=e}else e&&(e.start?e.end={row:b,column:v}:e.start={row:b,column:v})})),{text:x,tabstops:c,tokens:a}},m=function(){function e(e){if(this.index=0,this.ranges=[],this.tabstops=[],e.tabstopManager)return e.tabstopManager;e.tabstopManager=this,this.$onChange=this.onChange.bind(this),this.$onChangeSelection=s.delayedCall(this.onChangeSelection.bind(this)).schedule,this.$onChangeSession=this.onChangeSession.bind(this),this.$onAfterExec=this.onAfterExec.bind(this),this.attach(e)}return e.prototype.attach=function(e){this.$openTabstops=null,this.selectedTabstop=null,this.editor=e,this.session=e.session,this.editor.on(\"change\",this.$onChange),this.editor.on(\"changeSelection\",this.$onChangeSelection),this.editor.on(\"changeSession\",this.$onChangeSession),this.editor.commands.on(\"afterExec\",this.$onAfterExec),this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler)},e.prototype.detach=function(){this.tabstops.forEach(this.removeTabstopMarkers,this),this.ranges.length=0,this.tabstops.length=0,this.selectedTabstop=null,this.editor.off(\"change\",this.$onChange),this.editor.off(\"changeSelection\",this.$onChangeSelection),this.editor.off(\"changeSession\",this.$onChangeSession),this.editor.commands.off(\"afterExec\",this.$onAfterExec),this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler),this.editor.tabstopManager=null,this.session=null,this.editor=null},e.prototype.onChange=function(e){for(var t=\"r\"==e.action[0],n=this.selectedTabstop||{},i=n.parents||{},r=this.tabstops.slice(),o=0;o<r.length;o++){var s=r[o],a=s==n||i[s.index];if(s.rangeList.$bias=a?0:1,\"remove\"==e.action&&s!==n){var c=s.parents&&s.parents[n.index],p=s.rangeList.pointIndex(e.start,c);p=p<0?-p-1:p+1;var u=s.rangeList.pointIndex(e.end,c);u=u<0?-u-1:u-1;for(var h=s.rangeList.ranges.slice(p,u),l=0;l<h.length;l++)this.removeRange(h[l])}s.rangeList.$onChange(e)}var d=this.session;this.$inChange||!t||1!=d.getLength()||d.getValue()||this.detach()},e.prototype.updateLinkedFields=function(){var e=this.selectedTabstop;if(e&&e.hasLinkedRanges&&e.firstNonLinked){this.$inChange=!0;for(var n=this.session,i=n.getTextRange(e.firstNonLinked),r=0;r<e.length;r++){var o=e[r];if(o.linked){var s=o.original,a=t.snippetManager.tmStrFormat(i,s,this.editor);n.replace(o,a)}}this.$inChange=!1}},e.prototype.onAfterExec=function(e){e.command&&!e.command.readOnly&&this.updateLinkedFields()},e.prototype.onChangeSelection=function(){if(this.editor){for(var e=this.editor.selection.lead,t=this.editor.selection.anchor,n=this.editor.selection.isEmpty(),i=0;i<this.ranges.length;i++)if(!this.ranges[i].linked){var r=this.ranges[i].contains(e.row,e.column),o=n||this.ranges[i].contains(t.row,t.column);if(r&&o)return}this.detach()}},e.prototype.onChangeSession=function(){this.detach()},e.prototype.tabNext=function(e){var t=this.tabstops.length,n=this.index+(e||1);(n=Math.min(Math.max(n,1),t))==t&&(n=0),this.selectTabstop(n),this.updateTabstopMarkers(),0===n&&this.detach()},e.prototype.selectTabstop=function(e){this.$openTabstops=null;var t=this.tabstops[this.index];if(t&&this.addTabstopMarkers(t),this.index=e,(t=this.tabstops[this.index])&&t.length){this.selectedTabstop=t;var n=t.firstNonLinked||t;if(t.choices&&(n.cursor=n.start),this.editor.inVirtualSelectionMode)this.editor.selection.fromOrientedRange(n);else{var i=this.editor.multiSelect;i.toSingleRange(n);for(var r=0;r<t.length;r++)t.hasLinkedRanges&&t[r].linked||i.addRange(t[r].clone(),!0)}this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler),this.selectedTabstop&&this.selectedTabstop.choices&&this.editor.execCommand(\"startAutocomplete\",{matches:this.selectedTabstop.choices})}},e.prototype.addTabstops=function(e,t,n){var i=this.useLink||!this.editor.getOption(\"enableMultiselect\");if(this.$openTabstops||(this.$openTabstops=[]),!e[0]){var r=a.fromPoints(n,n);v(r.start,t),v(r.end,t),e[0]=[r],e[0].index=0}var o=[this.index+1,0],s=this.ranges,p=this.snippetId=(this.snippetId||0)+1;e.forEach((function(e,n){var r=this.$openTabstops[n]||e;r.snippetId=p;for(var u=0;u<e.length;u++){var h=e[u],l=a.fromPoints(h.start,h.end||h.start);b(l.start,t),b(l.end,t),l.original=h,l.tabstop=r,s.push(l),r!=e?r.unshift(l):r[u]=l,h.fmtString||r.firstNonLinked&&i?(l.linked=!0,r.hasLinkedRanges=!0):r.firstNonLinked||(r.firstNonLinked=l)}r.firstNonLinked||(r.hasLinkedRanges=!1),r===e&&(o.push(r),this.$openTabstops[n]=r),this.addTabstopMarkers(r),r.rangeList=r.rangeList||new c,r.rangeList.$bias=0,r.rangeList.addList(r)}),this),o.length>2&&(this.tabstops.length&&o.push(o.splice(2,1)[0]),this.tabstops.splice.apply(this.tabstops,o))},e.prototype.addTabstopMarkers=function(e){var t=this.session;e.forEach((function(e){e.markerId||(e.markerId=t.addMarker(e,\"ace_snippet-marker\",\"text\"))}))},e.prototype.removeTabstopMarkers=function(e){var t=this.session;e.forEach((function(e){t.removeMarker(e.markerId),e.markerId=null}))},e.prototype.updateTabstopMarkers=function(){if(this.selectedTabstop){var e=this.selectedTabstop.snippetId;0===this.selectedTabstop.index&&e--,this.tabstops.forEach((function(t){t.snippetId===e?this.addTabstopMarkers(t):this.removeTabstopMarkers(t)}),this)}},e.prototype.removeRange=function(e){var t=e.tabstop.indexOf(e);-1!=t&&e.tabstop.splice(t,1),-1!=(t=this.ranges.indexOf(e))&&this.ranges.splice(t,1),-1!=(t=e.tabstop.rangeList.ranges.indexOf(e))&&e.tabstop.splice(t,1),this.session.removeMarker(e.markerId),e.tabstop.length||(-1!=(t=this.tabstops.indexOf(e.tabstop))&&this.tabstops.splice(t,1),this.tabstops.length||this.detach())},e}();m.prototype.keyboardHandler=new p,m.prototype.keyboardHandler.bindKeys({Tab:function(e){t.snippetManager&&t.snippetManager.expandWithTab(e)||(e.tabstopManager.tabNext(1),e.renderer.scrollCursorIntoView())},\"Shift-Tab\":function(e){e.tabstopManager.tabNext(-1),e.renderer.scrollCursorIntoView()},Esc:function(e){e.tabstopManager.detach()}});var b=function(e,t){0==e.row&&(e.column+=t.column),e.row+=t.row},v=function(e,t){e.row==t.row&&(e.column-=t.column),e.row-=t.row};i.importCssString(\"\\n.ace_snippet-marker {\\n    -moz-box-sizing: border-box;\\n    box-sizing: border-box;\\n    background: rgba(194, 193, 208, 0.09);\\n    border: 1px dotted rgba(211, 208, 235, 0.62);\\n    position: absolute;\\n}\",\"snippets.css\",!1),t.snippetManager=new g;var x=e(\"./editor\").Editor;(function(){this.insertSnippet=function(e,n){return t.snippetManager.insertSnippet(this,e,n)},this.expandSnippet=function(e){return t.snippetManager.expandWithTab(this,e)}}).call(x.prototype)})),ace.define(\"ace/ext/emmet\",[\"require\",\"exports\",\"module\",\"ace/keyboard/hash_handler\",\"ace/editor\",\"ace/snippets\",\"ace/range\",\"ace/config\",\"resources\",\"resources\",\"tabStops\",\"resources\",\"utils\",\"actions\"],(function(e,t,n){\"use strict\";var i,r,o=e(\"../keyboard/hash_handler\").HashHandler,s=e(\"../editor\").Editor,a=e(\"../snippets\").snippetManager,c=e(\"../range\").Range,p=e(\"../config\"),u=function(){function e(){}return e.prototype.setupContext=function(e){this.ace=e,this.indentation=e.session.getTabString(),i||(i=window.emmet),(i.resources||i.require(\"resources\")).setVariable(\"indentation\",this.indentation),this.$syntax=null,this.$syntax=this.getSyntax()},e.prototype.getSelectionRange=function(){var e=this.ace.getSelectionRange(),t=this.ace.session.doc;return{start:t.positionToIndex(e.start),end:t.positionToIndex(e.end)}},e.prototype.createSelection=function(e,t){var n=this.ace.session.doc;this.ace.selection.setRange({start:n.indexToPosition(e),end:n.indexToPosition(t)})},e.prototype.getCurrentLineRange=function(){var e=this.ace,t=e.getCursorPosition().row,n=e.session.getLine(t).length,i=e.session.doc.positionToIndex({row:t,column:0});return{start:i,end:i+n}},e.prototype.getCaretPos=function(){var e=this.ace.getCursorPosition();return this.ace.session.doc.positionToIndex(e)},e.prototype.setCaretPos=function(e){var t=this.ace.session.doc.indexToPosition(e);this.ace.selection.moveToPosition(t)},e.prototype.getCurrentLine=function(){var e=this.ace.getCursorPosition().row;return this.ace.session.getLine(e)},e.prototype.replaceContent=function(e,t,n,i){null==n&&(n=null==t?this.getContent().length:t),null==t&&(t=0);var r=this.ace,o=r.session.doc,s=c.fromPoints(o.indexToPosition(t),o.indexToPosition(n));r.session.remove(s),s.end=s.start,e=this.$updateTabstops(e),a.insertSnippet(r,e)},e.prototype.getContent=function(){return this.ace.getValue()},e.prototype.getSyntax=function(){if(this.$syntax)return this.$syntax;var e=this.ace.session.$modeId.split(\"/\").pop();if(\"html\"==e||\"php\"==e){var t=this.ace.getCursorPosition(),n=this.ace.session.getState(t.row);\"string\"!=typeof n&&(n=n[0]),n&&((n=n.split(\"-\")).length>1?e=n[0]:\"php\"==e&&(e=\"html\"))}return e},e.prototype.getProfileName=function(){var e=i.resources||i.require(\"resources\");switch(this.getSyntax()){case\"css\":return\"css\";case\"xml\":case\"xsl\":return\"xml\";case\"html\":var t=e.getVariable(\"profile\");return t||(t=-1!=this.ace.session.getLines(0,2).join(\"\").search(/<!DOCTYPE[^>]+XHTML/i)?\"xhtml\":\"html\"),t;default:var n=this.ace.session.$mode;return n.emmetConfig&&n.emmetConfig.profile||\"xhtml\"}},e.prototype.prompt=function(e){return prompt(e)},e.prototype.getSelection=function(){return this.ace.session.getTextRange()},e.prototype.getFilePath=function(){return\"\"},e.prototype.$updateTabstops=function(e){var t=0,n=null,r=i.tabStops||i.require(\"tabStops\"),o=(i.resources||i.require(\"resources\")).getVocabulary(\"user\"),s={tabstop:function(e){var i=parseInt(e.group,10),o=0===i;o?i=++t:i+=1e3;var a=e.placeholder;a&&(a=r.processText(a,s));var c=\"${\"+i+(a?\":\"+a:\"\")+\"}\";return o&&(n=[e.start,c]),c},escape:function(e){return\"$\"==e?\"\\\\$\":\"\\\\\"==e?\"\\\\\\\\\":e}};if(e=r.processText(e,s),o.variables.insert_final_tabstop&&!/\\$\\{0\\}$/.test(e))e+=\"${0}\";else if(n){e=(i.utils?i.utils.common:i.require(\"utils\")).replaceSubstring(e,\"${0}\",n[0],n[1])}return e},e}(),h={expand_abbreviation:{mac:\"ctrl+alt+e\",win:\"alt+e\"},match_pair_outward:{mac:\"ctrl+d\",win:\"ctrl+,\"},match_pair_inward:{mac:\"ctrl+j\",win:\"ctrl+shift+0\"},matching_pair:{mac:\"ctrl+alt+j\",win:\"alt+j\"},next_edit_point:\"alt+right\",prev_edit_point:\"alt+left\",toggle_comment:{mac:\"command+/\",win:\"ctrl+/\"},split_join_tag:{mac:\"shift+command+'\",win:\"shift+ctrl+`\"},remove_tag:{mac:\"command+'\",win:\"shift+ctrl+;\"},evaluate_math_expression:{mac:\"shift+command+y\",win:\"shift+ctrl+y\"},increment_number_by_1:\"ctrl+up\",decrement_number_by_1:\"ctrl+down\",increment_number_by_01:\"alt+up\",decrement_number_by_01:\"alt+down\",increment_number_by_10:{mac:\"alt+command+up\",win:\"shift+alt+up\"},decrement_number_by_10:{mac:\"alt+command+down\",win:\"shift+alt+down\"},select_next_item:{mac:\"shift+command+.\",win:\"shift+ctrl+.\"},select_previous_item:{mac:\"shift+command+,\",win:\"shift+ctrl+,\"},reflect_css_value:{mac:\"shift+command+r\",win:\"shift+ctrl+r\"},encode_decode_data_url:{mac:\"shift+ctrl+d\",win:\"ctrl+'\"},expand_abbreviation_with_tab:\"Tab\",wrap_with_abbreviation:{mac:\"shift+ctrl+a\",win:\"shift+ctrl+a\"}},l=new u;for(var d in t.commands=new o,t.runEmmetCommand=function e(n){if(\"expand_abbreviation_with_tab\"==this.action){if(!n.selection.isEmpty())return!1;var r=n.selection.lead,o=n.session.getTokenAt(r.row,r.column);if(o&&/\\btag\\b/.test(o.type))return!1}try{l.setupContext(n);var s=i.actions||i.require(\"actions\");if(\"wrap_with_abbreviation\"==this.action)return setTimeout((function(){s.run(\"wrap_with_abbreviation\",l)}),0);var a=s.run(this.action,l)}catch(u){if(!i){var c=t.load(e.bind(this,n));return\"expand_abbreviation_with_tab\"!=this.action&&c}n._signal(\"changeStatus\",\"string\"==typeof u?u:u.message),p.warn(u),a=!1}return a},h)t.commands.addCommand({name:\"emmet:\"+d,action:d,bindKey:h[d],exec:t.runEmmetCommand,multiSelectAction:\"forEach\"});t.updateCommands=function(e,n){n?e.keyBinding.addKeyboardHandler(t.commands):e.keyBinding.removeKeyboardHandler(t.commands)},t.isSupportedMode=function(e){if(!e)return!1;if(e.emmetConfig)return!0;var t=e.$id||e;return/css|less|scss|sass|stylus|html|php|twig|ejs|handlebars/.test(t)},t.isAvailable=function(e,n){if(/(evaluate_math_expression|expand_abbreviation)$/.test(n))return!0;var i=e.session.$mode,r=t.isSupportedMode(i);if(r&&i.$modes)try{l.setupContext(e),/js|php/.test(l.getSyntax())&&(r=!1)}catch(o){}return r};var g=function(e,n){var i=n;if(i){var r=t.isSupportedMode(i.session.$mode);!1===e.enableEmmet&&(r=!1),r&&t.load(),t.updateCommands(i,r)}};t.load=function(e){return\"string\"!==typeof r?(p.warn(\"script for emmet-core is not loaded\"),!1):(p.loadModule(r,(function(){r=null,e&&e()})),!0)},t.AceEmmetEditor=u,p.defineOptions(s.prototype,\"editor\",{enableEmmet:{set:function(e){this[e?\"on\":\"removeListener\"](\"changeMode\",g),g({enableEmmet:!!e},this)},value:!0}}),t.setCore=function(e){\"string\"==typeof e?r=e:i=e}})),ace.require([\"ace/ext/emmet\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"af8a5b98487af266199311a9f489991f.js","input":"ace.define(\"ace/snippets\", [\"require\", \"exports\", \"module\", \"ace/lib/dom\", \"ace/lib/oop\", \"ace/lib/event_emitter\", \"ace/lib/lang\", \"ace/range\", \"ace/range_list\", \"ace/keyboard/hash_handler\", \"ace/tokenizer\", \"ace/clipboard\", \"ace/editor\"], function (require, exports, module) {\n  \"use strict\";\n\n  var dom = require(\"./lib/dom\");\n  var oop = require(\"./lib/oop\");\n  var EventEmitter = require(\"./lib/event_emitter\").EventEmitter;\n  var lang = require(\"./lib/lang\");\n  var Range = require(\"./range\").Range;\n  var RangeList = require(\"./range_list\").RangeList;\n  var HashHandler = require(\"./keyboard/hash_handler\").HashHandler;\n  var Tokenizer = require(\"./tokenizer\").Tokenizer;\n  var clipboard = require(\"./clipboard\");\n  var VARIABLES = {\n    CURRENT_WORD: function (editor) {\n      return editor.session.getTextRange(editor.session.getWordRange());\n    },\n    SELECTION: function (editor, name, indentation) {\n      var text = editor.session.getTextRange();\n      if (indentation) return text.replace(/\\n\\r?([ \\t]*\\S)/g, \"\\n\" + indentation + \"$1\");\n      return text;\n    },\n    CURRENT_LINE: function (editor) {\n      return editor.session.getLine(editor.getCursorPosition().row);\n    },\n    PREV_LINE: function (editor) {\n      return editor.session.getLine(editor.getCursorPosition().row - 1);\n    },\n    LINE_INDEX: function (editor) {\n      return editor.getCursorPosition().row;\n    },\n    LINE_NUMBER: function (editor) {\n      return editor.getCursorPosition().row + 1;\n    },\n    SOFT_TABS: function (editor) {\n      return editor.session.getUseSoftTabs() ? \"YES\" : \"NO\";\n    },\n    TAB_SIZE: function (editor) {\n      return editor.session.getTabSize();\n    },\n    CLIPBOARD: function (editor) {\n      return clipboard.getText && clipboard.getText();\n    },\n    FILENAME: function (editor) {\n      return /[^/\\\\]*$/.exec(this.FILEPATH(editor))[0];\n    },\n    FILENAME_BASE: function (editor) {\n      return /[^/\\\\]*$/.exec(this.FILEPATH(editor))[0].replace(/\\.[^.]*$/, \"\");\n    },\n    DIRECTORY: function (editor) {\n      return this.FILEPATH(editor).replace(/[^/\\\\]*$/, \"\");\n    },\n    FILEPATH: function (editor) {\n      return \"/not implemented.txt\";\n    },\n    WORKSPACE_NAME: function () {\n      return \"Unknown\";\n    },\n    FULLNAME: function () {\n      return \"Unknown\";\n    },\n    BLOCK_COMMENT_START: function (editor) {\n      var mode = editor.session.$mode || {};\n      return mode.blockComment && mode.blockComment.start || \"\";\n    },\n    BLOCK_COMMENT_END: function (editor) {\n      var mode = editor.session.$mode || {};\n      return mode.blockComment && mode.blockComment.end || \"\";\n    },\n    LINE_COMMENT: function (editor) {\n      var mode = editor.session.$mode || {};\n      return mode.lineCommentStart || \"\";\n    },\n    CURRENT_YEAR: date.bind(null, {\n      year: \"numeric\"\n    }),\n    CURRENT_YEAR_SHORT: date.bind(null, {\n      year: \"2-digit\"\n    }),\n    CURRENT_MONTH: date.bind(null, {\n      month: \"numeric\"\n    }),\n    CURRENT_MONTH_NAME: date.bind(null, {\n      month: \"long\"\n    }),\n    CURRENT_MONTH_NAME_SHORT: date.bind(null, {\n      month: \"short\"\n    }),\n    CURRENT_DATE: date.bind(null, {\n      day: \"2-digit\"\n    }),\n    CURRENT_DAY_NAME: date.bind(null, {\n      weekday: \"long\"\n    }),\n    CURRENT_DAY_NAME_SHORT: date.bind(null, {\n      weekday: \"short\"\n    }),\n    CURRENT_HOUR: date.bind(null, {\n      hour: \"2-digit\",\n      hour12: false\n    }),\n    CURRENT_MINUTE: date.bind(null, {\n      minute: \"2-digit\"\n    }),\n    CURRENT_SECOND: date.bind(null, {\n      second: \"2-digit\"\n    })\n  };\n  VARIABLES.SELECTED_TEXT = VARIABLES.SELECTION;\n  function date(dateFormat) {\n    var str = new Date().toLocaleString(\"en-us\", dateFormat);\n    return str.length == 1 ? \"0\" + str : str;\n  }\n  var SnippetManager = /** @class */function () {\n    function SnippetManager() {\n      this.snippetMap = {};\n      this.snippetNameMap = {};\n      this.variables = VARIABLES;\n    }\n    SnippetManager.prototype.getTokenizer = function () {\n      return SnippetManager[\"$tokenizer\"] || this.createTokenizer();\n    };\n    SnippetManager.prototype.createTokenizer = function () {\n      function TabstopToken(str) {\n        str = str.substr(1);\n        if (/^\\d+$/.test(str)) return [{\n          tabstopId: parseInt(str, 10)\n        }];\n        return [{\n          text: str\n        }];\n      }\n      function escape(ch) {\n        return \"(?:[^\\\\\\\\\" + ch + \"]|\\\\\\\\.)\";\n      }\n      var formatMatcher = {\n        regex: \"/(\" + escape(\"/\") + \"+)/\",\n        onMatch: function (val, state, stack) {\n          var ts = stack[0];\n          ts.fmtString = true;\n          ts.guard = val.slice(1, -1);\n          ts.flag = \"\";\n          return \"\";\n        },\n        next: \"formatString\"\n      };\n      SnippetManager[\"$tokenizer\"] = new Tokenizer({\n        start: [{\n          regex: /\\\\./,\n          onMatch: function (val, state, stack) {\n            var ch = val[1];\n            if (ch == \"}\" && stack.length) {\n              val = ch;\n            } else if (\"`$\\\\\".indexOf(ch) != -1) {\n              val = ch;\n            }\n            return [val];\n          }\n        }, {\n          regex: /}/,\n          onMatch: function (val, state, stack) {\n            return [stack.length ? stack.shift() : val];\n          }\n        }, {\n          regex: /\\$(?:\\d+|\\w+)/,\n          onMatch: TabstopToken\n        }, {\n          regex: /\\$\\{[\\dA-Z_a-z]+/,\n          onMatch: function (str, state, stack) {\n            var t = TabstopToken(str.substr(1));\n            stack.unshift(t[0]);\n            return t;\n          },\n          next: \"snippetVar\"\n        }, {\n          regex: /\\n/,\n          token: \"newline\",\n          merge: false\n        }],\n        snippetVar: [{\n          regex: \"\\\\|\" + escape(\"\\\\|\") + \"*\\\\|\",\n          onMatch: function (val, state, stack) {\n            var choices = val.slice(1, -1).replace(/\\\\[,|\\\\]|,/g, function (operator) {\n              return operator.length == 2 ? operator[1] : \"\\x00\";\n            }).split(\"\\x00\").map(function (value) {\n              return {\n                value: value\n              };\n            });\n            stack[0].choices = choices;\n            return [choices[0]];\n          },\n          next: \"start\"\n        }, formatMatcher, {\n          regex: \"([^:}\\\\\\\\]|\\\\\\\\.)*:?\",\n          token: \"\",\n          next: \"start\"\n        }],\n        formatString: [{\n          regex: /:/,\n          onMatch: function (val, state, stack) {\n            if (stack.length && stack[0].expectElse) {\n              stack[0].expectElse = false;\n              stack[0].ifEnd = {\n                elseEnd: stack[0]\n              };\n              return [stack[0].ifEnd];\n            }\n            return \":\";\n          }\n        }, {\n          regex: /\\\\./,\n          onMatch: function (val, state, stack) {\n            var ch = val[1];\n            if (ch == \"}\" && stack.length) val = ch;else if (\"`$\\\\\".indexOf(ch) != -1) val = ch;else if (ch == \"n\") val = \"\\n\";else if (ch == \"t\") val = \"\\t\";else if (\"ulULE\".indexOf(ch) != -1) val = {\n              changeCase: ch,\n              local: ch > \"a\"\n            };\n            return [val];\n          }\n        }, {\n          regex: \"/\\\\w*}\",\n          onMatch: function (val, state, stack) {\n            var next = stack.shift();\n            if (next) next.flag = val.slice(1, -1);\n            this.next = next && next.tabstopId ? \"start\" : \"\";\n            return [next || val];\n          },\n          next: \"start\"\n        }, {\n          regex: /\\$(?:\\d+|\\w+)/,\n          onMatch: function (val, state, stack) {\n            return [{\n              text: val.slice(1)\n            }];\n          }\n        }, {\n          regex: /\\${\\w+/,\n          onMatch: function (val, state, stack) {\n            var token = {\n              text: val.slice(2)\n            };\n            stack.unshift(token);\n            return [token];\n          },\n          next: \"formatStringVar\"\n        }, {\n          regex: /\\n/,\n          token: \"newline\",\n          merge: false\n        }, {\n          regex: /}/,\n          onMatch: function (val, state, stack) {\n            var next = stack.shift();\n            this.next = next && next.tabstopId ? \"start\" : \"\";\n            return [next || val];\n          },\n          next: \"start\"\n        }],\n        formatStringVar: [{\n          regex: /:\\/\\w+}/,\n          onMatch: function (val, state, stack) {\n            var ts = stack[0];\n            ts.formatFunction = val.slice(2, -1);\n            return [stack.shift()];\n          },\n          next: \"formatString\"\n        }, formatMatcher, {\n          regex: /:[\\?\\-+]?/,\n          onMatch: function (val, state, stack) {\n            if (val[1] == \"+\") stack[0].ifEnd = stack[0];\n            if (val[1] == \"?\") stack[0].expectElse = true;\n          },\n          next: \"formatString\"\n        }, {\n          regex: \"([^:}\\\\\\\\]|\\\\\\\\.)*:?\",\n          token: \"\",\n          next: \"formatString\"\n        }]\n      });\n      return SnippetManager[\"$tokenizer\"];\n    };\n    SnippetManager.prototype.tokenizeTmSnippet = function (str, startState) {\n      return this.getTokenizer().getLineTokens(str, startState).tokens.map(function (x) {\n        return x.value || x;\n      });\n    };\n    SnippetManager.prototype.getVariableValue = function (editor, name, indentation) {\n      if (/^\\d+$/.test(name)) return (this.variables.__ || {})[name] || \"\";\n      if (/^[A-Z]\\d+$/.test(name)) return (this.variables[name[0] + \"__\"] || {})[name.substr(1)] || \"\";\n      name = name.replace(/^TM_/, \"\");\n      if (!this.variables.hasOwnProperty(name)) return \"\";\n      var value = this.variables[name];\n      if (typeof value == \"function\") value = this.variables[name](editor, name, indentation);\n      return value == null ? \"\" : value;\n    };\n    SnippetManager.prototype.tmStrFormat = function (str, ch, editor) {\n      if (!ch.fmt) return str;\n      var flag = ch.flag || \"\";\n      var re = ch.guard;\n      re = new RegExp(re, flag.replace(/[^gim]/g, \"\"));\n      var fmtTokens = typeof ch.fmt == \"string\" ? this.tokenizeTmSnippet(ch.fmt, \"formatString\") : ch.fmt;\n      var _self = this;\n      var formatted = str.replace(re, function () {\n        var oldArgs = _self.variables.__;\n        _self.variables.__ = [].slice.call(arguments);\n        var fmtParts = _self.resolveVariables(fmtTokens, editor);\n        var gChangeCase = \"E\";\n        for (var i = 0; i < fmtParts.length; i++) {\n          var ch = fmtParts[i];\n          if (typeof ch == \"object\") {\n            fmtParts[i] = \"\";\n            if (ch.changeCase && ch.local) {\n              var next = fmtParts[i + 1];\n              if (next && typeof next == \"string\") {\n                if (ch.changeCase == \"u\") fmtParts[i] = next[0].toUpperCase();else fmtParts[i] = next[0].toLowerCase();\n                fmtParts[i + 1] = next.substr(1);\n              }\n            } else if (ch.changeCase) {\n              gChangeCase = ch.changeCase;\n            }\n          } else if (gChangeCase == \"U\") {\n            fmtParts[i] = ch.toUpperCase();\n          } else if (gChangeCase == \"L\") {\n            fmtParts[i] = ch.toLowerCase();\n          }\n        }\n        _self.variables.__ = oldArgs;\n        return fmtParts.join(\"\");\n      });\n      return formatted;\n    };\n    SnippetManager.prototype.tmFormatFunction = function (str, ch, editor) {\n      if (ch.formatFunction == \"upcase\") return str.toUpperCase();\n      if (ch.formatFunction == \"downcase\") return str.toLowerCase();\n      return str;\n    };\n    SnippetManager.prototype.resolveVariables = function (snippet, editor) {\n      var result = [];\n      var indentation = \"\";\n      var afterNewLine = true;\n      for (var i = 0; i < snippet.length; i++) {\n        var ch = snippet[i];\n        if (typeof ch == \"string\") {\n          result.push(ch);\n          if (ch == \"\\n\") {\n            afterNewLine = true;\n            indentation = \"\";\n          } else if (afterNewLine) {\n            indentation = /^\\t*/.exec(ch)[0];\n            afterNewLine = /\\S/.test(ch);\n          }\n          continue;\n        }\n        if (!ch) continue;\n        afterNewLine = false;\n        if (ch.fmtString) {\n          var j = snippet.indexOf(ch, i + 1);\n          if (j == -1) j = snippet.length;\n          ch.fmt = snippet.slice(i + 1, j);\n          i = j;\n        }\n        if (ch.text) {\n          var value = this.getVariableValue(editor, ch.text, indentation) + \"\";\n          if (ch.fmtString) value = this.tmStrFormat(value, ch, editor);\n          if (ch.formatFunction) value = this.tmFormatFunction(value, ch, editor);\n          if (value && !ch.ifEnd) {\n            result.push(value);\n            gotoNext(ch);\n          } else if (!value && ch.ifEnd) {\n            gotoNext(ch.ifEnd);\n          }\n        } else if (ch.elseEnd) {\n          gotoNext(ch.elseEnd);\n        } else if (ch.tabstopId != null) {\n          result.push(ch);\n        } else if (ch.changeCase != null) {\n          result.push(ch);\n        }\n      }\n      function gotoNext(ch) {\n        var i1 = snippet.indexOf(ch, i + 1);\n        if (i1 != -1) i = i1;\n      }\n      return result;\n    };\n    SnippetManager.prototype.getDisplayTextForSnippet = function (editor, snippetText) {\n      var processedSnippet = processSnippetText.call(this, editor, snippetText);\n      return processedSnippet.text;\n    };\n    SnippetManager.prototype.insertSnippetForSelection = function (editor, snippetText, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      var processedSnippet = processSnippetText.call(this, editor, snippetText, options);\n      var range = editor.getSelectionRange();\n      var end = editor.session.replace(range, processedSnippet.text);\n      var tabstopManager = new TabstopManager(editor);\n      var selectionId = editor.inVirtualSelectionMode && editor.selection.index;\n      tabstopManager.addTabstops(processedSnippet.tabstops, range.start, end, selectionId);\n    };\n    SnippetManager.prototype.insertSnippet = function (editor, snippetText, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      var self = this;\n      if (editor.inVirtualSelectionMode) return self.insertSnippetForSelection(editor, snippetText, options);\n      editor.forEachSelection(function () {\n        self.insertSnippetForSelection(editor, snippetText, options);\n      }, null, {\n        keepOrder: true\n      });\n      if (editor.tabstopManager) editor.tabstopManager.tabNext();\n    };\n    SnippetManager.prototype.$getScope = function (editor) {\n      var scope = editor.session.$mode.$id || \"\";\n      scope = scope.split(\"/\").pop();\n      if (scope === \"html\" || scope === \"php\") {\n        if (scope === \"php\" && !editor.session.$mode.inlinePhp) scope = \"html\";\n        var c = editor.getCursorPosition();\n        var state = editor.session.getState(c.row);\n        if (typeof state === \"object\") {\n          state = state[0];\n        }\n        if (state.substring) {\n          if (state.substring(0, 3) == \"js-\") scope = \"javascript\";else if (state.substring(0, 4) == \"css-\") scope = \"css\";else if (state.substring(0, 4) == \"php-\") scope = \"php\";\n        }\n      }\n      return scope;\n    };\n    SnippetManager.prototype.getActiveScopes = function (editor) {\n      var scope = this.$getScope(editor);\n      var scopes = [scope];\n      var snippetMap = this.snippetMap;\n      if (snippetMap[scope] && snippetMap[scope].includeScopes) {\n        scopes.push.apply(scopes, snippetMap[scope].includeScopes);\n      }\n      scopes.push(\"_\");\n      return scopes;\n    };\n    SnippetManager.prototype.expandWithTab = function (editor, options) {\n      var self = this;\n      var result = editor.forEachSelection(function () {\n        return self.expandSnippetForSelection(editor, options);\n      }, null, {\n        keepOrder: true\n      });\n      if (result && editor.tabstopManager) editor.tabstopManager.tabNext();\n      return result;\n    };\n    SnippetManager.prototype.expandSnippetForSelection = function (editor, options) {\n      var cursor = editor.getCursorPosition();\n      var line = editor.session.getLine(cursor.row);\n      var before = line.substring(0, cursor.column);\n      var after = line.substr(cursor.column);\n      var snippetMap = this.snippetMap;\n      var snippet;\n      this.getActiveScopes(editor).some(function (scope) {\n        var snippets = snippetMap[scope];\n        if (snippets) snippet = this.findMatchingSnippet(snippets, before, after);\n        return !!snippet;\n      }, this);\n      if (!snippet) return false;\n      if (options && options.dryRun) return true;\n      editor.session.doc.removeInLine(cursor.row, cursor.column - snippet.replaceBefore.length, cursor.column + snippet.replaceAfter.length);\n      this.variables.M__ = snippet.matchBefore;\n      this.variables.T__ = snippet.matchAfter;\n      this.insertSnippetForSelection(editor, snippet.content);\n      this.variables.M__ = this.variables.T__ = null;\n      return true;\n    };\n    SnippetManager.prototype.findMatchingSnippet = function (snippetList, before, after) {\n      for (var i = snippetList.length; i--;) {\n        var s = snippetList[i];\n        if (s.startRe && !s.startRe.test(before)) continue;\n        if (s.endRe && !s.endRe.test(after)) continue;\n        if (!s.startRe && !s.endRe) continue;\n        s.matchBefore = s.startRe ? s.startRe.exec(before) : [\"\"];\n        s.matchAfter = s.endRe ? s.endRe.exec(after) : [\"\"];\n        s.replaceBefore = s.triggerRe ? s.triggerRe.exec(before)[0] : \"\";\n        s.replaceAfter = s.endTriggerRe ? s.endTriggerRe.exec(after)[0] : \"\";\n        return s;\n      }\n    };\n    SnippetManager.prototype.register = function (snippets, scope) {\n      var snippetMap = this.snippetMap;\n      var snippetNameMap = this.snippetNameMap;\n      var self = this;\n      if (!snippets) snippets = [];\n      function wrapRegexp(src) {\n        if (src && !/^\\^?\\(.*\\)\\$?$|^\\\\b$/.test(src)) src = \"(?:\" + src + \")\";\n        return src || \"\";\n      }\n      function guardedRegexp(re, guard, opening) {\n        re = wrapRegexp(re);\n        guard = wrapRegexp(guard);\n        if (opening) {\n          re = guard + re;\n          if (re && re[re.length - 1] != \"$\") re = re + \"$\";\n        } else {\n          re = re + guard;\n          if (re && re[0] != \"^\") re = \"^\" + re;\n        }\n        return new RegExp(re);\n      }\n      function addSnippet(s) {\n        if (!s.scope) s.scope = scope || \"_\";\n        scope = s.scope;\n        if (!snippetMap[scope]) {\n          snippetMap[scope] = [];\n          snippetNameMap[scope] = {};\n        }\n        var map = snippetNameMap[scope];\n        if (s.name) {\n          var old = map[s.name];\n          if (old) self.unregister(old);\n          map[s.name] = s;\n        }\n        snippetMap[scope].push(s);\n        if (s.prefix) s.tabTrigger = s.prefix;\n        if (!s.content && s.body) s.content = Array.isArray(s.body) ? s.body.join(\"\\n\") : s.body;\n        if (s.tabTrigger && !s.trigger) {\n          if (!s.guard && /^\\w/.test(s.tabTrigger)) s.guard = \"\\\\b\";\n          s.trigger = lang.escapeRegExp(s.tabTrigger);\n        }\n        if (!s.trigger && !s.guard && !s.endTrigger && !s.endGuard) return;\n        s.startRe = guardedRegexp(s.trigger, s.guard, true);\n        s.triggerRe = new RegExp(s.trigger);\n        s.endRe = guardedRegexp(s.endTrigger, s.endGuard, true);\n        s.endTriggerRe = new RegExp(s.endTrigger);\n      }\n      if (Array.isArray(snippets)) {\n        snippets.forEach(addSnippet);\n      } else {\n        Object.keys(snippets).forEach(function (key) {\n          addSnippet(snippets[key]);\n        });\n      }\n      this._signal(\"registerSnippets\", {\n        scope: scope\n      });\n    };\n    SnippetManager.prototype.unregister = function (snippets, scope) {\n      var snippetMap = this.snippetMap;\n      var snippetNameMap = this.snippetNameMap;\n      function removeSnippet(s) {\n        var nameMap = snippetNameMap[s.scope || scope];\n        if (nameMap && nameMap[s.name]) {\n          delete nameMap[s.name];\n          var map = snippetMap[s.scope || scope];\n          var i = map && map.indexOf(s);\n          if (i >= 0) map.splice(i, 1);\n        }\n      }\n      if (snippets.content) removeSnippet(snippets);else if (Array.isArray(snippets)) snippets.forEach(removeSnippet);\n    };\n    SnippetManager.prototype.parseSnippetFile = function (str) {\n      str = str.replace(/\\r/g, \"\");\n      var list = [],\n        /**@type{Snippet}*/snippet = {};\n      var re = /^#.*|^({[\\s\\S]*})\\s*$|^(\\S+) (.*)$|^((?:\\n*\\t.*)+)/gm;\n      var m;\n      while (m = re.exec(str)) {\n        if (m[1]) {\n          try {\n            snippet = JSON.parse(m[1]);\n            list.push(snippet);\n          } catch (e) {}\n        }\n        if (m[4]) {\n          snippet.content = m[4].replace(/^\\t/gm, \"\");\n          list.push(snippet);\n          snippet = {};\n        } else {\n          var key = m[2],\n            val = m[3];\n          if (key == \"regex\") {\n            var guardRe = /\\/((?:[^\\/\\\\]|\\\\.)*)|$/g;\n            snippet.guard = guardRe.exec(val)[1];\n            snippet.trigger = guardRe.exec(val)[1];\n            snippet.endTrigger = guardRe.exec(val)[1];\n            snippet.endGuard = guardRe.exec(val)[1];\n          } else if (key == \"snippet\") {\n            snippet.tabTrigger = val.match(/^\\S*/)[0];\n            if (!snippet.name) snippet.name = val;\n          } else if (key) {\n            snippet[key] = val;\n          }\n        }\n      }\n      return list;\n    };\n    SnippetManager.prototype.getSnippetByName = function (name, editor) {\n      var snippetMap = this.snippetNameMap;\n      var snippet;\n      this.getActiveScopes(editor).some(function (scope) {\n        var snippets = snippetMap[scope];\n        if (snippets) snippet = snippets[name];\n        return !!snippet;\n      }, this);\n      return snippet;\n    };\n    return SnippetManager;\n  }();\n  oop.implement(SnippetManager.prototype, EventEmitter);\n  var processSnippetText = function (editor, snippetText, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var cursor = editor.getCursorPosition();\n    var line = editor.session.getLine(cursor.row);\n    var tabString = editor.session.getTabString();\n    var indentString = line.match(/^\\s*/)[0];\n    if (cursor.column < indentString.length) indentString = indentString.slice(0, cursor.column);\n    snippetText = snippetText.replace(/\\r/g, \"\");\n    var tokens = this.tokenizeTmSnippet(snippetText);\n    tokens = this.resolveVariables(tokens, editor);\n    tokens = tokens.map(function (x) {\n      if (x == \"\\n\" && !options.excludeExtraIndent) return x + indentString;\n      if (typeof x == \"string\") return x.replace(/\\t/g, tabString);\n      return x;\n    });\n    var tabstops = [];\n    tokens.forEach(function (p, i) {\n      if (typeof p != \"object\") return;\n      var id = p.tabstopId;\n      var ts = tabstops[id];\n      if (!ts) {\n        ts = tabstops[id] = [];\n        ts.index = id;\n        ts.value = \"\";\n        ts.parents = {};\n      }\n      if (ts.indexOf(p) !== -1) return;\n      if (p.choices && !ts.choices) ts.choices = p.choices;\n      ts.push(p);\n      var i1 = tokens.indexOf(p, i + 1);\n      if (i1 === -1) return;\n      var value = tokens.slice(i + 1, i1);\n      var isNested = value.some(function (t) {\n        return typeof t === \"object\";\n      });\n      if (isNested && !ts.value) {\n        ts.value = value;\n      } else if (value.length && (!ts.value || typeof ts.value !== \"string\")) {\n        ts.value = value.join(\"\");\n      }\n    });\n    tabstops.forEach(function (ts) {\n      ts.length = 0;\n    });\n    var expanding = {};\n    function copyValue(val) {\n      var copy = [];\n      for (var i = 0; i < val.length; i++) {\n        var p = val[i];\n        if (typeof p == \"object\") {\n          if (expanding[p.tabstopId]) continue;\n          var j = val.lastIndexOf(p, i - 1);\n          p = copy[j] || {\n            tabstopId: p.tabstopId\n          };\n        }\n        copy[i] = p;\n      }\n      return copy;\n    }\n    for (var i = 0; i < tokens.length; i++) {\n      var p = tokens[i];\n      if (typeof p != \"object\") continue;\n      var id = p.tabstopId;\n      var ts = tabstops[id];\n      var i1 = tokens.indexOf(p, i + 1);\n      if (expanding[id]) {\n        if (expanding[id] === p) {\n          delete expanding[id];\n          Object.keys(expanding).forEach(function (parentId) {\n            ts.parents[parentId] = true;\n          });\n        }\n        continue;\n      }\n      expanding[id] = p;\n      var value = ts.value;\n      if (typeof value !== \"string\") value = copyValue(value);else if (p.fmt) value = this.tmStrFormat(value, p, editor);\n      tokens.splice.apply(tokens, [i + 1, Math.max(0, i1 - i)].concat(value, p));\n      if (ts.indexOf(p) === -1) ts.push(p);\n    }\n    var row = 0,\n      column = 0;\n    var text = \"\";\n    tokens.forEach(function (t) {\n      if (typeof t === \"string\") {\n        var lines = t.split(\"\\n\");\n        if (lines.length > 1) {\n          column = lines[lines.length - 1].length;\n          row += lines.length - 1;\n        } else column += t.length;\n        text += t;\n      } else if (t) {\n        if (!t.start) t.start = {\n          row: row,\n          column: column\n        };else t.end = {\n          row: row,\n          column: column\n        };\n      }\n    });\n    return {\n      text: text,\n      tabstops: tabstops,\n      tokens: tokens\n    };\n  };\n  var TabstopManager = /** @class */function () {\n    function TabstopManager(editor) {\n      this.index = 0;\n      this.ranges = [];\n      this.tabstops = [];\n      if (editor.tabstopManager) return editor.tabstopManager;\n      editor.tabstopManager = this;\n      this.$onChange = this.onChange.bind(this);\n      this.$onChangeSelection = lang.delayedCall(this.onChangeSelection.bind(this)).schedule;\n      this.$onChangeSession = this.onChangeSession.bind(this);\n      this.$onAfterExec = this.onAfterExec.bind(this);\n      this.attach(editor);\n    }\n    TabstopManager.prototype.attach = function (editor) {\n      this.$openTabstops = null;\n      this.selectedTabstop = null;\n      this.editor = editor;\n      this.session = editor.session;\n      this.editor.on(\"change\", this.$onChange);\n      this.editor.on(\"changeSelection\", this.$onChangeSelection);\n      this.editor.on(\"changeSession\", this.$onChangeSession);\n      this.editor.commands.on(\"afterExec\", this.$onAfterExec);\n      this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n    TabstopManager.prototype.detach = function () {\n      this.tabstops.forEach(this.removeTabstopMarkers, this);\n      this.ranges.length = 0;\n      this.tabstops.length = 0;\n      this.selectedTabstop = null;\n      this.editor.off(\"change\", this.$onChange);\n      this.editor.off(\"changeSelection\", this.$onChangeSelection);\n      this.editor.off(\"changeSession\", this.$onChangeSession);\n      this.editor.commands.off(\"afterExec\", this.$onAfterExec);\n      this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n      this.editor.tabstopManager = null;\n      this.session = null;\n      this.editor = null;\n    };\n    TabstopManager.prototype.onChange = function (delta) {\n      var isRemove = delta.action[0] == \"r\";\n      var selectedTabstop = this.selectedTabstop || {};\n      var parents = selectedTabstop.parents || {};\n      var tabstops = this.tabstops.slice();\n      for (var i = 0; i < tabstops.length; i++) {\n        var ts = tabstops[i];\n        var active = ts == selectedTabstop || parents[ts.index];\n        ts.rangeList.$bias = active ? 0 : 1;\n        if (delta.action == \"remove\" && ts !== selectedTabstop) {\n          var parentActive = ts.parents && ts.parents[selectedTabstop.index];\n          var startIndex = ts.rangeList.pointIndex(delta.start, parentActive);\n          startIndex = startIndex < 0 ? -startIndex - 1 : startIndex + 1;\n          var endIndex = ts.rangeList.pointIndex(delta.end, parentActive);\n          endIndex = endIndex < 0 ? -endIndex - 1 : endIndex - 1;\n          var toRemove = ts.rangeList.ranges.slice(startIndex, endIndex);\n          for (var j = 0; j < toRemove.length; j++) this.removeRange(toRemove[j]);\n        }\n        ts.rangeList.$onChange(delta);\n      }\n      var session = this.session;\n      if (!this.$inChange && isRemove && session.getLength() == 1 && !session.getValue()) this.detach();\n    };\n    TabstopManager.prototype.updateLinkedFields = function () {\n      var ts = this.selectedTabstop;\n      if (!ts || !ts.hasLinkedRanges || !ts.firstNonLinked) return;\n      this.$inChange = true;\n      var session = this.session;\n      var text = session.getTextRange(ts.firstNonLinked);\n      for (var i = 0; i < ts.length; i++) {\n        var range = ts[i];\n        if (!range.linked) continue;\n        var original = range.original;\n        var fmt = exports.snippetManager.tmStrFormat(text, original, this.editor);\n        session.replace(range, fmt);\n      }\n      this.$inChange = false;\n    };\n    TabstopManager.prototype.onAfterExec = function (e) {\n      if (e.command && !e.command.readOnly) this.updateLinkedFields();\n    };\n    TabstopManager.prototype.onChangeSelection = function () {\n      if (!this.editor) return;\n      var lead = this.editor.selection.lead;\n      var anchor = this.editor.selection.anchor;\n      var isEmpty = this.editor.selection.isEmpty();\n      for (var i = 0; i < this.ranges.length; i++) {\n        if (this.ranges[i].linked) continue;\n        var containsLead = this.ranges[i].contains(lead.row, lead.column);\n        var containsAnchor = isEmpty || this.ranges[i].contains(anchor.row, anchor.column);\n        if (containsLead && containsAnchor) return;\n      }\n      this.detach();\n    };\n    TabstopManager.prototype.onChangeSession = function () {\n      this.detach();\n    };\n    TabstopManager.prototype.tabNext = function (dir) {\n      var max = this.tabstops.length;\n      var index = this.index + (dir || 1);\n      index = Math.min(Math.max(index, 1), max);\n      if (index == max) index = 0;\n      this.selectTabstop(index);\n      this.updateTabstopMarkers();\n      if (index === 0) {\n        this.detach();\n      }\n    };\n    TabstopManager.prototype.selectTabstop = function (index) {\n      this.$openTabstops = null;\n      var ts = this.tabstops[this.index];\n      if (ts) this.addTabstopMarkers(ts);\n      this.index = index;\n      ts = this.tabstops[this.index];\n      if (!ts || !ts.length) return;\n      this.selectedTabstop = ts;\n      var range = ts.firstNonLinked || ts;\n      if (ts.choices) range.cursor = range.start;\n      if (!this.editor.inVirtualSelectionMode) {\n        var sel = this.editor.multiSelect;\n        sel.toSingleRange(range);\n        for (var i = 0; i < ts.length; i++) {\n          if (ts.hasLinkedRanges && ts[i].linked) continue;\n          sel.addRange(ts[i].clone(), true);\n        }\n      } else {\n        this.editor.selection.fromOrientedRange(range);\n      }\n      this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n      if (this.selectedTabstop && this.selectedTabstop.choices) this.editor.execCommand(\"startAutocomplete\", {\n        matches: this.selectedTabstop.choices\n      });\n    };\n    TabstopManager.prototype.addTabstops = function (tabstops, start, end) {\n      var useLink = this.useLink || !this.editor.getOption(\"enableMultiselect\");\n      if (!this.$openTabstops) this.$openTabstops = [];\n      if (!tabstops[0]) {\n        var p = Range.fromPoints(end, end);\n        moveRelative(p.start, start);\n        moveRelative(p.end, start);\n        tabstops[0] = [p];\n        tabstops[0].index = 0;\n      }\n      var i = this.index;\n      var arg = [i + 1, 0];\n      var ranges = this.ranges;\n      var snippetId = this.snippetId = (this.snippetId || 0) + 1;\n      tabstops.forEach(function (ts, index) {\n        var dest = this.$openTabstops[index] || ts;\n        dest.snippetId = snippetId;\n        for (var i = 0; i < ts.length; i++) {\n          var p = ts[i];\n          var range = Range.fromPoints(p.start, p.end || p.start);\n          movePoint(range.start, start);\n          movePoint(range.end, start);\n          range.original = p;\n          range.tabstop = dest;\n          ranges.push(range);\n          if (dest != ts) dest.unshift(range);else dest[i] = range;\n          if (p.fmtString || dest.firstNonLinked && useLink) {\n            range.linked = true;\n            dest.hasLinkedRanges = true;\n          } else if (!dest.firstNonLinked) dest.firstNonLinked = range;\n        }\n        if (!dest.firstNonLinked) dest.hasLinkedRanges = false;\n        if (dest === ts) {\n          arg.push(dest);\n          this.$openTabstops[index] = dest;\n        }\n        this.addTabstopMarkers(dest);\n        dest.rangeList = dest.rangeList || new RangeList();\n        dest.rangeList.$bias = 0;\n        dest.rangeList.addList(dest);\n      }, this);\n      if (arg.length > 2) {\n        if (this.tabstops.length) arg.push(arg.splice(2, 1)[0]);\n        this.tabstops.splice.apply(this.tabstops, arg);\n      }\n    };\n    TabstopManager.prototype.addTabstopMarkers = function (ts) {\n      var session = this.session;\n      ts.forEach(function (range) {\n        if (!range.markerId) range.markerId = session.addMarker(range, \"ace_snippet-marker\", \"text\");\n      });\n    };\n    TabstopManager.prototype.removeTabstopMarkers = function (ts) {\n      var session = this.session;\n      ts.forEach(function (range) {\n        session.removeMarker(range.markerId);\n        range.markerId = null;\n      });\n    };\n    TabstopManager.prototype.updateTabstopMarkers = function () {\n      if (!this.selectedTabstop) return;\n      var currentSnippetId = this.selectedTabstop.snippetId;\n      if (this.selectedTabstop.index === 0) {\n        currentSnippetId--;\n      }\n      this.tabstops.forEach(function (ts) {\n        if (ts.snippetId === currentSnippetId) this.addTabstopMarkers(ts);else this.removeTabstopMarkers(ts);\n      }, this);\n    };\n    TabstopManager.prototype.removeRange = function (range) {\n      var i = range.tabstop.indexOf(range);\n      if (i != -1) range.tabstop.splice(i, 1);\n      i = this.ranges.indexOf(range);\n      if (i != -1) this.ranges.splice(i, 1);\n      i = range.tabstop.rangeList.ranges.indexOf(range);\n      if (i != -1) range.tabstop.splice(i, 1);\n      this.session.removeMarker(range.markerId);\n      if (!range.tabstop.length) {\n        i = this.tabstops.indexOf(range.tabstop);\n        if (i != -1) this.tabstops.splice(i, 1);\n        if (!this.tabstops.length) this.detach();\n      }\n    };\n    return TabstopManager;\n  }();\n  TabstopManager.prototype.keyboardHandler = new HashHandler();\n  TabstopManager.prototype.keyboardHandler.bindKeys({\n    \"Tab\": function (editor) {\n      if (exports.snippetManager && exports.snippetManager.expandWithTab(editor)) return;\n      editor.tabstopManager.tabNext(1);\n      editor.renderer.scrollCursorIntoView();\n    },\n    \"Shift-Tab\": function (editor) {\n      editor.tabstopManager.tabNext(-1);\n      editor.renderer.scrollCursorIntoView();\n    },\n    \"Esc\": function (editor) {\n      editor.tabstopManager.detach();\n    }\n  });\n  var movePoint = function (point, diff) {\n    if (point.row == 0) point.column += diff.column;\n    point.row += diff.row;\n  };\n  var moveRelative = function (point, start) {\n    if (point.row == start.row) point.column -= start.column;\n    point.row -= start.row;\n  };\n  dom.importCssString(\"\\n.ace_snippet-marker {\\n    -moz-box-sizing: border-box;\\n    box-sizing: border-box;\\n    background: rgba(194, 193, 208, 0.09);\\n    border: 1px dotted rgba(211, 208, 235, 0.62);\\n    position: absolute;\\n}\", \"snippets.css\", false);\n  exports.snippetManager = new SnippetManager();\n  var Editor = require(\"./editor\").Editor;\n  (function () {\n    this.insertSnippet = function (content, options) {\n      return exports.snippetManager.insertSnippet(this, content, options);\n    };\n    this.expandSnippet = function (options) {\n      return exports.snippetManager.expandWithTab(this, options);\n    };\n  }).call(Editor.prototype);\n});\nace.define(\"ace/ext/emmet\", [\"require\", \"exports\", \"module\", \"ace/keyboard/hash_handler\", \"ace/editor\", \"ace/snippets\", \"ace/range\", \"ace/config\", \"resources\", \"resources\", \"tabStops\", \"resources\", \"utils\", \"actions\"], function (require, exports, module) {\n  \"use strict\";\n\n  var HashHandler = require(\"../keyboard/hash_handler\").HashHandler;\n  var Editor = require(\"../editor\").Editor;\n  var snippetManager = require(\"../snippets\").snippetManager;\n  var Range = require(\"../range\").Range;\n  var config = require(\"../config\");\n  var emmet, emmetPath;\n  var AceEmmetEditor = /** @class */function () {\n    function AceEmmetEditor() {}\n    AceEmmetEditor.prototype.setupContext = function (editor) {\n      this.ace = editor;\n      this.indentation = editor.session.getTabString();\n      if (!emmet) emmet = window[\"emmet\"];\n      var resources = emmet.resources || emmet.require(\"resources\");\n      resources.setVariable(\"indentation\", this.indentation);\n      this.$syntax = null;\n      this.$syntax = this.getSyntax();\n    };\n    AceEmmetEditor.prototype.getSelectionRange = function () {\n      var range = this.ace.getSelectionRange();\n      var doc = this.ace.session.doc;\n      return {\n        start: doc.positionToIndex(range.start),\n        end: doc.positionToIndex(range.end)\n      };\n    };\n    AceEmmetEditor.prototype.createSelection = function (start, end) {\n      var doc = this.ace.session.doc;\n      this.ace.selection.setRange({\n        start: doc.indexToPosition(start),\n        end: doc.indexToPosition(end)\n      });\n    };\n    AceEmmetEditor.prototype.getCurrentLineRange = function () {\n      var ace = this.ace;\n      var row = ace.getCursorPosition().row;\n      var lineLength = ace.session.getLine(row).length;\n      var index = ace.session.doc.positionToIndex({\n        row: row,\n        column: 0\n      });\n      return {\n        start: index,\n        end: index + lineLength\n      };\n    };\n    AceEmmetEditor.prototype.getCaretPos = function () {\n      var pos = this.ace.getCursorPosition();\n      return this.ace.session.doc.positionToIndex(pos);\n    };\n    AceEmmetEditor.prototype.setCaretPos = function (index) {\n      var pos = this.ace.session.doc.indexToPosition(index);\n      this.ace.selection.moveToPosition(pos);\n    };\n    AceEmmetEditor.prototype.getCurrentLine = function () {\n      var row = this.ace.getCursorPosition().row;\n      return this.ace.session.getLine(row);\n    };\n    AceEmmetEditor.prototype.replaceContent = function (value, start, end, noIndent) {\n      if (end == null) end = start == null ? this.getContent().length : start;\n      if (start == null) start = 0;\n      var editor = this.ace;\n      var doc = editor.session.doc;\n      var range = Range.fromPoints(doc.indexToPosition(start), doc.indexToPosition(end));\n      editor.session.remove(range);\n      range.end = range.start;\n      value = this.$updateTabstops(value);\n      snippetManager.insertSnippet(editor, value);\n    };\n    AceEmmetEditor.prototype.getContent = function () {\n      return this.ace.getValue();\n    };\n    AceEmmetEditor.prototype.getSyntax = function () {\n      if (this.$syntax) return this.$syntax;\n      var syntax = this.ace.session.$modeId.split(\"/\").pop();\n      if (syntax == \"html\" || syntax == \"php\") {\n        var cursor = this.ace.getCursorPosition();\n        var state = this.ace.session.getState(cursor.row);\n        if (typeof state != \"string\") state = state[0];\n        if (state) {\n          state = state.split(\"-\");\n          if (state.length > 1) syntax = state[0];else if (syntax == \"php\") syntax = \"html\";\n        }\n      }\n      return syntax;\n    };\n    AceEmmetEditor.prototype.getProfileName = function () {\n      var resources = emmet.resources || emmet.require(\"resources\");\n      switch (this.getSyntax()) {\n        case \"css\":\n          return \"css\";\n        case \"xml\":\n        case \"xsl\":\n          return \"xml\";\n        case \"html\":\n          var profile = resources.getVariable(\"profile\");\n          if (!profile) profile = this.ace.session.getLines(0, 2).join(\"\").search(/<!DOCTYPE[^>]+XHTML/i) != -1 ? \"xhtml\" : \"html\";\n          return profile;\n        default:\n          var mode = this.ace.session.$mode;\n          return mode.emmetConfig && mode.emmetConfig.profile || \"xhtml\";\n      }\n    };\n    AceEmmetEditor.prototype.prompt = function (title) {\n      return prompt(title); // eslint-disable-line no-alert\n    };\n    AceEmmetEditor.prototype.getSelection = function () {\n      return this.ace.session.getTextRange();\n    };\n    AceEmmetEditor.prototype.getFilePath = function () {\n      return \"\";\n    };\n    AceEmmetEditor.prototype.$updateTabstops = function (value) {\n      var base = 1000;\n      var zeroBase = 0;\n      var lastZero = null;\n      var ts = emmet.tabStops || emmet.require('tabStops');\n      var resources = emmet.resources || emmet.require(\"resources\");\n      var settings = resources.getVocabulary(\"user\");\n      var tabstopOptions = {\n        tabstop: function (data) {\n          var group = parseInt(data.group, 10);\n          var isZero = group === 0;\n          if (isZero) group = ++zeroBase;else group += base;\n          var placeholder = data.placeholder;\n          if (placeholder) {\n            placeholder = ts.processText(placeholder, tabstopOptions);\n          }\n          var result = '${' + group + (placeholder ? ':' + placeholder : '') + '}';\n          if (isZero) {\n            lastZero = [data.start, result];\n          }\n          return result;\n        },\n        escape: function (ch) {\n          if (ch == '$') return '\\\\$';\n          if (ch == '\\\\') return '\\\\\\\\';\n          return ch;\n        }\n      };\n      value = ts.processText(value, tabstopOptions);\n      if (settings.variables['insert_final_tabstop'] && !/\\$\\{0\\}$/.test(value)) {\n        value += '${0}';\n      } else if (lastZero) {\n        var common = emmet.utils ? emmet.utils.common : emmet.require('utils');\n        value = common.replaceSubstring(value, '${0}', lastZero[0], lastZero[1]);\n      }\n      return value;\n    };\n    return AceEmmetEditor;\n  }();\n  var keymap = {\n    expand_abbreviation: {\n      \"mac\": \"ctrl+alt+e\",\n      \"win\": \"alt+e\"\n    },\n    match_pair_outward: {\n      \"mac\": \"ctrl+d\",\n      \"win\": \"ctrl+,\"\n    },\n    match_pair_inward: {\n      \"mac\": \"ctrl+j\",\n      \"win\": \"ctrl+shift+0\"\n    },\n    matching_pair: {\n      \"mac\": \"ctrl+alt+j\",\n      \"win\": \"alt+j\"\n    },\n    next_edit_point: \"alt+right\",\n    prev_edit_point: \"alt+left\",\n    toggle_comment: {\n      \"mac\": \"command+/\",\n      \"win\": \"ctrl+/\"\n    },\n    split_join_tag: {\n      \"mac\": \"shift+command+'\",\n      \"win\": \"shift+ctrl+`\"\n    },\n    remove_tag: {\n      \"mac\": \"command+'\",\n      \"win\": \"shift+ctrl+;\"\n    },\n    evaluate_math_expression: {\n      \"mac\": \"shift+command+y\",\n      \"win\": \"shift+ctrl+y\"\n    },\n    increment_number_by_1: \"ctrl+up\",\n    decrement_number_by_1: \"ctrl+down\",\n    increment_number_by_01: \"alt+up\",\n    decrement_number_by_01: \"alt+down\",\n    increment_number_by_10: {\n      \"mac\": \"alt+command+up\",\n      \"win\": \"shift+alt+up\"\n    },\n    decrement_number_by_10: {\n      \"mac\": \"alt+command+down\",\n      \"win\": \"shift+alt+down\"\n    },\n    select_next_item: {\n      \"mac\": \"shift+command+.\",\n      \"win\": \"shift+ctrl+.\"\n    },\n    select_previous_item: {\n      \"mac\": \"shift+command+,\",\n      \"win\": \"shift+ctrl+,\"\n    },\n    reflect_css_value: {\n      \"mac\": \"shift+command+r\",\n      \"win\": \"shift+ctrl+r\"\n    },\n    encode_decode_data_url: {\n      \"mac\": \"shift+ctrl+d\",\n      \"win\": \"ctrl+'\"\n    },\n    expand_abbreviation_with_tab: \"Tab\",\n    wrap_with_abbreviation: {\n      \"mac\": \"shift+ctrl+a\",\n      \"win\": \"shift+ctrl+a\"\n    }\n  };\n  var editorProxy = new AceEmmetEditor();\n  exports.commands = new HashHandler();\n  exports.runEmmetCommand = function runEmmetCommand(editor) {\n    if (this.action == \"expand_abbreviation_with_tab\") {\n      if (!editor.selection.isEmpty()) return false;\n      var pos = editor.selection.lead;\n      var token = editor.session.getTokenAt(pos.row, pos.column);\n      if (token && /\\btag\\b/.test(token.type)) return false;\n    }\n    try {\n      editorProxy.setupContext(editor);\n      var actions = emmet.actions || emmet.require(\"actions\");\n      if (this.action == \"wrap_with_abbreviation\") {\n        return setTimeout(function () {\n          actions.run(\"wrap_with_abbreviation\", editorProxy);\n        }, 0);\n      }\n      var result = actions.run(this.action, editorProxy);\n    } catch (e) {\n      if (!emmet) {\n        var loading = exports.load(runEmmetCommand.bind(this, editor));\n        if (this.action == \"expand_abbreviation_with_tab\") return false;\n        return loading;\n      }\n      editor._signal(\"changeStatus\", typeof e == \"string\" ? e : e.message);\n      config.warn(e);\n      result = false;\n    }\n    return result;\n  };\n  for (var command in keymap) {\n    exports.commands.addCommand({\n      name: \"emmet:\" + command,\n      action: command,\n      bindKey: keymap[command],\n      exec: exports.runEmmetCommand,\n      multiSelectAction: \"forEach\"\n    });\n  }\n  exports.updateCommands = function (editor, enabled) {\n    if (enabled) {\n      editor.keyBinding.addKeyboardHandler(exports.commands);\n    } else {\n      editor.keyBinding.removeKeyboardHandler(exports.commands);\n    }\n  };\n  exports.isSupportedMode = function (mode) {\n    if (!mode) return false;\n    if (mode.emmetConfig) return true;\n    var id = mode.$id || mode;\n    return /css|less|scss|sass|stylus|html|php|twig|ejs|handlebars/.test(id);\n  };\n  exports.isAvailable = function (editor, command) {\n    if (/(evaluate_math_expression|expand_abbreviation)$/.test(command)) return true;\n    var mode = editor.session.$mode;\n    var isSupported = exports.isSupportedMode(mode);\n    if (isSupported && mode.$modes) {\n      try {\n        editorProxy.setupContext(editor);\n        if (/js|php/.test(editorProxy.getSyntax())) isSupported = false;\n      } catch (e) {}\n    }\n    return isSupported;\n  };\n  var onChangeMode = function (e, target) {\n    var editor = target;\n    if (!editor) return;\n    var enabled = exports.isSupportedMode(editor.session.$mode);\n    if (e.enableEmmet === false) enabled = false;\n    if (enabled) exports.load();\n    exports.updateCommands(editor, enabled);\n  };\n  exports.load = function (cb) {\n    if (typeof emmetPath !== \"string\") {\n      config.warn(\"script for emmet-core is not loaded\");\n      return false;\n    }\n    config.loadModule(emmetPath, function () {\n      emmetPath = null;\n      cb && cb();\n    });\n    return true;\n  };\n  exports.AceEmmetEditor = AceEmmetEditor;\n  config.defineOptions(Editor.prototype, \"editor\", {\n    enableEmmet: {\n      set: function (val) {\n        this[val ? \"on\" : \"removeListener\"](\"changeMode\", onChangeMode);\n        onChangeMode({\n          enableEmmet: !!val\n        }, this);\n      },\n      value: true\n    }\n  });\n  exports.setCore = function (e) {\n    if (typeof e == \"string\") emmetPath = e;else emmet = e;\n  };\n});\n(function () {\n  ace.require([\"ace/ext/emmet\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}