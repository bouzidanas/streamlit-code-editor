{"code":"ace.define(\"ace/mode/prql_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/oop\"),i=e(\"./text_highlight_rules\").TextHighlightRules,o=function(){var e=[\"bool\",\"int\",\"int8\",\"int16\",\"int32\",\"int64\",\"int128\",\"float\",\"text\",\"timestamp\",\"set\"].join(\"|\"),t=this.createKeywordMapper({\"constant.language\":\"null\",\"constant.language.boolean\":\"true|false\",keyword:\"let|into|case|prql|type|module|internal\",\"storage.type\":\"let|func\",\"support.function\":\"min|max|sum|average|stddev|every|any|concat_array|count|lag|lead|first|last|rank|rank_dense|row_number|round|as|in|tuple_every|tuple_map|tuple_zip|_eq|_is_null|from_text|lower|upper|read_parquet|read_csv\",\"support.type\":e,\"variable.language\":\"date|math\"},\"identifier\"),n=/\\\\(\\d+|['\"\\\\&bfnrt]|u\\{[0-9a-fA-F]{1,6}\\}|x[0-9a-fA-F]{2})/,r=/[A-Za-z_][a-z_A-Z0-9]/.source,i=/(?:\\d\\d*(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+\\b)?/.source,o=\"[\\\\u202A\\\\u202B\\\\u202D\\\\u202E\\\\u2066\\\\u2067\\\\u2068\\\\u202C\\\\u2069]\";this.$rules={start:[{token:\"string.start\",regex:'s?\"',next:\"string\"},{token:\"string.start\",regex:'f\"',next:\"fstring\"},{token:\"string.start\",regex:'r\"',next:\"rstring\"},{token:\"string.single\",start:\"'\",end:\"'\"},{token:\"string.character\",regex:\"'(?:\"+n.source+\"|.)'?\"},{token:\"constant.language\",regex:\"^\"+r+\"*\"},{token:[\"constant.numeric\",\"keyword\"],regex:\"(\"+i+\")(years|months|weeks|days|hours|minutes|seconds|milliseconds|microseconds)\"},{token:\"constant.numeric\",regex:/0(?:[xX][0-9a-fA-F]+|[oO][0-7]+|[bB][01]+)\\b/},{token:\"constant.numeric\",regex:i},{token:\"comment.block.documentation\",regex:\"#!.*\"},{token:\"comment.line.number-sign\",regex:\"#.*\"},{token:\"keyword.operator\",regex:/\\|\\s*/,next:\"pipe\"},{token:\"keyword.operator\",regex:/->|=>|==|!=|>=|<=|~=|&&|\\|\\||\\?\\?|\\/\\/|@/},{token:\"invalid.illegal\",regex:o},{token:\"punctuation.operator\",regex:/[,`]/},{token:t,regex:\"[\\\\w\\\\xff-\\\\u218e\\\\u2455-\\\\uffff]+\\\\b\"},{token:\"paren.lparen\",regex:/[\\[({]/},{token:\"paren.rparen\",regex:/[\\])}]/}],pipe:[{token:\"constant.language\",regex:r+\"*\",next:\"pop\"},{token:\"error\",regex:\"\",next:\"pop\"}],string:[{token:\"constant.character.escape\",regex:n},{token:\"text\",regex:/\\\\(\\s|$)/,next:\"stringGap\"},{token:\"string.end\",regex:'\"',next:\"start\"},{token:\"invalid.illegal\",regex:o},{defaultToken:\"string.double\"}],stringGap:[{token:\"text\",regex:/\\\\/,next:\"string\"},{token:\"error\",regex:\"\",next:\"start\"}],fstring:[{token:\"constant.character.escape\",regex:n},{token:\"string.end\",regex:'\"',next:\"start\"},{token:\"invalid.illegal\",regex:o},{token:\"paren.lparen\",regex:\"{\",push:\"fstringParenRules\"},{token:\"invalid.illegal\",regex:o},{defaultToken:\"string\"}],fstringParenRules:[{token:\"constant.language\",regex:\"^\"+r+\"*\"},{token:\"paren.rparen\",regex:\"}\",next:\"pop\"}],rstring:[{token:\"string.end\",regex:'\"',next:\"start\"},{token:\"invalid.illegal\",regex:o},{defaultToken:\"string\"}]},this.normalizeRules()};r.inherits(o,i),t.PrqlHighlightRules=o})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var r=e(\"../../lib/oop\"),i=e(\"../../range\").Range,o=e(\"./fold_mode\").FoldMode,a=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};r.inherits(a,o),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var r=e.getLine(n);if(this.singleLineBlockCommentRe.test(r)&&!this.startRegionRe.test(r)&&!this.tripleStarBlockCommentRe.test(r))return\"\";var i=this._getFoldWidgetBase(e,t,n);return!i&&this.startRegionRe.test(r)?\"start\":i},this.getFoldWidgetRange=function(e,t,n,r){var i,o=e.getLine(n);if(this.startRegionRe.test(o))return this.getCommentRegionBlock(e,o,n);if(i=o.match(this.foldingStartMarker)){var a=i.index;if(i[1])return this.openingBracketBlock(e,i[1],n,a);var s=e.getCommentFoldRange(n,a+i[0].length,1);return s&&!s.isMultiLine()&&(r?s=this.getSectionRange(e,n):\"all\"!=t&&(s=null)),s}if(\"markbegin\"!==t&&(i=o.match(this.foldingStopMarker))){a=i.index+i[0].length;return i[1]?this.closingBracketBlock(e,i[1],n,a):e.getCommentFoldRange(n,a,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),r=n.search(/\\S/),o=t,a=n.length,s=t+=1,g=e.getLength();++t<g;){var l=(n=e.getLine(t)).search(/\\S/);if(-1!==l){if(r>l)break;var u=this.getFoldWidgetRange(e,\"all\",t);if(u){if(u.start.row<=o)break;if(u.isMultiLine())t=u.end.row;else if(r==l)break}s=t}}return new i(o,a,s,e.getLine(s).length)},this.getCommentRegionBlock=function(e,t,n){for(var r=t.search(/\\s*$/),o=e.getLength(),a=n,s=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,g=1;++n<o;){t=e.getLine(n);var l=s.exec(t);if(l&&(l[1]?g--:g++,!g))break}if(n>a)return new i(a,r,n,t.length)}}.call(a.prototype)})),ace.define(\"ace/mode/prql\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prql_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/oop\"),i=e(\"./text\").Mode,o=e(\"./prql_highlight_rules\").PrqlHighlightRules,a=e(\"./folding/cstyle\").FoldMode,s=function(){this.HighlightRules=o,this.foldingRules=new a,this.$behaviour=this.$defaultBehaviour};r.inherits(s,i),function(){this.lineCommentStart=\"#\",this.$id=\"ace/mode/prql\"}.call(s.prototype),t.Mode=s})),ace.require([\"ace/mode/prql\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"2fa59c894666fe96a65321db83c07f62.js","input":"ace.define(\"ace/mode/prql_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  // https://prql-lang.org/\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var PrqlHighlightRules = function () {\n    var builtinFunctions = \"min|max|sum|average|stddev|every|any|concat_array|count|\" + \"lag|lead|first|last|rank|rank_dense|row_number|\" + \"round|as|in|\" + \"tuple_every|tuple_map|tuple_zip|_eq|_is_null|\" + \"from_text|\" + \"lower|upper|\" + \"read_parquet|read_csv\";\n    var builtinTypes = [\"bool\", \"int\", \"int8\", \"int16\", \"int32\", \"int64\", \"int128\", \"float\", \"text\", \"timestamp\", \"set\"].join(\"|\");\n    var keywordMapper = this.createKeywordMapper({\n      \"constant.language\": \"null\",\n      \"constant.language.boolean\": \"true|false\",\n      \"keyword\": \"let|into|case|prql|type|module|internal\",\n      \"storage.type\": \"let|func\",\n      \"support.function\": builtinFunctions,\n      \"support.type\": builtinTypes,\n      \"variable.language\": \"date|math\"\n    }, \"identifier\");\n    var escapeRe = /\\\\(\\d+|['\"\\\\&bfnrt]|u\\{[0-9a-fA-F]{1,6}\\}|x[0-9a-fA-F]{2})/;\n    var identifierRe = /[A-Za-z_][a-z_A-Z0-9]/.source;\n    var numRe = /(?:\\d\\d*(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+\\b)?/.source;\n    var bidi = \"[\\\\u202A\\\\u202B\\\\u202D\\\\u202E\\\\u2066\\\\u2067\\\\u2068\\\\u202C\\\\u2069]\";\n    this.$rules = {\n      start: [{\n        token: \"string.start\",\n        regex: 's?\"',\n        next: \"string\"\n      }, {\n        token: \"string.start\",\n        regex: 'f\"',\n        next: \"fstring\"\n      }, {\n        token: \"string.start\",\n        regex: 'r\"',\n        next: \"rstring\"\n      }, {\n        token: \"string.single\",\n        start: \"'\",\n        end: \"'\"\n      }, {\n        token: \"string.character\",\n        regex: \"'(?:\" + escapeRe.source + \"|.)'?\"\n      }, {\n        token: \"constant.language\",\n        regex: \"^\" + identifierRe + \"*\"\n      }, {\n        token: [\"constant.numeric\", \"keyword\"],\n        regex: \"(\" + numRe + \")(years|months|weeks|days|hours|minutes|seconds|milliseconds|microseconds)\"\n      }, {\n        token: \"constant.numeric\",\n        // hexadecimal, octal and binary\n        regex: /0(?:[xX][0-9a-fA-F]+|[oO][0-7]+|[bB][01]+)\\b/\n      }, {\n        token: \"constant.numeric\",\n        // decimal integers and floats\n        regex: numRe\n      }, {\n        token: \"comment.block.documentation\",\n        regex: \"#!.*\"\n      }, {\n        token: \"comment.line.number-sign\",\n        regex: \"#.*\"\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\|\\s*/,\n        next: \"pipe\"\n      }, {\n        token: \"keyword.operator\",\n        regex: /->|=>|==|!=|>=|<=|~=|&&|\\|\\||\\?\\?|\\/\\/|@/\n      }, {\n        token: \"invalid.illegal\",\n        regex: bidi\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[,`]/\n      }, {\n        token: keywordMapper,\n        regex: \"[\\\\w\\\\xff-\\\\u218e\\\\u2455-\\\\uffff]+\\\\b\"\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[({]/\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\])}]/\n      }],\n      pipe: [{\n        token: \"constant.language\",\n        regex: identifierRe + \"*\",\n        next: \"pop\"\n      }, {\n        token: \"error\",\n        regex: \"\",\n        next: \"pop\"\n      }],\n      string: [{\n        token: \"constant.character.escape\",\n        regex: escapeRe\n      }, {\n        token: \"text\",\n        regex: /\\\\(\\s|$)/,\n        next: \"stringGap\"\n      }, {\n        token: \"string.end\",\n        regex: '\"',\n        next: \"start\"\n      }, {\n        token: \"invalid.illegal\",\n        regex: bidi\n      }, {\n        defaultToken: \"string.double\"\n      }],\n      stringGap: [{\n        token: \"text\",\n        regex: /\\\\/,\n        next: \"string\"\n      }, {\n        token: \"error\",\n        regex: \"\",\n        next: \"start\"\n      }],\n      fstring: [{\n        token: \"constant.character.escape\",\n        regex: escapeRe\n      }, {\n        token: \"string.end\",\n        regex: '\"',\n        next: \"start\"\n      }, {\n        token: \"invalid.illegal\",\n        regex: bidi\n      }, {\n        token: \"paren.lparen\",\n        regex: \"{\",\n        push: \"fstringParenRules\"\n      }, {\n        token: \"invalid.illegal\",\n        regex: bidi\n      }, {\n        defaultToken: \"string\"\n      }],\n      fstringParenRules: [{\n        token: \"constant.language\",\n        regex: \"^\" + identifierRe + \"*\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"}\",\n        next: \"pop\"\n      }],\n      rstring: [{\n        token: \"string.end\",\n        regex: '\"',\n        next: \"start\"\n      }, {\n        token: \"invalid.illegal\",\n        regex: bidi\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  oop.inherits(PrqlHighlightRules, TextHighlightRules);\n  exports.PrqlHighlightRules = PrqlHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/prql\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/prql_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var HighlightRules = require(\"./prql_highlight_rules\").PrqlHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/prql\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/prql\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}