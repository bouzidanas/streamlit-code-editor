{"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var i=e(\"../lib/oop\"),r=e(\"./text_highlight_rules\").TextHighlightRules,o=function(){this.$rules={start:[{token:\"comment.doc.tag\",regex:\"@\\\\w+(?=\\\\s|$)\"},o.getTagRule(),{defaultToken:\"comment.doc.body\",caseInsensitive:!0}]}};i.inherits(o,r),o.getTagRule=function(e){return{token:\"comment.doc.tag.storage.type\",regex:\"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"}},o.getStartRule=function(e){return{token:\"comment.doc\",regex:/\\/\\*\\*(?!\\/)/,next:e}},o.getEndRule=function(e){return{token:\"comment.doc\",regex:\"\\\\*\\\\/\",next:e}},t.DocCommentHighlightRules=o})),ace.define(\"ace/mode/csharp_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var i=e(\"../lib/oop\"),r=e(\"./doc_comment_highlight_rules\").DocCommentHighlightRules,o=e(\"./text_highlight_rules\").TextHighlightRules,a=function(){var e=this.createKeywordMapper({\"variable.language\":\"this\",keyword:\"abstract|async|await|event|new|struct|as|explicit|null|switch|base|extern|object|this|bool|false|operator|throw|break|finally|out|true|byte|fixed|override|try|case|float|params|typeof|catch|for|private|uint|char|foreach|protected|ulong|checked|goto|public|unchecked|class|if|readonly|unsafe|const|implicit|ref|ushort|continue|in|return|using|decimal|int|sbyte|virtual|default|interface|sealed|volatile|delegate|internal|partial|short|void|do|is|sizeof|while|double|lock|stackalloc|else|long|static|enum|namespace|string|var|dynamic\",\"constant.language\":\"null|true|false\"},\"identifier\");this.$rules={start:[{token:\"comment\",regex:\"\\\\/\\\\/.*$\"},r.getStartRule(\"doc-start\"),{token:\"comment\",regex:\"\\\\/\\\\*\",next:\"comment\"},{token:\"string\",regex:/'(?:.|\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n]))?'/},{token:\"string\",start:'\"',end:'\"|$',next:[{token:\"constant.language.escape\",regex:/\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/},{token:\"invalid\",regex:/\\\\./}]},{token:\"string\",start:'@\"',end:'\"',next:[{token:\"constant.language.escape\",regex:'\"\"'}]},{token:\"string\",start:/\\$\"/,end:'\"|$',next:[{token:\"constant.language.escape\",regex:/\\\\(:?$)|{{/},{token:\"constant.language.escape\",regex:/\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/},{token:\"invalid\",regex:/\\\\./}]},{token:\"constant.numeric\",regex:\"0[xX][0-9a-fA-F]+\\\\b\"},{token:\"constant.numeric\",regex:\"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"},{token:\"constant.language.boolean\",regex:\"(?:true|false)\\\\b\"},{token:e,regex:\"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"},{token:\"keyword.operator\",regex:\"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"},{token:\"keyword\",regex:\"^\\\\s*#(if|else|elif|endif|define|undef|warning|error|line|region|endregion|pragma)\"},{token:\"punctuation.operator\",regex:\"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"},{token:\"paren.lparen\",regex:\"[[({]\"},{token:\"paren.rparen\",regex:\"[\\\\])}]\"},{token:\"text\",regex:\"\\\\s+\"}],comment:[{token:\"comment\",regex:\"\\\\*\\\\/\",next:\"start\"},{defaultToken:\"comment\"}]},this.embedRules(r,\"doc-\",[r.getEndRule(\"start\")]),this.normalizeRules()};i.inherits(a,o),t.CSharpHighlightRules=a})),ace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"],(function(e,t,n){\"use strict\";var i=e(\"../range\").Range,r=function(){};(function(){this.checkOutdent=function(e,t){return!!/^\\s+$/.test(e)&&/^\\s*\\}/.test(t)},this.autoOutdent=function(e,t){var n=e.getLine(t).match(/^(\\s*\\})/);if(!n)return 0;var r=n[1].length,o=e.findMatchingBracket({row:t,column:r});if(!o||o.row==t)return 0;var a=this.$getIndent(e.getLine(o.row));e.replace(new i(t,0,t,r-1),a)},this.$getIndent=function(e){return e.match(/^\\s*/)[0]}}).call(r.prototype),t.MatchingBraceOutdent=r})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var i=e(\"../../lib/oop\"),r=e(\"../../range\").Range,o=e(\"./fold_mode\").FoldMode,a=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};i.inherits(a,o),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var i=e.getLine(n);if(this.singleLineBlockCommentRe.test(i)&&!this.startRegionRe.test(i)&&!this.tripleStarBlockCommentRe.test(i))return\"\";var r=this._getFoldWidgetBase(e,t,n);return!r&&this.startRegionRe.test(i)?\"start\":r},this.getFoldWidgetRange=function(e,t,n,i){var r,o=e.getLine(n);if(this.startRegionRe.test(o))return this.getCommentRegionBlock(e,o,n);if(r=o.match(this.foldingStartMarker)){var a=r.index;if(r[1])return this.openingBracketBlock(e,r[1],n,a);var s=e.getCommentFoldRange(n,a+r[0].length,1);return s&&!s.isMultiLine()&&(i?s=this.getSectionRange(e,n):\"all\"!=t&&(s=null)),s}if(\"markbegin\"!==t&&(r=o.match(this.foldingStopMarker))){a=r.index+r[0].length;return r[1]?this.closingBracketBlock(e,r[1],n,a):e.getCommentFoldRange(n,a,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),i=n.search(/\\S/),o=t,a=n.length,s=t+=1,g=e.getLength();++t<g;){var c=(n=e.getLine(t)).search(/\\S/);if(-1!==c){if(i>c)break;var l=this.getFoldWidgetRange(e,\"all\",t);if(l){if(l.start.row<=o)break;if(l.isMultiLine())t=l.end.row;else if(i==c)break}s=t}}return new r(o,a,s,e.getLine(s).length)},this.getCommentRegionBlock=function(e,t,n){for(var i=t.search(/\\s*$/),o=e.getLength(),a=n,s=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,g=1;++n<o;){t=e.getLine(n);var c=s.exec(t);if(c&&(c[1]?g--:g++,!g))break}if(n>a)return new r(a,i,n,t.length)}}.call(a.prototype)})),ace.define(\"ace/mode/folding/csharp\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var i=e(\"../../lib/oop\"),r=e(\"../../range\").Range,o=e(\"./cstyle\").FoldMode,a=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};i.inherits(a,o),function(){this.usingRe=/^\\s*using \\S/,this.getFoldWidgetRangeBase=this.getFoldWidgetRange,this.getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var i=this.getFoldWidgetBase(e,t,n);if(!i){var r=e.getLine(n);if(/^\\s*#region\\b/.test(r))return\"start\";var o=this.usingRe;if(o.test(r)){var a=e.getLine(n-1),s=e.getLine(n+1);if(!o.test(a)&&o.test(s))return\"start\"}}return i},this.getFoldWidgetRange=function(e,t,n){var i=this.getFoldWidgetRangeBase(e,t,n);if(i)return i;var r=e.getLine(n);return this.usingRe.test(r)?this.getUsingStatementBlock(e,r,n):/^\\s*#region\\b/.test(r)?this.getRegionBlock(e,r,n):void 0},this.getUsingStatementBlock=function(e,t,n){for(var i=t.match(this.usingRe)[0].length-1,o=e.getLength(),a=n,s=n;++n<o;)if(t=e.getLine(n),!/^\\s*$/.test(t)){if(!this.usingRe.test(t))break;s=n}if(s>a){var g=e.getLine(s).length;return new r(a,i,s,g)}},this.getRegionBlock=function(e,t,n){for(var i=t.search(/\\s*$/),o=e.getLength(),a=n,s=/^\\s*#(end)?region\\b/,g=1;++n<o;){t=e.getLine(n);var c=s.exec(t);if(c&&(c[1]?g--:g++,!g))break}if(n>a)return new r(a,i,n,t.length)}}.call(a.prototype)})),ace.define(\"ace/mode/csharp\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/csharp_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/csharp\"],(function(e,t,n){\"use strict\";var i=e(\"../lib/oop\"),r=e(\"./text\").Mode,o=e(\"./csharp_highlight_rules\").CSharpHighlightRules,a=e(\"./matching_brace_outdent\").MatchingBraceOutdent,s=e(\"./folding/csharp\").FoldMode,g=function(){this.HighlightRules=o,this.$outdent=new a,this.$behaviour=this.$defaultBehaviour,this.foldingRules=new s};i.inherits(g,r),function(){this.lineCommentStart=\"//\",this.blockComment={start:\"/*\",end:\"*/\"},this.getNextLineIndent=function(e,t,n){var i=this.$getIndent(t),r=this.getTokenizer().getLineTokens(t,e).tokens;if(r.length&&\"comment\"==r[r.length-1].type)return i;\"start\"==e&&(t.match(/^.*[\\{\\(\\[]\\s*$/)&&(i+=n));return i},this.checkOutdent=function(e,t,n){return this.$outdent.checkOutdent(t,n)},this.autoOutdent=function(e,t,n){this.$outdent.autoOutdent(t,n)},this.createWorker=function(e){return null},this.$id=\"ace/mode/csharp\"}.call(g.prototype),t.Mode=g})),ace.require([\"ace/mode/csharp\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"f7b43b6dfec08d9ec0e8c8e8e8830cf2.js","input":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@\\\\w+(?=\\\\s|$)\"\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc.body\",\n        caseInsensitive: true\n      }]\n    };\n  };\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: /\\/\\*\\*(?!\\/)/,\n      next: start\n    };\n  };\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/csharp_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var CSharpHighlightRules = function () {\n    var keywordMapper = this.createKeywordMapper({\n      \"variable.language\": \"this\",\n      \"keyword\": \"abstract|async|await|event|new|struct|as|explicit|null|switch|base|extern|object|this|bool|false|operator|throw|break|finally|out|true|byte|fixed|override|try|case|float|params|typeof|catch|for|private|uint|char|foreach|protected|ulong|checked|goto|public|unchecked|class|if|readonly|unsafe|const|implicit|ref|ushort|continue|in|return|using|decimal|int|sbyte|virtual|default|interface|sealed|volatile|delegate|internal|partial|short|void|do|is|sizeof|while|double|lock|stackalloc|else|long|static|enum|namespace|string|var|dynamic\",\n      \"constant.language\": \"null|true|false\"\n    }, \"identifier\");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"\\\\/\\\\/.*$\"\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // character\n        regex: /'(?:.|\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n]))?'/\n      }, {\n        token: \"string\",\n        start: '\"',\n        end: '\"|$',\n        next: [{\n          token: \"constant.language.escape\",\n          regex: /\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/\n        }, {\n          token: \"invalid\",\n          regex: /\\\\./\n        }]\n      }, {\n        token: \"string\",\n        start: '@\"',\n        end: '\"',\n        next: [{\n          token: \"constant.language.escape\",\n          regex: '\"\"'\n        }]\n      }, {\n        token: \"string\",\n        start: /\\$\"/,\n        end: '\"|$',\n        next: [{\n          token: \"constant.language.escape\",\n          regex: /\\\\(:?$)|{{/\n        }, {\n          token: \"constant.language.escape\",\n          regex: /\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/\n        }, {\n          token: \"invalid\",\n          regex: /\\\\./\n        }]\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false)\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\n      }, {\n        token: \"keyword\",\n        regex: \"^\\\\s*#(if|else|elif|endif|define|undef|warning|error|line|region|endregion|pragma)\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n  oop.inherits(CSharpHighlightRules, TextHighlightRules);\n  exports.CSharpHighlightRules = CSharpHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/folding/csharp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var CFoldMode = require(\"./cstyle\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, CFoldMode);\n  (function () {\n    this.usingRe = /^\\s*using \\S/;\n    this.getFoldWidgetRangeBase = this.getFoldWidgetRange;\n    this.getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var fw = this.getFoldWidgetBase(session, foldStyle, row);\n      if (!fw) {\n        var line = session.getLine(row);\n        if (/^\\s*#region\\b/.test(line)) return \"start\";\n        var usingRe = this.usingRe;\n        if (usingRe.test(line)) {\n          var prev = session.getLine(row - 1);\n          var next = session.getLine(row + 1);\n          if (!usingRe.test(prev) && usingRe.test(next)) return \"start\";\n        }\n      }\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.getFoldWidgetRangeBase(session, foldStyle, row);\n      if (range) return range;\n      var line = session.getLine(row);\n      if (this.usingRe.test(line)) return this.getUsingStatementBlock(session, line, row);\n      if (/^\\s*#region\\b/.test(line)) return this.getRegionBlock(session, line, row);\n    };\n    this.getUsingStatementBlock = function (session, line, row) {\n      var startColumn = line.match(this.usingRe)[0].length - 1;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        if (/^\\s*$/.test(line)) continue;\n        if (!this.usingRe.test(line)) break;\n        endRow = row;\n      }\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n    this.getRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*#(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/csharp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/csharp_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/csharp\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var CSharpHighlightRules = require(\"./csharp_highlight_rules\").CSharpHighlightRules;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var CStyleFoldMode = require(\"./folding/csharp\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = CSharpHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n        if (match) {\n          indent += tab;\n        }\n      }\n      return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n    this.createWorker = function (session) {\n      return null;\n    };\n    this.$id = \"ace/mode/csharp\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/csharp\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}