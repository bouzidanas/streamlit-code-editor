{"code":"ace.define(\"ace/mode/crystal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/oop\"),s=e(\"./text_highlight_rules\").TextHighlightRules,a=function(){var e=this.$keywords=this.createKeywordMapper({keyword:\"if|end|else|elsif|unless|case|when|break|while|next|until|def|return|class|new|getter|setter|property|lib|fun|do|struct|private|protected|public|module|super|abstract|include|extend|begin|enum|raise|yield|with|alias|rescue|ensure|macro|uninitialized|union|type|require\",\"constant.language\":\"true|TRUE|false|FALSE|nil|NIL|__LINE__|__END_LINE__|__FILE__|__DIR__\",\"variable.language\":\"$DEBUG|$defout|$FILENAME|$LOAD_PATH|$SAFE|$stdin|$stdout|$stderr|$VERBOSE|root_url|flash|session|cookies|params|request|response|logger|self\",\"support.function\":\"puts|initialize|previous_def|typeof|as|pointerof|sizeof|instance_sizeof\"},\"identifier\"),t=/\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}}|u{(:?[\\da-fA-F]{2}\\s)*[\\da-fA-F]{2}})/;this.$rules={start:[{token:\"comment\",regex:\"#.*$\"},{token:\"string.regexp\",regex:\"[/]\",push:[{token:\"constant.language.escape\",regex:t},{token:\"string.regexp\",regex:\"[/][imx]*(?=[).,;\\\\s]|$)\",next:\"pop\"},{defaultToken:\"string.regexp\"}]},[{regex:\"[{}]\",onMatch:function(e,t,n){return this.next=\"{\"==e?this.nextState:\"\",\"{\"==e&&n.length?(n.unshift(\"start\",t),\"paren.lparen\"):\"}\"==e&&n.length&&(n.shift(),this.next=n.shift(),-1!=this.next.indexOf(\"string\"))?\"paren.end\":\"{\"==e?\"paren.lparen\":\"paren.rparen\"},nextState:\"start\"},{token:\"string.start\",regex:/\"/,push:[{token:\"constant.language.escape\",regex:t},{token:\"string\",regex:/\\\\#{/},{token:\"paren.start\",regex:/#{/,push:\"start\"},{token:\"string.end\",regex:/\"/,next:\"pop\"},{defaultToken:\"string\"}]},{token:\"string.start\",regex:/`/,push:[{token:\"constant.language.escape\",regex:t},{token:\"string\",regex:/\\\\#{/},{token:\"paren.start\",regex:/#{/,push:\"start\"},{token:\"string.end\",regex:/`/,next:\"pop\"},{defaultToken:\"string\"}]},{stateName:\"rpstring\",token:\"string.start\",regex:/%[Qx]?\\(/,push:[{token:\"constant.language.escape\",regex:t},{token:\"string.start\",regex:/\\(/,push:\"rpstring\"},{token:\"string.end\",regex:/\\)/,next:\"pop\"},{token:\"paren.start\",regex:/#{/,push:\"start\"},{defaultToken:\"string\"}]},{stateName:\"spstring\",token:\"string.start\",regex:/%[Qx]?\\[/,push:[{token:\"constant.language.escape\",regex:t},{token:\"string.start\",regex:/\\[/,push:\"spstring\"},{token:\"string.end\",regex:/]/,next:\"pop\"},{token:\"paren.start\",regex:/#{/,push:\"start\"},{defaultToken:\"string\"}]},{stateName:\"fpstring\",token:\"string.start\",regex:/%[Qx]?{/,push:[{token:\"constant.language.escape\",regex:t},{token:\"string.start\",regex:/{/,push:\"fpstring\"},{token:\"string.end\",regex:/}/,next:\"pop\"},{token:\"paren.start\",regex:/#{/,push:\"start\"},{defaultToken:\"string\"}]},{stateName:\"tpstring\",token:\"string.start\",regex:/%[Qx]?</,push:[{token:\"constant.language.escape\",regex:t},{token:\"string.start\",regex:/</,push:\"tpstring\"},{token:\"string.end\",regex:/>/,next:\"pop\"},{token:\"paren.start\",regex:/#{/,push:\"start\"},{defaultToken:\"string\"}]},{stateName:\"ppstring\",token:\"string.start\",regex:/%[Qx]?\\|/,push:[{token:\"constant.language.escape\",regex:t},{token:\"string.end\",regex:/\\|/,next:\"pop\"},{token:\"paren.start\",regex:/#{/,push:\"start\"},{defaultToken:\"string\"}]},{stateName:\"rpqstring\",token:\"string.start\",regex:/%[qwir]\\(/,push:[{token:\"string.start\",regex:/\\(/,push:\"rpqstring\"},{token:\"string.end\",regex:/\\)/,next:\"pop\"},{defaultToken:\"string\"}]},{stateName:\"spqstring\",token:\"string.start\",regex:/%[qwir]\\[/,push:[{token:\"string.start\",regex:/\\[/,push:\"spqstring\"},{token:\"string.end\",regex:/]/,next:\"pop\"},{defaultToken:\"string\"}]},{stateName:\"fpqstring\",token:\"string.start\",regex:/%[qwir]{/,push:[{token:\"string.start\",regex:/{/,push:\"fpqstring\"},{token:\"string.end\",regex:/}/,next:\"pop\"},{defaultToken:\"string\"}]},{stateName:\"tpqstring\",token:\"string.start\",regex:/%[qwir]</,push:[{token:\"string.start\",regex:/</,push:\"tpqstring\"},{token:\"string.end\",regex:/>/,next:\"pop\"},{defaultToken:\"string\"}]},{stateName:\"ppqstring\",token:\"string.start\",regex:/%[qwir]\\|/,push:[{token:\"string.end\",regex:/\\|/,next:\"pop\"},{defaultToken:\"string\"}]},{token:\"string.start\",regex:/'/,push:[{token:\"constant.language.escape\",regex:/\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}})/},{token:\"string.end\",regex:/'|$/,next:\"pop\"},{defaultToken:\"string\"}]}],{token:\"text\",regex:\"::\"},{token:\"variable.instance\",regex:\"@{1,2}[a-zA-Z_\\\\d]+\"},{token:\"variable.fresh\",regex:\"%[a-zA-Z_\\\\d]+\"},{token:\"support.class\",regex:\"[A-Z][a-zA-Z_\\\\d]+\"},{token:\"constant.other.symbol\",regex:\"[:](?:(?:===|<=>|\\\\[]\\\\?|\\\\[]=|\\\\[]|>>|\\\\*\\\\*|<<|==|!=|>=|<=|!~|=~|<|\\\\+|-|\\\\*|\\\\/|%|&|\\\\||\\\\^|>|!|~)|(?:(?:[A-Za-z_]|[@$](?=[a-zA-Z0-9_]))[a-zA-Z0-9_]*[!=?]?))\"},{token:\"constant.numeric\",regex:\"[+-]?\\\\d(?:\\\\d|_(?=\\\\d))*(?:(?:\\\\.\\\\d(?:\\\\d|_(?=\\\\d))*)?(?:[eE][+-]?\\\\d+)?)?(?:_?[fF](?:32|64))?\\\\b\"},{token:\"constant.numeric\",regex:\"(?:[+-]?)(?:(?:0[xX][\\\\dA-Fa-f]+)|(?:[0-9][\\\\d_]*)|(?:0o[0-7][0-7]*)|(?:0[bB][01]+))(?:_?[iIuU](?:8|16|32|64))?\\\\b\"},{token:\"constant.other.symbol\",regex:':\"',push:[{token:\"constant.language.escape\",regex:t},{token:\"constant.other.symbol\",regex:'\"',next:\"pop\"},{defaultToken:\"constant.other.symbol\"}]},{token:\"constant.language.boolean\",regex:\"(?:true|false)\\\\b\"},{token:\"support.function\",regex:\"(?:is_a\\\\?|nil\\\\?|responds_to\\\\?|as\\\\?)\"},{token:e,regex:\"[a-zA-Z_$][a-zA-Z0-9_$!?]*\\\\b\"},{token:\"variable.system\",regex:\"\\\\$\\\\!|\\\\$\\\\?\"},{token:\"punctuation.separator.key-value\",regex:\"=>\"},{stateName:\"heredoc\",onMatch:function(e,t,n){var r=e.split(this.splitRegex);return n.push(\"heredoc\",r[3]),[{type:\"constant\",value:r[1]},{type:\"string\",value:r[2]},{type:\"support.class\",value:r[3]},{type:\"string\",value:r[4]}]},regex:\"(<<-)([']?)([\\\\w]+)([']?)\",rules:{heredoc:[{token:\"string\",regex:\"^ +\"},{onMatch:function(e,t,n){return e===n[1]?(n.shift(),n.shift(),this.next=n[0]||\"start\",\"support.class\"):(this.next=\"\",\"string\")},regex:\".*$\",next:\"start\"}]}},{regex:\"$\",token:\"empty\",next:function(e,t){return\"heredoc\"===t[0]?t[0]:e}},{token:\"punctuation.operator\",regex:/[.]\\s*(?![.])/,push:[{token:\"punctuation.operator\",regex:/[.]\\s*(?![.])/},{token:\"support.function\",regex:\"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"},{regex:\"\",token:\"empty\",next:\"pop\"}]},{token:\"keyword.operator\",regex:\"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|\\\\?|\\\\:|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\^|\\\\|\"},{token:\"punctuation.operator\",regex:/[?:,;.]/},{token:\"paren.lparen\",regex:\"[[({]\"},{token:\"paren.rparen\",regex:\"[\\\\])}]\"},{token:\"text\",regex:\"\\\\s+\"}]},this.normalizeRules()};r.inherits(a,s),t.CrystalHighlightRules=a})),ace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"],(function(e,t,n){\"use strict\";var r=e(\"../range\").Range,s=function(){};(function(){this.checkOutdent=function(e,t){return!!/^\\s+$/.test(e)&&/^\\s*\\}/.test(t)},this.autoOutdent=function(e,t){var n=e.getLine(t).match(/^(\\s*\\})/);if(!n)return 0;var s=n[1].length,a=e.findMatchingBracket({row:t,column:s});if(!a||a.row==t)return 0;var o=this.$getIndent(e.getLine(a.row));e.replace(new r(t,0,t,s-1),o)},this.$getIndent=function(e){return e.match(/^\\s*/)[0]}}).call(s.prototype),t.MatchingBraceOutdent=s})),ace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"],(function(e,t,n){\"use strict\";var r=e(\"../../lib/oop\"),s=e(\"./fold_mode\").FoldMode,a=e(\"../../range\").Range,o=t.FoldMode=function(){};r.inherits(o,s),function(){this.commentBlock=function(e,t){var n=/\\S/,r=e.getLine(t),s=r.search(n);if(-1!=s&&\"#\"==r[s]){for(var o=r.length,i=e.getLength(),g=t,u=t;++t<i;){var p=(r=e.getLine(t)).search(n);if(-1!=p){if(\"#\"!=r[p])break;u=t}}if(u>g){var c=e.getLine(u).length;return new a(g,o,u,c)}}},this.getFoldWidgetRange=function(e,t,n){var r=this.indentationBlock(e,n);return r||((r=this.commentBlock(e,n))||void 0)},this.getFoldWidget=function(e,t,n){var r=e.getLine(n),s=r.search(/\\S/),a=e.getLine(n+1),o=e.getLine(n-1),i=o.search(/\\S/),g=a.search(/\\S/);if(-1==s)return e.foldWidgets[n-1]=-1!=i&&i<g?\"start\":\"\",\"\";if(-1==i){if(s==g&&\"#\"==r[s]&&\"#\"==a[s])return e.foldWidgets[n-1]=\"\",e.foldWidgets[n+1]=\"\",\"start\"}else if(i==s&&\"#\"==r[s]&&\"#\"==o[s]&&-1==e.getLine(n-2).search(/\\S/))return e.foldWidgets[n-1]=\"start\",e.foldWidgets[n+1]=\"\",\"\";return e.foldWidgets[n-1]=-1!=i&&i<s?\"start\":\"\",s<g?\"start\":\"\"}}.call(o.prototype)})),ace.define(\"ace/mode/crystal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/crystal_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\",\"ace/mode/folding/coffee\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/oop\"),s=e(\"./text\").Mode,a=e(\"./crystal_highlight_rules\").CrystalHighlightRules,o=e(\"./matching_brace_outdent\").MatchingBraceOutdent,i=e(\"../range\").Range,g=e(\"./folding/coffee\").FoldMode,u=function(){this.HighlightRules=a,this.$outdent=new o,this.$behaviour=this.$defaultBehaviour,this.foldingRules=new g};r.inherits(u,s),function(){this.lineCommentStart=\"#\",this.getNextLineIndent=function(e,t,n){var r=this.$getIndent(t),s=this.getTokenizer().getLineTokens(t,e).tokens;if(s.length&&\"comment\"==s[s.length-1].type)return r;if(\"start\"==e){var a=t.match(/^.*[\\{\\(\\[]\\s*$/),o=t.match(/^\\s*(class|def|module)\\s.*$/),i=t.match(/.*do(\\s*|\\s+\\|.*\\|\\s*)$/),g=t.match(/^\\s*(if|else|when)\\s*/);(a||o||i||g)&&(r+=n)}return r},this.checkOutdent=function(e,t,n){return/^\\s+(end|else)$/.test(t+n)||this.$outdent.checkOutdent(t,n)},this.autoOutdent=function(e,t,n){var r=t.getLine(n);if(/}/.test(r))return this.$outdent.autoOutdent(t,n);var s=this.$getIndent(r),a=t.getLine(n-1),o=this.$getIndent(a),g=t.getTabString();o.length<=s.length&&s.slice(-g.length)==g&&t.remove(new i(n,s.length-g.length,n,s.length))},this.$id=\"ace/mode/crystal\"}.call(u.prototype),t.Mode=u})),ace.require([\"ace/mode/crystal\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"1bf58fa6b58348a6c70937b2ed372c8d.js","input":"ace.define(\"ace/mode/crystal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var CrystalHighlightRules = function () {\n    var builtinFunctions = \"puts|initialize|previous_def|typeof|as|pointerof|sizeof|instance_sizeof\";\n    var keywords = \"if|end|else|elsif|unless|case|when|break|while|next|until|def|return|class|new|getter|setter|property|lib\" + \"|fun|do|struct|private|protected|public|module|super|abstract|include|extend|begin|enum|raise|yield|with\" + \"|alias|rescue|ensure|macro|uninitialized|union|type|require\";\n    var buildinConstants = \"true|TRUE|false|FALSE|nil|NIL|__LINE__|__END_LINE__|__FILE__|__DIR__\";\n    var builtinVariables = \"$DEBUG|$defout|$FILENAME|$LOAD_PATH|$SAFE|$stdin|$stdout|$stderr|$VERBOSE|\" + \"root_url|flash|session|cookies|params|request|response|logger|self\";\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"constant.language\": buildinConstants,\n      \"variable.language\": builtinVariables,\n      \"support.function\": builtinFunctions\n    }, \"identifier\");\n    var hexNumber = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var decNumber = \"(?:[0-9][\\\\d_]*)\";\n    var octNumber = \"(?:0o[0-7][0-7]*)\";\n    var binNumber = \"(?:0[bB][01]+)\";\n    var intNumber = \"(?:[+-]?)(?:\" + hexNumber + \"|\" + decNumber + \"|\" + octNumber + \"|\" + binNumber + \")(?:_?[iIuU](?:8|16|32|64))?\\\\b\";\n    var escapeExpression = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}})/;\n    var extEscapeExspresssion = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}}|u{(:?[\\da-fA-F]{2}\\s)*[\\da-fA-F]{2}})/;\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"string.regexp\",\n        regex: \"[/]\",\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.regexp\",\n          regex: \"[/][imx]*(?=[).,;\\\\s]|$)\",\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.regexp\"\n        }]\n      }, [{\n        regex: \"[{}]\",\n        onMatch: function (val, state, stack) {\n          this.next = val == \"{\" ? this.nextState : \"\";\n          if (val == \"{\" && stack.length) {\n            stack.unshift(\"start\", state);\n            return \"paren.lparen\";\n          }\n          if (val == \"}\" && stack.length) {\n            stack.shift();\n            this.next = stack.shift();\n            if (this.next.indexOf(\"string\") != -1) return \"paren.end\";\n          }\n          return val == \"{\" ? \"paren.lparen\" : \"paren.rparen\";\n        },\n        nextState: \"start\"\n      }, {\n        token: \"string.start\",\n        regex: /\"/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string\",\n          regex: /\\\\#{/\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          token: \"string.end\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: /`/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string\",\n          regex: /\\\\#{/\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          token: \"string.end\",\n          regex: /`/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"rpstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?\\(/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /\\(/,\n          push: \"rpstring\"\n        }, {\n          token: \"string.end\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"spstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?\\[/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /\\[/,\n          push: \"spstring\"\n        }, {\n          token: \"string.end\",\n          regex: /]/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"fpstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?{/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /{/,\n          push: \"fpstring\"\n        }, {\n          token: \"string.end\",\n          regex: /}/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"tpstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?</,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /</,\n          push: \"tpstring\"\n        }, {\n          token: \"string.end\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"ppstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?\\|/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.end\",\n          regex: /\\|/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"rpqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]\\(/,\n        push: [{\n          token: \"string.start\",\n          regex: /\\(/,\n          push: \"rpqstring\"\n        }, {\n          token: \"string.end\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"spqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]\\[/,\n        push: [{\n          token: \"string.start\",\n          regex: /\\[/,\n          push: \"spqstring\"\n        }, {\n          token: \"string.end\",\n          regex: /]/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"fpqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]{/,\n        push: [{\n          token: \"string.start\",\n          regex: /{/,\n          push: \"fpqstring\"\n        }, {\n          token: \"string.end\",\n          regex: /}/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"tpqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]</,\n        push: [{\n          token: \"string.start\",\n          regex: /</,\n          push: \"tpqstring\"\n        }, {\n          token: \"string.end\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"ppqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]\\|/,\n        push: [{\n          token: \"string.end\",\n          regex: /\\|/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: /'/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: escapeExpression\n        }, {\n          token: \"string.end\",\n          regex: /'|$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }], {\n        token: \"text\",\n        // namespaces aren't symbols\n        regex: \"::\"\n      }, {\n        token: \"variable.instance\",\n        // instance variable\n        regex: \"@{1,2}[a-zA-Z_\\\\d]+\"\n      }, {\n        token: \"variable.fresh\",\n        // fresh variable\n        regex: \"%[a-zA-Z_\\\\d]+\"\n      }, {\n        token: \"support.class\",\n        // class name\n        regex: \"[A-Z][a-zA-Z_\\\\d]+\"\n      }, {\n        token: \"constant.other.symbol\",\n        // symbol\n        regex: \"[:](?:(?:===|<=>|\\\\[]\\\\?|\\\\[]=|\\\\[]|>>|\\\\*\\\\*|<<|==|!=|>=|<=|!~|=~|<|\\\\+|-|\\\\*|\\\\/|%|&|\\\\||\\\\^|>|!|~)|(?:(?:[A-Za-z_]|[@$](?=[a-zA-Z0-9_]))[a-zA-Z0-9_]*[!=?]?))\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d(?:\\\\d|_(?=\\\\d))*(?:(?:\\\\.\\\\d(?:\\\\d|_(?=\\\\d))*)?(?:[eE][+-]?\\\\d+)?)?(?:_?[fF](?:32|64))?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        regex: intNumber\n      }, {\n        token: \"constant.other.symbol\",\n        regex: ':\"',\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"constant.other.symbol\",\n          regex: '\"',\n          next: \"pop\"\n        }, {\n          defaultToken: \"constant.other.symbol\"\n        }]\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false)\\\\b\"\n      }, {\n        token: \"support.function\",\n        regex: \"(?:is_a\\\\?|nil\\\\?|responds_to\\\\?|as\\\\?)\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$!?]*\\\\b\"\n      }, {\n        token: \"variable.system\",\n        regex: \"\\\\$\\\\!|\\\\$\\\\?\"\n      }, {\n        token: \"punctuation.separator.key-value\",\n        regex: \"=>\"\n      }, {\n        stateName: \"heredoc\",\n        onMatch: function (value, currentState, stack) {\n          var next = \"heredoc\";\n          var tokens = value.split(this.splitRegex);\n          stack.push(next, tokens[3]);\n          return [{\n            type: \"constant\",\n            value: tokens[1]\n          }, {\n            type: \"string\",\n            value: tokens[2]\n          }, {\n            type: \"support.class\",\n            value: tokens[3]\n          }, {\n            type: \"string\",\n            value: tokens[4]\n          }];\n        },\n        regex: \"(<<-)([']?)([\\\\w]+)([']?)\",\n        rules: {\n          heredoc: [{\n            token: \"string\",\n            regex: \"^ +\"\n          }, {\n            onMatch: function (value, currentState, stack) {\n              if (value === stack[1]) {\n                stack.shift();\n                stack.shift();\n                this.next = stack[0] || \"start\";\n                return \"support.class\";\n              }\n              this.next = \"\";\n              return \"string\";\n            },\n            regex: \".*$\",\n            next: \"start\"\n          }]\n        }\n      }, {\n        regex: \"$\",\n        token: \"empty\",\n        next: function (currentState, stack) {\n          if (stack[0] === \"heredoc\") return stack[0];\n          return currentState;\n        }\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[.]\\s*(?![.])/,\n        push: [{\n          token: \"punctuation.operator\",\n          regex: /[.]\\s*(?![.])/\n        }, {\n          token: \"support.function\",\n          regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n          regex: \"\",\n          token: \"empty\",\n          next: \"pop\"\n        }]\n      }, {\n        token: \"keyword.operator\",\n        regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|\\\\?|\\\\:|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\^|\\\\|\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[?:,;.]/\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  oop.inherits(CrystalHighlightRules, TextHighlightRules);\n  exports.CrystalHighlightRules = CrystalHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var Range = require(\"../../range\").Range;\n  var FoldMode = exports.FoldMode = function () {};\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.commentBlock = function (session, row) {\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      range = this.commentBlock(session, row);\n      if (range) return range;\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/crystal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/crystal_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/range\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var CrystalHighlightRules = require(\"./crystal_highlight_rules\").CrystalHighlightRules;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var Range = require(\"../range\").Range;\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = CrystalHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n        var startingClassOrMethod = line.match(/^\\s*(class|def|module)\\s.*$/);\n        var startingDoBlock = line.match(/.*do(\\s*|\\s+\\|.*\\|\\s*)$/);\n        var startingConditional = line.match(/^\\s*(if|else|when)\\s*/);\n        if (match || startingClassOrMethod || startingDoBlock || startingConditional) {\n          indent += tab;\n        }\n      }\n      return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n      return /^\\s+(end|else)$/.test(line + input) || this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, session, row) {\n      var line = session.getLine(row);\n      if (/}/.test(line)) return this.$outdent.autoOutdent(session, row);\n      var indent = this.$getIndent(line);\n      var prevLine = session.getLine(row - 1);\n      var prevIndent = this.$getIndent(prevLine);\n      var tab = session.getTabString();\n      if (prevIndent.length <= indent.length) {\n        if (indent.slice(-tab.length) == tab) session.remove(new Range(row, indent.length - tab.length, row, indent.length));\n      }\n    };\n    this.$id = \"ace/mode/crystal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/crystal\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}