{"code":"ace.define(\"ace/mode/bibtex_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/oop\"),i=e(\"./text_highlight_rules\").TextHighlightRules,o=function(){this.$rules={start:[{token:\"comment\",regex:/@Comment\\{/,stateName:\"bibtexComment\",push:[{token:\"comment\",regex:/}/,next:\"pop\"},{token:\"comment\",regex:/\\{/,push:\"bibtexComment\"},{defaultToken:\"comment\"}]},{token:[\"keyword\",\"text\",\"paren.lparen\",\"text\",\"variable\",\"text\",\"keyword.operator\"],regex:/(@String)(\\s*)(\\{)(\\s*)([a-zA-Z]*)(\\s*)(=)/,push:[{token:\"paren.rparen\",regex:/\\}/,next:\"pop\"},{include:\"#misc\"},{defaultToken:\"text\"}]},{token:[\"keyword\",\"text\",\"paren.lparen\",\"text\",\"variable\",\"text\",\"keyword.operator\"],regex:/(@String)(\\s*)(\\()(\\s*)([a-zA-Z]*)(\\s*)(=)/,push:[{token:\"paren.rparen\",regex:/\\)/,next:\"pop\"},{include:\"#misc\"},{defaultToken:\"text\"}]},{token:[\"keyword\",\"text\",\"paren.lparen\"],regex:/(@preamble)(\\s*)(\\()/,push:[{token:\"paren.rparen\",regex:/\\)/,next:\"pop\"},{include:\"#misc\"},{defaultToken:\"text\"}]},{token:[\"keyword\",\"text\",\"paren.lparen\"],regex:/(@preamble)(\\s*)(\\{)/,push:[{token:\"paren.rparen\",regex:/\\}/,next:\"pop\"},{include:\"#misc\"},{defaultToken:\"text\"}]},{token:[\"keyword\",\"text\",\"paren.lparen\",\"text\",\"support.class\"],regex:/(@[a-zA-Z]+)(\\s*)(\\{)(\\s*)([\\w-]+)/,push:[{token:\"paren.rparen\",regex:/\\}/,next:\"pop\"},{token:[\"variable\",\"text\",\"keyword.operator\"],regex:/([a-zA-Z0-9\\!\\$\\&\\*\\+\\-\\.\\/\\:\\;\\<\\>\\?\\[\\]\\^\\_\\`\\|]+)(\\s*)(=)/,push:[{token:\"text\",regex:/(?=[,}])/,next:\"pop\"},{include:\"#misc\"},{include:\"#integer\"},{defaultToken:\"text\"}]},{token:\"punctuation\",regex:/,/},{defaultToken:\"text\"}]},{defaultToken:\"comment\"}],\"#integer\":[{token:\"constant.numeric.bibtex\",regex:/\\d+/}],\"#misc\":[{token:\"string\",regex:/\"/,push:\"#string_quotes\"},{token:\"paren.lparen\",regex:/\\{/,push:\"#string_braces\"},{token:\"keyword.operator\",regex:/#/}],\"#string_braces\":[{token:\"paren.rparen\",regex:/\\}/,next:\"pop\"},{token:\"invalid.illegal\",regex:/@/},{include:\"#misc\"},{defaultToken:\"string\"}],\"#string_quotes\":[{token:\"string\",regex:/\"/,next:\"pop\"},{include:\"#misc\"},{defaultToken:\"string\"}]},this.normalizeRules()};r.inherits(o,i),t.BibTeXHighlightRules=o})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var r=e(\"../../lib/oop\"),i=e(\"../../range\").Range,o=e(\"./fold_mode\").FoldMode,s=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};r.inherits(s,o),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var r=e.getLine(n);if(this.singleLineBlockCommentRe.test(r)&&!this.startRegionRe.test(r)&&!this.tripleStarBlockCommentRe.test(r))return\"\";var i=this._getFoldWidgetBase(e,t,n);return!i&&this.startRegionRe.test(r)?\"start\":i},this.getFoldWidgetRange=function(e,t,n,r){var i,o=e.getLine(n);if(this.startRegionRe.test(o))return this.getCommentRegionBlock(e,o,n);if(i=o.match(this.foldingStartMarker)){var s=i.index;if(i[1])return this.openingBracketBlock(e,i[1],n,s);var a=e.getCommentFoldRange(n,s+i[0].length,1);return a&&!a.isMultiLine()&&(r?a=this.getSectionRange(e,n):\"all\"!=t&&(a=null)),a}if(\"markbegin\"!==t&&(i=o.match(this.foldingStopMarker))){s=i.index+i[0].length;return i[1]?this.closingBracketBlock(e,i[1],n,s):e.getCommentFoldRange(n,s,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),r=n.search(/\\S/),o=t,s=n.length,a=t+=1,l=e.getLength();++t<l;){var g=(n=e.getLine(t)).search(/\\S/);if(-1!==g){if(r>g)break;var d=this.getFoldWidgetRange(e,\"all\",t);if(d){if(d.start.row<=o)break;if(d.isMultiLine())t=d.end.row;else if(r==g)break}a=t}}return new i(o,s,a,e.getLine(a).length)},this.getCommentRegionBlock=function(e,t,n){for(var r=t.search(/\\s*$/),o=e.getLength(),s=n,a=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,l=1;++n<o;){t=e.getLine(n);var g=a.exec(t);if(g&&(g[1]?l--:l++,!l))break}if(n>s)return new i(s,r,n,t.length)}}.call(s.prototype)})),ace.define(\"ace/mode/bibtex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/bibtex_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/oop\"),i=e(\"./text\").Mode,o=e(\"./bibtex_highlight_rules\").BibTeXHighlightRules,s=e(\"./folding/cstyle\").FoldMode,a=function(){this.HighlightRules=o,this.foldingRules=new s};r.inherits(a,i),function(){this.$id=\"ace/mode/bibtex\"}.call(a.prototype),t.Mode=a})),ace.require([\"ace/mode/bibtex\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"2d9f7344d33decea94330727cce381b3.js","input":"ace.define(\"ace/mode/bibtex_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var BibTeXHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: \"comment\",\n        regex: /@Comment\\{/,\n        stateName: \"bibtexComment\",\n        push: [{\n          token: \"comment\",\n          regex: /}/,\n          next: \"pop\"\n        }, {\n          token: \"comment\",\n          regex: /\\{/,\n          push: \"bibtexComment\"\n        }, {\n          defaultToken: \"comment\"\n        }]\n      }, {\n        token: [\"keyword\", \"text\", \"paren.lparen\", \"text\", \"variable\", \"text\", \"keyword.operator\"],\n        regex: /(@String)(\\s*)(\\{)(\\s*)([a-zA-Z]*)(\\s*)(=)/,\n        push: [{\n          token: \"paren.rparen\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#misc\"\n        }, {\n          defaultToken: \"text\"\n        }]\n      }, {\n        token: [\"keyword\", \"text\", \"paren.lparen\", \"text\", \"variable\", \"text\", \"keyword.operator\"],\n        regex: /(@String)(\\s*)(\\()(\\s*)([a-zA-Z]*)(\\s*)(=)/,\n        push: [{\n          token: \"paren.rparen\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#misc\"\n        }, {\n          defaultToken: \"text\"\n        }]\n      }, {\n        token: [\"keyword\", \"text\", \"paren.lparen\"],\n        regex: /(@preamble)(\\s*)(\\()/,\n        push: [{\n          token: \"paren.rparen\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#misc\"\n        }, {\n          defaultToken: \"text\"\n        }]\n      }, {\n        token: [\"keyword\", \"text\", \"paren.lparen\"],\n        regex: /(@preamble)(\\s*)(\\{)/,\n        push: [{\n          token: \"paren.rparen\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#misc\"\n        }, {\n          defaultToken: \"text\"\n        }]\n      }, {\n        token: [\"keyword\", \"text\", \"paren.lparen\", \"text\", \"support.class\"],\n        regex: /(@[a-zA-Z]+)(\\s*)(\\{)(\\s*)([\\w-]+)/,\n        push: [{\n          token: \"paren.rparen\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          token: [\"variable\", \"text\", \"keyword.operator\"],\n          regex: /([a-zA-Z0-9\\!\\$\\&\\*\\+\\-\\.\\/\\:\\;\\<\\>\\?\\[\\]\\^\\_\\`\\|]+)(\\s*)(=)/,\n          push: [{\n            token: \"text\",\n            regex: /(?=[,}])/,\n            next: \"pop\"\n          }, {\n            include: \"#misc\"\n          }, {\n            include: \"#integer\"\n          }, {\n            defaultToken: \"text\"\n          }]\n        }, {\n          token: \"punctuation\",\n          regex: /,/\n        }, {\n          defaultToken: \"text\"\n        }]\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"#integer\": [{\n        token: \"constant.numeric.bibtex\",\n        regex: /\\d+/\n      }],\n      \"#misc\": [{\n        token: \"string\",\n        regex: /\"/,\n        push: \"#string_quotes\"\n      }, {\n        token: \"paren.lparen\",\n        regex: /\\{/,\n        push: \"#string_braces\"\n      }, {\n        token: \"keyword.operator\",\n        regex: /#/\n      }],\n      \"#string_braces\": [{\n        token: \"paren.rparen\",\n        regex: /\\}/,\n        next: \"pop\"\n      }, {\n        token: \"invalid.illegal\",\n        regex: /@/\n      }, {\n        include: \"#misc\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"#string_quotes\": [{\n        token: \"string\",\n        regex: /\"/,\n        next: \"pop\"\n      }, {\n        include: \"#misc\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  oop.inherits(BibTeXHighlightRules, TextHighlightRules);\n  exports.BibTeXHighlightRules = BibTeXHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/bibtex\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/bibtex_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var BibTeXHighlightRules = require(\"./bibtex_highlight_rules\").BibTeXHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = BibTeXHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/bibtex\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/bibtex\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}