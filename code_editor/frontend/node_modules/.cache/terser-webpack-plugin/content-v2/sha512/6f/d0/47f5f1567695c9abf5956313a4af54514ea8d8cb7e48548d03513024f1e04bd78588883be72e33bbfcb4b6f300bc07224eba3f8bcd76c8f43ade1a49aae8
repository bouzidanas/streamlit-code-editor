{"code":"ace.define(\"ace/mode/mips_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,i){\"use strict\";var n=e(\"../lib/oop\"),o=e(\"./text_highlight_rules\").TextHighlightRules,s=function(){var e=/\\\\(?:['\"?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}U[a-fA-F\\d]{8}|.)/.source;this.$rules={start:[{token:\"storage.modifier.mips\",regex:/\\.\\b(?:align|ascii|asciiz|byte|double|extern|float|globl|space|word)\\b/,comment:\"Assembler directives for data storage\"},{token:\"entity.name.section.mips\",regex:/\\.\\b(?:data|text|kdata|ktext|)\\b/,comment:\"Segements: .data .text\"},{token:\"variable.parameter.mips\",regex:/\\$(?:(?:3[01]|[12]?[0-9]|[0-9])|zero|at|v[01]|a[0-3]|s[0-7]|t[0-9]|k[01]|gp|sp|fp|ra)/,comment:\"Registers by id $1, $2, ...\"},{token:\"variable.parameter.mips\",regex:/\\$f(?:[0-9]|[1-2][0-9]|3[0-1])/,comment:\"Floating point registers\"},{token:\"support.function.source.mips\",regex:/\\b(?:(?:add|sub|div|l|mov|mult|neg|s|c\\.eq|c\\.le|c\\.lt)\\.[ds]|cvt\\.s\\.[dw]|cvt\\.d\\.[sw]|cvt\\.w\\.[ds]|bc1[tf])\\b/,comment:\"The MIPS floating-point instruction set\"},{token:\"support.function.source.mips\",regex:/\\b(?:add|addu|addi|addiu|sub|subu|and|andi|or|not|ori|nor|xor|xori|slt|sltu|slti|sltiu|sll|sllv|rol|srl|sra|srlv|ror|j|jr|jal|beq|bne|lw|sw|lb|sb|lui|move|mfhi|mflo|mthi|mtlo)\\b/,comment:\"Just the hardcoded instructions provided by the MIPS assembly language\"},{token:\"support.function.other.mips\",regex:/\\b(?:abs|b|beqz|bge|bgt|bgtu|ble|bleu|blt|bltu|bnez|div|divu|la|li|move|mul|neg|not|rem|remu|seq|sge|sgt|sle|sne)\\b/,comment:\"Pseudo instructions\"},{token:\"entity.name.function.mips\",regex:/\\bsyscall\\b/,comment:\"Other\"},{token:\"string\",regex:\"(?:'\\\")(?:\"+e+\"|.)?(?:'\\\")\"},{token:\"string.start\",regex:\"'\",stateName:\"qstring\",next:[{token:\"string\",regex:/\\\\\\s*$/,next:\"qqstring\"},{token:\"constant.language.escape\",regex:e},{token:\"string.end\",regex:\"'|$\",next:\"start\"},{defaultToken:\"string\"}]},{token:\"string.start\",regex:'\"',stateName:\"qqstring\",next:[{token:\"string\",regex:/\\\\\\s*$/,next:\"qqstring\"},{token:\"constant.language.escape\",regex:e},{token:\"string.end\",regex:'\"|$',next:\"start\"},{defaultToken:\"string\"}]},{token:\"constant.numeric.mips\",regex:/\\b(?:\\d+|0(?:x|X)[a-fA-F0-9]+)\\b/,comment:\"Numbers like +12, -3, 55, 0x3F\"},{token:\"entity.name.tag.mips\",regex:/\\b[\\w]+\\b:/,comment:\"Labels at line start: begin_repeat: add ...\"},{token:\"comment.assembly\",regex:/#.*$/,comment:\"Single line comments\"}]},this.normalizeRules()};s.metaData={fileTypes:[\"s\",\"asm\"],name:\"MIPS\",scopeName:\"source.mips\"},n.inherits(s,o),t.MIPSHighlightRules=s})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,i){\"use strict\";var n=e(\"../../lib/oop\"),o=e(\"../../range\").Range,s=e(\"./fold_mode\").FoldMode,r=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};n.inherits(r,s),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,i){var n=e.getLine(i);if(this.singleLineBlockCommentRe.test(n)&&!this.startRegionRe.test(n)&&!this.tripleStarBlockCommentRe.test(n))return\"\";var o=this._getFoldWidgetBase(e,t,i);return!o&&this.startRegionRe.test(n)?\"start\":o},this.getFoldWidgetRange=function(e,t,i,n){var o,s=e.getLine(i);if(this.startRegionRe.test(s))return this.getCommentRegionBlock(e,s,i);if(o=s.match(this.foldingStartMarker)){var r=o.index;if(o[1])return this.openingBracketBlock(e,o[1],i,r);var a=e.getCommentFoldRange(i,r+o[0].length,1);return a&&!a.isMultiLine()&&(n?a=this.getSectionRange(e,i):\"all\"!=t&&(a=null)),a}if(\"markbegin\"!==t&&(o=s.match(this.foldingStopMarker))){r=o.index+o[0].length;return o[1]?this.closingBracketBlock(e,o[1],i,r):e.getCommentFoldRange(i,r,-1)}},this.getSectionRange=function(e,t){for(var i=e.getLine(t),n=i.search(/\\S/),s=t,r=i.length,a=t+=1,l=e.getLength();++t<l;){var g=(i=e.getLine(t)).search(/\\S/);if(-1!==g){if(n>g)break;var m=this.getFoldWidgetRange(e,\"all\",t);if(m){if(m.start.row<=s)break;if(m.isMultiLine())t=m.end.row;else if(n==g)break}a=t}}return new o(s,r,a,e.getLine(a).length)},this.getCommentRegionBlock=function(e,t,i){for(var n=t.search(/\\s*$/),s=e.getLength(),r=i,a=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,l=1;++i<s;){t=e.getLine(i);var g=a.exec(t);if(g&&(g[1]?l--:l++,!l))break}if(i>r)return new o(r,n,i,t.length)}}.call(r.prototype)})),ace.define(\"ace/mode/mips\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/mips_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,i){\"use strict\";var n=e(\"../lib/oop\"),o=e(\"./text\").Mode,s=e(\"./mips_highlight_rules\").MIPSHighlightRules,r=e(\"./folding/cstyle\").FoldMode,a=function(){this.HighlightRules=s,this.foldingRules=new r};n.inherits(a,o),function(){this.lineCommentStart=[\"#\"],this.$id=\"ace/mode/mips\"}.call(a.prototype),t.Mode=a})),ace.require([\"ace/mode/mips\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"40ce05e01ca6318be0e15700b379c190.js","input":"ace.define(\"ace/mode/mips_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from mips.tmLanguage (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var MIPSHighlightRules = function () {\n    var escapeRe = /\\\\(?:['\"?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}U[a-fA-F\\d]{8}|.)/.source;\n    this.$rules = {\n      start: [{\n        token: \"storage.modifier.mips\",\n        regex: /\\.\\b(?:align|ascii|asciiz|byte|double|extern|float|globl|space|word)\\b/,\n        comment: \"Assembler directives for data storage\"\n      }, {\n        token: \"entity.name.section.mips\",\n        regex: /\\.\\b(?:data|text|kdata|ktext|)\\b/,\n        comment: \"Segements: .data .text\"\n      }, {\n        token: \"variable.parameter.mips\",\n        regex: /\\$(?:(?:3[01]|[12]?[0-9]|[0-9])|zero|at|v[01]|a[0-3]|s[0-7]|t[0-9]|k[01]|gp|sp|fp|ra)/,\n        comment: \"Registers by id $1, $2, ...\"\n      }, {\n        token: \"variable.parameter.mips\",\n        regex: /\\$f(?:[0-9]|[1-2][0-9]|3[0-1])/,\n        comment: \"Floating point registers\"\n      }, {\n        token: \"support.function.source.mips\",\n        regex: /\\b(?:(?:add|sub|div|l|mov|mult|neg|s|c\\.eq|c\\.le|c\\.lt)\\.[ds]|cvt\\.s\\.[dw]|cvt\\.d\\.[sw]|cvt\\.w\\.[ds]|bc1[tf])\\b/,\n        comment: \"The MIPS floating-point instruction set\"\n      }, {\n        token: \"support.function.source.mips\",\n        regex: /\\b(?:add|addu|addi|addiu|sub|subu|and|andi|or|not|ori|nor|xor|xori|slt|sltu|slti|sltiu|sll|sllv|rol|srl|sra|srlv|ror|j|jr|jal|beq|bne|lw|sw|lb|sb|lui|move|mfhi|mflo|mthi|mtlo)\\b/,\n        comment: \"Just the hardcoded instructions provided by the MIPS assembly language\"\n      }, {\n        token: \"support.function.other.mips\",\n        regex: /\\b(?:abs|b|beqz|bge|bgt|bgtu|ble|bleu|blt|bltu|bnez|div|divu|la|li|move|mul|neg|not|rem|remu|seq|sge|sgt|sle|sne)\\b/,\n        comment: \"Pseudo instructions\"\n      }, {\n        token: \"entity.name.function.mips\",\n        regex: /\\bsyscall\\b/,\n        comment: \"Other\"\n      }, {\n        token: \"string\",\n        // character\n        regex: \"(?:'\\\")(?:\" + escapeRe + \"|.)?(?:'\\\")\"\n      }, {\n        token: \"string.start\",\n        regex: '\\'',\n        stateName: \"qstring\",\n        next: [{\n          token: \"string\",\n          regex: /\\\\\\s*$/,\n          next: \"qqstring\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: escapeRe\n        }, {\n          token: \"string.end\",\n          regex: '\\'|$',\n          next: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: '\"',\n        stateName: \"qqstring\",\n        next: [{\n          token: \"string\",\n          regex: /\\\\\\s*$/,\n          next: \"qqstring\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: escapeRe\n        }, {\n          token: \"string.end\",\n          regex: '\"|$',\n          next: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"constant.numeric.mips\",\n        regex: /\\b(?:\\d+|0(?:x|X)[a-fA-F0-9]+)\\b/,\n        comment: \"Numbers like +12, -3, 55, 0x3F\"\n      }, {\n        token: \"entity.name.tag.mips\",\n        regex: /\\b[\\w]+\\b:/,\n        comment: \"Labels at line start: begin_repeat: add ...\"\n      }, {\n        token: \"comment.assembly\",\n        regex: /#.*$/,\n        comment: \"Single line comments\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  MIPSHighlightRules.metaData = {\n    fileTypes: [\"s\", \"asm\"],\n    name: \"MIPS\",\n    scopeName: \"source.mips\"\n  };\n  oop.inherits(MIPSHighlightRules, TextHighlightRules);\n  exports.MIPSHighlightRules = MIPSHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/mips\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/mips_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var MIPSHighlightRules = require(\"./mips_highlight_rules\").MIPSHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = MIPSHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"#\"];\n    this.$id = \"ace/mode/mips\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/mips\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}