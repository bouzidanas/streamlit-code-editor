{"code":"ace.define(\"ace/ext/command_bar\",[\"require\",\"exports\",\"module\",\"ace/tooltip\",\"ace/lib/event_emitter\",\"ace/lib/lang\",\"ace/lib/dom\",\"ace/lib/oop\",\"ace/lib/useragent\"],(function(t,e,o){var i=this&&this.__values||function(t){var e=\"function\"===typeof Symbol&&Symbol.iterator,o=e&&t[e],i=0;if(o)return o.call(t);if(t&&\"number\"===typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},n=t(\"../tooltip\").Tooltip,s=t(\"../lib/event_emitter\").EventEmitter,r=t(\"../lib/lang\"),a=t(\"../lib/dom\"),h=t(\"../lib/oop\"),l=t(\"../lib/useragent\"),d=\"command_bar_tooltip_button\",c=\"command_bar_button_value\",p=\"command_bar_button_caption\",m=\"command_bar_keybinding\",u=\"command_bar_tooltip\",f=\"MoreOptionsButton\",g=function(t,e){return e.row>t.row||e.row===t.row&&e.column>t.column?t:e},v={Ctrl:{mac:\"^\"},Option:{mac:\"\\u2325\"},Command:{mac:\"\\u2318\"},Cmd:{mac:\"\\u2318\"},Shift:\"\\u21e7\",Left:\"\\u2190\",Right:\"\\u2192\",Up:\"\\u2191\",Down:\"\\u2193\"},b=function(){function t(t,e){var o,s;e=e||{},this.parentNode=t,this.tooltip=new n(this.parentNode),this.moreOptions=new n(this.parentNode),this.maxElementsOnTooltip=e.maxElementsOnTooltip||4,this.$alwaysShow=e.alwaysShow||!1,this.eventListeners={},this.elements={},this.commands={},this.tooltipEl=a.buildDom([\"div\",{class:u}],this.tooltip.getElement()),this.moreOptionsEl=a.buildDom([\"div\",{class:u+\" tooltip_more_options\"}],this.moreOptions.getElement()),this.$showTooltipTimer=r.delayedCall(this.$showTooltip.bind(this),e.showDelay||100),this.$hideTooltipTimer=r.delayedCall(this.$hideTooltip.bind(this),e.hideDelay||100),this.$tooltipEnter=this.$tooltipEnter.bind(this),this.$onMouseMove=this.$onMouseMove.bind(this),this.$onChangeScroll=this.$onChangeScroll.bind(this),this.$onEditorChangeSession=this.$onEditorChangeSession.bind(this),this.$scheduleTooltipForHide=this.$scheduleTooltipForHide.bind(this),this.$preventMouseEvent=this.$preventMouseEvent.bind(this);try{for(var h=i([\"mousedown\",\"mouseup\",\"click\"]),l=h.next();!l.done;l=h.next()){var d=l.value;this.tooltip.getElement().addEventListener(d,this.$preventMouseEvent),this.moreOptions.getElement().addEventListener(d,this.$preventMouseEvent)}}catch(c){o={error:c}}finally{try{l&&!l.done&&(s=h.return)&&s.call(h)}finally{if(o)throw o.error}}}return t.prototype.registerCommand=function(t,e){var o=Object.keys(this.commands).length<this.maxElementsOnTooltip;o||this.elements[f]||this.$createCommand(f,{name:\"\\xb7\\xb7\\xb7\",exec:function(){this.$shouldHideMoreOptions=!1,this.$setMoreOptionsVisibility(!this.isMoreOptionsShown())}.bind(this),type:\"checkbox\",getValue:function(){return this.isMoreOptionsShown()}.bind(this),enabled:!0},!0),this.$createCommand(t,e,o),this.isShown()&&this.updatePosition()},t.prototype.isShown=function(){return!!this.tooltip&&this.tooltip.isOpen},t.prototype.isMoreOptionsShown=function(){return!!this.moreOptions&&this.moreOptions.isOpen},t.prototype.getAlwaysShow=function(){return this.$alwaysShow},t.prototype.setAlwaysShow=function(t){this.$alwaysShow=t,this.$updateOnHoverHandlers(!this.$alwaysShow),this._signal(\"alwaysShow\",this.$alwaysShow)},t.prototype.attach=function(t){!t||this.isShown()&&this.editor===t||(this.detach(),this.editor=t,this.editor.on(\"changeSession\",this.$onEditorChangeSession),this.editor.session&&(this.editor.session.on(\"changeScrollLeft\",this.$onChangeScroll),this.editor.session.on(\"changeScrollTop\",this.$onChangeScroll)),this.getAlwaysShow()?this.$showTooltip():this.$updateOnHoverHandlers(!0))},t.prototype.updatePosition=function(){if(this.editor){var t,e=this.editor.renderer;if((t=this.editor.selection.getAllRanges?this.editor.selection.getAllRanges():[this.editor.getSelectionRange()]).length){for(var o,i=g(t[0].start,t[0].end),n=0;o=t[n];n++)i=g(i,g(o.start,o.end));var s=e.$cursorLayer.getPixelPosition(i,!0),r=this.tooltip.getElement(),a=window.innerWidth,h=window.innerHeight,l=this.editor.container.getBoundingClientRect();s.top+=l.top-e.layerConfig.offset,s.left+=l.left+e.gutterWidth-e.scrollLeft;var d=s.top>=l.top&&s.top<=l.bottom&&s.left>=l.left+e.gutterWidth&&s.left<=l.right;if(d||!this.isShown())if(d&&!this.isShown()&&this.getAlwaysShow())this.$showTooltip();else{var c=s.top-r.offsetHeight,p=Math.min(a-r.offsetWidth,s.left);if(c>=0&&c+r.offsetHeight<=h&&p>=0&&p+r.offsetWidth<=a){if(this.tooltip.setPosition(p,c),this.isMoreOptionsShown()){c+=r.offsetHeight,p=this.elements[f].getBoundingClientRect().left;var m=this.moreOptions.getElement();h=window.innerHeight;c+m.offsetHeight>h&&(c-=r.offsetHeight+m.offsetHeight),p+m.offsetWidth>a&&(p=a-m.offsetWidth),this.moreOptions.setPosition(p,c)}}else this.$hideTooltip()}else this.$hideTooltip()}}},t.prototype.update=function(){Object.keys(this.elements).forEach(this.$updateElement.bind(this))},t.prototype.detach=function(){this.tooltip.hide(),this.moreOptions.hide(),this.$updateOnHoverHandlers(!1),this.editor&&(this.editor.off(\"changeSession\",this.$onEditorChangeSession),this.editor.session&&(this.editor.session.off(\"changeScrollLeft\",this.$onChangeScroll),this.editor.session.off(\"changeScrollTop\",this.$onChangeScroll))),this.$mouseInTooltip=!1,this.editor=null},t.prototype.destroy=function(){this.tooltip&&this.moreOptions&&(this.detach(),this.tooltip.destroy(),this.moreOptions.destroy()),this.eventListeners={},this.commands={},this.elements={},this.tooltip=this.moreOptions=this.parentNode=null},t.prototype.$createCommand=function(t,e,o){var i,n=o?this.tooltipEl:this.moreOptionsEl,s=[],r=e.bindKey;r&&(\"object\"===typeof r&&(r=l.isMac?r.mac:r.win),s=(s=(r=r.split(\"|\")[0]).split(\"-\")).map((function(t){if(v[t]){if(\"string\"===typeof v[t])return v[t];if(l.isMac&&v[t].mac)return v[t].mac}return t}))),o&&e.iconCssClass?i=[\"div\",{class:[\"ace_icon_svg\",e.iconCssClass].join(\" \"),\"aria-label\":e.name+\" (\"+e.bindKey+\")\"}]:(i=[[\"div\",{class:c}],[\"div\",{class:p},e.name]],s.length&&i.push([\"div\",{class:m},s.map((function(t){return[\"div\",t]}))])),a.buildDom([\"div\",{class:[d,e.cssClass||\"\"].join(\" \"),ref:t},i],n,this.elements),this.commands[t]=e;var h=function(o){this.editor&&this.editor.focus(),this.$shouldHideMoreOptions=this.isMoreOptionsShown(),!this.elements[t].disabled&&e.exec&&e.exec(this.editor),this.$shouldHideMoreOptions&&this.$setMoreOptionsVisibility(!1),this.update(),o.preventDefault()}.bind(this);this.eventListeners[t]=h,this.elements[t].addEventListener(\"click\",h.bind(this)),this.$updateElement(t)},t.prototype.$setMoreOptionsVisibility=function(t){t?(this.moreOptions.setTheme(this.editor.renderer.theme),this.moreOptions.setClassName(u+\"_wrapper\"),this.moreOptions.show(),this.update(),this.updatePosition()):this.moreOptions.hide()},t.prototype.$onEditorChangeSession=function(t){t.oldSession&&(t.oldSession.off(\"changeScrollTop\",this.$onChangeScroll),t.oldSession.off(\"changeScrollLeft\",this.$onChangeScroll)),this.detach()},t.prototype.$onChangeScroll=function(){this.editor.renderer&&(this.isShown()||this.getAlwaysShow())&&this.editor.renderer.once(\"afterRender\",this.updatePosition.bind(this))},t.prototype.$onMouseMove=function(t){if(!this.$mouseInTooltip){var e=this.editor.getCursorPosition(),o=this.editor.renderer.textToScreenCoordinates(e.row,e.column),i=this.editor.renderer.lineHeight;t.clientY>=o.pageY&&t.clientY<o.pageY+i?(this.isShown()||this.$showTooltipTimer.isPending()||this.$showTooltipTimer.delay(),this.$hideTooltipTimer.isPending()&&this.$hideTooltipTimer.cancel()):(this.isShown()&&!this.$hideTooltipTimer.isPending()&&this.$hideTooltipTimer.delay(),this.$showTooltipTimer.isPending()&&this.$showTooltipTimer.cancel())}},t.prototype.$preventMouseEvent=function(t){this.editor&&this.editor.focus(),t.preventDefault()},t.prototype.$scheduleTooltipForHide=function(){this.$mouseInTooltip=!1,this.$showTooltipTimer.cancel(),this.$hideTooltipTimer.delay()},t.prototype.$tooltipEnter=function(){this.$mouseInTooltip=!0,this.$showTooltipTimer.isPending()&&this.$showTooltipTimer.cancel(),this.$hideTooltipTimer.isPending()&&this.$hideTooltipTimer.cancel()},t.prototype.$updateOnHoverHandlers=function(t){var e=this.tooltip.getElement(),o=this.moreOptions.getElement();t?(this.editor&&(this.editor.on(\"mousemove\",this.$onMouseMove),this.editor.renderer.getMouseEventTarget().addEventListener(\"mouseout\",this.$scheduleTooltipForHide,!0)),e.addEventListener(\"mouseenter\",this.$tooltipEnter),e.addEventListener(\"mouseleave\",this.$scheduleTooltipForHide),o.addEventListener(\"mouseenter\",this.$tooltipEnter),o.addEventListener(\"mouseleave\",this.$scheduleTooltipForHide)):(this.editor&&(this.editor.off(\"mousemove\",this.$onMouseMove),this.editor.renderer.getMouseEventTarget().removeEventListener(\"mouseout\",this.$scheduleTooltipForHide,!0)),e.removeEventListener(\"mouseenter\",this.$tooltipEnter),e.removeEventListener(\"mouseleave\",this.$scheduleTooltipForHide),o.removeEventListener(\"mouseenter\",this.$tooltipEnter),o.removeEventListener(\"mouseleave\",this.$scheduleTooltipForHide))},t.prototype.$showTooltip=function(){this.isShown()||(this.tooltip.setTheme(this.editor.renderer.theme),this.tooltip.setClassName(u+\"_wrapper\"),this.tooltip.show(),this.update(),this.updatePosition(),this._signal(\"show\"))},t.prototype.$hideTooltip=function(){this.$mouseInTooltip=!1,this.isShown()&&(this.moreOptions.hide(),this.tooltip.hide(),this._signal(\"hide\"))},t.prototype.$updateElement=function(t){var e=this.commands[t];if(e){var o=this.elements[t],i=e.enabled;if(\"function\"===typeof i&&(i=i(this.editor)),\"function\"===typeof e.getValue){var n=e.getValue(this.editor);if(\"text\"===e.type)o.textContent=n;else if(\"checkbox\"===e.type){var s=n?a.addCssClass:a.removeCssClass,r=o.parentElement===this.tooltipEl;o.ariaChecked=n,r?s(o,\"ace_selected\"):s(o=o.querySelector(\".\"+c),\"ace_checkmark\")}}i&&o.disabled?(a.removeCssClass(o,\"ace_disabled\"),o.ariaDisabled=o.disabled=!1,o.removeAttribute(\"disabled\")):i||o.disabled||(a.addCssClass(o,\"ace_disabled\"),o.ariaDisabled=o.disabled=!0,o.setAttribute(\"disabled\",\"\"))}},t}();h.implement(b.prototype,s),a.importCssString(\"\\n.ace_tooltip.\".concat(u,\"_wrapper {\\n    padding: 0;\\n}\\n\\n.ace_tooltip .\").concat(u,\" {\\n    padding: 1px 5px;\\n    display: flex;\\n    pointer-events: auto;\\n}\\n\\n.ace_tooltip .\").concat(u,\".tooltip_more_options {\\n    padding: 1px;\\n    flex-direction: column;\\n}\\n\\ndiv.\").concat(d,\" {\\n    display: inline-flex;\\n    cursor: pointer;\\n    margin: 1px;\\n    border-radius: 2px;\\n    padding: 2px 5px;\\n    align-items: center;\\n}\\n\\ndiv.\").concat(d,\".ace_selected,\\ndiv.\").concat(d,\":hover:not(.ace_disabled) {\\n    background-color: rgba(0, 0, 0, 0.1);\\n}\\n\\ndiv.\").concat(d,\".ace_disabled {\\n    color: #777;\\n    pointer-events: none;\\n}\\n\\ndiv.\").concat(d,\" .ace_icon_svg {\\n    height: 12px;\\n    background-color: #000;\\n}\\n\\ndiv.\").concat(d,\".ace_disabled .ace_icon_svg {\\n    background-color: #777;\\n}\\n\\n.\").concat(u,\".tooltip_more_options .\").concat(d,\" {\\n    display: flex;\\n}\\n\\n.\").concat(u,\".\").concat(c,\" {\\n    display: none;\\n}\\n\\n.\").concat(u,\".tooltip_more_options .\").concat(c,\" {\\n    display: inline-block;\\n    width: 12px;\\n}\\n\\n.\").concat(p,\" {\\n    display: inline-block;\\n}\\n\\n.\").concat(m,\" {\\n    margin: 0 2px;\\n    display: inline-block;\\n    font-size: 8px;\\n}\\n\\n.\").concat(u,\".tooltip_more_options .\").concat(m,\" {\\n    margin-left: auto;\\n}\\n\\n.\").concat(m,\" div {\\n    display: inline-block;\\n    min-width: 8px;\\n    padding: 2px;\\n    margin: 0 1px;\\n    border-radius: 2px;\\n    background-color: #ccc;\\n    text-align: center;\\n}\\n\\n.ace_dark.ace_tooltip .\").concat(u,\" {\\n    background-color: #373737;\\n    color: #eee;\\n}\\n\\n.ace_dark div.\").concat(d,\".ace_disabled {\\n    color: #979797;\\n}\\n\\n.ace_dark div.\").concat(d,\".ace_selected,\\n.ace_dark div.\").concat(d,\":hover:not(.ace_disabled) {\\n    background-color: rgba(255, 255, 255, 0.1);\\n}\\n\\n.ace_dark div.\").concat(d,\" .ace_icon_svg {\\n    background-color: #eee;\\n}\\n\\n.ace_dark div.\").concat(d,\".ace_disabled .ace_icon_svg {\\n    background-color: #979797;\\n}\\n\\n.ace_dark .\").concat(d,\".ace_disabled {\\n    color: #979797;\\n}\\n\\n.ace_dark .\").concat(m,\" div {\\n    background-color: #575757;\\n}\\n\\n.ace_checkmark::before {\\n    content: '\\u2713';\\n}\\n\"),\"commandbar.css\",!1),e.CommandBarTooltip=b,e.TOOLTIP_CLASS_NAME=u,e.BUTTON_CLASS_NAME=d})),ace.require([\"ace/ext/command_bar\"],(function(t){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=t)}));","name":"3d578a6d55e64370a89966626c91723f.js","input":"ace.define(\"ace/ext/command_bar\", [\"require\", \"exports\", \"module\", \"ace/tooltip\", \"ace/lib/event_emitter\", \"ace/lib/lang\", \"ace/lib/dom\", \"ace/lib/oop\", \"ace/lib/useragent\"], function (require, exports, module) {\n  var __values = this && this.__values || function (o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n      next: function () {\n        if (o && i >= o.length) o = void 0;\n        return {\n          value: o && o[i++],\n          done: !o\n        };\n      }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n  };\n  var Tooltip = require(\"../tooltip\").Tooltip;\n  var EventEmitter = require(\"../lib/event_emitter\").EventEmitter;\n  var lang = require(\"../lib/lang\");\n  var dom = require(\"../lib/dom\");\n  var oop = require(\"../lib/oop\");\n  var useragent = require(\"../lib/useragent\");\n  var BUTTON_CLASS_NAME = 'command_bar_tooltip_button';\n  var VALUE_CLASS_NAME = 'command_bar_button_value';\n  var CAPTION_CLASS_NAME = 'command_bar_button_caption';\n  var KEYBINDING_CLASS_NAME = 'command_bar_keybinding';\n  var TOOLTIP_CLASS_NAME = 'command_bar_tooltip';\n  var MORE_OPTIONS_BUTTON_ID = 'MoreOptionsButton';\n  var defaultDelay = 100;\n  var defaultMaxElements = 4;\n  var minPosition = function (posA, posB) {\n    if (posB.row > posA.row) {\n      return posA;\n    } else if (posB.row === posA.row && posB.column > posA.column) {\n      return posA;\n    }\n    return posB;\n  };\n  var keyDisplayMap = {\n    \"Ctrl\": {\n      mac: \"^\"\n    },\n    \"Option\": {\n      mac: \"⌥\"\n    },\n    \"Command\": {\n      mac: \"⌘\"\n    },\n    \"Cmd\": {\n      mac: \"⌘\"\n    },\n    \"Shift\": \"⇧\",\n    \"Left\": \"←\",\n    \"Right\": \"→\",\n    \"Up\": \"↑\",\n    \"Down\": \"↓\"\n  };\n  var CommandBarTooltip = /** @class */function () {\n    function CommandBarTooltip(parentNode, options) {\n      var e_1, _a;\n      options = options || {};\n      this.parentNode = parentNode;\n      this.tooltip = new Tooltip(this.parentNode);\n      this.moreOptions = new Tooltip(this.parentNode);\n      this.maxElementsOnTooltip = options.maxElementsOnTooltip || defaultMaxElements;\n      this.$alwaysShow = options.alwaysShow || false;\n      this.eventListeners = {};\n      this.elements = {};\n      this.commands = {};\n      this.tooltipEl = dom.buildDom(['div', {\n        class: TOOLTIP_CLASS_NAME\n      }], this.tooltip.getElement());\n      this.moreOptionsEl = dom.buildDom(['div', {\n        class: TOOLTIP_CLASS_NAME + \" tooltip_more_options\"\n      }], this.moreOptions.getElement());\n      this.$showTooltipTimer = lang.delayedCall(this.$showTooltip.bind(this), options.showDelay || defaultDelay);\n      this.$hideTooltipTimer = lang.delayedCall(this.$hideTooltip.bind(this), options.hideDelay || defaultDelay);\n      this.$tooltipEnter = this.$tooltipEnter.bind(this);\n      this.$onMouseMove = this.$onMouseMove.bind(this);\n      this.$onChangeScroll = this.$onChangeScroll.bind(this);\n      this.$onEditorChangeSession = this.$onEditorChangeSession.bind(this);\n      this.$scheduleTooltipForHide = this.$scheduleTooltipForHide.bind(this);\n      this.$preventMouseEvent = this.$preventMouseEvent.bind(this);\n      try {\n        for (var _b = __values([\"mousedown\", \"mouseup\", \"click\"]), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var event = _c.value;\n          this.tooltip.getElement().addEventListener(event, this.$preventMouseEvent);\n          this.moreOptions.getElement().addEventListener(event, this.$preventMouseEvent);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n    CommandBarTooltip.prototype.registerCommand = function (id, command) {\n      var registerForMainTooltip = Object.keys(this.commands).length < this.maxElementsOnTooltip;\n      if (!registerForMainTooltip && !this.elements[MORE_OPTIONS_BUTTON_ID]) {\n        this.$createCommand(MORE_OPTIONS_BUTTON_ID, {\n          name: \"···\",\n          exec: function () {\n            this.$shouldHideMoreOptions = false;\n            this.$setMoreOptionsVisibility(!this.isMoreOptionsShown());\n          }.bind(this),\n          type: \"checkbox\",\n          getValue: function () {\n            return this.isMoreOptionsShown();\n          }.bind(this),\n          enabled: true\n        }, true);\n      }\n      this.$createCommand(id, command, registerForMainTooltip);\n      if (this.isShown()) {\n        this.updatePosition();\n      }\n    };\n    CommandBarTooltip.prototype.isShown = function () {\n      return !!this.tooltip && this.tooltip.isOpen;\n    };\n    CommandBarTooltip.prototype.isMoreOptionsShown = function () {\n      return !!this.moreOptions && this.moreOptions.isOpen;\n    };\n    CommandBarTooltip.prototype.getAlwaysShow = function () {\n      return this.$alwaysShow;\n    };\n    CommandBarTooltip.prototype.setAlwaysShow = function (alwaysShow) {\n      this.$alwaysShow = alwaysShow;\n      this.$updateOnHoverHandlers(!this.$alwaysShow);\n      this._signal(\"alwaysShow\", this.$alwaysShow);\n    };\n    CommandBarTooltip.prototype.attach = function (editor) {\n      if (!editor || this.isShown() && this.editor === editor) {\n        return;\n      }\n      this.detach();\n      this.editor = editor;\n      this.editor.on(\"changeSession\", this.$onEditorChangeSession);\n      if (this.editor.session) {\n        this.editor.session.on(\"changeScrollLeft\", this.$onChangeScroll);\n        this.editor.session.on(\"changeScrollTop\", this.$onChangeScroll);\n      }\n      if (this.getAlwaysShow()) {\n        this.$showTooltip();\n      } else {\n        this.$updateOnHoverHandlers(true);\n      }\n    };\n    CommandBarTooltip.prototype.updatePosition = function () {\n      if (!this.editor) {\n        return;\n      }\n      var renderer = this.editor.renderer;\n      var ranges;\n      if (this.editor.selection.getAllRanges) {\n        ranges = this.editor.selection.getAllRanges();\n      } else {\n        ranges = [this.editor.getSelectionRange()];\n      }\n      if (!ranges.length) {\n        return;\n      }\n      var minPos = minPosition(ranges[0].start, ranges[0].end);\n      for (var i = 0, range; range = ranges[i]; i++) {\n        minPos = minPosition(minPos, minPosition(range.start, range.end));\n      }\n      var pos = renderer.$cursorLayer.getPixelPosition(minPos, true);\n      var tooltipEl = this.tooltip.getElement();\n      var screenWidth = window.innerWidth;\n      var screenHeight = window.innerHeight;\n      var rect = this.editor.container.getBoundingClientRect();\n      pos.top += rect.top - renderer.layerConfig.offset;\n      pos.left += rect.left + renderer.gutterWidth - renderer.scrollLeft;\n      var cursorVisible = pos.top >= rect.top && pos.top <= rect.bottom && pos.left >= rect.left + renderer.gutterWidth && pos.left <= rect.right;\n      if (!cursorVisible && this.isShown()) {\n        this.$hideTooltip();\n        return;\n      } else if (cursorVisible && !this.isShown() && this.getAlwaysShow()) {\n        this.$showTooltip();\n        return;\n      }\n      var top = pos.top - tooltipEl.offsetHeight;\n      var left = Math.min(screenWidth - tooltipEl.offsetWidth, pos.left);\n      var tooltipFits = top >= 0 && top + tooltipEl.offsetHeight <= screenHeight && left >= 0 && left + tooltipEl.offsetWidth <= screenWidth;\n      if (!tooltipFits) {\n        this.$hideTooltip();\n        return;\n      }\n      this.tooltip.setPosition(left, top);\n      if (this.isMoreOptionsShown()) {\n        top = top + tooltipEl.offsetHeight;\n        left = this.elements[MORE_OPTIONS_BUTTON_ID].getBoundingClientRect().left;\n        var moreOptionsEl = this.moreOptions.getElement();\n        var screenHeight = window.innerHeight;\n        if (top + moreOptionsEl.offsetHeight > screenHeight) {\n          top -= tooltipEl.offsetHeight + moreOptionsEl.offsetHeight;\n        }\n        if (left + moreOptionsEl.offsetWidth > screenWidth) {\n          left = screenWidth - moreOptionsEl.offsetWidth;\n        }\n        this.moreOptions.setPosition(left, top);\n      }\n    };\n    CommandBarTooltip.prototype.update = function () {\n      Object.keys(this.elements).forEach(this.$updateElement.bind(this));\n    };\n    CommandBarTooltip.prototype.detach = function () {\n      this.tooltip.hide();\n      this.moreOptions.hide();\n      this.$updateOnHoverHandlers(false);\n      if (this.editor) {\n        this.editor.off(\"changeSession\", this.$onEditorChangeSession);\n        if (this.editor.session) {\n          this.editor.session.off(\"changeScrollLeft\", this.$onChangeScroll);\n          this.editor.session.off(\"changeScrollTop\", this.$onChangeScroll);\n        }\n      }\n      this.$mouseInTooltip = false;\n      this.editor = null;\n    };\n    CommandBarTooltip.prototype.destroy = function () {\n      if (this.tooltip && this.moreOptions) {\n        this.detach();\n        this.tooltip.destroy();\n        this.moreOptions.destroy();\n      }\n      this.eventListeners = {};\n      this.commands = {};\n      this.elements = {};\n      this.tooltip = this.moreOptions = this.parentNode = null;\n    };\n    CommandBarTooltip.prototype.$createCommand = function (id, command, forMainTooltip) {\n      var parentEl = forMainTooltip ? this.tooltipEl : this.moreOptionsEl;\n      var keyParts = [];\n      var bindKey = command.bindKey;\n      if (bindKey) {\n        if (typeof bindKey === 'object') {\n          bindKey = useragent.isMac ? bindKey.mac : bindKey.win;\n        }\n        bindKey = bindKey.split(\"|\")[0];\n        keyParts = bindKey.split(\"-\");\n        keyParts = keyParts.map(function (key) {\n          if (keyDisplayMap[key]) {\n            if (typeof keyDisplayMap[key] === 'string') {\n              return keyDisplayMap[key];\n            } else if (useragent.isMac && keyDisplayMap[key].mac) {\n              return keyDisplayMap[key].mac;\n            }\n          }\n          return key;\n        });\n      }\n      var buttonNode;\n      if (forMainTooltip && command.iconCssClass) {\n        buttonNode = ['div', {\n          class: [\"ace_icon_svg\", command.iconCssClass].join(\" \"),\n          \"aria-label\": command.name + \" (\" + command.bindKey + \")\"\n        }];\n      } else {\n        buttonNode = [['div', {\n          class: VALUE_CLASS_NAME\n        }], ['div', {\n          class: CAPTION_CLASS_NAME\n        }, command.name]];\n        if (keyParts.length) {\n          buttonNode.push(['div', {\n            class: KEYBINDING_CLASS_NAME\n          }, keyParts.map(function (keyPart) {\n            return ['div', keyPart];\n          })]);\n        }\n      }\n      dom.buildDom(['div', {\n        class: [BUTTON_CLASS_NAME, command.cssClass || \"\"].join(\" \"),\n        ref: id\n      }, buttonNode], parentEl, this.elements);\n      this.commands[id] = command;\n      var eventListener = function (e) {\n        if (this.editor) {\n          this.editor.focus();\n        }\n        this.$shouldHideMoreOptions = this.isMoreOptionsShown();\n        if (!this.elements[id].disabled && command.exec) {\n          command.exec(this.editor);\n        }\n        if (this.$shouldHideMoreOptions) {\n          this.$setMoreOptionsVisibility(false);\n        }\n        this.update();\n        e.preventDefault();\n      }.bind(this);\n      this.eventListeners[id] = eventListener;\n      this.elements[id].addEventListener('click', eventListener.bind(this));\n      this.$updateElement(id);\n    };\n    CommandBarTooltip.prototype.$setMoreOptionsVisibility = function (visible) {\n      if (visible) {\n        this.moreOptions.setTheme(this.editor.renderer.theme);\n        this.moreOptions.setClassName(TOOLTIP_CLASS_NAME + \"_wrapper\");\n        this.moreOptions.show();\n        this.update();\n        this.updatePosition();\n      } else {\n        this.moreOptions.hide();\n      }\n    };\n    CommandBarTooltip.prototype.$onEditorChangeSession = function (e) {\n      if (e.oldSession) {\n        e.oldSession.off(\"changeScrollTop\", this.$onChangeScroll);\n        e.oldSession.off(\"changeScrollLeft\", this.$onChangeScroll);\n      }\n      this.detach();\n    };\n    CommandBarTooltip.prototype.$onChangeScroll = function () {\n      if (this.editor.renderer && (this.isShown() || this.getAlwaysShow())) {\n        this.editor.renderer.once(\"afterRender\", this.updatePosition.bind(this));\n      }\n    };\n    CommandBarTooltip.prototype.$onMouseMove = function (e) {\n      if (this.$mouseInTooltip) {\n        return;\n      }\n      var cursorPosition = this.editor.getCursorPosition();\n      var cursorScreenPosition = this.editor.renderer.textToScreenCoordinates(cursorPosition.row, cursorPosition.column);\n      var lineHeight = this.editor.renderer.lineHeight;\n      var isInCurrentLine = e.clientY >= cursorScreenPosition.pageY && e.clientY < cursorScreenPosition.pageY + lineHeight;\n      if (isInCurrentLine) {\n        if (!this.isShown() && !this.$showTooltipTimer.isPending()) {\n          this.$showTooltipTimer.delay();\n        }\n        if (this.$hideTooltipTimer.isPending()) {\n          this.$hideTooltipTimer.cancel();\n        }\n      } else {\n        if (this.isShown() && !this.$hideTooltipTimer.isPending()) {\n          this.$hideTooltipTimer.delay();\n        }\n        if (this.$showTooltipTimer.isPending()) {\n          this.$showTooltipTimer.cancel();\n        }\n      }\n    };\n    CommandBarTooltip.prototype.$preventMouseEvent = function (e) {\n      if (this.editor) {\n        this.editor.focus();\n      }\n      e.preventDefault();\n    };\n    CommandBarTooltip.prototype.$scheduleTooltipForHide = function () {\n      this.$mouseInTooltip = false;\n      this.$showTooltipTimer.cancel();\n      this.$hideTooltipTimer.delay();\n    };\n    CommandBarTooltip.prototype.$tooltipEnter = function () {\n      this.$mouseInTooltip = true;\n      if (this.$showTooltipTimer.isPending()) {\n        this.$showTooltipTimer.cancel();\n      }\n      if (this.$hideTooltipTimer.isPending()) {\n        this.$hideTooltipTimer.cancel();\n      }\n    };\n    CommandBarTooltip.prototype.$updateOnHoverHandlers = function (enableHover) {\n      var tooltipEl = this.tooltip.getElement();\n      var moreOptionsEl = this.moreOptions.getElement();\n      if (enableHover) {\n        if (this.editor) {\n          this.editor.on(\"mousemove\", this.$onMouseMove);\n          this.editor.renderer.getMouseEventTarget().addEventListener(\"mouseout\", this.$scheduleTooltipForHide, true);\n        }\n        tooltipEl.addEventListener('mouseenter', this.$tooltipEnter);\n        tooltipEl.addEventListener('mouseleave', this.$scheduleTooltipForHide);\n        moreOptionsEl.addEventListener('mouseenter', this.$tooltipEnter);\n        moreOptionsEl.addEventListener('mouseleave', this.$scheduleTooltipForHide);\n      } else {\n        if (this.editor) {\n          this.editor.off(\"mousemove\", this.$onMouseMove);\n          this.editor.renderer.getMouseEventTarget().removeEventListener(\"mouseout\", this.$scheduleTooltipForHide, true);\n        }\n        tooltipEl.removeEventListener('mouseenter', this.$tooltipEnter);\n        tooltipEl.removeEventListener('mouseleave', this.$scheduleTooltipForHide);\n        moreOptionsEl.removeEventListener('mouseenter', this.$tooltipEnter);\n        moreOptionsEl.removeEventListener('mouseleave', this.$scheduleTooltipForHide);\n      }\n    };\n    CommandBarTooltip.prototype.$showTooltip = function () {\n      if (this.isShown()) {\n        return;\n      }\n      this.tooltip.setTheme(this.editor.renderer.theme);\n      this.tooltip.setClassName(TOOLTIP_CLASS_NAME + \"_wrapper\");\n      this.tooltip.show();\n      this.update();\n      this.updatePosition();\n      this._signal(\"show\");\n    };\n    CommandBarTooltip.prototype.$hideTooltip = function () {\n      this.$mouseInTooltip = false;\n      if (!this.isShown()) {\n        return;\n      }\n      this.moreOptions.hide();\n      this.tooltip.hide();\n      this._signal(\"hide\");\n    };\n    CommandBarTooltip.prototype.$updateElement = function (id) {\n      var command = this.commands[id];\n      if (!command) {\n        return;\n      }\n      var el = this.elements[id];\n      var commandEnabled = command.enabled;\n      if (typeof commandEnabled === 'function') {\n        commandEnabled = commandEnabled(this.editor);\n      }\n      if (typeof command.getValue === 'function') {\n        var value = command.getValue(this.editor);\n        if (command.type === 'text') {\n          el.textContent = value;\n        } else if (command.type === 'checkbox') {\n          var domCssFn = value ? dom.addCssClass : dom.removeCssClass;\n          var isOnTooltip = el.parentElement === this.tooltipEl;\n          el.ariaChecked = value;\n          if (isOnTooltip) {\n            domCssFn(el, \"ace_selected\");\n          } else {\n            el = el.querySelector(\".\" + VALUE_CLASS_NAME);\n            domCssFn(el, \"ace_checkmark\");\n          }\n        }\n      }\n      if (commandEnabled && el.disabled) {\n        dom.removeCssClass(el, \"ace_disabled\");\n        el.ariaDisabled = el.disabled = false;\n        el.removeAttribute(\"disabled\");\n      } else if (!commandEnabled && !el.disabled) {\n        dom.addCssClass(el, \"ace_disabled\");\n        el.ariaDisabled = el.disabled = true;\n        el.setAttribute(\"disabled\", \"\");\n      }\n    };\n    return CommandBarTooltip;\n  }();\n  oop.implement(CommandBarTooltip.prototype, EventEmitter);\n  dom.importCssString(\"\\n.ace_tooltip.\".concat(TOOLTIP_CLASS_NAME, \"_wrapper {\\n    padding: 0;\\n}\\n\\n.ace_tooltip .\").concat(TOOLTIP_CLASS_NAME, \" {\\n    padding: 1px 5px;\\n    display: flex;\\n    pointer-events: auto;\\n}\\n\\n.ace_tooltip .\").concat(TOOLTIP_CLASS_NAME, \".tooltip_more_options {\\n    padding: 1px;\\n    flex-direction: column;\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \" {\\n    display: inline-flex;\\n    cursor: pointer;\\n    margin: 1px;\\n    border-radius: 2px;\\n    padding: 2px 5px;\\n    align-items: center;\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \".ace_selected,\\ndiv.\").concat(BUTTON_CLASS_NAME, \":hover:not(.ace_disabled) {\\n    background-color: rgba(0, 0, 0, 0.1);\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \".ace_disabled {\\n    color: #777;\\n    pointer-events: none;\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \" .ace_icon_svg {\\n    height: 12px;\\n    background-color: #000;\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \".ace_disabled .ace_icon_svg {\\n    background-color: #777;\\n}\\n\\n.\").concat(TOOLTIP_CLASS_NAME, \".tooltip_more_options .\").concat(BUTTON_CLASS_NAME, \" {\\n    display: flex;\\n}\\n\\n.\").concat(TOOLTIP_CLASS_NAME, \".\").concat(VALUE_CLASS_NAME, \" {\\n    display: none;\\n}\\n\\n.\").concat(TOOLTIP_CLASS_NAME, \".tooltip_more_options .\").concat(VALUE_CLASS_NAME, \" {\\n    display: inline-block;\\n    width: 12px;\\n}\\n\\n.\").concat(CAPTION_CLASS_NAME, \" {\\n    display: inline-block;\\n}\\n\\n.\").concat(KEYBINDING_CLASS_NAME, \" {\\n    margin: 0 2px;\\n    display: inline-block;\\n    font-size: 8px;\\n}\\n\\n.\").concat(TOOLTIP_CLASS_NAME, \".tooltip_more_options .\").concat(KEYBINDING_CLASS_NAME, \" {\\n    margin-left: auto;\\n}\\n\\n.\").concat(KEYBINDING_CLASS_NAME, \" div {\\n    display: inline-block;\\n    min-width: 8px;\\n    padding: 2px;\\n    margin: 0 1px;\\n    border-radius: 2px;\\n    background-color: #ccc;\\n    text-align: center;\\n}\\n\\n.ace_dark.ace_tooltip .\").concat(TOOLTIP_CLASS_NAME, \" {\\n    background-color: #373737;\\n    color: #eee;\\n}\\n\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \".ace_disabled {\\n    color: #979797;\\n}\\n\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \".ace_selected,\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \":hover:not(.ace_disabled) {\\n    background-color: rgba(255, 255, 255, 0.1);\\n}\\n\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \" .ace_icon_svg {\\n    background-color: #eee;\\n}\\n\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \".ace_disabled .ace_icon_svg {\\n    background-color: #979797;\\n}\\n\\n.ace_dark .\").concat(BUTTON_CLASS_NAME, \".ace_disabled {\\n    color: #979797;\\n}\\n\\n.ace_dark .\").concat(KEYBINDING_CLASS_NAME, \" div {\\n    background-color: #575757;\\n}\\n\\n.ace_checkmark::before {\\n    content: '\\u2713';\\n}\\n\"), \"commandbar.css\", false);\n  exports.CommandBarTooltip = CommandBarTooltip;\n  exports.TOOLTIP_CLASS_NAME = TOOLTIP_CLASS_NAME;\n  exports.BUTTON_CLASS_NAME = BUTTON_CLASS_NAME;\n});\n(function () {\n  ace.require([\"ace/ext/command_bar\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}