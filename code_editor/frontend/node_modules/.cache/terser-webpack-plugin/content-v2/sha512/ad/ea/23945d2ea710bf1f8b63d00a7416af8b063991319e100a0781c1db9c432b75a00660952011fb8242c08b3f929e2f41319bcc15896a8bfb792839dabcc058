{"code":"ace.define(\"ace/mode/praat_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/oop\"),i=e(\"./text_highlight_rules\").TextHighlightRules,o=function(){this.$rules={start:[{token:\"string.interpolated\",regex:/'((?:\\.?[a-z][a-zA-Z0-9_.]*)(?:\\$|#|:[0-9]+)?)'/},{token:[\"text\",\"text\",\"keyword.operator\",\"text\",\"keyword\"],regex:/(^\\s*)(?:(\\.?[a-z][a-zA-Z0-9_.]*\\$?\\s+)(=)(\\s+))?(stopwatch)/},{token:[\"text\",\"keyword\",\"text\",\"string\"],regex:/(^\\s*)(print(?:line|tab)?|echo|exit|pause|send(?:praat|socket)|include|execute|system(?:_nocheck)?)(\\s+)(.*)/},{token:[\"text\",\"keyword\"],regex:\"(^\\\\s*)(clearinfo|endSendPraat)$\"},{token:[\"text\",\"keyword.operator\",\"text\"],regex:/(\\s+)((?:\\+|-|\\/|\\*|<|>)=?|==?|!=|%|\\^|\\||and|or|not)(\\s+)/},{token:[\"text\",\"text\",\"keyword.operator\",\"text\",\"keyword\",\"text\",\"keyword\"],regex:/(^\\s*)(?:(\\.?[a-z][a-zA-Z0-9_.]*\\$?\\s+)(=)(\\s+))?(?:((?:no)?warn|(?:unix_)?nocheck|noprogress)(\\s+))?((?:[A-Z][^.:\"]+)(?:$|(?:\\.{3}|:)))/},{token:[\"text\",\"keyword\",\"text\",\"keyword\"],regex:/(^\\s*)((?:no(?:warn|check))?)(\\s*)(\\b(?:editor(?::?)|endeditor)\\b)/},{token:[\"text\",\"keyword\",\"text\",\"keyword\"],regex:/(^\\s*)(?:(demo)?(\\s+))((?:[A-Z][^.:\"]+)(?:$|(?:\\.{3}|:)))/},{token:[\"text\",\"keyword\",\"text\",\"keyword\"],regex:/^(\\s*)(?:(demo)(\\s+))?(10|12|14|16|24)$/},{token:[\"text\",\"support.function\",\"text\"],regex:/(\\s*)(do\\$?)(\\s*:\\s*|\\s*\\(\\s*)/},{token:\"entity.name.type\",regex:\"(Activation|AffineTransform|AmplitudeTier|Art|Artword|Autosegment|BarkFilter|CCA|Categories|Cepstrum|Cepstrumc|ChebyshevSeries|ClassificationTable|Cochleagram|Collection|Configuration|Confusion|ContingencyTable|Corpus|Correlation|Covariance|CrossCorrelationTable|CrossCorrelationTables|DTW|Diagonalizer|Discriminant|Dissimilarity|Distance|Distributions|DurationTier|EEG|ERP|ERPTier|Eigen|Excitation|Excitations|ExperimentMFC|FFNet|FeatureWeights|Formant|FormantFilter|FormantGrid|FormantPoint|FormantTier|GaussianMixture|HMM|HMM_Observation|HMM_ObservationSequence|HMM_State|HMM_StateSequence|Harmonicity|ISpline|Index|Intensity|IntensityTier|IntervalTier|KNN|KlattGrid|KlattTable|LFCC|LPC|Label|LegendreSeries|LinearRegression|LogisticRegression|LongSound|Ltas|MFCC|MSpline|ManPages|Manipulation|Matrix|MelFilter|MixingMatrix|Movie|Network|OTGrammar|OTHistory|OTMulti|PCA|PairDistribution|ParamCurve|Pattern|Permutation|Pitch|PitchTier|PointProcess|Polygon|Polynomial|Procrustes|RealPoint|RealTier|ResultsMFC|Roots|SPINET|SSCP|SVD|Salience|ScalarProduct|Similarity|SimpleString|SortedSetOfString|Sound|Speaker|Spectrogram|Spectrum|SpectrumTier|SpeechSynthesizer|SpellingChecker|Strings|StringsIndex|Table|TableOfReal|TextGrid|TextInterval|TextPoint|TextTier|Tier|Transition|VocalTract|Weight|WordList)\"},{token:\"variable.language\",regex:\"(macintosh|windows|unix|praatVersion|praatVersion\\\\$pi|undefined|newline\\\\$|tab\\\\$|shellDirectory\\\\$|homeDirectory\\\\$|preferencesDirectory\\\\$|temporaryDirectory\\\\$|defaultDirectory\\\\$)\"},{token:[\"support.function\",\"text\"],regex:\"((?:writeInfo|writeInfoLine|appendInfo|appendInfoLine|info\\\\$|writeFile|writeFileLine|appendFile|appendFileLine|abs|round|floor|ceiling|min|max|imin|imax|sqrt|sin|cos|tan|arcsin|arccos|arctan|arctan2|sinc|sincpi|exp|ln|lnBeta|lnGamma|log10|log2|sinh|cosh|tanh|arcsinh|arccosh|arctanh|sigmoid|invSigmoid|erf|erfc|random(?:Uniform|Integer|Gauss|Poisson|Binomial)|gaussP|gaussQ|invGaussQ|incompleteGammaP|incompleteBeta|chiSquareP|chiSquareQ|invChiSquareQ|studentP|studentQ|invStudentQ|fisherP|fisherQ|invFisherQ|binomialP|binomialQ|invBinomialP|invBinomialQ|hertzToBark|barkToHerz|hertzToMel|melToHertz|hertzToSemitones|semitonesToHerz|erb|hertzToErb|erbToHertz|phonToDifferenceLimens|differenceLimensToPhon|soundPressureToPhon|beta|beta2|besselI|besselK|numberOfColumns|numberOfRows|selected|selected\\\\$|numberOfSelected|variableExists|index|rindex|startsWith|endsWith|index_regex|rindex_regex|replace_regex\\\\$|length|extractWord\\\\$|extractLine\\\\$|extractNumber|left\\\\$|right\\\\$|mid\\\\$|replace\\\\$|date\\\\$|fixed\\\\$|percent\\\\$|zero#|linear#|randomUniform#|randomInteger#|randomGauss#|beginPause|endPause|demoShow|demoWindowTitle|demoInput|demoWaitForInput|demoClicked|demoClickedIn|demoX|demoY|demoKeyPressed|demoKey\\\\$|demoExtraControlKeyPressed|demoShiftKeyPressed|demoCommandKeyPressed|demoOptionKeyPressed|environment\\\\$|chooseReadFile\\\\$|chooseDirectory\\\\$|createDirectory|fileReadable|deleteFile|selectObject|removeObject|plusObject|minusObject|runScript|exitScript|beginSendPraat|endSendPraat|objectsAreIdentical)\\\\$?)(\\\\s*(?::|\\\\())\"},{token:\"keyword\",regex:/(\\bfor\\b)/,next:\"for\"},{token:\"keyword\",regex:\"(\\\\b(?:if|then|else|elsif|elif|endif|fi|endfor|endproc|while|endwhile|repeat|until|select|plus|minus|assert|asserterror)\\\\b)\"},{token:\"string\",regex:/\"[^\"]*\"/},{token:\"string\",regex:/\"[^\"]*$/,next:\"brokenstring\"},{token:[\"text\",\"keyword\",\"text\",\"entity.name.section\"],regex:/(^\\s*)(\\bform\\b)(\\s+)(.*)/,next:\"form\"},{token:\"constant.numeric\",regex:/\\b[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b/},{token:[\"keyword\",\"text\",\"entity.name.function\"],regex:/(procedure)(\\s+)([^:\\s]+)/},{token:[\"entity.name.function\",\"text\"],regex:/(@\\S+)(:|\\s*\\()/},{token:[\"text\",\"keyword\",\"text\",\"entity.name.function\"],regex:/(^\\s*)(call)(\\s+)(\\S+)/},{token:\"comment\",regex:/(^\\s*#|;).*$/},{token:\"text\",regex:/\\s+/}],form:[{token:[\"keyword\",\"text\",\"constant.numeric\"],regex:/((?:optionmenu|choice)\\s+)(\\S+:\\s+)([0-9]+)/},{token:[\"keyword\",\"constant.numeric\"],regex:/((?:option|button)\\s+)([+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b)/},{token:[\"keyword\",\"string\"],regex:/((?:option|button)\\s+)(.*)/},{token:[\"keyword\",\"text\",\"string\"],regex:/((?:sentence|text)\\s+)(\\S+\\s*)(.*)/},{token:[\"keyword\",\"text\",\"string\",\"invalid.illegal\"],regex:/(word\\s+)(\\S+\\s*)(\\S+)?(\\s.*)?/},{token:[\"keyword\",\"text\",\"constant.language\"],regex:/(boolean\\s+)(\\S+\\s*)(0|1|\"?(?:yes|no)\"?)/},{token:[\"keyword\",\"text\",\"constant.numeric\"],regex:/((?:real|natural|positive|integer)\\s+)(\\S+\\s*)([+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b)/},{token:[\"keyword\",\"string\"],regex:/(comment\\s+)(.*)/},{token:\"keyword\",regex:\"endform\",next:\"start\"}],for:[{token:[\"keyword\",\"text\",\"constant.numeric\",\"text\"],regex:/(from|to)(\\s+)([+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?)(\\s*)/},{token:[\"keyword\",\"text\"],regex:/(from|to)(\\s+\\S+\\s*)/},{token:\"text\",regex:/$/,next:\"start\"}],brokenstring:[{token:[\"text\",\"string\"],regex:/(\\s*\\.{3})([^\"]*)/},{token:\"string\",regex:/\"/,next:\"start\"}]}};r.inherits(o,i),t.PraatHighlightRules=o})),ace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"],(function(e,t,n){\"use strict\";var r=e(\"../range\").Range,i=function(){};(function(){this.checkOutdent=function(e,t){return!!/^\\s+$/.test(e)&&/^\\s*\\}/.test(t)},this.autoOutdent=function(e,t){var n=e.getLine(t).match(/^(\\s*\\})/);if(!n)return 0;var i=n[1].length,o=e.findMatchingBracket({row:t,column:i});if(!o||o.row==t)return 0;var s=this.$getIndent(e.getLine(o.row));e.replace(new r(t,0,t,i-1),s)},this.$getIndent=function(e){return e.match(/^\\s*/)[0]}}).call(i.prototype),t.MatchingBraceOutdent=i})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var r=e(\"../../lib/oop\"),i=e(\"../../range\").Range,o=e(\"./fold_mode\").FoldMode,s=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};r.inherits(s,o),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var r=e.getLine(n);if(this.singleLineBlockCommentRe.test(r)&&!this.startRegionRe.test(r)&&!this.tripleStarBlockCommentRe.test(r))return\"\";var i=this._getFoldWidgetBase(e,t,n);return!i&&this.startRegionRe.test(r)?\"start\":i},this.getFoldWidgetRange=function(e,t,n,r){var i,o=e.getLine(n);if(this.startRegionRe.test(o))return this.getCommentRegionBlock(e,o,n);if(i=o.match(this.foldingStartMarker)){var s=i.index;if(i[1])return this.openingBracketBlock(e,i[1],n,s);var a=e.getCommentFoldRange(n,s+i[0].length,1);return a&&!a.isMultiLine()&&(r?a=this.getSectionRange(e,n):\"all\"!=t&&(a=null)),a}if(\"markbegin\"!==t&&(i=o.match(this.foldingStopMarker))){s=i.index+i[0].length;return i[1]?this.closingBracketBlock(e,i[1],n,s):e.getCommentFoldRange(n,s,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),r=n.search(/\\S/),o=t,s=n.length,a=t+=1,d=e.getLength();++t<d;){var c=(n=e.getLine(t)).search(/\\S/);if(-1!==c){if(r>c)break;var l=this.getFoldWidgetRange(e,\"all\",t);if(l){if(l.start.row<=o)break;if(l.isMultiLine())t=l.end.row;else if(r==c)break}a=t}}return new i(o,s,a,e.getLine(a).length)},this.getCommentRegionBlock=function(e,t,n){for(var r=t.search(/\\s*$/),o=e.getLength(),s=n,a=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,d=1;++n<o;){t=e.getLine(n);var c=a.exec(t);if(c&&(c[1]?d--:d++,!d))break}if(n>s)return new i(s,r,n,t.length)}}.call(s.prototype)})),ace.define(\"ace/mode/praat\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/praat_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/oop\"),i=e(\"./text\").Mode,o=e(\"./praat_highlight_rules\").PraatHighlightRules,s=e(\"./matching_brace_outdent\").MatchingBraceOutdent,a=e(\"./folding/cstyle\").FoldMode,d=function(){this.HighlightRules=o,this.$outdent=new s,this.foldingRules=new a,this.$behaviour=this.$defaultBehaviour};r.inherits(d,i),function(){this.lineCommentStart=\"#\",this.getNextLineIndent=function(e,t,n){var r=this.$getIndent(t),i=this.getTokenizer().getLineTokens(t,e).tokens;if(i.length&&\"comment\"==i[i.length-1].type)return r;\"start\"==e&&(t.match(/^.*[\\{\\(\\[:]\\s*$/)&&(r+=n));return r},this.checkOutdent=function(e,t,n){return this.$outdent.checkOutdent(t,n)},this.autoOutdent=function(e,t,n){this.$outdent.autoOutdent(t,n)},this.$id=\"ace/mode/praat\"}.call(d.prototype),t.Mode=d})),ace.require([\"ace/mode/praat\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"0b165878ec4512fb75837abc4cb50b4e.js","input":"ace.define(\"ace/mode/praat_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var PraatHighlightRules = function () {\n    var keywords = \"if|then|else|elsif|elif|endif|fi|\" + \"endfor|endproc|\" +\n    // related keywords specified below\n    \"while|endwhile|\" + \"repeat|until|\" + \"select|plus|minus|\" + \"assert|asserterror\";\n    var predefinedVariables = \"macintosh|windows|unix|\" + \"praatVersion|praatVersion\\\\$\" + \"pi|undefined|\" + \"newline\\\\$|tab\\\\$|\" + \"shellDirectory\\\\$|homeDirectory\\\\$|preferencesDirectory\\\\$|\" + \"temporaryDirectory\\\\$|defaultDirectory\\\\$\";\n    var directives = \"clearinfo|endSendPraat\";\n    var functions = \"writeInfo|writeInfoLine|appendInfo|appendInfoLine|info\\\\$|\" + \"writeFile|writeFileLine|appendFile|appendFileLine|\" + \"abs|round|floor|ceiling|min|max|imin|imax|\" + \"sqrt|sin|cos|tan|arcsin|arccos|arctan|arctan2|sinc|sincpi|\" + \"exp|ln|lnBeta|lnGamma|log10|log2|\" + \"sinh|cosh|tanh|arcsinh|arccosh|arctanh|\" + \"sigmoid|invSigmoid|erf|erfc|\" + \"random(?:Uniform|Integer|Gauss|Poisson|Binomial)|\" + \"gaussP|gaussQ|invGaussQ|incompleteGammaP|incompleteBeta|\" + \"chiSquareP|chiSquareQ|invChiSquareQ|studentP|studentQ|invStudentQ|\" + \"fisherP|fisherQ|invFisherQ|\" + \"binomialP|binomialQ|invBinomialP|invBinomialQ|\" + \"hertzToBark|barkToHerz|\" + \"hertzToMel|melToHertz|\" + \"hertzToSemitones|semitonesToHerz|\" + \"erb|hertzToErb|erbToHertz|\" + \"phonToDifferenceLimens|differenceLimensToPhon|\" + \"soundPressureToPhon|\" + \"beta|beta2|besselI|besselK|\" + \"numberOfColumns|numberOfRows|\" + \"selected|selected\\\\$|numberOfSelected|variableExists|\" + \"index|rindex|startsWith|endsWith|\" + \"index_regex|rindex_regex|replace_regex\\\\$|\" + \"length|extractWord\\\\$|extractLine\\\\$|extractNumber|\" + \"left\\\\$|right\\\\$|mid\\\\$|replace\\\\$|\" + \"date\\\\$|fixed\\\\$|percent\\\\$|\" + \"zero#|linear#|randomUniform#|randomInteger#|randomGauss#|\" + \"beginPause|endPause|\" + \"demoShow|demoWindowTitle|demoInput|demoWaitForInput|\" + \"demoClicked|demoClickedIn|demoX|demoY|\" + \"demoKeyPressed|demoKey\\\\$|\" + \"demoExtraControlKeyPressed|demoShiftKeyPressed|\" + \"demoCommandKeyPressed|demoOptionKeyPressed|\" + \"environment\\\\$|chooseReadFile\\\\$|\" + \"chooseDirectory\\\\$|createDirectory|fileReadable|deleteFile|\" + \"selectObject|removeObject|plusObject|minusObject|\" + \"runScript|exitScript|\" + \"beginSendPraat|endSendPraat|\" + \"objectsAreIdentical\";\n    var objectTypes = \"Activation|AffineTransform|AmplitudeTier|Art|Artword|Autosegment|\" + \"BarkFilter|CCA|Categories|Cepstrum|Cepstrumc|ChebyshevSeries|\" + \"ClassificationTable|Cochleagram|Collection|Configuration|\" + \"Confusion|ContingencyTable|Corpus|Correlation|Covariance|\" + \"CrossCorrelationTable|CrossCorrelationTables|DTW|Diagonalizer|\" + \"Discriminant|Dissimilarity|Distance|Distributions|DurationTier|\" + \"EEG|ERP|ERPTier|Eigen|Excitation|Excitations|ExperimentMFC|FFNet|\" + \"FeatureWeights|Formant|FormantFilter|FormantGrid|FormantPoint|\" + \"FormantTier|GaussianMixture|HMM|HMM_Observation|\" + \"HMM_ObservationSequence|HMM_State|HMM_StateSequence|Harmonicity|\" + \"ISpline|Index|Intensity|IntensityTier|IntervalTier|KNN|KlattGrid|\" + \"KlattTable|LFCC|LPC|Label|LegendreSeries|LinearRegression|\" + \"LogisticRegression|LongSound|Ltas|MFCC|MSpline|ManPages|\" + \"Manipulation|Matrix|MelFilter|MixingMatrix|Movie|Network|\" + \"OTGrammar|OTHistory|OTMulti|PCA|PairDistribution|ParamCurve|\" + \"Pattern|Permutation|Pitch|PitchTier|PointProcess|Polygon|\" + \"Polynomial|Procrustes|RealPoint|RealTier|ResultsMFC|Roots|SPINET|\" + \"SSCP|SVD|Salience|ScalarProduct|Similarity|SimpleString|\" + \"SortedSetOfString|Sound|Speaker|Spectrogram|Spectrum|SpectrumTier|\" + \"SpeechSynthesizer|SpellingChecker|Strings|StringsIndex|Table|\" + \"TableOfReal|TextGrid|TextInterval|TextPoint|TextTier|Tier|\" + \"Transition|VocalTract|Weight|WordList\";\n    this.$rules = {\n      \"start\": [{\n        token: \"string.interpolated\",\n        regex: /'((?:\\.?[a-z][a-zA-Z0-9_.]*)(?:\\$|#|:[0-9]+)?)'/\n      }, {\n        token: [\"text\", \"text\", \"keyword.operator\", \"text\", \"keyword\"],\n        regex: /(^\\s*)(?:(\\.?[a-z][a-zA-Z0-9_.]*\\$?\\s+)(=)(\\s+))?(stopwatch)/\n      }, {\n        token: [\"text\", \"keyword\", \"text\", \"string\"],\n        regex: /(^\\s*)(print(?:line|tab)?|echo|exit|pause|send(?:praat|socket)|include|execute|system(?:_nocheck)?)(\\s+)(.*)/\n      }, {\n        token: [\"text\", \"keyword\"],\n        regex: \"(^\\\\s*)(\" + directives + \")$\"\n      }, {\n        token: [\"text\", \"keyword.operator\", \"text\"],\n        regex: /(\\s+)((?:\\+|-|\\/|\\*|<|>)=?|==?|!=|%|\\^|\\||and|or|not)(\\s+)/\n      }, {\n        token: [\"text\", \"text\", \"keyword.operator\", \"text\", \"keyword\", \"text\", \"keyword\"],\n        regex: /(^\\s*)(?:(\\.?[a-z][a-zA-Z0-9_.]*\\$?\\s+)(=)(\\s+))?(?:((?:no)?warn|(?:unix_)?nocheck|noprogress)(\\s+))?((?:[A-Z][^.:\"]+)(?:$|(?:\\.{3}|:)))/\n      }, {\n        token: [\"text\", \"keyword\", \"text\", \"keyword\"],\n        regex: /(^\\s*)((?:no(?:warn|check))?)(\\s*)(\\b(?:editor(?::?)|endeditor)\\b)/\n      }, {\n        token: [\"text\", \"keyword\", \"text\", \"keyword\"],\n        regex: /(^\\s*)(?:(demo)?(\\s+))((?:[A-Z][^.:\"]+)(?:$|(?:\\.{3}|:)))/\n      }, {\n        token: [\"text\", \"keyword\", \"text\", \"keyword\"],\n        regex: /^(\\s*)(?:(demo)(\\s+))?(10|12|14|16|24)$/\n      }, {\n        token: [\"text\", \"support.function\", \"text\"],\n        regex: /(\\s*)(do\\$?)(\\s*:\\s*|\\s*\\(\\s*)/\n      }, {\n        token: \"entity.name.type\",\n        regex: \"(\" + objectTypes + \")\"\n      }, {\n        token: \"variable.language\",\n        regex: \"(\" + predefinedVariables + \")\"\n      }, {\n        token: [\"support.function\", \"text\"],\n        regex: \"((?:\" + functions + \")\\\\$?)(\\\\s*(?::|\\\\())\"\n      }, {\n        token: \"keyword\",\n        regex: /(\\bfor\\b)/,\n        next: \"for\"\n      }, {\n        token: \"keyword\",\n        regex: \"(\\\\b(?:\" + keywords + \")\\\\b)\"\n      }, {\n        token: \"string\",\n        regex: /\"[^\"]*\"/\n      }, {\n        token: \"string\",\n        regex: /\"[^\"]*$/,\n        next: \"brokenstring\"\n      }, {\n        token: [\"text\", \"keyword\", \"text\", \"entity.name.section\"],\n        regex: /(^\\s*)(\\bform\\b)(\\s+)(.*)/,\n        next: \"form\"\n      }, {\n        token: \"constant.numeric\",\n        regex: /\\b[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b/\n      }, {\n        token: [\"keyword\", \"text\", \"entity.name.function\"],\n        regex: /(procedure)(\\s+)([^:\\s]+)/\n      }, {\n        token: [\"entity.name.function\", \"text\"],\n        regex: /(@\\S+)(:|\\s*\\()/\n      }, {\n        token: [\"text\", \"keyword\", \"text\", \"entity.name.function\"],\n        regex: /(^\\s*)(call)(\\s+)(\\S+)/\n      }, {\n        token: \"comment\",\n        regex: /(^\\s*#|;).*$/\n      }, {\n        token: \"text\",\n        regex: /\\s+/\n      }],\n      \"form\": [{\n        token: [\"keyword\", \"text\", \"constant.numeric\"],\n        regex: /((?:optionmenu|choice)\\s+)(\\S+:\\s+)([0-9]+)/\n      }, {\n        token: [\"keyword\", \"constant.numeric\"],\n        regex: /((?:option|button)\\s+)([+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b)/\n      }, {\n        token: [\"keyword\", \"string\"],\n        regex: /((?:option|button)\\s+)(.*)/\n      }, {\n        token: [\"keyword\", \"text\", \"string\"],\n        regex: /((?:sentence|text)\\s+)(\\S+\\s*)(.*)/\n      }, {\n        token: [\"keyword\", \"text\", \"string\", \"invalid.illegal\"],\n        regex: /(word\\s+)(\\S+\\s*)(\\S+)?(\\s.*)?/\n      }, {\n        token: [\"keyword\", \"text\", \"constant.language\"],\n        regex: /(boolean\\s+)(\\S+\\s*)(0|1|\"?(?:yes|no)\"?)/\n      }, {\n        token: [\"keyword\", \"text\", \"constant.numeric\"],\n        regex: /((?:real|natural|positive|integer)\\s+)(\\S+\\s*)([+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b)/\n      }, {\n        token: [\"keyword\", \"string\"],\n        regex: /(comment\\s+)(.*)/\n      }, {\n        token: \"keyword\",\n        regex: 'endform',\n        next: \"start\"\n      }],\n      \"for\": [{\n        token: [\"keyword\", \"text\", \"constant.numeric\", \"text\"],\n        regex: /(from|to)(\\s+)([+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?)(\\s*)/\n      }, {\n        token: [\"keyword\", \"text\"],\n        regex: /(from|to)(\\s+\\S+\\s*)/\n      }, {\n        token: \"text\",\n        regex: /$/,\n        next: \"start\"\n      }],\n      \"brokenstring\": [{\n        token: [\"text\", \"string\"],\n        regex: /(\\s*\\.{3})([^\"]*)/\n      }, {\n        token: \"string\",\n        regex: /\"/,\n        next: \"start\"\n      }]\n    };\n  };\n  oop.inherits(PraatHighlightRules, TextHighlightRules);\n  exports.PraatHighlightRules = PraatHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/praat\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/praat_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var PraatHighlightRules = require(\"./praat_highlight_rules\").PraatHighlightRules;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = PraatHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n        if (match) {\n          indent += tab;\n        }\n      }\n      return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/praat\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/praat\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}