{"code":"ace.define(\"ace/mode/zig_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),i=e(\"./text_highlight_rules\").TextHighlightRules,r=function(){this.$rules={start:[{include:\"#dummy_main\"}],\"#block\":[{token:[\"storage.type.zig\",\"text\",\"punctuation.section.braces.begin.zig\"],regex:/((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(\\{)/,push:[{token:\"punctuation.section.braces.end.zig\",regex:/\\}/,next:\"pop\"},{include:\"#dummy_main\"}]}],\"#character_escapes\":[{token:\"constant.character.escape.newline.zig\",regex:/\\\\n/},{token:\"constant.character.escape.carrigereturn.zig\",regex:/\\\\r/},{token:\"constant.character.escape.tabulator.zig\",regex:/\\\\t/},{token:\"constant.character.escape.backslash.zig\",regex:/\\\\\\\\/},{token:\"constant.character.escape.single-quote.zig\",regex:/\\\\'/},{token:\"constant.character.escape.double-quote.zig\",regex:/\\\\\\\"/},{token:\"constant.character.escape.hexidecimal.zig\",regex:/\\\\x[a-fA-F\\d]{2}/},{token:\"constant.character.escape.hexidecimal.zig\",regex:/\\\\u\\{[a-fA-F\\d]{1,6}\\}/}],\"#comments\":[{token:\"comment.line.documentation.zig\",regex:/\\/\\/[!\\/](?=[^\\/])/,push:[{token:\"comment.line.documentation.zig\",regex:/$/,next:\"pop\"},{include:\"#commentContents\"},{defaultToken:\"comment.line.documentation.zig\"}]},{token:\"comment.line.double-slash.zig\",regex:/\\/\\//,push:[{token:\"comment.line.double-slash.zig\",regex:/$/,next:\"pop\"},{include:\"#commentContents\"},{defaultToken:\"comment.line.double-slash.zig\"}]}],\"#commentContents\":[{token:\"keyword.todo.zig\",regex:/\\b(?:TODO|FIXME|XXX|NOTE)\\b:?/}],\"#constants\":[{token:\"constant.language.zig\",regex:/\\b(?:null|undefined|true|false)\\b/},{token:\"constant.numeric.integer.zig\",regex:/\\b(?!\\.)-?[\\d_]+(?!\\.)\\b/},{token:\"constant.numeric.integer.hexadecimal.zig\",regex:/\\b(?!\\.)0x[a-fA-F\\d_]+(?!\\.)\\b/},{token:\"constant.numeric.integer.octal.zig\",regex:/\\b(?!\\.)0o[0-7_]+(?!\\.)\\b/},{token:\"constant.numeric.integer.binary.zig\",regex:/\\b(?!\\.)0b[01_]+(?!\\.)\\b/},{token:\"constant.numeric.float.zig\",regex:/(?!\\.)-?\\b[\\d_]+(?:\\.[\\d_]+)?(?:[eE][+-]?[\\d_]+)?(?!\\.)\\b/},{token:\"constant.numeric.float.hexadecimal.zig\",regex:/(?!\\.)-?\\b0x[a-fA-F\\d_]+(?:\\.[a-fA-F\\d_]+)?[pP]?(?:[+-]?[\\d_]+)?(?!\\.)\\b/}],\"#container_decl\":[{token:\"entity.name.union.zig\",regex:/\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*union\\s*[(\\{])/},{token:\"entity.name.struct.zig\",regex:/\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*struct\\s*[(\\{])/},{token:\"entity.name.enum.zig\",regex:/\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*enum\\s*[(\\{])/},{token:\"entity.name.error.zig\",regex:/\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*error\\s*[(\\{])/},{token:[\"storage.type.error.zig\",\"punctuation.accessor.zig\",\"entity.name.error.zig\"],regex:/\\b(error)(\\.)([a-zA-Z_]\\w*|@\\\".+\\\")/}],\"#dummy_main\":[{include:\"#label\"},{include:\"#function_type\"},{include:\"#function_def\"},{include:\"#punctuation\"},{include:\"#storage_modifier\"},{include:\"#container_decl\"},{include:\"#constants\"},{include:\"#comments\"},{include:\"#strings\"},{include:\"#storage\"},{include:\"#keywords\"},{include:\"#operators\"},{include:\"#support\"},{include:\"#field_decl\"},{include:\"#block\"},{include:\"#function_call\"},{include:\"#enum_literal\"},{include:\"#variables\"}],\"#enum_literal\":[{token:\"constant.language.enum\",regex:/(?!\\w|\\)|\\?|\\}|\\]|\\*|\\.)\\.(?:[a-zA-Z_]\\w*\\b|@\\\"[^\\\"]*\\\")(?!\\(|\\s*=[^=>])/}],\"#field_decl\":[{token:[\"variable.other.member.zig\",\"text\",\"punctuation.separator.zig\",\"text\"],regex:/([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,push:[{token:[\"storage.type.zig\",\"text\",\"punctuation.separator.zig\",\"keyword.operator.assignment.zig\"],regex:/((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(=)|$)/,next:\"pop\"},{include:\"#dummy_main\"}]}],\"#function_call\":[{token:\"variable.function.zig\",regex:/\\b(?!fn)(?:[a-zA-Z_]\\w*|@\\\".+\\\")(?=\\s*\\()/}],\"#keywords\":[{token:\"keyword.control.zig\",regex:/\\b(?:while|for|break|return|continue|asm|defer|errdefer|unreachable)\\b/},{token:\"keyword.control.async.zig\",regex:/\\b(?:async|await|suspend|nosuspend|resume)\\b/},{token:\"keyword.control.conditional.zig\",regex:/\\b(?:if|else|switch|try|catch|orelse)\\b/},{token:\"keyword.control.import.zig\",regex:/\\b(?!\\w)(?:@import|@cImport|@cInclude)\\b/},{token:\"keyword.other.usingnamespace.zig\",regex:/\\busingnamespace\\b/}],\"#label\":[{token:[\"keyword.control.zig\",\"text\",\"entity.name.label.zig\",\"entity.name.label.zig\"],regex:/\\b(break|continue)(\\s*:\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")\\b|\\b(?!\\d)([a-zA-Z_]\\w*|@\\\".+\\\")\\b(?=\\s*:\\s*(?:\\{|while\\b))/}],\"#operators\":[{token:\"keyword.operator.zig\",regex:/\\b!\\b/},{token:\"keyword.operator.logical.zig\",regex:/==|(?:!|>|<)=?/},{token:\"keyword.operator.word.zig\",regex:/\\b(?:and|or)\\b/},{token:\"keyword.operator.assignment.zig\",regex:/(?:(?:\\+|-|\\*)\\%?|\\/|%|<<|>>|&|\\|(?=[^\\|])|\\^)?=/},{token:\"keyword.operator.arithmetic.zig\",regex:/(?:\\+|-|\\*)\\%?|\\/(?!\\/)|%/},{token:\"keyword.operator.bitwise.zig\",regex:/<<|>>|&(?=[a-zA-Z_]|@\\\")|\\|(?=[^\\|])|\\^|~/},{token:\"keyword.operator.other.zig\",regex:/\\+\\+|\\*\\*|->|\\.\\?|\\.\\*|&(?=[a-zA-Z_]|@\\\")|\\?|\\|\\||\\.{2,3}/}],\"#param_list\":[{token:[\"variable.parameter.zig\",\"text\",\"punctuation.separator.zig\",\"text\"],regex:/([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,push:[{token:[\"storage.type.zig\",\"text\",\"punctuation.separator.zig\",\"punctuation.section.parens.end.zig\"],regex:/((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(\\)))/,next:\"pop\"},{include:\"#dummy_main\"},{token:\"storage.type.zig\",regex:/[a-zA-Z_][\\w.]*|@\\\".+\\\"/}]}],\"#punctuation\":[{token:\"punctuation.separator.zig\",regex:/,/},{token:\"punctuation.terminator.zig\",regex:/;/},{token:\"punctuation.section.parens.begin.zig\",regex:/\\(/},{token:\"punctuation.section.parens.end.zig\",regex:/\\)/}],\"#storage\":[{token:\"storage.type.zig\",regex:/\\b(?:bool|void|noreturn|type|anyerror|anytype)\\b/},{token:\"storage.type.integer.zig\",regex:/\\b(?!\\.)(?:[iu]\\d+|[iu]size|comptime_int)\\b/},{token:\"storage.type.float.zig\",regex:/\\b(?:f16|f32|f64|f128|comptime_float)\\b/},{token:\"storage.type.c_compat.zig\",regex:/\\b(?:c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\\b/},{token:[\"storage.type.zig\",\"text\",\"keyword.operator.zig\",\"text\",\"storage.type.zig\"],regex:/\\b(anyframe)\\b(\\s*)((?:->)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")\\b(?!\\s*\\())?/},{token:\"storage.type.function.zig\",regex:/\\bfn\\b/},{token:\"storage.type.test.zig\",regex:/\\btest\\b/},{token:\"storage.type.struct.zig\",regex:/\\bstruct\\b/},{token:\"storage.type.enum.zig\",regex:/\\benum\\b/},{token:\"storage.type.union.zig\",regex:/\\bunion\\b/},{token:\"storage.type.error.zig\",regex:/\\berror\\b/}],\"#storage_modifier\":[{token:\"storage.modifier.zig\",regex:/\\b(?:const|var|extern|packed|export|pub|noalias|inline|noinline|comptime|volatile|align|linksection|threadlocal|allowzero)\\b/}],\"#strings\":[{token:\"string.quoted.single.zig\",regex:/\\'/,push:[{token:\"string.quoted.single.zig\",regex:/\\'/,next:\"pop\"},{include:\"#character_escapes\"},{token:\"invalid.illegal.character.zig\",regex:/\\\\[^\\'][^\\']*?/},{defaultToken:\"string.quoted.single.zig\"}]},{token:\"string.quoted.double.zig\",regex:/c?\\\"/,push:[{token:\"string.quoted.double.zig\",regex:/\\\"/,next:\"pop\"},{include:\"#character_escapes\"},{token:\"invalid.illegal.character.zig\",regex:/\\\\[^\\'][^\\']*?/},{defaultToken:\"string.quoted.double.zig\"}]},{token:\"string.quoted.other.zig\",regex:/c?\\\\\\\\/,push:[{token:\"string.quoted.other.zig\",regex:/$/,next:\"pop\"},{defaultToken:\"string.quoted.other.zig\"}]}],\"#function_type\":[{token:[\"storage.type.function.zig\",\"text\",\"punctuation.section.parens.begin.zig\"],regex:/\\b(fn)(\\s*)(\\()/,push:[{token:[\"text\",\"storage.type.zig\",\"text\",\"keyword.operator.zig\",\"text\",\"storage.type.zig\"],regex:/(\\s*)(?:([a-zA-Z_]\\w*|@\\\".+\\\"))?(\\s*)((?:!)?)(\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")/,next:\"pop\"},{include:\"#label\"},{include:\"#param_list\"},{token:\"storage.type.zig\",regex:/[a-zA-Z_]\\w*|@\\\".+\\\"/},{include:\"#dummy_main\"},{defaultToken:\"meta.function.parameters.zig\"}]}],\"#function_def\":[{token:[\"text\",\"entity.name.function\",\"punctuation.section.parens.begin.zig\"],regex:/(?=fn\\s+)(\\s+)([a-zA-Z_]\\w*|@\\\".+\\\")(\\()/,push:[{token:[\"text\",\"storage.type.zig\",\"keyword.operator.zig\",\"text\",\"storage.type.zig\"],regex:/(\\s*)((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)((?:!)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")?)/,next:\"pop\"},{include:\"#label\"},{include:\"#param_list\"},{token:\"storage.type.zig\",regex:/[a-zA-Z_][\\w.]*|@\\\".+\\\"/},{include:\"#dummy_main\"}]}],\"#support\":[{token:\"support.function.zig\",regex:/\\b@(?!\\w|\\\"|[0-9])[a-zA-Z_]\\w*\\b/}],\"#variables\":[{token:\"variable.constant.zig\",regex:/\\b[_A-Z][_A-Z0-9]+\\b/},{token:\"entity.name.type.zig\",regex:/\\b[_a-zA-Z][_a-zA-Z0-9]*_t\\b/},{token:\"entity.name.type.zig\",regex:/\\b[A-Z][a-zA-Z0-9]*\\b/},{token:\"variable.zig\",regex:/\\b[_a-zA-Z][_a-zA-Z0-9]*\\b/}]},this.normalizeRules()};r.metaData={fileTypes:[\"zig\"],keyEquivalent:\"^~Z\",name:\"Zig\",scopeName:\"source.zig\"},o.inherits(r,i),t.ZigHighlightRules=r})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var o=e(\"../../lib/oop\"),i=e(\"../../range\").Range,r=e(\"./fold_mode\").FoldMode,a=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};o.inherits(a,r),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var o=e.getLine(n);if(this.singleLineBlockCommentRe.test(o)&&!this.startRegionRe.test(o)&&!this.tripleStarBlockCommentRe.test(o))return\"\";var i=this._getFoldWidgetBase(e,t,n);return!i&&this.startRegionRe.test(o)?\"start\":i},this.getFoldWidgetRange=function(e,t,n,o){var i,r=e.getLine(n);if(this.startRegionRe.test(r))return this.getCommentRegionBlock(e,r,n);if(i=r.match(this.foldingStartMarker)){var a=i.index;if(i[1])return this.openingBracketBlock(e,i[1],n,a);var g=e.getCommentFoldRange(n,a+i[0].length,1);return g&&!g.isMultiLine()&&(o?g=this.getSectionRange(e,n):\"all\"!=t&&(g=null)),g}if(\"markbegin\"!==t&&(i=r.match(this.foldingStopMarker))){a=i.index+i[0].length;return i[1]?this.closingBracketBlock(e,i[1],n,a):e.getCommentFoldRange(n,a,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),o=n.search(/\\S/),r=t,a=n.length,g=t+=1,s=e.getLength();++t<s;){var c=(n=e.getLine(t)).search(/\\S/);if(-1!==c){if(o>c)break;var l=this.getFoldWidgetRange(e,\"all\",t);if(l){if(l.start.row<=r)break;if(l.isMultiLine())t=l.end.row;else if(o==c)break}g=t}}return new i(r,a,g,e.getLine(g).length)},this.getCommentRegionBlock=function(e,t,n){for(var o=t.search(/\\s*$/),r=e.getLength(),a=n,g=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,s=1;++n<r;){t=e.getLine(n);var c=g.exec(t);if(c&&(c[1]?s--:s++,!s))break}if(n>a)return new i(a,o,n,t.length)}}.call(a.prototype)})),ace.define(\"ace/mode/zig\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/zig_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),i=e(\"./text\").Mode,r=e(\"./zig_highlight_rules\").ZigHighlightRules,a=e(\"./folding/cstyle\").FoldMode,g=function(){this.HighlightRules=r,this.foldingRules=new a,this.$behaviour=this.$defaultBehaviour};o.inherits(g,i),function(){this.lineCommentStart=\"//\",this.$id=\"ace/mode/zig\"}.call(g.prototype),t.Mode=g})),ace.require([\"ace/mode/zig\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"819ccd4be13055360c09139fd31ac0ca.js","input":"ace.define(\"ace/mode/zig_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var ZigHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: \"#dummy_main\"\n      }],\n      \"#block\": [{\n        token: [\"storage.type.zig\", \"text\", \"punctuation.section.braces.begin.zig\"],\n        regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(\\{)/,\n        push: [{\n          token: \"punctuation.section.braces.end.zig\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#dummy_main\"\n        }]\n      }],\n      \"#character_escapes\": [{\n        token: \"constant.character.escape.newline.zig\",\n        regex: /\\\\n/\n      }, {\n        token: \"constant.character.escape.carrigereturn.zig\",\n        regex: /\\\\r/\n      }, {\n        token: \"constant.character.escape.tabulator.zig\",\n        regex: /\\\\t/\n      }, {\n        token: \"constant.character.escape.backslash.zig\",\n        regex: /\\\\\\\\/\n      }, {\n        token: \"constant.character.escape.single-quote.zig\",\n        regex: /\\\\'/\n      }, {\n        token: \"constant.character.escape.double-quote.zig\",\n        regex: /\\\\\\\"/\n      }, {\n        token: \"constant.character.escape.hexidecimal.zig\",\n        regex: /\\\\x[a-fA-F\\d]{2}/\n      }, {\n        token: \"constant.character.escape.hexidecimal.zig\",\n        regex: /\\\\u\\{[a-fA-F\\d]{1,6}\\}/\n      }],\n      \"#comments\": [{\n        token: \"comment.line.documentation.zig\",\n        regex: /\\/\\/[!\\/](?=[^\\/])/,\n        push: [{\n          token: \"comment.line.documentation.zig\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          include: \"#commentContents\"\n        }, {\n          defaultToken: \"comment.line.documentation.zig\"\n        }]\n      }, {\n        token: \"comment.line.double-slash.zig\",\n        regex: /\\/\\//,\n        push: [{\n          token: \"comment.line.double-slash.zig\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          include: \"#commentContents\"\n        }, {\n          defaultToken: \"comment.line.double-slash.zig\"\n        }]\n      }],\n      \"#commentContents\": [{\n        token: \"keyword.todo.zig\",\n        regex: /\\b(?:TODO|FIXME|XXX|NOTE)\\b:?/\n      }],\n      \"#constants\": [{\n        token: \"constant.language.zig\",\n        regex: /\\b(?:null|undefined|true|false)\\b/\n      }, {\n        token: \"constant.numeric.integer.zig\",\n        regex: /\\b(?!\\.)-?[\\d_]+(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.integer.hexadecimal.zig\",\n        regex: /\\b(?!\\.)0x[a-fA-F\\d_]+(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.integer.octal.zig\",\n        regex: /\\b(?!\\.)0o[0-7_]+(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.integer.binary.zig\",\n        regex: /\\b(?!\\.)0b[01_]+(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.float.zig\",\n        regex: /(?!\\.)-?\\b[\\d_]+(?:\\.[\\d_]+)?(?:[eE][+-]?[\\d_]+)?(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.float.hexadecimal.zig\",\n        regex: /(?!\\.)-?\\b0x[a-fA-F\\d_]+(?:\\.[a-fA-F\\d_]+)?[pP]?(?:[+-]?[\\d_]+)?(?!\\.)\\b/\n      }],\n      \"#container_decl\": [{\n        token: \"entity.name.union.zig\",\n        regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*union\\s*[(\\{])/\n      }, {\n        token: \"entity.name.struct.zig\",\n        regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*struct\\s*[(\\{])/\n      }, {\n        token: \"entity.name.enum.zig\",\n        regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*enum\\s*[(\\{])/\n      }, {\n        token: \"entity.name.error.zig\",\n        regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*error\\s*[(\\{])/\n      }, {\n        token: [\"storage.type.error.zig\", \"punctuation.accessor.zig\", \"entity.name.error.zig\"],\n        regex: /\\b(error)(\\.)([a-zA-Z_]\\w*|@\\\".+\\\")/\n      }],\n      \"#dummy_main\": [{\n        include: \"#label\"\n      }, {\n        include: \"#function_type\"\n      }, {\n        include: \"#function_def\"\n      }, {\n        include: \"#punctuation\"\n      }, {\n        include: \"#storage_modifier\"\n      }, {\n        include: \"#container_decl\"\n      }, {\n        include: \"#constants\"\n      }, {\n        include: \"#comments\"\n      }, {\n        include: \"#strings\"\n      }, {\n        include: \"#storage\"\n      }, {\n        include: \"#keywords\"\n      }, {\n        include: \"#operators\"\n      }, {\n        include: \"#support\"\n      }, {\n        include: \"#field_decl\"\n      }, {\n        include: \"#block\"\n      }, {\n        include: \"#function_call\"\n      }, {\n        include: \"#enum_literal\"\n      }, {\n        include: \"#variables\"\n      }],\n      \"#enum_literal\": [{\n        token: \"constant.language.enum\",\n        regex: /(?!\\w|\\)|\\?|\\}|\\]|\\*|\\.)\\.(?:[a-zA-Z_]\\w*\\b|@\\\"[^\\\"]*\\\")(?!\\(|\\s*=[^=>])/\n      }],\n      \"#field_decl\": [{\n        token: [\"variable.other.member.zig\", \"text\", \"punctuation.separator.zig\", \"text\"],\n        regex: /([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,\n        push: [{\n          token: [\"storage.type.zig\", \"text\", \"punctuation.separator.zig\", \"keyword.operator.assignment.zig\"],\n          regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(=)|$)/,\n          next: \"pop\"\n        }, {\n          include: \"#dummy_main\"\n        }]\n      }],\n      \"#function_call\": [{\n        token: \"variable.function.zig\",\n        regex: /\\b(?!fn)(?:[a-zA-Z_]\\w*|@\\\".+\\\")(?=\\s*\\()/\n      }],\n      \"#keywords\": [{\n        token: \"keyword.control.zig\",\n        regex: /\\b(?:while|for|break|return|continue|asm|defer|errdefer|unreachable)\\b/\n      }, {\n        token: \"keyword.control.async.zig\",\n        regex: /\\b(?:async|await|suspend|nosuspend|resume)\\b/\n      }, {\n        token: \"keyword.control.conditional.zig\",\n        regex: /\\b(?:if|else|switch|try|catch|orelse)\\b/\n      }, {\n        token: \"keyword.control.import.zig\",\n        regex: /\\b(?!\\w)(?:@import|@cImport|@cInclude)\\b/\n      }, {\n        token: \"keyword.other.usingnamespace.zig\",\n        regex: /\\busingnamespace\\b/\n      }],\n      \"#label\": [{\n        token: [\"keyword.control.zig\", \"text\", \"entity.name.label.zig\", \"entity.name.label.zig\"],\n        regex: /\\b(break|continue)(\\s*:\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")\\b|\\b(?!\\d)([a-zA-Z_]\\w*|@\\\".+\\\")\\b(?=\\s*:\\s*(?:\\{|while\\b))/\n      }],\n      \"#operators\": [{\n        token: \"keyword.operator.zig\",\n        regex: /\\b!\\b/\n      }, {\n        token: \"keyword.operator.logical.zig\",\n        regex: /==|(?:!|>|<)=?/\n      }, {\n        token: \"keyword.operator.word.zig\",\n        regex: /\\b(?:and|or)\\b/\n      }, {\n        token: \"keyword.operator.assignment.zig\",\n        regex: /(?:(?:\\+|-|\\*)\\%?|\\/|%|<<|>>|&|\\|(?=[^\\|])|\\^)?=/\n      }, {\n        token: \"keyword.operator.arithmetic.zig\",\n        regex: /(?:\\+|-|\\*)\\%?|\\/(?!\\/)|%/\n      }, {\n        token: \"keyword.operator.bitwise.zig\",\n        regex: /<<|>>|&(?=[a-zA-Z_]|@\\\")|\\|(?=[^\\|])|\\^|~/\n      }, {\n        token: \"keyword.operator.other.zig\",\n        regex: /\\+\\+|\\*\\*|->|\\.\\?|\\.\\*|&(?=[a-zA-Z_]|@\\\")|\\?|\\|\\||\\.{2,3}/\n      }],\n      \"#param_list\": [{\n        token: [\"variable.parameter.zig\", \"text\", \"punctuation.separator.zig\", \"text\"],\n        regex: /([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,\n        push: [{\n          token: [\"storage.type.zig\", \"text\", \"punctuation.separator.zig\", \"punctuation.section.parens.end.zig\"],\n          regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(\\)))/,\n          next: \"pop\"\n        }, {\n          include: \"#dummy_main\"\n        }, {\n          token: \"storage.type.zig\",\n          regex: /[a-zA-Z_][\\w.]*|@\\\".+\\\"/\n        }]\n      }],\n      \"#punctuation\": [{\n        token: \"punctuation.separator.zig\",\n        regex: /,/\n      }, {\n        token: \"punctuation.terminator.zig\",\n        regex: /;/\n      }, {\n        token: \"punctuation.section.parens.begin.zig\",\n        regex: /\\(/\n      }, {\n        token: \"punctuation.section.parens.end.zig\",\n        regex: /\\)/\n      }],\n      \"#storage\": [{\n        token: \"storage.type.zig\",\n        regex: /\\b(?:bool|void|noreturn|type|anyerror|anytype)\\b/\n      }, {\n        token: \"storage.type.integer.zig\",\n        regex: /\\b(?!\\.)(?:[iu]\\d+|[iu]size|comptime_int)\\b/\n      }, {\n        token: \"storage.type.float.zig\",\n        regex: /\\b(?:f16|f32|f64|f128|comptime_float)\\b/\n      }, {\n        token: \"storage.type.c_compat.zig\",\n        regex: /\\b(?:c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\\b/\n      }, {\n        token: [\"storage.type.zig\", \"text\", \"keyword.operator.zig\", \"text\", \"storage.type.zig\"],\n        regex: /\\b(anyframe)\\b(\\s*)((?:->)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")\\b(?!\\s*\\())?/\n      }, {\n        token: \"storage.type.function.zig\",\n        regex: /\\bfn\\b/\n      }, {\n        token: \"storage.type.test.zig\",\n        regex: /\\btest\\b/\n      }, {\n        token: \"storage.type.struct.zig\",\n        regex: /\\bstruct\\b/\n      }, {\n        token: \"storage.type.enum.zig\",\n        regex: /\\benum\\b/\n      }, {\n        token: \"storage.type.union.zig\",\n        regex: /\\bunion\\b/\n      }, {\n        token: \"storage.type.error.zig\",\n        regex: /\\berror\\b/\n      }],\n      \"#storage_modifier\": [{\n        token: \"storage.modifier.zig\",\n        regex: /\\b(?:const|var|extern|packed|export|pub|noalias|inline|noinline|comptime|volatile|align|linksection|threadlocal|allowzero)\\b/\n      }],\n      \"#strings\": [{\n        token: \"string.quoted.single.zig\",\n        regex: /\\'/,\n        push: [{\n          token: \"string.quoted.single.zig\",\n          regex: /\\'/,\n          next: \"pop\"\n        }, {\n          include: \"#character_escapes\"\n        }, {\n          token: \"invalid.illegal.character.zig\",\n          regex: /\\\\[^\\'][^\\']*?/\n        }, {\n          defaultToken: \"string.quoted.single.zig\"\n        }]\n      }, {\n        token: \"string.quoted.double.zig\",\n        regex: /c?\\\"/,\n        push: [{\n          token: \"string.quoted.double.zig\",\n          regex: /\\\"/,\n          next: \"pop\"\n        }, {\n          include: \"#character_escapes\"\n        }, {\n          token: \"invalid.illegal.character.zig\",\n          regex: /\\\\[^\\'][^\\']*?/\n        }, {\n          defaultToken: \"string.quoted.double.zig\"\n        }]\n      }, {\n        token: \"string.quoted.other.zig\",\n        regex: /c?\\\\\\\\/,\n        push: [{\n          token: \"string.quoted.other.zig\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quoted.other.zig\"\n        }]\n      }],\n      \"#function_type\": [{\n        token: [\"storage.type.function.zig\", \"text\", \"punctuation.section.parens.begin.zig\"],\n        regex: /\\b(fn)(\\s*)(\\()/,\n        push: [{\n          token: [\"text\", \"storage.type.zig\", \"text\", \"keyword.operator.zig\", \"text\", \"storage.type.zig\"],\n          regex: /(\\s*)(?:([a-zA-Z_]\\w*|@\\\".+\\\"))?(\\s*)((?:!)?)(\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")/,\n          next: \"pop\"\n        }, {\n          include: \"#label\"\n        }, {\n          include: \"#param_list\"\n        }, {\n          token: \"storage.type.zig\",\n          regex: /[a-zA-Z_]\\w*|@\\\".+\\\"/\n        }, {\n          include: \"#dummy_main\"\n        }, {\n          defaultToken: \"meta.function.parameters.zig\"\n        }]\n      }],\n      \"#function_def\": [{\n        token: [\"text\", \"entity.name.function\", \"punctuation.section.parens.begin.zig\"],\n        regex: /(?=fn\\s+)(\\s+)([a-zA-Z_]\\w*|@\\\".+\\\")(\\()/,\n        push: [{\n          token: [\"text\", \"storage.type.zig\", \"keyword.operator.zig\", \"text\", \"storage.type.zig\"],\n          regex: /(\\s*)((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)((?:!)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")?)/,\n          next: \"pop\"\n        }, {\n          include: \"#label\"\n        }, {\n          include: \"#param_list\"\n        }, {\n          token: \"storage.type.zig\",\n          regex: /[a-zA-Z_][\\w.]*|@\\\".+\\\"/\n        }, {\n          include: \"#dummy_main\"\n        }]\n      }],\n      \"#support\": [{\n        token: \"support.function.zig\",\n        regex: /\\b@(?!\\w|\\\"|[0-9])[a-zA-Z_]\\w*\\b/\n      }],\n      \"#variables\": [{\n        token: \"variable.constant.zig\",\n        regex: /\\b[_A-Z][_A-Z0-9]+\\b/\n      }, {\n        token: \"entity.name.type.zig\",\n        regex: /\\b[_a-zA-Z][_a-zA-Z0-9]*_t\\b/\n      }, {\n        token: \"entity.name.type.zig\",\n        regex: /\\b[A-Z][a-zA-Z0-9]*\\b/\n      }, {\n        token: \"variable.zig\",\n        regex: /\\b[_a-zA-Z][_a-zA-Z0-9]*\\b/\n      }]\n    };\n    this.normalizeRules();\n  };\n  ZigHighlightRules.metaData = {\n    fileTypes: [\"zig\"],\n    keyEquivalent: \"^~Z\",\n    name: \"Zig\",\n    scopeName: \"source.zig\"\n  };\n  oop.inherits(ZigHighlightRules, TextHighlightRules);\n  exports.ZigHighlightRules = ZigHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/zig\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/zig_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var ZigHighlightRules = require(\"./zig_highlight_rules\").ZigHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = ZigHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/zig\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/zig\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}