{"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),r=e(\"./text_highlight_rules\").TextHighlightRules,i=function(){this.$rules={start:[{token:\"comment.doc.tag\",regex:\"@\\\\w+(?=\\\\s|$)\"},i.getTagRule(),{defaultToken:\"comment.doc.body\",caseInsensitive:!0}]}};o.inherits(i,r),i.getTagRule=function(e){return{token:\"comment.doc.tag.storage.type\",regex:\"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"}},i.getStartRule=function(e){return{token:\"comment.doc\",regex:/\\/\\*\\*(?!\\/)/,next:e}},i.getEndRule=function(e){return{token:\"comment.doc\",regex:\"\\\\*\\\\/\",next:e}},t.DocCommentHighlightRules=i})),ace.define(\"ace/mode/apex_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\",\"ace/mode/doc_comment_highlight_rules\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),r=e(\"../mode/text_highlight_rules\").TextHighlightRules,i=e(\"../mode/doc_comment_highlight_rules\").DocCommentHighlightRules,a=function(){var e=this.createKeywordMapper({\"variable.language\":\"activate|any|autonomous|begin|bigdecimal|byte|cast|char|collect|const|end|exit|export|float|goto|group|having|hint|import|inner|into|join|loop|number|object|of|outer|parallel|pragma|retrieve|returning|search|short|stat|synchronized|then|this_month|transaction|type|when\",keyword:\"private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final|and|array|as|asc|break|bulk|by|catch|class|commit|continue|convertcurrency|delete|desc|do|else|enum|extends|false|final|finally|for|from|future|global|if|implements|in|insert|instanceof|interface|last_90_days|last_month|last_n_days|last_week|like|limit|list|map|merge|new|next_90_days|next_month|next_n_days|next_week|not|null|nulls|on|or|override|package|return|rollback|savepoint|select|set|sort|super|testmethod|this|this_week|throw|today|tolabel|tomorrow|trigger|true|try|undelete|update|upsert|using|virtual|webservice|where|while|yesterday|switch|case|default\",\"storage.type\":\"def|boolean|byte|char|short|int|float|pblob|date|datetime|decimal|double|id|integer|long|string|time|void|blob|Object\",\"constant.language\":\"true|false|null|after|before|count|excludes|first|includes|last|order|sharing|with\",\"support.function\":\"system|apex|label|apexpages|userinfo|schema\"},\"identifier\",!0);function t(e,t){return{regex:e+(t.multiline?\"\":\"(?=.)\"),token:\"string.start\",next:[{regex:t.escape,token:\"character.escape\"},{regex:t.error,token:\"error.invalid\"},{regex:e+(t.multiline?\"\":\"|$\"),token:\"string.end\",next:t.next||\"start\"},{defaultToken:\"string\"}]}}this.$rules={start:[t(\"'\",{escape:/\\\\[nb'\"\\\\]/,error:/\\\\./,multiline:!1}),[{token:\"comment\",regex:\"\\\\/\\\\/(?=.)\",next:[i.getTagRule(),{token:\"comment\",regex:\"$|^\",next:\"start\"},{defaultToken:\"comment\",caseInsensitive:!0}]},i.getStartRule(\"doc-start\"),{token:\"comment\",regex:/\\/\\*/,next:[i.getTagRule(),{token:\"comment\",regex:\"\\\\*\\\\/\",next:\"start\"},{defaultToken:\"comment\",caseInsensitive:!0}]}],{type:\"decoration\",token:[\"meta.package.apex\",\"keyword.other.package.apex\",\"meta.package.apex\",\"storage.modifier.package.apex\",\"meta.package.apex\",\"punctuation.terminator.apex\"],regex:/^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*)((?:;)?))?/},{regex:/@[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,token:\"constant.language\"},{regex:/[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,token:function(t){return\"__c\"==t.slice(-3)?\"support.function\":e(t)}},{regex:\"`#%\",token:\"error.invalid\"},{token:\"constant.numeric\",regex:/[+-]?\\d+(?:(?:\\.\\d*)?(?:[LlDdEe][+-]?\\d+)?)\\b|\\.\\d+[LlDdEe]/},{token:\"keyword.operator\",regex:/--|\\+\\+|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|[!$%&*+\\-~\\/^]=?/,next:\"start\"},{token:\"punctuation.operator\",regex:/[?:,;.]/,next:\"start\"},{token:\"paren.lparen\",regex:/[\\[]/,next:\"maybe_soql\",merge:!1},{token:\"paren.lparen\",regex:/[\\[({]/,next:\"start\",merge:!1},{token:\"paren.rparen\",regex:/[\\])}]/,merge:!1}],maybe_soql:[{regex:/\\s+/,token:\"text\"},{regex:/(SELECT|FIND)\\b/,token:\"keyword\",caseInsensitive:!0,next:\"soql\"},{regex:\"\",token:\"none\",next:\"start\"}],soql:[{regex:\"(:?ASC|BY|CATEGORY|CUBE|DATA|DESC|END|FIND|FIRST|FOR|FROM|GROUP|HAVING|IN|LAST|LIMIT|NETWORK|NULLS|OFFSET|ORDER|REFERENCE|RETURNING|ROLLUP|SCOPE|SELECT|SNIPPET|TRACKING|TYPEOF|UPDATE|USING|VIEW|VIEWSTAT|WHERE|WITH|AND|OR)\\\\b\",token:\"keyword\",caseInsensitive:!0},{regex:\"(:?target_length|toLabel|convertCurrency|count|Contact|Account|User|FIELDS)\\\\b\",token:\"support.function\",caseInsensitive:!0},{token:\"paren.rparen\",regex:/[\\]]/,next:\"start\",merge:!1},t(\"'\",{escape:/\\\\[nb'\"\\\\]/,error:/\\\\./,multiline:!1,next:\"soql\"}),t('\"',{escape:/\\\\[nb'\"\\\\]/,error:/\\\\./,multiline:!1,next:\"soql\"}),{regex:/\\\\./,token:\"character.escape\"},{regex:/[\\?\\&\\|\\!\\{\\}\\[\\]\\(\\)\\^\\~\\*\\:\\\"\\'\\+\\-\\,\\.=\\\\\\/]/,token:\"keyword.operator\"}],\"log-start\":[{token:\"timestamp.invisible\",regex:/^[\\d:.() ]+\\|/,next:\"log-header\"},{token:\"timestamp.invisible\",regex:/^  (Number of|Maximum)[^:]*:/,next:\"log-comment\"},{token:\"invisible\",regex:/^Execute Anonymous:/,next:\"log-comment\"},{defaultToken:\"text\"}],\"log-comment\":[{token:\"log-comment\",regex:/.*$/,next:\"log-start\"}],\"log-header\":[{token:\"timestamp.invisible\",regex:/((USER_DEBUG|\\[\\d+\\]|DEBUG)\\|)+/},{token:\"keyword\",regex:\"(?:EXECUTION_FINISHED|EXECUTION_STARTED|CODE_UNIT_STARTED|CUMULATIVE_LIMIT_USAGE|LIMIT_USAGE_FOR_NS|CUMULATIVE_LIMIT_USAGE_END|CODE_UNIT_FINISHED)\"},{regex:\"\",next:\"log-start\"}]},this.embedRules(i,\"doc-\",[i.getEndRule(\"start\")]),this.normalizeRules()};o.inherits(a,r),t.ApexHighlightRules=a})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var o=e(\"../../lib/oop\"),r=e(\"../../range\").Range,i=e(\"./fold_mode\").FoldMode,a=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};o.inherits(a,i),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var o=e.getLine(n);if(this.singleLineBlockCommentRe.test(o)&&!this.startRegionRe.test(o)&&!this.tripleStarBlockCommentRe.test(o))return\"\";var r=this._getFoldWidgetBase(e,t,n);return!r&&this.startRegionRe.test(o)?\"start\":r},this.getFoldWidgetRange=function(e,t,n,o){var r,i=e.getLine(n);if(this.startRegionRe.test(i))return this.getCommentRegionBlock(e,i,n);if(r=i.match(this.foldingStartMarker)){var a=r.index;if(r[1])return this.openingBracketBlock(e,r[1],n,a);var s=e.getCommentFoldRange(n,a+r[0].length,1);return s&&!s.isMultiLine()&&(o?s=this.getSectionRange(e,n):\"all\"!=t&&(s=null)),s}if(\"markbegin\"!==t&&(r=i.match(this.foldingStopMarker))){a=r.index+r[0].length;return r[1]?this.closingBracketBlock(e,r[1],n,a):e.getCommentFoldRange(n,a,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),o=n.search(/\\S/),i=t,a=n.length,s=t+=1,l=e.getLength();++t<l;){var g=(n=e.getLine(t)).search(/\\S/);if(-1!==g){if(o>g)break;var c=this.getFoldWidgetRange(e,\"all\",t);if(c){if(c.start.row<=i)break;if(c.isMultiLine())t=c.end.row;else if(o==g)break}s=t}}return new r(i,a,s,e.getLine(s).length)},this.getCommentRegionBlock=function(e,t,n){for(var o=t.search(/\\s*$/),i=e.getLength(),a=n,s=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,l=1;++n<i;){t=e.getLine(n);var g=s.exec(t);if(g&&(g[1]?l--:l++,!l))break}if(n>a)return new r(a,o,n,t.length)}}.call(a.prototype)})),ace.define(\"ace/mode/apex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/apex_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),r=e(\"../mode/text\").Mode,i=e(\"./apex_highlight_rules\").ApexHighlightRules,a=e(\"../mode/folding/cstyle\").FoldMode;function s(){r.call(this),this.HighlightRules=i,this.foldingRules=new a,this.$behaviour=this.$defaultBehaviour}o.inherits(s,r),s.prototype.lineCommentStart=\"//\",s.prototype.blockComment={start:\"/*\",end:\"*/\"},t.Mode=s})),ace.require([\"ace/mode/apex\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"5cfc353f7cbc03dba727dbd969db2eae.js","input":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@\\\\w+(?=\\\\s|$)\"\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc.body\",\n        caseInsensitive: true\n      }]\n    };\n  };\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: /\\/\\*\\*(?!\\/)/,\n      next: start\n    };\n  };\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/apex_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\", \"ace/mode/doc_comment_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"../mode/text_highlight_rules\").TextHighlightRules;\n  var DocCommentHighlightRules = require(\"../mode/doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var ApexHighlightRules = function () {\n    var mainKeywordMapper = this.createKeywordMapper({\n      \"variable.language\": \"activate|any|autonomous|begin|bigdecimal|byte|cast|char|collect|const\" + \"|end|exit|export|float|goto|group|having|hint|import|inner|into|join|loop|number|object|of|outer\" + \"|parallel|pragma|retrieve|returning|search|short|stat|synchronized|then|this_month\" + \"|transaction|type|when\",\n      \"keyword\": \"private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final\" + \"|and|array|as|asc|break|bulk|by|catch|class|commit|continue|convertcurrency\" + \"|delete|desc|do|else|enum|extends|false|final|finally|for|from|future|global\" + \"|if|implements|in|insert|instanceof|interface|last_90_days|last_month\" + \"|last_n_days|last_week|like|limit|list|map|merge|new|next_90_days|next_month|next_n_days\" + \"|next_week|not|null|nulls|on|or|override|package|return\" + \"|rollback|savepoint|select|set|sort|super|testmethod|this|this_week|throw|today\" + \"|tolabel|tomorrow|trigger|true|try|undelete|update|upsert|using|virtual|webservice\" + \"|where|while|yesterday|switch|case|default\",\n      \"storage.type\": \"def|boolean|byte|char|short|int|float|pblob|date|datetime|decimal|double|id|integer|long|string|time|void|blob|Object\",\n      \"constant.language\": \"true|false|null|after|before|count|excludes|first|includes|last|order|sharing|with\",\n      \"support.function\": \"system|apex|label|apexpages|userinfo|schema\"\n    }, \"identifier\", true);\n    function keywordMapper(value) {\n      if (value.slice(-3) == \"__c\") return \"support.function\";\n      return mainKeywordMapper(value);\n    }\n    function string(start, options) {\n      return {\n        regex: start + (options.multiline ? \"\" : \"(?=.)\"),\n        token: \"string.start\",\n        next: [{\n          regex: options.escape,\n          token: \"character.escape\"\n        }, {\n          regex: options.error,\n          token: \"error.invalid\"\n        }, {\n          regex: start + (options.multiline ? \"\" : \"|$\"),\n          token: \"string.end\",\n          next: options.next || \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      };\n    }\n    function comments() {\n      return [{\n        token: \"comment\",\n        regex: \"\\\\/\\\\/(?=.)\",\n        next: [DocCommentHighlightRules.getTagRule(), {\n          token: \"comment\",\n          regex: \"$|^\",\n          next: \"start\"\n        }, {\n          defaultToken: \"comment\",\n          caseInsensitive: true\n        }]\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment\",\n        // multi line comment\n        regex: /\\/\\*/,\n        next: [DocCommentHighlightRules.getTagRule(), {\n          token: \"comment\",\n          regex: \"\\\\*\\\\/\",\n          next: \"start\"\n        }, {\n          defaultToken: \"comment\",\n          caseInsensitive: true\n        }]\n      }];\n    }\n    this.$rules = {\n      start: [string(\"'\", {\n        escape: /\\\\[nb'\"\\\\]/,\n        error: /\\\\./,\n        multiline: false\n      }), comments(\"c\"), {\n        type: \"decoration\",\n        token: [\"meta.package.apex\", \"keyword.other.package.apex\", \"meta.package.apex\", \"storage.modifier.package.apex\", \"meta.package.apex\", \"punctuation.terminator.apex\"],\n        regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*)((?:;)?))?/\n      }, {\n        regex: /@[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n        token: \"constant.language\"\n      }, {\n        regex: /[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n        token: keywordMapper\n      }, {\n        regex: \"`#%\",\n        token: \"error.invalid\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: /[+-]?\\d+(?:(?:\\.\\d*)?(?:[LlDdEe][+-]?\\d+)?)\\b|\\.\\d+[LlDdEe]/\n      }, {\n        token: \"keyword.operator\",\n        regex: /--|\\+\\+|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|[!$%&*+\\-~\\/^]=?/,\n        next: \"start\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[?:,;.]/,\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[]/,\n        next: \"maybe_soql\",\n        merge: false\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[({]/,\n        next: \"start\",\n        merge: false\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\])}]/,\n        merge: false\n      }],\n      maybe_soql: [{\n        regex: /\\s+/,\n        token: \"text\"\n      }, {\n        regex: /(SELECT|FIND)\\b/,\n        token: \"keyword\",\n        caseInsensitive: true,\n        next: \"soql\"\n      }, {\n        regex: \"\",\n        token: \"none\",\n        next: \"start\"\n      }],\n      soql: [{\n        regex: \"(:?ASC|BY|CATEGORY|CUBE|DATA|DESC|END|FIND|FIRST|FOR|FROM|GROUP|HAVING|IN|LAST\" + \"|LIMIT|NETWORK|NULLS|OFFSET|ORDER|REFERENCE|RETURNING|ROLLUP|SCOPE|SELECT\" + \"|SNIPPET|TRACKING|TYPEOF|UPDATE|USING|VIEW|VIEWSTAT|WHERE|WITH|AND|OR)\\\\b\",\n        token: \"keyword\",\n        caseInsensitive: true\n      }, {\n        regex: \"(:?target_length|toLabel|convertCurrency|count|Contact|Account|User|FIELDS)\\\\b\",\n        token: \"support.function\",\n        caseInsensitive: true\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\]]/,\n        next: \"start\",\n        merge: false\n      }, string(\"'\", {\n        escape: /\\\\[nb'\"\\\\]/,\n        error: /\\\\./,\n        multiline: false,\n        next: \"soql\"\n      }), string('\"', {\n        escape: /\\\\[nb'\"\\\\]/,\n        error: /\\\\./,\n        multiline: false,\n        next: \"soql\"\n      }), {\n        regex: /\\\\./,\n        token: \"character.escape\"\n      }, {\n        regex: /[\\?\\&\\|\\!\\{\\}\\[\\]\\(\\)\\^\\~\\*\\:\\\"\\'\\+\\-\\,\\.=\\\\\\/]/,\n        token: \"keyword.operator\"\n      }],\n      \"log-start\": [{\n        token: \"timestamp.invisible\",\n        regex: /^[\\d:.() ]+\\|/,\n        next: \"log-header\"\n      }, {\n        token: \"timestamp.invisible\",\n        regex: /^  (Number of|Maximum)[^:]*:/,\n        next: \"log-comment\"\n      }, {\n        token: \"invisible\",\n        regex: /^Execute Anonymous:/,\n        next: \"log-comment\"\n      }, {\n        defaultToken: \"text\"\n      }],\n      \"log-comment\": [{\n        token: \"log-comment\",\n        regex: /.*$/,\n        next: \"log-start\"\n      }],\n      \"log-header\": [{\n        token: \"timestamp.invisible\",\n        regex: /((USER_DEBUG|\\[\\d+\\]|DEBUG)\\|)+/\n      }, {\n        token: \"keyword\",\n        regex: \"(?:EXECUTION_FINISHED|EXECUTION_STARTED|CODE_UNIT_STARTED\" + \"|CUMULATIVE_LIMIT_USAGE|LIMIT_USAGE_FOR_NS\" + \"|CUMULATIVE_LIMIT_USAGE_END|CODE_UNIT_FINISHED)\"\n      }, {\n        regex: \"\",\n        next: \"log-start\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n  oop.inherits(ApexHighlightRules, TextHighlightRules);\n  exports.ApexHighlightRules = ApexHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/apex\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/apex_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /* caption: Apex; extensions: apex,cls,trigger,tgr */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"../mode/text\").Mode;\n  var ApexHighlightRules = require(\"./apex_highlight_rules\").ApexHighlightRules;\n  var FoldMode = require(\"../mode/folding/cstyle\").FoldMode;\n  function ApexMode() {\n    TextMode.call(this);\n    this.HighlightRules = ApexHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  }\n  oop.inherits(ApexMode, TextMode);\n  ApexMode.prototype.lineCommentStart = \"//\";\n  ApexMode.prototype.blockComment = {\n    start: \"/*\",\n    end: \"*/\"\n  };\n  exports.Mode = ApexMode;\n});\n(function () {\n  ace.require([\"ace/mode/apex\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}