{"code":"ace.define(\"ace/mode/smithy_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,i){\"use strict\";var n=e(\"../lib/oop\"),o=e(\"./text_highlight_rules\").TextHighlightRules,r=function(){this.$rules={start:[{include:\"#comment\"},{token:[\"meta.keyword.statement.smithy\",\"variable.other.smithy\",\"text\",\"keyword.operator.smithy\"],regex:/^(\\$)(\\s+.+)(\\s*)(=)/},{token:[\"keyword.statement.smithy\",\"text\",\"entity.name.type.namespace.smithy\"],regex:/^(namespace)(\\s+)([A-Z-a-z0-9_\\.#$-]+)/},{token:[\"keyword.statement.smithy\",\"text\",\"keyword.statement.smithy\",\"text\",\"entity.name.type.smithy\"],regex:/^(use)(\\s+)(shape|trait)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/},{token:[\"keyword.statement.smithy\",\"variable.other.smithy\",\"text\",\"keyword.operator.smithy\"],regex:/^(metadata)(\\s+.+)(\\s*)(=)/},{token:[\"keyword.statement.smithy\",\"text\",\"entity.name.type.smithy\"],regex:/^(apply|byte|short|integer|long|float|double|bigInteger|bigDecimal|boolean|blob|string|timestamp|service|resource|trait|list|map|set|structure|union|document)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/},{token:[\"keyword.operator.smithy\",\"text\",\"entity.name.type.smithy\",\"text\",\"text\",\"support.function.smithy\",\"text\",\"text\",\"support.function.smithy\"],regex:/^(operation)(\\s+)([A-Z-a-z0-9_\\.#$-]+)(\\(.*\\))(?:(\\s*)(->)(\\s*[A-Z-a-z0-9_\\.#$-]+))?(?:(\\s+)(errors))?/},{include:\"#trait\"},{token:[\"support.type.property-name.smithy\",\"punctuation.separator.dictionary.pair.smithy\"],regex:/([A-Z-a-z0-9_\\.#$-]+)(:)/},{include:\"#value\"},{token:\"keyword.other.smithy\",regex:/\\->/}],\"#comment\":[{include:\"#doc_comment\"},{include:\"#line_comment\"}],\"#doc_comment\":[{token:\"comment.block.documentation.smithy\",regex:/\\/\\/\\/.*/}],\"#line_comment\":[{token:\"comment.line.double-slash.smithy\",regex:/\\/\\/.*/}],\"#trait\":[{token:[\"punctuation.definition.annotation.smithy\",\"storage.type.annotation.smithy\"],regex:/(@)([0-9a-zA-Z\\.#-]+)/},{token:[\"punctuation.definition.annotation.smithy\",\"punctuation.definition.object.end.smithy\",\"meta.structure.smithy\"],regex:/(@)([0-9a-zA-Z\\.#-]+)(\\()/,push:[{token:\"punctuation.definition.object.end.smithy\",regex:/\\)/,next:\"pop\"},{include:\"#value\"},{include:\"#object_inner\"},{defaultToken:\"meta.structure.smithy\"}]}],\"#value\":[{include:\"#constant\"},{include:\"#number\"},{include:\"#string\"},{include:\"#array\"},{include:\"#object\"}],\"#array\":[{token:\"punctuation.definition.array.begin.smithy\",regex:/\\[/,push:[{token:\"punctuation.definition.array.end.smithy\",regex:/\\]/,next:\"pop\"},{include:\"#comment\"},{include:\"#value\"},{token:\"punctuation.separator.array.smithy\",regex:/,/},{token:\"invalid.illegal.expected-array-separator.smithy\",regex:/[^\\s\\]]/},{defaultToken:\"meta.structure.array.smithy\"}]}],\"#constant\":[{token:\"constant.language.smithy\",regex:/\\b(?:true|false|null)\\b/}],\"#number\":[{token:\"constant.numeric.smithy\",regex:/-?(?:0|[1-9]\\d*)(?:(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)?/}],\"#object\":[{token:\"punctuation.definition.dictionary.begin.smithy\",regex:/\\{/,push:[{token:\"punctuation.definition.dictionary.end.smithy\",regex:/\\}/,next:\"pop\"},{include:\"#trait\"},{include:\"#object_inner\"},{defaultToken:\"meta.structure.dictionary.smithy\"}]}],\"#object_inner\":[{include:\"#comment\"},{include:\"#string_key\"},{token:\"punctuation.separator.dictionary.key-value.smithy\",regex:/:/,push:[{token:\"punctuation.separator.dictionary.pair.smithy\",regex:/,|(?=\\})/,next:\"pop\"},{include:\"#value\"},{token:\"invalid.illegal.expected-dictionary-separator.smithy\",regex:/[^\\s,]/},{defaultToken:\"meta.structure.dictionary.value.smithy\"}]},{token:\"invalid.illegal.expected-dictionary-separator.smithy\",regex:/[^\\s\\}]/}],\"#string_key\":[{include:\"#identifier_key\"},{include:\"#dquote_key\"},{include:\"#squote_key\"}],\"#identifier_key\":[{token:\"support.type.property-name.smithy\",regex:/[A-Z-a-z0-9_\\.#$-]+/}],\"#dquote_key\":[{include:\"#dquote\"}],\"#squote_key\":[{include:\"#squote\"}],\"#string\":[{include:\"#textblock\"},{include:\"#dquote\"},{include:\"#squote\"},{include:\"#identifier\"}],\"#textblock\":[{token:\"punctuation.definition.string.begin.smithy\",regex:/\"\"\"/,push:[{token:\"punctuation.definition.string.end.smithy\",regex:/\"\"\"/,next:\"pop\"},{token:\"constant.character.escape.smithy\",regex:/\\\\./},{defaultToken:\"string.quoted.double.smithy\"}]}],\"#dquote\":[{token:\"punctuation.definition.string.begin.smithy\",regex:/\"/,push:[{token:\"punctuation.definition.string.end.smithy\",regex:/\"/,next:\"pop\"},{token:\"constant.character.escape.smithy\",regex:/\\\\./},{defaultToken:\"string.quoted.double.smithy\"}]}],\"#squote\":[{token:\"punctuation.definition.string.begin.smithy\",regex:/'/,push:[{token:\"punctuation.definition.string.end.smithy\",regex:/'/,next:\"pop\"},{token:\"constant.character.escape.smithy\",regex:/\\\\./},{defaultToken:\"string.quoted.single.smithy\"}]}],\"#identifier\":[{token:\"storage.type.smithy\",regex:/[A-Z-a-z_][A-Z-a-z0-9_\\.#$-]*/}]},this.normalizeRules()};r.metaData={name:\"Smithy\",fileTypes:[\"smithy\"],scopeName:\"source.smithy\",foldingStartMarker:\"(\\\\{|\\\\[)\\\\s*\",foldingStopMarker:\"\\\\s*(\\\\}|\\\\])\"},n.inherits(r,o),t.SmithyHighlightRules=r})),ace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"],(function(e,t,i){\"use strict\";var n=e(\"../range\").Range,o=function(){};(function(){this.checkOutdent=function(e,t){return!!/^\\s+$/.test(e)&&/^\\s*\\}/.test(t)},this.autoOutdent=function(e,t){var i=e.getLine(t).match(/^(\\s*\\})/);if(!i)return 0;var o=i[1].length,r=e.findMatchingBracket({row:t,column:o});if(!r||r.row==t)return 0;var a=this.$getIndent(e.getLine(r.row));e.replace(new n(t,0,t,o-1),a)},this.$getIndent=function(e){return e.match(/^\\s*/)[0]}}).call(o.prototype),t.MatchingBraceOutdent=o})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,i){\"use strict\";var n=e(\"../../lib/oop\"),o=e(\"../../range\").Range,r=e(\"./fold_mode\").FoldMode,a=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};n.inherits(a,r),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,i){var n=e.getLine(i);if(this.singleLineBlockCommentRe.test(n)&&!this.startRegionRe.test(n)&&!this.tripleStarBlockCommentRe.test(n))return\"\";var o=this._getFoldWidgetBase(e,t,i);return!o&&this.startRegionRe.test(n)?\"start\":o},this.getFoldWidgetRange=function(e,t,i,n){var o,r=e.getLine(i);if(this.startRegionRe.test(r))return this.getCommentRegionBlock(e,r,i);if(o=r.match(this.foldingStartMarker)){var a=o.index;if(o[1])return this.openingBracketBlock(e,o[1],i,a);var s=e.getCommentFoldRange(i,a+o[0].length,1);return s&&!s.isMultiLine()&&(n?s=this.getSectionRange(e,i):\"all\"!=t&&(s=null)),s}if(\"markbegin\"!==t&&(o=r.match(this.foldingStopMarker))){a=o.index+o[0].length;return o[1]?this.closingBracketBlock(e,o[1],i,a):e.getCommentFoldRange(i,a,-1)}},this.getSectionRange=function(e,t){for(var i=e.getLine(t),n=i.search(/\\S/),r=t,a=i.length,s=t+=1,u=e.getLength();++t<u;){var c=(i=e.getLine(t)).search(/\\S/);if(-1!==c){if(n>c)break;var d=this.getFoldWidgetRange(e,\"all\",t);if(d){if(d.start.row<=r)break;if(d.isMultiLine())t=d.end.row;else if(n==c)break}s=t}}return new o(r,a,s,e.getLine(s).length)},this.getCommentRegionBlock=function(e,t,i){for(var n=t.search(/\\s*$/),r=e.getLength(),a=i,s=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,u=1;++i<r;){t=e.getLine(i);var c=s.exec(t);if(c&&(c[1]?u--:u++,!u))break}if(i>a)return new o(a,n,i,t.length)}}.call(a.prototype)})),ace.define(\"ace/mode/smithy\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/smithy_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/cstyle\"],(function(e,t,i){\"use strict\";var n=e(\"../lib/oop\"),o=e(\"./text\").Mode,r=e(\"./smithy_highlight_rules\").SmithyHighlightRules,a=e(\"./matching_brace_outdent\").MatchingBraceOutdent,s=e(\"./folding/cstyle\").FoldMode,u=function(){this.HighlightRules=r,this.$outdent=new a,this.$behaviour=this.$defaultBehaviour,this.foldingRules=new s};n.inherits(u,o),function(){this.lineCommentStart=\"//\",this.$quotes={'\"':'\"'},this.checkOutdent=function(e,t,i){return this.$outdent.checkOutdent(t,i)},this.autoOutdent=function(e,t,i){this.$outdent.autoOutdent(t,i)},this.$id=\"ace/mode/smithy\"}.call(u.prototype),t.Mode=u})),ace.require([\"ace/mode/smithy\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"2c193a3467767b3e62634b28e5e15b65.js","input":"ace.define(\"ace/mode/smithy_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from https://raw.githubusercontent.com/awslabs/smithy-vscode/master/syntaxes/smithy.tmLanguage (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var SmithyHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: \"#comment\"\n      }, {\n        token: [\"meta.keyword.statement.smithy\", \"variable.other.smithy\", \"text\", \"keyword.operator.smithy\"],\n        regex: /^(\\$)(\\s+.+)(\\s*)(=)/\n      }, {\n        token: [\"keyword.statement.smithy\", \"text\", \"entity.name.type.namespace.smithy\"],\n        regex: /^(namespace)(\\s+)([A-Z-a-z0-9_\\.#$-]+)/\n      }, {\n        token: [\"keyword.statement.smithy\", \"text\", \"keyword.statement.smithy\", \"text\", \"entity.name.type.smithy\"],\n        regex: /^(use)(\\s+)(shape|trait)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/\n      }, {\n        token: [\"keyword.statement.smithy\", \"variable.other.smithy\", \"text\", \"keyword.operator.smithy\"],\n        regex: /^(metadata)(\\s+.+)(\\s*)(=)/\n      }, {\n        token: [\"keyword.statement.smithy\", \"text\", \"entity.name.type.smithy\"],\n        regex: /^(apply|byte|short|integer|long|float|double|bigInteger|bigDecimal|boolean|blob|string|timestamp|service|resource|trait|list|map|set|structure|union|document)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/\n      }, {\n        token: [\"keyword.operator.smithy\", \"text\", \"entity.name.type.smithy\", \"text\", \"text\", \"support.function.smithy\", \"text\", \"text\", \"support.function.smithy\"],\n        regex: /^(operation)(\\s+)([A-Z-a-z0-9_\\.#$-]+)(\\(.*\\))(?:(\\s*)(->)(\\s*[A-Z-a-z0-9_\\.#$-]+))?(?:(\\s+)(errors))?/\n      }, {\n        include: \"#trait\"\n      }, {\n        token: [\"support.type.property-name.smithy\", \"punctuation.separator.dictionary.pair.smithy\"],\n        regex: /([A-Z-a-z0-9_\\.#$-]+)(:)/\n      }, {\n        include: \"#value\"\n      }, {\n        token: \"keyword.other.smithy\",\n        regex: /\\->/\n      }],\n      \"#comment\": [{\n        include: \"#doc_comment\"\n      }, {\n        include: \"#line_comment\"\n      }],\n      \"#doc_comment\": [{\n        token: \"comment.block.documentation.smithy\",\n        regex: /\\/\\/\\/.*/\n      }],\n      \"#line_comment\": [{\n        token: \"comment.line.double-slash.smithy\",\n        regex: /\\/\\/.*/\n      }],\n      \"#trait\": [{\n        token: [\"punctuation.definition.annotation.smithy\", \"storage.type.annotation.smithy\"],\n        regex: /(@)([0-9a-zA-Z\\.#-]+)/\n      }, {\n        token: [\"punctuation.definition.annotation.smithy\", \"punctuation.definition.object.end.smithy\", \"meta.structure.smithy\"],\n        regex: /(@)([0-9a-zA-Z\\.#-]+)(\\()/,\n        push: [{\n          token: \"punctuation.definition.object.end.smithy\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          include: \"#object_inner\"\n        }, {\n          defaultToken: \"meta.structure.smithy\"\n        }]\n      }],\n      \"#value\": [{\n        include: \"#constant\"\n      }, {\n        include: \"#number\"\n      }, {\n        include: \"#string\"\n      }, {\n        include: \"#array\"\n      }, {\n        include: \"#object\"\n      }],\n      \"#array\": [{\n        token: \"punctuation.definition.array.begin.smithy\",\n        regex: /\\[/,\n        push: [{\n          token: \"punctuation.definition.array.end.smithy\",\n          regex: /\\]/,\n          next: \"pop\"\n        }, {\n          include: \"#comment\"\n        }, {\n          include: \"#value\"\n        }, {\n          token: \"punctuation.separator.array.smithy\",\n          regex: /,/\n        }, {\n          token: \"invalid.illegal.expected-array-separator.smithy\",\n          regex: /[^\\s\\]]/\n        }, {\n          defaultToken: \"meta.structure.array.smithy\"\n        }]\n      }],\n      \"#constant\": [{\n        token: \"constant.language.smithy\",\n        regex: /\\b(?:true|false|null)\\b/\n      }],\n      \"#number\": [{\n        token: \"constant.numeric.smithy\",\n        regex: /-?(?:0|[1-9]\\d*)(?:(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)?/\n      }],\n      \"#object\": [{\n        token: \"punctuation.definition.dictionary.begin.smithy\",\n        regex: /\\{/,\n        push: [{\n          token: \"punctuation.definition.dictionary.end.smithy\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#trait\"\n        }, {\n          include: \"#object_inner\"\n        }, {\n          defaultToken: \"meta.structure.dictionary.smithy\"\n        }]\n      }],\n      \"#object_inner\": [{\n        include: \"#comment\"\n      }, {\n        include: \"#string_key\"\n      }, {\n        token: \"punctuation.separator.dictionary.key-value.smithy\",\n        regex: /:/,\n        push: [{\n          token: \"punctuation.separator.dictionary.pair.smithy\",\n          regex: /,|(?=\\})/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          token: \"invalid.illegal.expected-dictionary-separator.smithy\",\n          regex: /[^\\s,]/\n        }, {\n          defaultToken: \"meta.structure.dictionary.value.smithy\"\n        }]\n      }, {\n        token: \"invalid.illegal.expected-dictionary-separator.smithy\",\n        regex: /[^\\s\\}]/\n      }],\n      \"#string_key\": [{\n        include: \"#identifier_key\"\n      }, {\n        include: \"#dquote_key\"\n      }, {\n        include: \"#squote_key\"\n      }],\n      \"#identifier_key\": [{\n        token: \"support.type.property-name.smithy\",\n        regex: /[A-Z-a-z0-9_\\.#$-]+/\n      }],\n      \"#dquote_key\": [{\n        include: \"#dquote\"\n      }],\n      \"#squote_key\": [{\n        include: \"#squote\"\n      }],\n      \"#string\": [{\n        include: \"#textblock\"\n      }, {\n        include: \"#dquote\"\n      }, {\n        include: \"#squote\"\n      }, {\n        include: \"#identifier\"\n      }],\n      \"#textblock\": [{\n        token: \"punctuation.definition.string.begin.smithy\",\n        regex: /\"\"\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.smithy\",\n          regex: /\"\"\"/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.smithy\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.double.smithy\"\n        }]\n      }],\n      \"#dquote\": [{\n        token: \"punctuation.definition.string.begin.smithy\",\n        regex: /\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.smithy\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.smithy\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.double.smithy\"\n        }]\n      }],\n      \"#squote\": [{\n        token: \"punctuation.definition.string.begin.smithy\",\n        regex: /'/,\n        push: [{\n          token: \"punctuation.definition.string.end.smithy\",\n          regex: /'/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.smithy\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.single.smithy\"\n        }]\n      }],\n      \"#identifier\": [{\n        token: \"storage.type.smithy\",\n        regex: /[A-Z-a-z_][A-Z-a-z0-9_\\.#$-]*/\n      }]\n    };\n    this.normalizeRules();\n  };\n  SmithyHighlightRules.metaData = {\n    name: \"Smithy\",\n    fileTypes: [\"smithy\"],\n    scopeName: \"source.smithy\",\n    foldingStartMarker: \"(\\\\{|\\\\[)\\\\s*\",\n    foldingStopMarker: \"\\\\s*(\\\\}|\\\\])\"\n  };\n  oop.inherits(SmithyHighlightRules, TextHighlightRules);\n  exports.SmithyHighlightRules = SmithyHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/smithy\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/smithy_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var SmithyHighlightRules = require(\"./smithy_highlight_rules\").SmithyHighlightRules;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = SmithyHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.$quotes = {\n      '\"': '\"'\n    };\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/smithy\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/smithy\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}