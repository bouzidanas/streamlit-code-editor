{"code":"ace.define(\"ace/mode/haskell_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),a=e(\"./text_highlight_rules\").TextHighlightRules,l=function(){this.$rules={start:[{token:[\"punctuation.definition.entity.haskell\",\"keyword.operator.function.infix.haskell\",\"punctuation.definition.entity.haskell\"],regex:\"(`)([a-zA-Z_']*?)(`)\",comment:\"In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).\"},{token:\"constant.language.unit.haskell\",regex:\"\\\\(\\\\)\"},{token:\"constant.language.empty-list.haskell\",regex:\"\\\\[\\\\]\"},{token:\"keyword.other.haskell\",regex:\"\\\\b(module|signature)\\\\b\",push:[{token:\"keyword.other.haskell\",regex:\"\\\\bwhere\\\\b\",next:\"pop\"},{include:\"#module_name\"},{include:\"#module_exports\"},{token:\"invalid\",regex:\"[a-z]+\"},{defaultToken:\"meta.declaration.module.haskell\"}]},{token:\"keyword.other.haskell\",regex:\"\\\\bclass\\\\b\",push:[{token:\"keyword.other.haskell\",regex:\"\\\\bwhere\\\\b\",next:\"pop\"},{token:\"support.class.prelude.haskell\",regex:\"\\\\b(?:Monad|Functor|Eq|Ord|Read|Show|Num|(?:Frac|Ra)tional|Enum|Bounded|Real(?:Frac|Float)?|Integral|Floating)\\\\b\"},{token:\"entity.other.inherited-class.haskell\",regex:\"[A-Z][A-Za-z_']*\"},{token:\"variable.other.generic-type.haskell\",regex:\"\\\\b[a-z][a-zA-Z0-9_']*\\\\b\"},{defaultToken:\"meta.declaration.class.haskell\"}]},{token:\"keyword.other.haskell\",regex:\"\\\\binstance\\\\b\",push:[{token:\"keyword.other.haskell\",regex:\"\\\\bwhere\\\\b|$\",next:\"pop\"},{include:\"#type_signature\"},{defaultToken:\"meta.declaration.instance.haskell\"}]},{token:\"keyword.other.haskell\",regex:\"import\",push:[{token:\"meta.import.haskell\",regex:\"$|;|^\",next:\"pop\"},{token:\"keyword.other.haskell\",regex:\"qualified|as|hiding\"},{include:\"#module_name\"},{include:\"#module_exports\"},{defaultToken:\"meta.import.haskell\"}]},{token:[\"keyword.other.haskell\",\"meta.deriving.haskell\"],regex:\"(deriving)(\\\\s*\\\\()\",push:[{token:\"meta.deriving.haskell\",regex:\"\\\\)\",next:\"pop\"},{token:\"entity.other.inherited-class.haskell\",regex:\"\\\\b[A-Z][a-zA-Z_']*\"},{defaultToken:\"meta.deriving.haskell\"}]},{token:\"keyword.other.haskell\",regex:\"\\\\b(?:deriving|where|data|type|case|of|let|in|newtype|default)\\\\b\"},{token:\"keyword.operator.haskell\",regex:\"\\\\binfix[lr]?\\\\b\"},{token:\"keyword.control.haskell\",regex:\"\\\\b(?:do|if|then|else)\\\\b\"},{token:\"constant.numeric.float.haskell\",regex:\"\\\\b(?:[0-9]+\\\\.[0-9]+(?:[eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\\\b\",comment:\"Floats are always decimal\"},{token:\"constant.numeric.haskell\",regex:\"\\\\b(?:[0-9]+|0(?:[xX][0-9a-fA-F]+|[oO][0-7]+))\\\\b\"},{token:[\"meta.preprocessor.c\",\"punctuation.definition.preprocessor.c\",\"meta.preprocessor.c\"],regex:\"^(\\\\s*)(#)(\\\\s*\\\\w+)\",comment:'In addition to Haskell\\'s \"native\" syntax, GHC permits the C preprocessor to be run on a source file.'},{include:\"#pragma\"},{token:\"punctuation.definition.string.begin.haskell\",regex:'\"',push:[{token:\"punctuation.definition.string.end.haskell\",regex:'\"',next:\"pop\"},{token:\"constant.character.escape.haskell\",regex:\"\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\\\"'\\\\&])\"},{token:\"constant.character.escape.octal.haskell\",regex:\"\\\\\\\\o[0-7]+|\\\\\\\\x[0-9A-Fa-f]+|\\\\\\\\[0-9]+\"},{token:\"constant.character.escape.control.haskell\",regex:\"\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]\"},{defaultToken:\"string.quoted.double.haskell\"}]},{token:[\"punctuation.definition.string.begin.haskell\",\"string.quoted.single.haskell\",\"constant.character.escape.haskell\",\"constant.character.escape.octal.haskell\",\"constant.character.escape.hexadecimal.haskell\",\"constant.character.escape.control.haskell\",\"punctuation.definition.string.end.haskell\"],regex:\"(')(?:([\\\\ -\\\\[\\\\]-~])|(\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\\\"'\\\\&]))|(\\\\\\\\o[0-7]+)|(\\\\\\\\x[0-9A-Fa-f]+)|(\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]))(')\"},{token:[\"meta.function.type-declaration.haskell\",\"entity.name.function.haskell\",\"meta.function.type-declaration.haskell\",\"keyword.other.double-colon.haskell\"],regex:\"^(\\\\s*)([a-z_][a-zA-Z0-9_']*|\\\\([|!%$+\\\\-.,=</>]+\\\\))(\\\\s*)(::)\",push:[{token:\"meta.function.type-declaration.haskell\",regex:\"$\",next:\"pop\"},{include:\"#type_signature\"},{defaultToken:\"meta.function.type-declaration.haskell\"}]},{token:\"support.constant.haskell\",regex:\"\\\\b(?:Just|Nothing|Left|Right|True|False|LT|EQ|GT|\\\\(\\\\)|\\\\[\\\\])\\\\b\"},{token:\"constant.other.haskell\",regex:\"\\\\b[A-Z]\\\\w*\\\\b\"},{include:\"#comments\"},{token:\"support.function.prelude.haskell\",regex:\"\\\\b(?:abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\\\b\"},{include:\"#infix_op\"},{token:\"keyword.operator.haskell\",regex:\"[|!%$?~+:\\\\-.=</>\\\\\\\\]+\",comment:\"In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.\"},{token:\"punctuation.separator.comma.haskell\",regex:\",\"}],\"#block_comment\":[{token:\"punctuation.definition.comment.haskell\",regex:\"\\\\{-(?!#)\",push:[{include:\"#block_comment\"},{token:\"punctuation.definition.comment.haskell\",regex:\"-\\\\}\",next:\"pop\"},{defaultToken:\"comment.block.haskell\"}]}],\"#comments\":[{token:\"punctuation.definition.comment.haskell\",regex:\"--.*\",push_:[{token:\"comment.line.double-dash.haskell\",regex:\"$\",next:\"pop\"},{defaultToken:\"comment.line.double-dash.haskell\"}]},{include:\"#block_comment\"}],\"#infix_op\":[{token:\"entity.name.function.infix.haskell\",regex:\"\\\\([|!%$+:\\\\-.=</>]+\\\\)|\\\\(,+\\\\)\"}],\"#module_exports\":[{token:\"meta.declaration.exports.haskell\",regex:\"\\\\(\",push:[{token:\"meta.declaration.exports.haskell.end\",regex:\"\\\\)\",next:\"pop\"},{token:\"entity.name.function.haskell\",regex:\"\\\\b[a-z][a-zA-Z_']*\"},{token:\"storage.type.haskell\",regex:\"\\\\b[A-Z][A-Za-z_']*\"},{token:\"punctuation.separator.comma.haskell\",regex:\",\"},{include:\"#infix_op\"},{token:\"meta.other.unknown.haskell\",regex:\"\\\\(.*?\\\\)\",comment:\"So named because I don't know what to call this.\"},{defaultToken:\"meta.declaration.exports.haskell.end\"}]}],\"#module_name\":[{token:\"support.other.module.haskell\",regex:\"[A-Z][A-Za-z._']*\"}],\"#pragma\":[{token:\"meta.preprocessor.haskell\",regex:\"\\\\{-#\",push:[{token:\"meta.preprocessor.haskell\",regex:\"#-\\\\}\",next:\"pop\"},{token:\"keyword.other.preprocessor.haskell\",regex:\"\\\\b(?:LANGUAGE|UNPACK|INLINE)\\\\b\"},{defaultToken:\"meta.preprocessor.haskell\"}]}],\"#type_signature\":[{token:[\"meta.class-constraint.haskell\",\"entity.other.inherited-class.haskell\",\"meta.class-constraint.haskell\",\"variable.other.generic-type.haskell\",\"meta.class-constraint.haskell\",\"keyword.other.big-arrow.haskell\"],regex:\"(\\\\(\\\\s*)([A-Z][A-Za-z]*)(\\\\s+)([a-z][A-Za-z_']*)(\\\\)\\\\s*)(=>)\"},{include:\"#pragma\"},{token:\"keyword.other.arrow.haskell\",regex:\"->\"},{token:\"keyword.other.big-arrow.haskell\",regex:\"=>\"},{token:\"support.type.prelude.haskell\",regex:\"\\\\b(?:Int(?:eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(?:Error)?)\\\\b\"},{token:\"variable.other.generic-type.haskell\",regex:\"\\\\b[a-z][a-zA-Z0-9_']*\\\\b\"},{token:\"storage.type.haskell\",regex:\"\\\\b[A-Z][a-zA-Z0-9_']*\\\\b\"},{token:\"support.constant.unit.haskell\",regex:\"\\\\(\\\\)\"},{include:\"#comments\"}]},this.normalizeRules()};l.metaData={fileTypes:[\"hs\"],keyEquivalent:\"^~H\",name:\"Haskell\",scopeName:\"source.haskell\"},o.inherits(l,a),t.HaskellHighlightRules=l})),ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],(function(e,t,n){\"use strict\";var o=e(\"../../lib/oop\"),a=e(\"../../range\").Range,l=e(\"./fold_mode\").FoldMode,r=t.FoldMode=function(e){e&&(this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.start)),this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+e.end)))};o.inherits(r,l),function(){this.foldingStartMarker=/([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/,this.foldingStopMarker=/^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/,this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/,this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/,this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/,this._getFoldWidgetBase=this.getFoldWidget,this.getFoldWidget=function(e,t,n){var o=e.getLine(n);if(this.singleLineBlockCommentRe.test(o)&&!this.startRegionRe.test(o)&&!this.tripleStarBlockCommentRe.test(o))return\"\";var a=this._getFoldWidgetBase(e,t,n);return!a&&this.startRegionRe.test(o)?\"start\":a},this.getFoldWidgetRange=function(e,t,n,o){var a,l=e.getLine(n);if(this.startRegionRe.test(l))return this.getCommentRegionBlock(e,l,n);if(a=l.match(this.foldingStartMarker)){var r=a.index;if(a[1])return this.openingBracketBlock(e,a[1],n,r);var i=e.getCommentFoldRange(n,r+a[0].length,1);return i&&!i.isMultiLine()&&(o?i=this.getSectionRange(e,n):\"all\"!=t&&(i=null)),i}if(\"markbegin\"!==t&&(a=l.match(this.foldingStopMarker))){r=a.index+a[0].length;return a[1]?this.closingBracketBlock(e,a[1],n,r):e.getCommentFoldRange(n,r,-1)}},this.getSectionRange=function(e,t){for(var n=e.getLine(t),o=n.search(/\\S/),l=t,r=n.length,i=t+=1,s=e.getLength();++t<s;){var h=(n=e.getLine(t)).search(/\\S/);if(-1!==h){if(o>h)break;var c=this.getFoldWidgetRange(e,\"all\",t);if(c){if(c.start.row<=l)break;if(c.isMultiLine())t=c.end.row;else if(o==h)break}i=t}}return new a(l,r,i,e.getLine(i).length)},this.getCommentRegionBlock=function(e,t,n){for(var o=t.search(/\\s*$/),l=e.getLength(),r=n,i=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/,s=1;++n<l;){t=e.getLine(n);var h=i.exec(t);if(h&&(h[1]?s--:s++,!s))break}if(n>r)return new a(r,o,n,t.length)}}.call(r.prototype)})),ace.define(\"ace/mode/haskell\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/haskell_highlight_rules\",\"ace/mode/folding/cstyle\"],(function(e,t,n){\"use strict\";var o=e(\"../lib/oop\"),a=e(\"./text\").Mode,l=e(\"./haskell_highlight_rules\").HaskellHighlightRules,r=e(\"./folding/cstyle\").FoldMode,i=function(){this.HighlightRules=l,this.foldingRules=new r,this.$behaviour=this.$defaultBehaviour};o.inherits(i,a),function(){this.lineCommentStart=\"--\",this.blockComment=null,this.$id=\"ace/mode/haskell\",this.snippetFileId=\"ace/snippets/haskell\"}.call(i.prototype),t.Mode=i})),ace.require([\"ace/mode/haskell\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"8eaea6b44ad97d91f663c1a61a8e6114.js","input":"ace.define(\"ace/mode/haskell_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from tm bundles\\haskell.tmbundle\\Syntaxes\\Haskell.plist (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var HaskellHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: ['punctuation.definition.entity.haskell', 'keyword.operator.function.infix.haskell', 'punctuation.definition.entity.haskell'],\n        regex: '(`)([a-zA-Z_\\']*?)(`)',\n        comment: 'In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).'\n      }, {\n        token: 'constant.language.unit.haskell',\n        regex: '\\\\(\\\\)'\n      }, {\n        token: 'constant.language.empty-list.haskell',\n        regex: '\\\\[\\\\]'\n      }, {\n        token: 'keyword.other.haskell',\n        regex: '\\\\b(module|signature)\\\\b',\n        push: [{\n          token: 'keyword.other.haskell',\n          regex: '\\\\bwhere\\\\b',\n          next: 'pop'\n        }, {\n          include: '#module_name'\n        }, {\n          include: '#module_exports'\n        }, {\n          token: 'invalid',\n          regex: '[a-z]+'\n        }, {\n          defaultToken: 'meta.declaration.module.haskell'\n        }]\n      }, {\n        token: 'keyword.other.haskell',\n        regex: '\\\\bclass\\\\b',\n        push: [{\n          token: 'keyword.other.haskell',\n          regex: '\\\\bwhere\\\\b',\n          next: 'pop'\n        }, {\n          token: 'support.class.prelude.haskell',\n          regex: '\\\\b(?:Monad|Functor|Eq|Ord|Read|Show|Num|(?:Frac|Ra)tional|Enum|Bounded|Real(?:Frac|Float)?|Integral|Floating)\\\\b'\n        }, {\n          token: 'entity.other.inherited-class.haskell',\n          regex: '[A-Z][A-Za-z_\\']*'\n        }, {\n          token: 'variable.other.generic-type.haskell',\n          regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b'\n        }, {\n          defaultToken: 'meta.declaration.class.haskell'\n        }]\n      }, {\n        token: 'keyword.other.haskell',\n        regex: '\\\\binstance\\\\b',\n        push: [{\n          token: 'keyword.other.haskell',\n          regex: '\\\\bwhere\\\\b|$',\n          next: 'pop'\n        }, {\n          include: '#type_signature'\n        }, {\n          defaultToken: 'meta.declaration.instance.haskell'\n        }]\n      }, {\n        token: 'keyword.other.haskell',\n        regex: 'import',\n        push: [{\n          token: 'meta.import.haskell',\n          regex: '$|;|^',\n          next: 'pop'\n        }, {\n          token: 'keyword.other.haskell',\n          regex: 'qualified|as|hiding'\n        }, {\n          include: '#module_name'\n        }, {\n          include: '#module_exports'\n        }, {\n          defaultToken: 'meta.import.haskell'\n        }]\n      }, {\n        token: ['keyword.other.haskell', 'meta.deriving.haskell'],\n        regex: '(deriving)(\\\\s*\\\\()',\n        push: [{\n          token: 'meta.deriving.haskell',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          token: 'entity.other.inherited-class.haskell',\n          regex: '\\\\b[A-Z][a-zA-Z_\\']*'\n        }, {\n          defaultToken: 'meta.deriving.haskell'\n        }]\n      }, {\n        token: 'keyword.other.haskell',\n        regex: '\\\\b(?:deriving|where|data|type|case|of|let|in|newtype|default)\\\\b'\n      }, {\n        token: 'keyword.operator.haskell',\n        regex: '\\\\binfix[lr]?\\\\b'\n      }, {\n        token: 'keyword.control.haskell',\n        regex: '\\\\b(?:do|if|then|else)\\\\b'\n      }, {\n        token: 'constant.numeric.float.haskell',\n        regex: '\\\\b(?:[0-9]+\\\\.[0-9]+(?:[eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\\\b',\n        comment: 'Floats are always decimal'\n      }, {\n        token: 'constant.numeric.haskell',\n        regex: '\\\\b(?:[0-9]+|0(?:[xX][0-9a-fA-F]+|[oO][0-7]+))\\\\b'\n      }, {\n        token: ['meta.preprocessor.c', 'punctuation.definition.preprocessor.c', 'meta.preprocessor.c'],\n        regex: '^(\\\\s*)(#)(\\\\s*\\\\w+)',\n        comment: 'In addition to Haskell\\'s \"native\" syntax, GHC permits the C preprocessor to be run on a source file.'\n      }, {\n        include: '#pragma'\n      }, {\n        token: 'punctuation.definition.string.begin.haskell',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.haskell',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.haskell',\n          regex: '\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&])'\n        }, {\n          token: 'constant.character.escape.octal.haskell',\n          regex: '\\\\\\\\o[0-7]+|\\\\\\\\x[0-9A-Fa-f]+|\\\\\\\\[0-9]+'\n        }, {\n          token: 'constant.character.escape.control.haskell',\n          regex: '\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]'\n        }, {\n          defaultToken: 'string.quoted.double.haskell'\n        }]\n      }, {\n        token: ['punctuation.definition.string.begin.haskell', 'string.quoted.single.haskell', 'constant.character.escape.haskell', 'constant.character.escape.octal.haskell', 'constant.character.escape.hexadecimal.haskell', 'constant.character.escape.control.haskell', 'punctuation.definition.string.end.haskell'],\n        regex: '(\\')(?:([\\\\ -\\\\[\\\\]-~])|(\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&]))|(\\\\\\\\o[0-7]+)|(\\\\\\\\x[0-9A-Fa-f]+)|(\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]))(\\')'\n      }, {\n        token: ['meta.function.type-declaration.haskell', 'entity.name.function.haskell', 'meta.function.type-declaration.haskell', 'keyword.other.double-colon.haskell'],\n        regex: '^(\\\\s*)([a-z_][a-zA-Z0-9_\\']*|\\\\([|!%$+\\\\-.,=</>]+\\\\))(\\\\s*)(::)',\n        push: [{\n          token: 'meta.function.type-declaration.haskell',\n          regex: '$',\n          next: 'pop'\n        }, {\n          include: '#type_signature'\n        }, {\n          defaultToken: 'meta.function.type-declaration.haskell'\n        }]\n      }, {\n        token: 'support.constant.haskell',\n        regex: '\\\\b(?:Just|Nothing|Left|Right|True|False|LT|EQ|GT|\\\\(\\\\)|\\\\[\\\\])\\\\b'\n      }, {\n        token: 'constant.other.haskell',\n        regex: '\\\\b[A-Z]\\\\w*\\\\b'\n      }, {\n        include: '#comments'\n      }, {\n        token: 'support.function.prelude.haskell',\n        regex: '\\\\b(?:abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\\\b'\n      }, {\n        include: '#infix_op'\n      }, {\n        token: 'keyword.operator.haskell',\n        regex: '[|!%$?~+:\\\\-.=</>\\\\\\\\]+',\n        comment: 'In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.'\n      }, {\n        token: 'punctuation.separator.comma.haskell',\n        regex: ','\n      }],\n      '#block_comment': [{\n        token: 'punctuation.definition.comment.haskell',\n        regex: '\\\\{-(?!#)',\n        push: [{\n          include: '#block_comment'\n        }, {\n          token: 'punctuation.definition.comment.haskell',\n          regex: '-\\\\}',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.haskell'\n        }]\n      }],\n      '#comments': [{\n        token: 'punctuation.definition.comment.haskell',\n        regex: '--.*',\n        push_: [{\n          token: 'comment.line.double-dash.haskell',\n          regex: '$',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.line.double-dash.haskell'\n        }]\n      }, {\n        include: '#block_comment'\n      }],\n      '#infix_op': [{\n        token: 'entity.name.function.infix.haskell',\n        regex: '\\\\([|!%$+:\\\\-.=</>]+\\\\)|\\\\(,+\\\\)'\n      }],\n      '#module_exports': [{\n        token: 'meta.declaration.exports.haskell',\n        regex: '\\\\(',\n        push: [{\n          token: 'meta.declaration.exports.haskell.end',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          token: 'entity.name.function.haskell',\n          regex: '\\\\b[a-z][a-zA-Z_\\']*'\n        }, {\n          token: 'storage.type.haskell',\n          regex: '\\\\b[A-Z][A-Za-z_\\']*'\n        }, {\n          token: 'punctuation.separator.comma.haskell',\n          regex: ','\n        }, {\n          include: '#infix_op'\n        }, {\n          token: 'meta.other.unknown.haskell',\n          regex: '\\\\(.*?\\\\)',\n          comment: 'So named because I don\\'t know what to call this.'\n        }, {\n          defaultToken: 'meta.declaration.exports.haskell.end'\n        }]\n      }],\n      '#module_name': [{\n        token: 'support.other.module.haskell',\n        regex: '[A-Z][A-Za-z._\\']*'\n      }],\n      '#pragma': [{\n        token: 'meta.preprocessor.haskell',\n        regex: '\\\\{-#',\n        push: [{\n          token: 'meta.preprocessor.haskell',\n          regex: '#-\\\\}',\n          next: 'pop'\n        }, {\n          token: 'keyword.other.preprocessor.haskell',\n          regex: '\\\\b(?:LANGUAGE|UNPACK|INLINE)\\\\b'\n        }, {\n          defaultToken: 'meta.preprocessor.haskell'\n        }]\n      }],\n      '#type_signature': [{\n        token: ['meta.class-constraint.haskell', 'entity.other.inherited-class.haskell', 'meta.class-constraint.haskell', 'variable.other.generic-type.haskell', 'meta.class-constraint.haskell', 'keyword.other.big-arrow.haskell'],\n        regex: '(\\\\(\\\\s*)([A-Z][A-Za-z]*)(\\\\s+)([a-z][A-Za-z_\\']*)(\\\\)\\\\s*)(=>)'\n      }, {\n        include: '#pragma'\n      }, {\n        token: 'keyword.other.arrow.haskell',\n        regex: '->'\n      }, {\n        token: 'keyword.other.big-arrow.haskell',\n        regex: '=>'\n      }, {\n        token: 'support.type.prelude.haskell',\n        regex: '\\\\b(?:Int(?:eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(?:Error)?)\\\\b'\n      }, {\n        token: 'variable.other.generic-type.haskell',\n        regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b'\n      }, {\n        token: 'storage.type.haskell',\n        regex: '\\\\b[A-Z][a-zA-Z0-9_\\']*\\\\b'\n      }, {\n        token: 'support.constant.unit.haskell',\n        regex: '\\\\(\\\\)'\n      }, {\n        include: '#comments'\n      }]\n    };\n    this.normalizeRules();\n  };\n  HaskellHighlightRules.metaData = {\n    fileTypes: ['hs'],\n    keyEquivalent: '^~H',\n    name: 'Haskell',\n    scopeName: 'source.haskell'\n  };\n  oop.inherits(HaskellHighlightRules, TextHighlightRules);\n  exports.HaskellHighlightRules = HaskellHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/haskell\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/haskell_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var HaskellHighlightRules = require(\"./haskell_highlight_rules\").HaskellHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = HaskellHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell\";\n    this.snippetFileId = \"ace/snippets/haskell\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/haskell\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}