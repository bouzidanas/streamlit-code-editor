{"code":"ace.define(\"ace/ext/beautify\",[\"require\",\"exports\",\"module\",\"ace/token_iterator\"],(function(e,t,r){\"use strict\";var a=e(\"../token_iterator\").TokenIterator;function o(e,t){return e.type.lastIndexOf(t+\".xml\")>-1}t.singletonTags=[\"area\",\"base\",\"br\",\"col\",\"command\",\"embed\",\"hr\",\"html\",\"img\",\"input\",\"keygen\",\"link\",\"meta\",\"param\",\"source\",\"track\",\"wbr\"],t.blockTags=[\"article\",\"aside\",\"blockquote\",\"body\",\"div\",\"dl\",\"fieldset\",\"footer\",\"form\",\"head\",\"header\",\"html\",\"nav\",\"ol\",\"p\",\"script\",\"section\",\"style\",\"table\",\"tbody\",\"tfoot\",\"thead\",\"ul\"],t.formatOptions={lineBreaksAfterCommasInCurlyBlock:!0},t.beautify=function(e){for(var r,s,n,i=new a(e,0,0),c=i.getCurrentToken(),l=e.getTabString(),u=t.singletonTags,m=t.blockTags,p=t.formatOptions||{},f=!1,y=!1,h=!1,d=\"\",g=\"\",b=\"\",k=0,$=0,w=0,x=0,v=0,T=0,C=0,R=0,B=0,O=!1,I=!1,q=!1,_=!1,j={0:0},A=[],F=!1,S=function(){r&&r.value&&\"string.regexp\"!==r.type&&(r.value=r.value.replace(/^\\s*/,\"\"))},K=function(){for(var e=d.length-1;0!=e&&\" \"===d[e];)e-=1;d=d.slice(0,e+1)},L=function(){d=d.trimRight(),f=!1};null!==c;){if(R=i.getCurrentTokenRow(),i.$rowTokens,r=i.stepForward(),\"undefined\"!==typeof c){if(g=c.value,v=0,q=\"style\"===b||\"ace/mode/css\"===e.$modeId,o(c,\"tag-open\")?(I=!0,r&&(_=-1!==m.indexOf(r.value)),\"</\"===g&&(_&&!f&&B<1&&B++,q&&(B=1),v=1,_=!1)):o(c,\"tag-close\")?I=!1:o(c,\"comment.start\")?_=!0:o(c,\"comment.end\")&&(_=!1),I||B||\"paren.rparen\"!==c.type||\"}\"!==c.value.substr(0,1)||B++,R!==s&&(B=R,s&&(B-=s)),B){for(L();B>0;B--)d+=\"\\n\";f=!0,o(c,\"comment\")||c.type.match(/^(comment|string)$/)||(g=g.trimLeft())}if(g){if(\"keyword\"===c.type&&g.match(/^(if|else|elseif|for|foreach|while|switch)$/)?(A[k]=g,S(),h=!0,g.match(/^(else|elseif)$/)&&d.match(/\\}[\\s]*$/)&&(L(),y=!0)):\"paren.lparen\"===c.type?(S(),\"{\"===g.substr(-1)&&(h=!0,O=!1,I||(B=1)),\"{\"===g.substr(0,1)&&(y=!0,\"[\"!==d.substr(-1)&&\"[\"===d.trimRight().substr(-1)?(L(),y=!1):\")\"===d.trimRight().substr(-1)?L():K())):\"paren.rparen\"===c.type?(v=1,\"}\"===g.substr(0,1)&&(\"case\"===A[k-1]&&v++,\"{\"===d.trimRight().substr(-1)?L():(y=!0,q&&(B+=2))),\"]\"===g.substr(0,1)&&\"}\"!==d.substr(-1)&&\"}\"===d.trimRight().substr(-1)&&(y=!1,x++,L()),\")\"===g.substr(0,1)&&\"(\"!==d.substr(-1)&&\"(\"===d.trimRight().substr(-1)&&(y=!1,x++,L()),K()):\"keyword.operator\"!==c.type&&\"keyword\"!==c.type||!g.match(/^(=|==|===|!=|!==|&&|\\|\\||and|or|xor|\\+=|.=|>|>=|<|<=|=>)$/)?\"punctuation.operator\"===c.type&&\";\"===g?(L(),S(),h=!0,q&&B++):\"punctuation.operator\"===c.type&&g.match(/^(:|,)$/)?(L(),S(),g.match(/^(,)$/)&&C>0&&0===T&&p.lineBreaksAfterCommasInCurlyBlock?B++:(h=!0,f=!1)):\"support.php_tag\"!==c.type||\"?>\"!==g||f?o(c,\"attribute-name\")&&d.substr(-1).match(/^\\s$/)?y=!0:o(c,\"attribute-equals\")?(K(),S()):o(c,\"tag-close\")?(K(),\"/>\"===g&&(y=!0)):\"keyword\"===c.type&&g.match(/^(case|default)$/)&&F&&(v=1):(L(),y=!0):(L(),S(),y=!0,h=!0),f&&(!c.type.match(/^(comment)$/)||g.substr(0,1).match(/^[/#]$/))&&(!c.type.match(/^(string)$/)||g.substr(0,1).match(/^['\"@]$/))){if(x=w,k>$)for(x++,n=k;n>$;n--)j[n]=x;else k<$&&(x=j[k]);for($=k,w=x,v&&(x-=v),O&&!T&&(x++,O=!1),n=0;n<x;n++)d+=l}if(\"keyword\"===c.type&&g.match(/^(case|default)$/)?!1===F&&(A[k]=g,k++,F=!0):\"keyword\"===c.type&&g.match(/^(break)$/)&&A[k-1]&&A[k-1].match(/^(case|default)$/)&&(k--,F=!1),\"paren.lparen\"===c.type&&(T+=(g.match(/\\(/g)||[]).length,C+=(g.match(/\\{/g)||[]).length,k+=g.length),\"keyword\"===c.type&&g.match(/^(if|else|elseif|for|while)$/)?(O=!0,T=0):!T&&g.trim()&&\"comment\"!==c.type&&(O=!1),\"paren.rparen\"===c.type)for(T-=(g.match(/\\)/g)||[]).length,C-=(g.match(/\\}/g)||[]).length,n=0;n<g.length;n++)k--,\"}\"===g.substr(n,1)&&\"case\"===A[k]&&k--;\"text\"==c.type&&(g=g.replace(/\\s+$/,\" \")),y&&!f&&(K(),\"\\n\"!==d.substr(-1)&&(d+=\" \")),d+=g,h&&(d+=\" \"),f=!1,y=!1,h=!1,(o(c,\"tag-close\")&&(_||-1!==m.indexOf(b))||o(c,\"doctype\")&&\">\"===g)&&(B=_&&r&&\"</\"===r.value?-1:1),r&&-1===u.indexOf(r.value)&&(o(c,\"tag-open\")&&\"</\"===g?k--:o(c,\"tag-open\")&&\"<\"===g?k++:o(c,\"tag-close\")&&\"/>\"===g&&k--),o(c,\"tag-name\")&&(b=g),s=R}}c=r}d=d.trim(),e.doc.setValue(d)},t.commands=[{name:\"beautify\",description:\"Format selection (Beautify)\",exec:function(e){t.beautify(e.session)},bindKey:\"Ctrl-Shift-B\"}]})),ace.require([\"ace/ext/beautify\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"ca2ae472ffaeae557bf1db3b4ad1d72a.js","input":"ace.define(\"ace/ext/beautify\", [\"require\", \"exports\", \"module\", \"ace/token_iterator\"], function (require, exports, module) {\n  // [WIP]\n  \"use strict\";\n\n  var TokenIterator = require(\"../token_iterator\").TokenIterator;\n  function is(token, type) {\n    return token.type.lastIndexOf(type + \".xml\") > -1;\n  }\n  exports.singletonTags = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"html\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\n  exports.blockTags = [\"article\", \"aside\", \"blockquote\", \"body\", \"div\", \"dl\", \"fieldset\", \"footer\", \"form\", \"head\", \"header\", \"html\", \"nav\", \"ol\", \"p\", \"script\", \"section\", \"style\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"ul\"];\n  exports.formatOptions = {\n    lineBreaksAfterCommasInCurlyBlock: true\n  };\n  exports.beautify = function (session) {\n    var iterator = new TokenIterator(session, 0, 0);\n    var token = iterator.getCurrentToken();\n    var tabString = session.getTabString();\n    var singletonTags = exports.singletonTags;\n    var blockTags = exports.blockTags;\n    var formatOptions = exports.formatOptions || {};\n    var nextToken;\n    var breakBefore = false;\n    var spaceBefore = false;\n    var spaceAfter = false;\n    var code = \"\";\n    var value = \"\";\n    var tagName = \"\";\n    var depth = 0;\n    var lastDepth = 0;\n    var lastIndent = 0;\n    var indent = 0;\n    var unindent = 0;\n    var roundDepth = 0;\n    var curlyDepth = 0;\n    var row;\n    var curRow = 0;\n    var rowsToAdd = 0;\n    var rowTokens = [];\n    var abort = false;\n    var i;\n    var indentNextLine = false;\n    var inTag = false;\n    var inCSS = false;\n    var inBlock = false;\n    var levels = {\n      0: 0\n    };\n    var parents = [];\n    var caseBody = false;\n    var trimNext = function () {\n      if (nextToken && nextToken.value && nextToken.type !== 'string.regexp') nextToken.value = nextToken.value.replace(/^\\s*/, \"\");\n    };\n    var trimLine = function () {\n      var end = code.length - 1;\n      while (true) {\n        if (end == 0) break;\n        if (code[end] !== \" \") break;\n        end = end - 1;\n      }\n      code = code.slice(0, end + 1);\n    };\n    var trimCode = function () {\n      code = code.trimRight();\n      breakBefore = false;\n    };\n    while (token !== null) {\n      curRow = iterator.getCurrentTokenRow();\n      rowTokens = iterator.$rowTokens;\n      nextToken = iterator.stepForward();\n      if (typeof token !== \"undefined\") {\n        value = token.value;\n        unindent = 0;\n        inCSS = tagName === \"style\" || session.$modeId === \"ace/mode/css\";\n        if (is(token, \"tag-open\")) {\n          inTag = true;\n          if (nextToken) inBlock = blockTags.indexOf(nextToken.value) !== -1;\n          if (value === \"</\") {\n            if (inBlock && !breakBefore && rowsToAdd < 1) rowsToAdd++;\n            if (inCSS) rowsToAdd = 1;\n            unindent = 1;\n            inBlock = false;\n          }\n        } else if (is(token, \"tag-close\")) {\n          inTag = false;\n        } else if (is(token, \"comment.start\")) {\n          inBlock = true;\n        } else if (is(token, \"comment.end\")) {\n          inBlock = false;\n        }\n        if (!inTag && !rowsToAdd && token.type === \"paren.rparen\" && token.value.substr(0, 1) === \"}\") {\n          rowsToAdd++;\n        }\n        if (curRow !== row) {\n          rowsToAdd = curRow;\n          if (row) rowsToAdd -= row;\n        }\n        if (rowsToAdd) {\n          trimCode();\n          for (; rowsToAdd > 0; rowsToAdd--) code += \"\\n\";\n          breakBefore = true;\n          if (!is(token, \"comment\") && !token.type.match(/^(comment|string)$/)) value = value.trimLeft();\n        }\n        if (value) {\n          if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|foreach|while|switch)$/)) {\n            parents[depth] = value;\n            trimNext();\n            spaceAfter = true;\n            if (value.match(/^(else|elseif)$/)) {\n              if (code.match(/\\}[\\s]*$/)) {\n                trimCode();\n                spaceBefore = true;\n              }\n            }\n          } else if (token.type === \"paren.lparen\") {\n            trimNext();\n            if (value.substr(-1) === \"{\") {\n              spaceAfter = true;\n              indentNextLine = false;\n              if (!inTag) rowsToAdd = 1;\n            }\n            if (value.substr(0, 1) === \"{\") {\n              spaceBefore = true;\n              if (code.substr(-1) !== '[' && code.trimRight().substr(-1) === '[') {\n                trimCode();\n                spaceBefore = false;\n              } else if (code.trimRight().substr(-1) === ')') {\n                trimCode();\n              } else {\n                trimLine();\n              }\n            }\n          } else if (token.type === \"paren.rparen\") {\n            unindent = 1;\n            if (value.substr(0, 1) === \"}\") {\n              if (parents[depth - 1] === 'case') unindent++;\n              if (code.trimRight().substr(-1) === '{') {\n                trimCode();\n              } else {\n                spaceBefore = true;\n                if (inCSS) rowsToAdd += 2;\n              }\n            }\n            if (value.substr(0, 1) === \"]\") {\n              if (code.substr(-1) !== '}' && code.trimRight().substr(-1) === '}') {\n                spaceBefore = false;\n                indent++;\n                trimCode();\n              }\n            }\n            if (value.substr(0, 1) === \")\") {\n              if (code.substr(-1) !== '(' && code.trimRight().substr(-1) === '(') {\n                spaceBefore = false;\n                indent++;\n                trimCode();\n              }\n            }\n            trimLine();\n          } else if ((token.type === \"keyword.operator\" || token.type === \"keyword\") && value.match(/^(=|==|===|!=|!==|&&|\\|\\||and|or|xor|\\+=|.=|>|>=|<|<=|=>)$/)) {\n            trimCode();\n            trimNext();\n            spaceBefore = true;\n            spaceAfter = true;\n          } else if (token.type === \"punctuation.operator\" && value === ';') {\n            trimCode();\n            trimNext();\n            spaceAfter = true;\n            if (inCSS) rowsToAdd++;\n          } else if (token.type === \"punctuation.operator\" && value.match(/^(:|,)$/)) {\n            trimCode();\n            trimNext();\n            if (value.match(/^(,)$/) && curlyDepth > 0 && roundDepth === 0 && formatOptions.lineBreaksAfterCommasInCurlyBlock) {\n              rowsToAdd++;\n            } else {\n              spaceAfter = true;\n              breakBefore = false;\n            }\n          } else if (token.type === \"support.php_tag\" && value === \"?>\" && !breakBefore) {\n            trimCode();\n            spaceBefore = true;\n          } else if (is(token, \"attribute-name\") && code.substr(-1).match(/^\\s$/)) {\n            spaceBefore = true;\n          } else if (is(token, \"attribute-equals\")) {\n            trimLine();\n            trimNext();\n          } else if (is(token, \"tag-close\")) {\n            trimLine();\n            if (value === \"/>\") spaceBefore = true;\n          } else if (token.type === \"keyword\" && value.match(/^(case|default)$/)) {\n            if (caseBody) unindent = 1;\n          }\n          if (breakBefore && !(token.type.match(/^(comment)$/) && !value.substr(0, 1).match(/^[/#]$/)) && !(token.type.match(/^(string)$/) && !value.substr(0, 1).match(/^['\"@]$/))) {\n            indent = lastIndent;\n            if (depth > lastDepth) {\n              indent++;\n              for (i = depth; i > lastDepth; i--) levels[i] = indent;\n            } else if (depth < lastDepth) indent = levels[depth];\n            lastDepth = depth;\n            lastIndent = indent;\n            if (unindent) indent -= unindent;\n            if (indentNextLine && !roundDepth) {\n              indent++;\n              indentNextLine = false;\n            }\n            for (i = 0; i < indent; i++) code += tabString;\n          }\n          if (token.type === \"keyword\" && value.match(/^(case|default)$/)) {\n            if (caseBody === false) {\n              parents[depth] = value;\n              depth++;\n              caseBody = true;\n            }\n          } else if (token.type === \"keyword\" && value.match(/^(break)$/)) {\n            if (parents[depth - 1] && parents[depth - 1].match(/^(case|default)$/)) {\n              depth--;\n              caseBody = false;\n            }\n          }\n          if (token.type === \"paren.lparen\") {\n            roundDepth += (value.match(/\\(/g) || []).length;\n            curlyDepth += (value.match(/\\{/g) || []).length;\n            depth += value.length;\n          }\n          if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|while)$/)) {\n            indentNextLine = true;\n            roundDepth = 0;\n          } else if (!roundDepth && value.trim() && token.type !== \"comment\") indentNextLine = false;\n          if (token.type === \"paren.rparen\") {\n            roundDepth -= (value.match(/\\)/g) || []).length;\n            curlyDepth -= (value.match(/\\}/g) || []).length;\n            for (i = 0; i < value.length; i++) {\n              depth--;\n              if (value.substr(i, 1) === '}' && parents[depth] === 'case') {\n                depth--;\n              }\n            }\n          }\n          if (token.type == \"text\") value = value.replace(/\\s+$/, \" \");\n          if (spaceBefore && !breakBefore) {\n            trimLine();\n            if (code.substr(-1) !== \"\\n\") code += \" \";\n          }\n          code += value;\n          if (spaceAfter) code += \" \";\n          breakBefore = false;\n          spaceBefore = false;\n          spaceAfter = false;\n          if (is(token, \"tag-close\") && (inBlock || blockTags.indexOf(tagName) !== -1) || is(token, \"doctype\") && value === \">\") {\n            if (inBlock && nextToken && nextToken.value === \"</\") rowsToAdd = -1;else rowsToAdd = 1;\n          }\n          if (nextToken && singletonTags.indexOf(nextToken.value) === -1) {\n            if (is(token, \"tag-open\") && value === \"</\") {\n              depth--;\n            } else if (is(token, \"tag-open\") && value === \"<\") {\n              depth++;\n            } else if (is(token, \"tag-close\") && value === \"/>\") {\n              depth--;\n            }\n          }\n          if (is(token, \"tag-name\")) {\n            tagName = value;\n          }\n          row = curRow;\n        }\n      }\n      token = nextToken;\n    }\n    code = code.trim();\n    session.doc.setValue(code);\n  };\n  exports.commands = [{\n    name: \"beautify\",\n    description: \"Format selection (Beautify)\",\n    exec: function (editor) {\n      exports.beautify(editor.session);\n    },\n    bindKey: \"Ctrl-Shift-B\"\n  }];\n});\n(function () {\n  ace.require([\"ace/ext/beautify\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}