{"ast":null,"code":"ace.define(\"ace/mode/haskell_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from tm bundles\\haskell.tmbundle\\Syntaxes\\Haskell.plist (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var HaskellHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: ['punctuation.definition.entity.haskell', 'keyword.operator.function.infix.haskell', 'punctuation.definition.entity.haskell'],\n        regex: '(`)([a-zA-Z_\\']*?)(`)',\n        comment: 'In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).'\n      }, {\n        token: 'constant.language.unit.haskell',\n        regex: '\\\\(\\\\)'\n      }, {\n        token: 'constant.language.empty-list.haskell',\n        regex: '\\\\[\\\\]'\n      }, {\n        token: 'keyword.other.haskell',\n        regex: '\\\\b(module|signature)\\\\b',\n        push: [{\n          token: 'keyword.other.haskell',\n          regex: '\\\\bwhere\\\\b',\n          next: 'pop'\n        }, {\n          include: '#module_name'\n        }, {\n          include: '#module_exports'\n        }, {\n          token: 'invalid',\n          regex: '[a-z]+'\n        }, {\n          defaultToken: 'meta.declaration.module.haskell'\n        }]\n      }, {\n        token: 'keyword.other.haskell',\n        regex: '\\\\bclass\\\\b',\n        push: [{\n          token: 'keyword.other.haskell',\n          regex: '\\\\bwhere\\\\b',\n          next: 'pop'\n        }, {\n          token: 'support.class.prelude.haskell',\n          regex: '\\\\b(?:Monad|Functor|Eq|Ord|Read|Show|Num|(?:Frac|Ra)tional|Enum|Bounded|Real(?:Frac|Float)?|Integral|Floating)\\\\b'\n        }, {\n          token: 'entity.other.inherited-class.haskell',\n          regex: '[A-Z][A-Za-z_\\']*'\n        }, {\n          token: 'variable.other.generic-type.haskell',\n          regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b'\n        }, {\n          defaultToken: 'meta.declaration.class.haskell'\n        }]\n      }, {\n        token: 'keyword.other.haskell',\n        regex: '\\\\binstance\\\\b',\n        push: [{\n          token: 'keyword.other.haskell',\n          regex: '\\\\bwhere\\\\b|$',\n          next: 'pop'\n        }, {\n          include: '#type_signature'\n        }, {\n          defaultToken: 'meta.declaration.instance.haskell'\n        }]\n      }, {\n        token: 'keyword.other.haskell',\n        regex: 'import',\n        push: [{\n          token: 'meta.import.haskell',\n          regex: '$|;|^',\n          next: 'pop'\n        }, {\n          token: 'keyword.other.haskell',\n          regex: 'qualified|as|hiding'\n        }, {\n          include: '#module_name'\n        }, {\n          include: '#module_exports'\n        }, {\n          defaultToken: 'meta.import.haskell'\n        }]\n      }, {\n        token: ['keyword.other.haskell', 'meta.deriving.haskell'],\n        regex: '(deriving)(\\\\s*\\\\()',\n        push: [{\n          token: 'meta.deriving.haskell',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          token: 'entity.other.inherited-class.haskell',\n          regex: '\\\\b[A-Z][a-zA-Z_\\']*'\n        }, {\n          defaultToken: 'meta.deriving.haskell'\n        }]\n      }, {\n        token: 'keyword.other.haskell',\n        regex: '\\\\b(?:deriving|where|data|type|case|of|let|in|newtype|default)\\\\b'\n      }, {\n        token: 'keyword.operator.haskell',\n        regex: '\\\\binfix[lr]?\\\\b'\n      }, {\n        token: 'keyword.control.haskell',\n        regex: '\\\\b(?:do|if|then|else)\\\\b'\n      }, {\n        token: 'constant.numeric.float.haskell',\n        regex: '\\\\b(?:[0-9]+\\\\.[0-9]+(?:[eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\\\b',\n        comment: 'Floats are always decimal'\n      }, {\n        token: 'constant.numeric.haskell',\n        regex: '\\\\b(?:[0-9]+|0(?:[xX][0-9a-fA-F]+|[oO][0-7]+))\\\\b'\n      }, {\n        token: ['meta.preprocessor.c', 'punctuation.definition.preprocessor.c', 'meta.preprocessor.c'],\n        regex: '^(\\\\s*)(#)(\\\\s*\\\\w+)',\n        comment: 'In addition to Haskell\\'s \"native\" syntax, GHC permits the C preprocessor to be run on a source file.'\n      }, {\n        include: '#pragma'\n      }, {\n        token: 'punctuation.definition.string.begin.haskell',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.haskell',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.haskell',\n          regex: '\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&])'\n        }, {\n          token: 'constant.character.escape.octal.haskell',\n          regex: '\\\\\\\\o[0-7]+|\\\\\\\\x[0-9A-Fa-f]+|\\\\\\\\[0-9]+'\n        }, {\n          token: 'constant.character.escape.control.haskell',\n          regex: '\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]'\n        }, {\n          defaultToken: 'string.quoted.double.haskell'\n        }]\n      }, {\n        token: ['punctuation.definition.string.begin.haskell', 'string.quoted.single.haskell', 'constant.character.escape.haskell', 'constant.character.escape.octal.haskell', 'constant.character.escape.hexadecimal.haskell', 'constant.character.escape.control.haskell', 'punctuation.definition.string.end.haskell'],\n        regex: '(\\')(?:([\\\\ -\\\\[\\\\]-~])|(\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&]))|(\\\\\\\\o[0-7]+)|(\\\\\\\\x[0-9A-Fa-f]+)|(\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]))(\\')'\n      }, {\n        token: ['meta.function.type-declaration.haskell', 'entity.name.function.haskell', 'meta.function.type-declaration.haskell', 'keyword.other.double-colon.haskell'],\n        regex: '^(\\\\s*)([a-z_][a-zA-Z0-9_\\']*|\\\\([|!%$+\\\\-.,=</>]+\\\\))(\\\\s*)(::)',\n        push: [{\n          token: 'meta.function.type-declaration.haskell',\n          regex: '$',\n          next: 'pop'\n        }, {\n          include: '#type_signature'\n        }, {\n          defaultToken: 'meta.function.type-declaration.haskell'\n        }]\n      }, {\n        token: 'support.constant.haskell',\n        regex: '\\\\b(?:Just|Nothing|Left|Right|True|False|LT|EQ|GT|\\\\(\\\\)|\\\\[\\\\])\\\\b'\n      }, {\n        token: 'constant.other.haskell',\n        regex: '\\\\b[A-Z]\\\\w*\\\\b'\n      }, {\n        include: '#comments'\n      }, {\n        token: 'support.function.prelude.haskell',\n        regex: '\\\\b(?:abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\\\b'\n      }, {\n        include: '#infix_op'\n      }, {\n        token: 'keyword.operator.haskell',\n        regex: '[|!%$?~+:\\\\-.=</>\\\\\\\\]+',\n        comment: 'In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.'\n      }, {\n        token: 'punctuation.separator.comma.haskell',\n        regex: ','\n      }],\n      '#block_comment': [{\n        token: 'punctuation.definition.comment.haskell',\n        regex: '\\\\{-(?!#)',\n        push: [{\n          include: '#block_comment'\n        }, {\n          token: 'punctuation.definition.comment.haskell',\n          regex: '-\\\\}',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.haskell'\n        }]\n      }],\n      '#comments': [{\n        token: 'punctuation.definition.comment.haskell',\n        regex: '--.*',\n        push_: [{\n          token: 'comment.line.double-dash.haskell',\n          regex: '$',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.line.double-dash.haskell'\n        }]\n      }, {\n        include: '#block_comment'\n      }],\n      '#infix_op': [{\n        token: 'entity.name.function.infix.haskell',\n        regex: '\\\\([|!%$+:\\\\-.=</>]+\\\\)|\\\\(,+\\\\)'\n      }],\n      '#module_exports': [{\n        token: 'meta.declaration.exports.haskell',\n        regex: '\\\\(',\n        push: [{\n          token: 'meta.declaration.exports.haskell.end',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          token: 'entity.name.function.haskell',\n          regex: '\\\\b[a-z][a-zA-Z_\\']*'\n        }, {\n          token: 'storage.type.haskell',\n          regex: '\\\\b[A-Z][A-Za-z_\\']*'\n        }, {\n          token: 'punctuation.separator.comma.haskell',\n          regex: ','\n        }, {\n          include: '#infix_op'\n        }, {\n          token: 'meta.other.unknown.haskell',\n          regex: '\\\\(.*?\\\\)',\n          comment: 'So named because I don\\'t know what to call this.'\n        }, {\n          defaultToken: 'meta.declaration.exports.haskell.end'\n        }]\n      }],\n      '#module_name': [{\n        token: 'support.other.module.haskell',\n        regex: '[A-Z][A-Za-z._\\']*'\n      }],\n      '#pragma': [{\n        token: 'meta.preprocessor.haskell',\n        regex: '\\\\{-#',\n        push: [{\n          token: 'meta.preprocessor.haskell',\n          regex: '#-\\\\}',\n          next: 'pop'\n        }, {\n          token: 'keyword.other.preprocessor.haskell',\n          regex: '\\\\b(?:LANGUAGE|UNPACK|INLINE)\\\\b'\n        }, {\n          defaultToken: 'meta.preprocessor.haskell'\n        }]\n      }],\n      '#type_signature': [{\n        token: ['meta.class-constraint.haskell', 'entity.other.inherited-class.haskell', 'meta.class-constraint.haskell', 'variable.other.generic-type.haskell', 'meta.class-constraint.haskell', 'keyword.other.big-arrow.haskell'],\n        regex: '(\\\\(\\\\s*)([A-Z][A-Za-z]*)(\\\\s+)([a-z][A-Za-z_\\']*)(\\\\)\\\\s*)(=>)'\n      }, {\n        include: '#pragma'\n      }, {\n        token: 'keyword.other.arrow.haskell',\n        regex: '->'\n      }, {\n        token: 'keyword.other.big-arrow.haskell',\n        regex: '=>'\n      }, {\n        token: 'support.type.prelude.haskell',\n        regex: '\\\\b(?:Int(?:eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(?:Error)?)\\\\b'\n      }, {\n        token: 'variable.other.generic-type.haskell',\n        regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b'\n      }, {\n        token: 'storage.type.haskell',\n        regex: '\\\\b[A-Z][a-zA-Z0-9_\\']*\\\\b'\n      }, {\n        token: 'support.constant.unit.haskell',\n        regex: '\\\\(\\\\)'\n      }, {\n        include: '#comments'\n      }]\n    };\n    this.normalizeRules();\n  };\n  HaskellHighlightRules.metaData = {\n    fileTypes: ['hs'],\n    keyEquivalent: '^~H',\n    name: 'Haskell',\n    scopeName: 'source.haskell'\n  };\n  oop.inherits(HaskellHighlightRules, TextHighlightRules);\n  exports.HaskellHighlightRules = HaskellHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/haskell\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/haskell_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var HaskellHighlightRules = require(\"./haskell_highlight_rules\").HaskellHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = HaskellHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell\";\n    this.snippetFileId = \"ace/snippets/haskell\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/haskell\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","HaskellHighlightRules","$rules","start","token","regex","comment","push","next","include","defaultToken","push_","normalizeRules","metaData","fileTypes","keyEquivalent","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id","snippetFileId"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-haskell.js"],"sourcesContent":["ace.define(\"ace/mode/haskell_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from tm bundles\\haskell.tmbundle\\Syntaxes\\Haskell.plist (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar HaskellHighlightRules = function () {\n    this.$rules = { start: [{ token: ['punctuation.definition.entity.haskell',\n                    'keyword.operator.function.infix.haskell',\n                    'punctuation.definition.entity.haskell'],\n                regex: '(`)([a-zA-Z_\\']*?)(`)',\n                comment: 'In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).' },\n            { token: 'constant.language.unit.haskell', regex: '\\\\(\\\\)' },\n            { token: 'constant.language.empty-list.haskell',\n                regex: '\\\\[\\\\]' },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\b(module|signature)\\\\b',\n                push: [{ token: 'keyword.other.haskell', regex: '\\\\bwhere\\\\b', next: 'pop' },\n                    { include: '#module_name' },\n                    { include: '#module_exports' },\n                    { token: 'invalid', regex: '[a-z]+' },\n                    { defaultToken: 'meta.declaration.module.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\bclass\\\\b',\n                push: [{ token: 'keyword.other.haskell',\n                        regex: '\\\\bwhere\\\\b',\n                        next: 'pop' },\n                    { token: 'support.class.prelude.haskell',\n                        regex: '\\\\b(?:Monad|Functor|Eq|Ord|Read|Show|Num|(?:Frac|Ra)tional|Enum|Bounded|Real(?:Frac|Float)?|Integral|Floating)\\\\b' },\n                    { token: 'entity.other.inherited-class.haskell',\n                        regex: '[A-Z][A-Za-z_\\']*' },\n                    { token: 'variable.other.generic-type.haskell',\n                        regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b' },\n                    { defaultToken: 'meta.declaration.class.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\binstance\\\\b',\n                push: [{ token: 'keyword.other.haskell',\n                        regex: '\\\\bwhere\\\\b|$',\n                        next: 'pop' },\n                    { include: '#type_signature' },\n                    { defaultToken: 'meta.declaration.instance.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: 'import',\n                push: [{ token: 'meta.import.haskell', regex: '$|;|^', next: 'pop' },\n                    { token: 'keyword.other.haskell', regex: 'qualified|as|hiding' },\n                    { include: '#module_name' },\n                    { include: '#module_exports' },\n                    { defaultToken: 'meta.import.haskell' }] },\n            { token: ['keyword.other.haskell', 'meta.deriving.haskell'],\n                regex: '(deriving)(\\\\s*\\\\()',\n                push: [{ token: 'meta.deriving.haskell', regex: '\\\\)', next: 'pop' },\n                    { token: 'entity.other.inherited-class.haskell',\n                        regex: '\\\\b[A-Z][a-zA-Z_\\']*' },\n                    { defaultToken: 'meta.deriving.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\b(?:deriving|where|data|type|case|of|let|in|newtype|default)\\\\b' },\n            { token: 'keyword.operator.haskell', regex: '\\\\binfix[lr]?\\\\b' },\n            { token: 'keyword.control.haskell',\n                regex: '\\\\b(?:do|if|then|else)\\\\b' },\n            { token: 'constant.numeric.float.haskell',\n                regex: '\\\\b(?:[0-9]+\\\\.[0-9]+(?:[eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\\\b',\n                comment: 'Floats are always decimal' },\n            { token: 'constant.numeric.haskell',\n                regex: '\\\\b(?:[0-9]+|0(?:[xX][0-9a-fA-F]+|[oO][0-7]+))\\\\b' },\n            { token: ['meta.preprocessor.c',\n                    'punctuation.definition.preprocessor.c',\n                    'meta.preprocessor.c'],\n                regex: '^(\\\\s*)(#)(\\\\s*\\\\w+)',\n                comment: 'In addition to Haskell\\'s \"native\" syntax, GHC permits the C preprocessor to be run on a source file.' },\n            { include: '#pragma' },\n            { token: 'punctuation.definition.string.begin.haskell',\n                regex: '\"',\n                push: [{ token: 'punctuation.definition.string.end.haskell',\n                        regex: '\"',\n                        next: 'pop' },\n                    { token: 'constant.character.escape.haskell',\n                        regex: '\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&])' },\n                    { token: 'constant.character.escape.octal.haskell',\n                        regex: '\\\\\\\\o[0-7]+|\\\\\\\\x[0-9A-Fa-f]+|\\\\\\\\[0-9]+' },\n                    { token: 'constant.character.escape.control.haskell',\n                        regex: '\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]' },\n                    { defaultToken: 'string.quoted.double.haskell' }] },\n            { token: ['punctuation.definition.string.begin.haskell',\n                    'string.quoted.single.haskell',\n                    'constant.character.escape.haskell',\n                    'constant.character.escape.octal.haskell',\n                    'constant.character.escape.hexadecimal.haskell',\n                    'constant.character.escape.control.haskell',\n                    'punctuation.definition.string.end.haskell'],\n                regex: '(\\')(?:([\\\\ -\\\\[\\\\]-~])|(\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&]))|(\\\\\\\\o[0-7]+)|(\\\\\\\\x[0-9A-Fa-f]+)|(\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]))(\\')' },\n            { token: ['meta.function.type-declaration.haskell',\n                    'entity.name.function.haskell',\n                    'meta.function.type-declaration.haskell',\n                    'keyword.other.double-colon.haskell'],\n                regex: '^(\\\\s*)([a-z_][a-zA-Z0-9_\\']*|\\\\([|!%$+\\\\-.,=</>]+\\\\))(\\\\s*)(::)',\n                push: [{ token: 'meta.function.type-declaration.haskell',\n                        regex: '$',\n                        next: 'pop' },\n                    { include: '#type_signature' },\n                    { defaultToken: 'meta.function.type-declaration.haskell' }] },\n            { token: 'support.constant.haskell',\n                regex: '\\\\b(?:Just|Nothing|Left|Right|True|False|LT|EQ|GT|\\\\(\\\\)|\\\\[\\\\])\\\\b' },\n            { token: 'constant.other.haskell', regex: '\\\\b[A-Z]\\\\w*\\\\b' },\n            { include: '#comments' },\n            { token: 'support.function.prelude.haskell',\n                regex: '\\\\b(?:abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\\\b' },\n            { include: '#infix_op' },\n            { token: 'keyword.operator.haskell',\n                regex: '[|!%$?~+:\\\\-.=</>\\\\\\\\]+',\n                comment: 'In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.' },\n            { token: 'punctuation.separator.comma.haskell', regex: ',' }],\n        '#block_comment': [{ token: 'punctuation.definition.comment.haskell',\n                regex: '\\\\{-(?!#)',\n                push: [{ include: '#block_comment' },\n                    { token: 'punctuation.definition.comment.haskell',\n                        regex: '-\\\\}',\n                        next: 'pop' },\n                    { defaultToken: 'comment.block.haskell' }] }],\n        '#comments': [{ token: 'punctuation.definition.comment.haskell',\n                regex: '--.*',\n                push_: [{ token: 'comment.line.double-dash.haskell',\n                        regex: '$',\n                        next: 'pop' },\n                    { defaultToken: 'comment.line.double-dash.haskell' }] },\n            { include: '#block_comment' }],\n        '#infix_op': [{ token: 'entity.name.function.infix.haskell',\n                regex: '\\\\([|!%$+:\\\\-.=</>]+\\\\)|\\\\(,+\\\\)' }],\n        '#module_exports': [{ token: 'meta.declaration.exports.haskell',\n                regex: '\\\\(',\n                push: [{ token: 'meta.declaration.exports.haskell.end',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { token: 'entity.name.function.haskell',\n                        regex: '\\\\b[a-z][a-zA-Z_\\']*' },\n                    { token: 'storage.type.haskell', regex: '\\\\b[A-Z][A-Za-z_\\']*' },\n                    { token: 'punctuation.separator.comma.haskell', regex: ',' },\n                    { include: '#infix_op' },\n                    { token: 'meta.other.unknown.haskell',\n                        regex: '\\\\(.*?\\\\)',\n                        comment: 'So named because I don\\'t know what to call this.' },\n                    { defaultToken: 'meta.declaration.exports.haskell.end' }] }],\n        '#module_name': [{ token: 'support.other.module.haskell',\n                regex: '[A-Z][A-Za-z._\\']*' }],\n        '#pragma': [{ token: 'meta.preprocessor.haskell',\n                regex: '\\\\{-#',\n                push: [{ token: 'meta.preprocessor.haskell',\n                        regex: '#-\\\\}',\n                        next: 'pop' },\n                    { token: 'keyword.other.preprocessor.haskell',\n                        regex: '\\\\b(?:LANGUAGE|UNPACK|INLINE)\\\\b' },\n                    { defaultToken: 'meta.preprocessor.haskell' }] }],\n        '#type_signature': [{ token: ['meta.class-constraint.haskell',\n                    'entity.other.inherited-class.haskell',\n                    'meta.class-constraint.haskell',\n                    'variable.other.generic-type.haskell',\n                    'meta.class-constraint.haskell',\n                    'keyword.other.big-arrow.haskell'],\n                regex: '(\\\\(\\\\s*)([A-Z][A-Za-z]*)(\\\\s+)([a-z][A-Za-z_\\']*)(\\\\)\\\\s*)(=>)' },\n            { include: '#pragma' },\n            { token: 'keyword.other.arrow.haskell', regex: '->' },\n            { token: 'keyword.other.big-arrow.haskell', regex: '=>' },\n            { token: 'support.type.prelude.haskell',\n                regex: '\\\\b(?:Int(?:eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(?:Error)?)\\\\b' },\n            { token: 'variable.other.generic-type.haskell',\n                regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b' },\n            { token: 'storage.type.haskell',\n                regex: '\\\\b[A-Z][a-zA-Z0-9_\\']*\\\\b' },\n            { token: 'support.constant.unit.haskell', regex: '\\\\(\\\\)' },\n            { include: '#comments' }] };\n    this.normalizeRules();\n};\nHaskellHighlightRules.metaData = { fileTypes: ['hs'],\n    keyEquivalent: '^~H',\n    name: 'Haskell',\n    scopeName: 'source.haskell' };\noop.inherits(HaskellHighlightRules, TextHighlightRules);\nexports.HaskellHighlightRules = HaskellHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/haskell\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/haskell_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HaskellHighlightRules = require(\"./haskell_highlight_rules\").HaskellHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = HaskellHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell\";\n    this.snippetFileId = \"ace/snippets/haskell\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/haskell\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}