{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nconst carryBit16 = 1 << 16;\n/** @ignore */\nfunction intAsHex(value) {\n  if (value < 0) {\n    value = 0xFFFFFFFF + value + 1;\n  }\n  return `0x${value.toString(16)}`;\n}\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];\n/** @ignore */\nexport class BaseInt64 {\n  constructor(buffer) {\n    this.buffer = buffer;\n  }\n  high() {\n    return this.buffer[1];\n  }\n  low() {\n    return this.buffer[0];\n  }\n  _times(other) {\n    // Break the left and right numbers into 16 bit chunks\n    // so that we can multiply them without overflow.\n    const L = new Uint32Array([this.buffer[1] >>> 16, this.buffer[1] & 0xFFFF, this.buffer[0] >>> 16, this.buffer[0] & 0xFFFF]);\n    const R = new Uint32Array([other.buffer[1] >>> 16, other.buffer[1] & 0xFFFF, other.buffer[0] >>> 16, other.buffer[0] & 0xFFFF]);\n    let product = L[3] * R[3];\n    this.buffer[0] = product & 0xFFFF;\n    let sum = product >>> 16;\n    product = L[2] * R[3];\n    sum += product;\n    product = L[3] * R[2] >>> 0;\n    sum += product;\n    this.buffer[0] += sum << 16;\n    this.buffer[1] = sum >>> 0 < product ? carryBit16 : 0;\n    this.buffer[1] += sum >>> 16;\n    this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n    this.buffer[1] += L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0] << 16;\n    return this;\n  }\n  _plus(other) {\n    const sum = this.buffer[0] + other.buffer[0] >>> 0;\n    this.buffer[1] += other.buffer[1];\n    if (sum < this.buffer[0] >>> 0) {\n      ++this.buffer[1];\n    }\n    this.buffer[0] = sum;\n  }\n  lessThan(other) {\n    return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];\n  }\n  equals(other) {\n    return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n  }\n  greaterThan(other) {\n    return other.lessThan(this);\n  }\n  hex() {\n    return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n  }\n}\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n  times(other) {\n    this._times(other);\n    return this;\n  }\n  plus(other) {\n    this._plus(other);\n    return this;\n  }\n  /** @nocollapse */\n  static from(val, out_buffer = new Uint32Array(2)) {\n    return Uint64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromNumber(num, out_buffer = new Uint32Array(2)) {\n    // Always parse numbers as strings - pulling out high and low bits\n    // directly seems to lose precision sometimes\n    // For example:\n    //     > -4613034156400212000 >>> 0\n    //     721782784\n    // The correct lower 32-bits are 721782752\n    return Uint64.fromString(num.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromString(str, out_buffer = new Uint32Array(2)) {\n    const length = str.length;\n    let out = new Uint64(out_buffer);\n    for (let posn = 0; posn < length;) {\n      const group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n      const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n      const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n      out.times(multiple);\n      out.plus(chunk);\n      posn += group;\n    }\n    return out;\n  }\n  /** @nocollapse */\n  static convertArray(values) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n      Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data;\n  }\n  /** @nocollapse */\n  static multiply(left, right) {\n    let rtrn = new Uint64(new Uint32Array(left.buffer));\n    return rtrn.times(right);\n  }\n  /** @nocollapse */\n  static add(left, right) {\n    let rtrn = new Uint64(new Uint32Array(left.buffer));\n    return rtrn.plus(right);\n  }\n}\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n  negate() {\n    this.buffer[0] = ~this.buffer[0] + 1;\n    this.buffer[1] = ~this.buffer[1];\n    if (this.buffer[0] == 0) {\n      ++this.buffer[1];\n    }\n    return this;\n  }\n  times(other) {\n    this._times(other);\n    return this;\n  }\n  plus(other) {\n    this._plus(other);\n    return this;\n  }\n  lessThan(other) {\n    // force high bytes to be signed\n    const this_high = this.buffer[1] << 0;\n    const other_high = other.buffer[1] << 0;\n    return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];\n  }\n  /** @nocollapse */\n  static from(val, out_buffer = new Uint32Array(2)) {\n    return Int64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromNumber(num, out_buffer = new Uint32Array(2)) {\n    // Always parse numbers as strings - pulling out high and low bits\n    // directly seems to lose precision sometimes\n    // For example:\n    //     > -4613034156400212000 >>> 0\n    //     721782784\n    // The correct lower 32-bits are 721782752\n    return Int64.fromString(num.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromString(str, out_buffer = new Uint32Array(2)) {\n    // TODO: Assert that out_buffer is 0 and length = 2\n    const negate = str.startsWith('-');\n    const length = str.length;\n    let out = new Int64(out_buffer);\n    for (let posn = negate ? 1 : 0; posn < length;) {\n      const group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n      const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n      const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n      out.times(multiple);\n      out.plus(chunk);\n      posn += group;\n    }\n    return negate ? out.negate() : out;\n  }\n  /** @nocollapse */\n  static convertArray(values) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n      Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data;\n  }\n  /** @nocollapse */\n  static multiply(left, right) {\n    let rtrn = new Int64(new Uint32Array(left.buffer));\n    return rtrn.times(right);\n  }\n  /** @nocollapse */\n  static add(left, right) {\n    let rtrn = new Int64(new Uint32Array(left.buffer));\n    return rtrn.plus(right);\n  }\n}\n/** @ignore */\nexport class Int128 {\n  constructor(buffer) {\n    this.buffer = buffer;\n    // buffer[3] MSB (high)\n    // buffer[2]\n    // buffer[1]\n    // buffer[0] LSB (low)\n  }\n  high() {\n    return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n  }\n  low() {\n    return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n  }\n  negate() {\n    this.buffer[0] = ~this.buffer[0] + 1;\n    this.buffer[1] = ~this.buffer[1];\n    this.buffer[2] = ~this.buffer[2];\n    this.buffer[3] = ~this.buffer[3];\n    if (this.buffer[0] == 0) {\n      ++this.buffer[1];\n    }\n    if (this.buffer[1] == 0) {\n      ++this.buffer[2];\n    }\n    if (this.buffer[2] == 0) {\n      ++this.buffer[3];\n    }\n    return this;\n  }\n  times(other) {\n    // Break the left and right numbers into 32 bit chunks\n    // so that we can multiply them without overflow.\n    const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n    const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n    const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n    const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n    const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n    const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n    const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n    const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n    let product = Uint64.multiply(L3, R3);\n    this.buffer[0] = product.low();\n    let sum = new Uint64(new Uint32Array([product.high(), 0]));\n    product = Uint64.multiply(L2, R3);\n    sum.plus(product);\n    product = Uint64.multiply(L3, R2);\n    sum.plus(product);\n    this.buffer[1] = sum.low();\n    this.buffer[3] = sum.lessThan(product) ? 1 : 0;\n    this.buffer[2] = sum.high();\n    let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    high.plus(Uint64.multiply(L1, R3)).plus(Uint64.multiply(L2, R2)).plus(Uint64.multiply(L3, R1));\n    this.buffer[3] += Uint64.multiply(L0, R3).plus(Uint64.multiply(L1, R2)).plus(Uint64.multiply(L2, R1)).plus(Uint64.multiply(L3, R0)).low();\n    return this;\n  }\n  plus(other) {\n    let sums = new Uint32Array(4);\n    sums[3] = this.buffer[3] + other.buffer[3] >>> 0;\n    sums[2] = this.buffer[2] + other.buffer[2] >>> 0;\n    sums[1] = this.buffer[1] + other.buffer[1] >>> 0;\n    sums[0] = this.buffer[0] + other.buffer[0] >>> 0;\n    if (sums[0] < this.buffer[0] >>> 0) {\n      ++sums[1];\n    }\n    if (sums[1] < this.buffer[1] >>> 0) {\n      ++sums[2];\n    }\n    if (sums[2] < this.buffer[2] >>> 0) {\n      ++sums[3];\n    }\n    this.buffer[3] = sums[3];\n    this.buffer[2] = sums[2];\n    this.buffer[1] = sums[1];\n    this.buffer[0] = sums[0];\n    return this;\n  }\n  hex() {\n    return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n  }\n  /** @nocollapse */\n  static multiply(left, right) {\n    let rtrn = new Int128(new Uint32Array(left.buffer));\n    return rtrn.times(right);\n  }\n  /** @nocollapse */\n  static add(left, right) {\n    let rtrn = new Int128(new Uint32Array(left.buffer));\n    return rtrn.plus(right);\n  }\n  /** @nocollapse */\n  static from(val, out_buffer = new Uint32Array(4)) {\n    return Int128.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromNumber(num, out_buffer = new Uint32Array(4)) {\n    // Always parse numbers as strings - pulling out high and low bits\n    // directly seems to lose precision sometimes\n    // For example:\n    //     > -4613034156400212000 >>> 0\n    //     721782784\n    // The correct lower 32-bits are 721782752\n    return Int128.fromString(num.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromString(str, out_buffer = new Uint32Array(4)) {\n    // TODO: Assert that out_buffer is 0 and length = 4\n    const negate = str.startsWith('-');\n    const length = str.length;\n    let out = new Int128(out_buffer);\n    for (let posn = negate ? 1 : 0; posn < length;) {\n      const group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n      const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n      const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n      out.times(multiple);\n      out.plus(chunk);\n      posn += group;\n    }\n    return negate ? out.negate() : out;\n  }\n  /** @nocollapse */\n  static convertArray(values) {\n    // TODO: Distinguish between string and number at compile-time\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n      Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data;\n  }\n}","map":{"version":3,"names":["carryBit16","intAsHex","value","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","constructor","buffer","high","low","_times","other","L","Uint32Array","R","product","sum","_plus","lessThan","equals","greaterThan","hex","Uint64","times","plus","from","val","out_buffer","fromString","fromNumber","num","str","length","out","posn","group","chunk","parseInt","substr","multiple","convertArray","values","data","i","n","byteOffset","multiply","left","right","rtrn","add","Int64","negate","this_high","other_high","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","sums"],"sources":["util/int.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}