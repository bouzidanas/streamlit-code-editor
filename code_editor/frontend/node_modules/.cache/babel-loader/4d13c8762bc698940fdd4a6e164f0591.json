{"ast":null,"code":"ace.define(\"ace/snippets/c_cpp.snippets\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  module.exports = \"## STL Collections\\n# std::array\\nsnippet array\\n\\tstd::array<${1:T}, ${2:N}> ${3};${4}\\n# std::vector\\nsnippet vector\\n\\tstd::vector<${1:T}> ${2};${3}\\n# std::deque\\nsnippet deque\\n\\tstd::deque<${1:T}> ${2};${3}\\n# std::forward_list\\nsnippet flist\\n\\tstd::forward_list<${1:T}> ${2};${3}\\n# std::list\\nsnippet list\\n\\tstd::list<${1:T}> ${2};${3}\\n# std::set\\nsnippet set\\n\\tstd::set<${1:T}> ${2};${3}\\n# std::map\\nsnippet map\\n\\tstd::map<${1:Key}, ${2:T}> ${3};${4}\\n# std::multiset\\nsnippet mset\\n\\tstd::multiset<${1:T}> ${2};${3}\\n# std::multimap\\nsnippet mmap\\n\\tstd::multimap<${1:Key}, ${2:T}> ${3};${4}\\n# std::unordered_set\\nsnippet uset\\n\\tstd::unordered_set<${1:T}> ${2};${3}\\n# std::unordered_map\\nsnippet umap\\n\\tstd::unordered_map<${1:Key}, ${2:T}> ${3};${4}\\n# std::unordered_multiset\\nsnippet umset\\n\\tstd::unordered_multiset<${1:T}> ${2};${3}\\n# std::unordered_multimap\\nsnippet ummap\\n\\tstd::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}\\n# std::stack\\nsnippet stack\\n\\tstd::stack<${1:T}> ${2};${3}\\n# std::queue\\nsnippet queue\\n\\tstd::queue<${1:T}> ${2};${3}\\n# std::priority_queue\\nsnippet pqueue\\n\\tstd::priority_queue<${1:T}> ${2};${3}\\n##\\n## Access Modifiers\\n# private\\nsnippet pri\\n\\tprivate\\n# protected\\nsnippet pro\\n\\tprotected\\n# public\\nsnippet pub\\n\\tpublic\\n# friend\\nsnippet fr\\n\\tfriend\\n# mutable\\nsnippet mu\\n\\tmutable\\n## \\n## Class\\n# class\\nsnippet cl\\n\\tclass ${1:`Filename('$1', 'name')`} \\n\\t{\\n\\tpublic:\\n\\t\\t$1(${2});\\n\\t\\t~$1();\\n\\n\\tprivate:\\n\\t\\t${3:/* data */}\\n\\t};\\n# member function implementation\\nsnippet mfun\\n\\t${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {\\n\\t\\t${5:/* code */}\\n\\t}\\n# namespace\\nsnippet ns\\n\\tnamespace ${1:`Filename('', 'my')`} {\\n\\t\\t${2}\\n\\t} /* namespace $1 */\\n##\\n## Input/Output\\n# std::cout\\nsnippet cout\\n\\tstd::cout << ${1} << std::endl;${2}\\n# std::cin\\nsnippet cin\\n\\tstd::cin >> ${1};${2}\\n##\\n## Iteration\\n# for i \\nsnippet fori\\n\\tfor (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\\n\\t\\t${4:/* code */}\\n\\t}${5}\\n\\n# foreach\\nsnippet fore\\n\\tfor (${1:auto} ${2:i} : ${3:container}) {\\n\\t\\t${4:/* code */}\\n\\t}${5}\\n# iterator\\nsnippet iter\\n\\tfor (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {\\n\\t\\t${6}\\n\\t}${7}\\n\\n# auto iterator\\nsnippet itera\\n\\tfor (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {\\n\\t\\t${2:std::cout << *$1 << std::endl;}\\n\\t}${3}\\n##\\n## Lambdas\\n# lamda (one line)\\nsnippet ld\\n\\t[${1}](${2}){${3:/* code */}}${4}\\n# lambda (multi-line)\\nsnippet lld\\n\\t[${1}](${2}){\\n\\t\\t${3:/* code */}\\n\\t}${4}\\n\";\n});\nace.define(\"ace/snippets/c_cpp\", [\"require\", \"exports\", \"module\", \"ace/snippets/c_cpp.snippets\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = require(\"./c_cpp.snippets\");\n  exports.scope = \"c_cpp\";\n});\n(function () {\n  ace.require([\"ace/snippets/c_cpp\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","snippetText","scope","m"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/snippets/c_cpp.js"],"sourcesContent":["ace.define(\"ace/snippets/c_cpp.snippets\",[\"require\",\"exports\",\"module\"], function(require, exports, module){module.exports = \"## STL Collections\\n# std::array\\nsnippet array\\n\\tstd::array<${1:T}, ${2:N}> ${3};${4}\\n# std::vector\\nsnippet vector\\n\\tstd::vector<${1:T}> ${2};${3}\\n# std::deque\\nsnippet deque\\n\\tstd::deque<${1:T}> ${2};${3}\\n# std::forward_list\\nsnippet flist\\n\\tstd::forward_list<${1:T}> ${2};${3}\\n# std::list\\nsnippet list\\n\\tstd::list<${1:T}> ${2};${3}\\n# std::set\\nsnippet set\\n\\tstd::set<${1:T}> ${2};${3}\\n# std::map\\nsnippet map\\n\\tstd::map<${1:Key}, ${2:T}> ${3};${4}\\n# std::multiset\\nsnippet mset\\n\\tstd::multiset<${1:T}> ${2};${3}\\n# std::multimap\\nsnippet mmap\\n\\tstd::multimap<${1:Key}, ${2:T}> ${3};${4}\\n# std::unordered_set\\nsnippet uset\\n\\tstd::unordered_set<${1:T}> ${2};${3}\\n# std::unordered_map\\nsnippet umap\\n\\tstd::unordered_map<${1:Key}, ${2:T}> ${3};${4}\\n# std::unordered_multiset\\nsnippet umset\\n\\tstd::unordered_multiset<${1:T}> ${2};${3}\\n# std::unordered_multimap\\nsnippet ummap\\n\\tstd::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}\\n# std::stack\\nsnippet stack\\n\\tstd::stack<${1:T}> ${2};${3}\\n# std::queue\\nsnippet queue\\n\\tstd::queue<${1:T}> ${2};${3}\\n# std::priority_queue\\nsnippet pqueue\\n\\tstd::priority_queue<${1:T}> ${2};${3}\\n##\\n## Access Modifiers\\n# private\\nsnippet pri\\n\\tprivate\\n# protected\\nsnippet pro\\n\\tprotected\\n# public\\nsnippet pub\\n\\tpublic\\n# friend\\nsnippet fr\\n\\tfriend\\n# mutable\\nsnippet mu\\n\\tmutable\\n## \\n## Class\\n# class\\nsnippet cl\\n\\tclass ${1:`Filename('$1', 'name')`} \\n\\t{\\n\\tpublic:\\n\\t\\t$1(${2});\\n\\t\\t~$1();\\n\\n\\tprivate:\\n\\t\\t${3:/* data */}\\n\\t};\\n# member function implementation\\nsnippet mfun\\n\\t${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {\\n\\t\\t${5:/* code */}\\n\\t}\\n# namespace\\nsnippet ns\\n\\tnamespace ${1:`Filename('', 'my')`} {\\n\\t\\t${2}\\n\\t} /* namespace $1 */\\n##\\n## Input/Output\\n# std::cout\\nsnippet cout\\n\\tstd::cout << ${1} << std::endl;${2}\\n# std::cin\\nsnippet cin\\n\\tstd::cin >> ${1};${2}\\n##\\n## Iteration\\n# for i \\nsnippet fori\\n\\tfor (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\\n\\t\\t${4:/* code */}\\n\\t}${5}\\n\\n# foreach\\nsnippet fore\\n\\tfor (${1:auto} ${2:i} : ${3:container}) {\\n\\t\\t${4:/* code */}\\n\\t}${5}\\n# iterator\\nsnippet iter\\n\\tfor (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {\\n\\t\\t${6}\\n\\t}${7}\\n\\n# auto iterator\\nsnippet itera\\n\\tfor (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {\\n\\t\\t${2:std::cout << *$1 << std::endl;}\\n\\t}${3}\\n##\\n## Lambdas\\n# lamda (one line)\\nsnippet ld\\n\\t[${1}](${2}){${3:/* code */}}${4}\\n# lambda (multi-line)\\nsnippet lld\\n\\t[${1}](${2}){\\n\\t\\t${3:/* code */}\\n\\t}${4}\\n\";\n\n});\n\nace.define(\"ace/snippets/c_cpp\",[\"require\",\"exports\",\"module\",\"ace/snippets/c_cpp.snippets\"], function(require, exports, module){\"use strict\";\nexports.snippetText = require(\"./c_cpp.snippets\");\nexports.scope = \"c_cpp\";\n\n});                (function() {\n                    ace.require([\"ace/snippets/c_cpp\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"AAAAA,GAAG,CAACC,MAAM,CAAC,6BAA6B,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAACA,MAAM,CAACD,OAAO,GAAG,0iFAA0iF;AAEvqF,CAAC,CAAC;AAEFH,GAAG,CAACC,MAAM,CAAC,oBAAoB,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,6BAA6B,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EAC7ID,OAAO,CAACE,WAAW,GAAGH,OAAO,CAAC,kBAAkB,CAAC;EACjDC,OAAO,CAACG,KAAK,GAAG,OAAO;AAEvB,CAAC,CAAC;AAAiB,CAAC,YAAW;EACXN,GAAG,CAACE,OAAO,CAAC,CAAC,oBAAoB,CAAC,EAAE,UAASK,CAAC,EAAE;IAC5C,IAAI,OAAOH,MAAM,IAAI,QAAQ,IAAI,OAAOD,OAAO,IAAI,QAAQ,IAAIC,MAAM,EAAE;MACnEA,MAAM,CAACD,OAAO,GAAGI,CAAC;IACtB;EACJ,CAAC,CAAC;AACN,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}