{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nimport * as Schema_ from '../fb/Schema';\nimport { Visitor } from '../visitor';\nvar Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar List = Schema_.org.apache.arrow.flatbuf.List;\nvar Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n  visit(node, builder) {\n    return node == null || builder == null ? undefined : super.visit(node, builder);\n  }\n  visitNull(_node, b) {\n    Null.startNull(b);\n    return Null.endNull(b);\n  }\n  visitInt(node, b) {\n    Int.startInt(b);\n    Int.addBitWidth(b, node.bitWidth);\n    Int.addIsSigned(b, node.isSigned);\n    return Int.endInt(b);\n  }\n  visitFloat(node, b) {\n    FloatingPoint.startFloatingPoint(b);\n    FloatingPoint.addPrecision(b, node.precision);\n    return FloatingPoint.endFloatingPoint(b);\n  }\n  visitBinary(_node, b) {\n    Binary.startBinary(b);\n    return Binary.endBinary(b);\n  }\n  visitBool(_node, b) {\n    Bool.startBool(b);\n    return Bool.endBool(b);\n  }\n  visitUtf8(_node, b) {\n    Utf8.startUtf8(b);\n    return Utf8.endUtf8(b);\n  }\n  visitDecimal(node, b) {\n    Decimal.startDecimal(b);\n    Decimal.addScale(b, node.scale);\n    Decimal.addPrecision(b, node.precision);\n    return Decimal.endDecimal(b);\n  }\n  visitDate(node, b) {\n    Date.startDate(b);\n    Date.addUnit(b, node.unit);\n    return Date.endDate(b);\n  }\n  visitTime(node, b) {\n    Time.startTime(b);\n    Time.addUnit(b, node.unit);\n    Time.addBitWidth(b, node.bitWidth);\n    return Time.endTime(b);\n  }\n  visitTimestamp(node, b) {\n    const timezone = node.timezone && b.createString(node.timezone) || undefined;\n    Timestamp.startTimestamp(b);\n    Timestamp.addUnit(b, node.unit);\n    if (timezone !== undefined) {\n      Timestamp.addTimezone(b, timezone);\n    }\n    return Timestamp.endTimestamp(b);\n  }\n  visitInterval(node, b) {\n    Interval.startInterval(b);\n    Interval.addUnit(b, node.unit);\n    return Interval.endInterval(b);\n  }\n  visitList(_node, b) {\n    List.startList(b);\n    return List.endList(b);\n  }\n  visitStruct(_node, b) {\n    Struct.startStruct_(b);\n    return Struct.endStruct_(b);\n  }\n  visitUnion(node, b) {\n    Union.startTypeIdsVector(b, node.typeIds.length);\n    const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n    Union.startUnion(b);\n    Union.addMode(b, node.mode);\n    Union.addTypeIds(b, typeIds);\n    return Union.endUnion(b);\n  }\n  visitDictionary(node, b) {\n    const indexType = this.visit(node.indices, b);\n    DictionaryEncoding.startDictionaryEncoding(b);\n    DictionaryEncoding.addId(b, new Long(node.id, 0));\n    DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n    if (indexType !== undefined) {\n      DictionaryEncoding.addIndexType(b, indexType);\n    }\n    return DictionaryEncoding.endDictionaryEncoding(b);\n  }\n  visitFixedSizeBinary(node, b) {\n    FixedSizeBinary.startFixedSizeBinary(b);\n    FixedSizeBinary.addByteWidth(b, node.byteWidth);\n    return FixedSizeBinary.endFixedSizeBinary(b);\n  }\n  visitFixedSizeList(node, b) {\n    FixedSizeList.startFixedSizeList(b);\n    FixedSizeList.addListSize(b, node.listSize);\n    return FixedSizeList.endFixedSizeList(b);\n  }\n  visitMap(node, b) {\n    Map_.startMap(b);\n    Map_.addKeysSorted(b, node.keysSorted);\n    return Map_.endMap(b);\n  }\n}\n/** @ignore */\nexport const instance = new TypeAssembler();","map":{"version":3,"names":["flatbuffers","Long","Schema_","Visitor","Null","org","apache","arrow","flatbuf","Int","FloatingPoint","Binary","Bool","Utf8","Decimal","Date","Time","Timestamp","Interval","List","Struct","Struct_","Union","DictionaryEncoding","FixedSizeBinary","FixedSizeList","Map_","Map","TypeAssembler","visit","node","builder","undefined","visitNull","_node","b","startNull","endNull","visitInt","startInt","addBitWidth","bitWidth","addIsSigned","isSigned","endInt","visitFloat","startFloatingPoint","addPrecision","precision","endFloatingPoint","visitBinary","startBinary","endBinary","visitBool","startBool","endBool","visitUtf8","startUtf8","endUtf8","visitDecimal","startDecimal","addScale","scale","endDecimal","visitDate","startDate","addUnit","unit","endDate","visitTime","startTime","endTime","visitTimestamp","timezone","createString","startTimestamp","addTimezone","endTimestamp","visitInterval","startInterval","endInterval","visitList","startList","endList","visitStruct","startStruct_","endStruct_","visitUnion","startTypeIdsVector","typeIds","length","createTypeIdsVector","startUnion","addMode","mode","addTypeIds","endUnion","visitDictionary","indexType","indices","startDictionaryEncoding","addId","id","addIsOrdered","isOrdered","addIndexType","endDictionaryEncoding","visitFixedSizeBinary","startFixedSizeBinary","addByteWidth","byteWidth","endFixedSizeBinary","visitFixedSizeList","startFixedSizeList","addListSize","listSize","endFixedSizeList","visitMap","startMap","addKeysSorted","keysSorted","endMap","instance"],"sources":["visitor/typeassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}