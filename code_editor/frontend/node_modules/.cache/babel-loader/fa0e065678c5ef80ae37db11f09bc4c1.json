{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../../util/buffer';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n/** @ignore */\nexport function toDOMStream(source, options) {\n  if (isAsyncIterable(source)) {\n    return asyncIterableAsReadableDOMStream(source, options);\n  }\n  if (isIterable(source)) {\n    return iterableAsReadableDOMStream(source, options);\n  }\n  /* istanbul ignore next */\n  throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n/** @ignore */\nfunction iterableAsReadableDOMStream(source, options) {\n  let it = null;\n  const bm = options && options.type === 'bytes' || false;\n  const hwm = options && options.highWaterMark || 2 ** 24;\n  return new ReadableStream({\n    ...options,\n    start(controller) {\n      next(controller, it || (it = source[Symbol.iterator]()));\n    },\n    pull(controller) {\n      it ? next(controller, it) : controller.close();\n    },\n    cancel() {\n      (it && it.return && it.return() || true) && (it = null);\n    }\n  }, {\n    highWaterMark: bm ? hwm : undefined,\n    ...options\n  });\n  function next(controller, it) {\n    let buf;\n    let r = null;\n    let size = controller.desiredSize || null;\n    while (!(r = it.next(bm ? size : null)).done) {\n      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n        size != null && bm && (size = size - buf.byteLength + 1);\n        r.value = buf;\n      }\n      controller.enqueue(r.value);\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n    controller.close();\n  }\n}\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream(source, options) {\n  let it = null;\n  const bm = options && options.type === 'bytes' || false;\n  const hwm = options && options.highWaterMark || 2 ** 24;\n  return new ReadableStream({\n    ...options,\n    async start(controller) {\n      await next(controller, it || (it = source[Symbol.asyncIterator]()));\n    },\n    async pull(controller) {\n      it ? await next(controller, it) : controller.close();\n    },\n    async cancel() {\n      (it && it.return && (await it.return()) || true) && (it = null);\n    }\n  }, {\n    highWaterMark: bm ? hwm : undefined,\n    ...options\n  });\n  async function next(controller, it) {\n    let buf;\n    let r = null;\n    let size = controller.desiredSize || null;\n    while (!(r = await it.next(bm ? size : null)).done) {\n      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n        size != null && bm && (size = size - buf.byteLength + 1);\n        r.value = buf;\n      }\n      controller.enqueue(r.value);\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n    controller.close();\n  }\n}","map":{"version":3,"names":["toUint8Array","isIterable","isAsyncIterable","toDOMStream","source","options","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","Error","it","bm","type","hwm","highWaterMark","ReadableStream","start","controller","next","Symbol","iterator","pull","close","cancel","return","undefined","buf","r","size","desiredSize","done","ArrayBuffer","isView","value","byteLength","enqueue","asyncIterator"],"sources":["io/whatwg/iterable.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}