{"ast":null,"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@\\\\w+(?=\\\\s|$)\"\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc.body\",\n        caseInsensitive: true\n      }]\n    };\n  };\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: /\\/\\*\\*(?!\\/)/,\n      next: start\n    };\n  };\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/odin_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  var __read = this && this.__read || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o),\n      r,\n      ar = [],\n      e;\n    try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    } catch (error) {\n      e = {\n        error: error\n      };\n    } finally {\n      try {\n        if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      } finally {\n        if (e) throw e.error;\n      }\n    }\n    return ar;\n  };\n  var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  };\n  var oop = require(\"../lib/oop\");\n  var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var OdinHighlightRules = function () {\n    var keywords = \"using|transmute|cast|distinct|opaque|where|\" + \"struct|enum|union|bit_field|bit_set|\" + \"if|when|else|do|switch|case|break|fallthrough|\" + \"size_of|offset_of|type_info_if|typeid_of|type_of|align_of|\" + \"or_return|or_else|inline|no_inline|\" + \"import|package|foreign|defer|auto_cast|map|matrix|proc|\" + \"for|continue|not_in|in\";\n    var cartesian = function () {\n      var a = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n      }\n      return a.reduce(function (a, b) {\n        return a.flatMap(function (d) {\n          return b.map(function (e) {\n            return [d, e].flat();\n          });\n        });\n      }).map(function (parts) {\n        return parts.join(\"\");\n      });\n    };\n    var builtinTypes = __spreadArray(__spreadArray(__spreadArray(__spreadArray([\"int\", \"uint\", \"uintptr\", \"typeid\", \"rawptr\", \"string\", \"cstring\", \"i8\", \"u8\", \"any\", \"byte\", \"rune\", \"bool\", \"b8\", \"b16\", \"b32\", \"b64\"], __read(cartesian([\"i\", \"u\"], [\"16\", \"32\", \"64\", \"128\"], [\"\", \"le\", \"be\"])), false), __read(cartesian([\"f\"], [\"16\", \"32\", \"64\"], [\"\", \"le\", \"be\"])), false), __read(cartesian([\"complex\"], [\"32\", \"64\", \"128\"])), false), __read(cartesian([\"quaternion\"], [\"64\", \"128\", \"256\"])), false).join(\"|\");\n    var operators = [\"\\\\*\", \"/\", \"%\", \"%%\", \"<<\", \">>\", \"&\", \"&~\", \"\\\\+\", \"\\\\-\", \"~\", \"\\\\|\", \">\", \"<\", \"<=\", \">=\", \"==\", \"!=\"].concat(\":\").map(function (operator) {\n      return operator + \"=\";\n    }).concat(\"=\", \":=\", \"::\", \"->\", \"\\\\^\", \"&\", \":\").join(\"|\");\n    var builtinFunctions = \"new|cap|copy|panic|len|make|delete|append|free\";\n    var builtinConstants = \"nil|true|false\";\n    var keywordMapper = this.createKeywordMapper({\n      keyword: keywords,\n      \"constant.language\": builtinConstants,\n      \"support.function\": builtinFunctions,\n      \"support.type\": builtinTypes\n    }, \"\");\n    var stringEscapeRe = \"\\\\\\\\(?:[0-7]{3}|x\\\\h{2}|u{4}|U\\\\h{6}|[abfnrtv'\\\"\\\\\\\\])\".replace(/\\\\h/g, \"[a-fA-F\\\\d]\");\n    this.$rules = {\n      start: [{\n        token: \"comment\",\n        regex: /\\/\\/.*$/\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment.start\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: /\"(?:[^\"\\\\]|\\\\.)*?\"/\n      }, {\n        token: \"string\",\n        // raw\n        regex: \"`\",\n        next: \"bqstring\"\n      }, {\n        token: \"support.constant\",\n        regex: /#[a-z_]+/\n      }, {\n        token: \"constant.numeric\",\n        // rune\n        regex: \"'(?:[^\\\\'\\uD800-\\uDBFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\" + stringEscapeRe.replace('\"', \"\") + \")'\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: [\"entity.name.function\", \"text\", \"keyword.operator\", \"text\", \"keyword\"],\n        regex: \"([a-zA-Z_$][a-zA-Z0-9_$]*)(\\\\s+)(::)(\\\\s+)(proc)\\\\b\"\n      }, {\n        token: function (val) {\n          if (val[val.length - 1] == \"(\") {\n            return [{\n              type: keywordMapper(val.slice(0, -1)) || \"support.function\",\n              value: val.slice(0, -1)\n            }, {\n              type: \"paren.lparen\",\n              value: val.slice(-1)\n            }];\n          }\n          return keywordMapper(val) || \"identifier\";\n        },\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\\\\(?\"\n      }, {\n        token: \"keyword.operator\",\n        regex: operators\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\?|\\\\,|\\\\;|\\\\.\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      comment: [{\n        token: \"comment.end\",\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      bqstring: [{\n        token: \"string\",\n        regex: \"`\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n  };\n  oop.inherits(OdinHighlightRules, TextHighlightRules);\n  exports.OdinHighlightRules = OdinHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/odin\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/odin_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var OdinHighlightRules = require(\"./odin_highlight_rules\").OdinHighlightRules;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = OdinHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n        if (match) {\n          indent += tab;\n        }\n      }\n      return indent;\n    }; //end getNextLineIndent\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/odin\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/odin\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","__read","o","n","m","Symbol","iterator","i","call","r","ar","e","done","push","value","error","__spreadArray","to","from","pack","arguments","length","l","Array","prototype","slice","concat","OdinHighlightRules","keywords","cartesian","a","_i","reduce","b","flatMap","d","map","flat","parts","join","builtinTypes","operators","operator","builtinFunctions","builtinConstants","keywordMapper","createKeywordMapper","keyword","stringEscapeRe","replace","val","type","comment","bqstring","embedRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","openBracePos","findMatchingBracket","indent","$getIndent","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","exec","TextMode","Mode","CStyleFoldMode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","$id"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-odin.js"],"sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\nDocCommentHighlightRules.getTagRule = function (start) {\n    return {\n        token: \"comment.doc.tag.storage.type\",\n        regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\nDocCommentHighlightRules.getStartRule = function (start) {\n    return {\n        token: \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next: start\n    };\n};\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token: \"comment.doc\", // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: start\n    };\n};\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/odin_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar oop = require(\"../lib/oop\");\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar OdinHighlightRules = function () {\n    var keywords = \"using|transmute|cast|distinct|opaque|where|\" +\n        \"struct|enum|union|bit_field|bit_set|\" +\n        \"if|when|else|do|switch|case|break|fallthrough|\" +\n        \"size_of|offset_of|type_info_if|typeid_of|type_of|align_of|\" +\n        \"or_return|or_else|inline|no_inline|\" +\n        \"import|package|foreign|defer|auto_cast|map|matrix|proc|\" +\n        \"for|continue|not_in|in\";\n    var cartesian = function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return a\n            .reduce(function (a, b) { return a.flatMap(function (d) { return b.map(function (e) { return [d, e].flat(); }); }); })\n            .map(function (parts) { return parts.join(\"\"); });\n    };\n    var builtinTypes = __spreadArray(__spreadArray(__spreadArray(__spreadArray([\n        \"int\",\n        \"uint\",\n        \"uintptr\",\n        \"typeid\",\n        \"rawptr\",\n        \"string\",\n        \"cstring\",\n        \"i8\",\n        \"u8\",\n        \"any\",\n        \"byte\",\n        \"rune\",\n        \"bool\",\n        \"b8\",\n        \"b16\",\n        \"b32\",\n        \"b64\"\n    ], __read(cartesian([\"i\", \"u\"], [\"16\", \"32\", \"64\", \"128\"], [\"\", \"le\", \"be\"])), false), __read(cartesian([\"f\"], [\"16\", \"32\", \"64\"], [\"\", \"le\", \"be\"])), false), __read(cartesian([\"complex\"], [\"32\", \"64\", \"128\"])), false), __read(cartesian([\"quaternion\"], [\"64\", \"128\", \"256\"])), false).join(\"|\");\n    var operators = [\n        \"\\\\*\",\n        \"/\",\n        \"%\",\n        \"%%\",\n        \"<<\",\n        \">>\",\n        \"&\",\n        \"&~\",\n        \"\\\\+\",\n        \"\\\\-\",\n        \"~\",\n        \"\\\\|\",\n        \">\",\n        \"<\",\n        \"<=\",\n        \">=\",\n        \"==\",\n        \"!=\"\n    ]\n        .concat(\":\")\n        .map(function (operator) { return operator + \"=\"; })\n        .concat(\"=\", \":=\", \"::\", \"->\", \"\\\\^\", \"&\", \":\")\n        .join(\"|\");\n    var builtinFunctions = \"new|cap|copy|panic|len|make|delete|append|free\";\n    var builtinConstants = \"nil|true|false\";\n    var keywordMapper = this.createKeywordMapper({\n        keyword: keywords,\n        \"constant.language\": builtinConstants,\n        \"support.function\": builtinFunctions,\n        \"support.type\": builtinTypes\n    }, \"\");\n    var stringEscapeRe = \"\\\\\\\\(?:[0-7]{3}|x\\\\h{2}|u{4}|U\\\\h{6}|[abfnrtv'\\\"\\\\\\\\])\".replace(/\\\\h/g, \"[a-fA-F\\\\d]\");\n    this.$rules = {\n        start: [\n            {\n                token: \"comment\",\n                regex: /\\/\\/.*$/\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token: \"comment.start\", // multi line comment\n                regex: \"\\\\/\\\\*\",\n                next: \"comment\"\n            },\n            {\n                token: \"string\", // single line\n                regex: /\"(?:[^\"\\\\]|\\\\.)*?\"/\n            },\n            {\n                token: \"string\", // raw\n                regex: \"`\",\n                next: \"bqstring\"\n            },\n            {\n                token: \"support.constant\",\n                regex: /#[a-z_]+/\n            },\n            {\n                token: \"constant.numeric\", // rune\n                regex: \"'(?:[^\\\\'\\uD800-\\uDBFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\" +\n                    stringEscapeRe.replace('\"', \"\") +\n                    \")'\"\n            },\n            {\n                token: \"constant.numeric\", // hex\n                regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n            },\n            {\n                token: \"constant.numeric\", // float\n                regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            },\n            {\n                token: [\n                    \"entity.name.function\",\n                    \"text\",\n                    \"keyword.operator\",\n                    \"text\",\n                    \"keyword\"\n                ],\n                regex: \"([a-zA-Z_$][a-zA-Z0-9_$]*)(\\\\s+)(::)(\\\\s+)(proc)\\\\b\"\n            },\n            {\n                token: function (val) {\n                    if (val[val.length - 1] == \"(\") {\n                        return [\n                            {\n                                type: keywordMapper(val.slice(0, -1)) || \"support.function\",\n                                value: val.slice(0, -1)\n                            },\n                            {\n                                type: \"paren.lparen\",\n                                value: val.slice(-1)\n                            }\n                        ];\n                    }\n                    return keywordMapper(val) || \"identifier\";\n                },\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\\\\(?\"\n            },\n            {\n                token: \"keyword.operator\",\n                regex: operators\n            },\n            {\n                token: \"punctuation.operator\",\n                regex: \"\\\\?|\\\\,|\\\\;|\\\\.\"\n            },\n            {\n                token: \"paren.lparen\",\n                regex: \"[[({]\"\n            },\n            {\n                token: \"paren.rparen\",\n                regex: \"[\\\\])}]\"\n            },\n            {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }\n        ],\n        comment: [\n            {\n                token: \"comment.end\",\n                regex: \"\\\\*\\\\/\",\n                next: \"start\"\n            },\n            {\n                defaultToken: \"comment\"\n            }\n        ],\n        bqstring: [\n            {\n                token: \"string\",\n                regex: \"`\",\n                next: \"start\"\n            },\n            {\n                defaultToken: \"string\"\n            }\n        ]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [\n        DocCommentHighlightRules.getEndRule(\"start\")\n    ]);\n};\noop.inherits(OdinHighlightRules, TextHighlightRules);\nexports.OdinHighlightRules = OdinHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/odin\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/odin_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/cstyle\"], function(require, exports, module){var oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar OdinHighlightRules = require(\"./odin_highlight_rules\").OdinHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = OdinHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n        return indent;\n    }; //end getNextLineIndent\n    this.checkOutdent = function (state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/odin\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/odin\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"AAAAA,GAAG,CAACC,MAAM,CAAC,sCAAsC,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,aAAa,EAAC,+BAA+B,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EAC/K,IAAIC,GAAG,GAAGH,OAAO,CAAC,YAAY,CAAC;EAC/B,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,wBAAwB,CAAC,CAACI,kBAAkB;EAC7E,IAAIC,wBAAwB,GAAG,SAAAA,CAAA,EAAY;IACvC,IAAI,CAACC,MAAM,GAAG;MACV,OAAO,EAAE,CACL;QACIC,KAAK,EAAE,iBAAiB;QACxBC,KAAK,EAAE;MACX,CAAC,EAAEH,wBAAwB,CAACI,UAAU,CAAC,CAAC,EAAE;QACtCC,YAAY,EAAE,kBAAkB;QAChCC,eAAe,EAAE;MACrB,CAAC;IAET,CAAC;EACL,CAAC;EACDR,GAAG,CAACS,QAAQ,CAACP,wBAAwB,EAAED,kBAAkB,CAAC;EAC1DC,wBAAwB,CAACI,UAAU,GAAG,UAAUI,KAAK,EAAE;IACnD,OAAO;MACHN,KAAK,EAAE,8BAA8B;MACrCC,KAAK,EAAE;IACX,CAAC;EACL,CAAC;EACDH,wBAAwB,CAACS,YAAY,GAAG,UAAUD,KAAK,EAAE;IACrD,OAAO;MACHN,KAAK,EAAE,aAAa;MAAE;MACtBC,KAAK,EAAE,cAAc;MACrBO,IAAI,EAAEF;IACV,CAAC;EACL,CAAC;EACDR,wBAAwB,CAACW,UAAU,GAAG,UAAUH,KAAK,EAAE;IACnD,OAAO;MACHN,KAAK,EAAE,aAAa;MAAE;MACtBC,KAAK,EAAE,QAAQ;MACfO,IAAI,EAAEF;IACV,CAAC;EACL,CAAC;EACDZ,OAAO,CAACI,wBAAwB,GAAGA,wBAAwB;AAE3D,CAAC,CAAC;AAEFP,GAAG,CAACC,MAAM,CAAC,+BAA+B,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,aAAa,EAAC,sCAAsC,EAAC,+BAA+B,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,IAAIe,MAAM,GAAI,IAAI,IAAI,IAAI,CAACA,MAAM,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;IACrP,IAAIC,CAAC,GAAG,OAAOC,MAAM,KAAK,UAAU,IAAIH,CAAC,CAACG,MAAM,CAACC,QAAQ,CAAC;IAC1D,IAAI,CAACF,CAAC,EAAE,OAAOF,CAAC;IAChB,IAAIK,CAAC,GAAGH,CAAC,CAACI,IAAI,CAACN,CAAC,CAAC;MAAEO,CAAC;MAAEC,EAAE,GAAG,EAAE;MAAEC,CAAC;IAChC,IAAI;MACA,OAAO,CAACR,CAAC,KAAK,KAAK,CAAC,IAAIA,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAACM,CAAC,GAAGF,CAAC,CAACR,IAAI,CAAC,CAAC,EAAEa,IAAI,EAAEF,EAAE,CAACG,IAAI,CAACJ,CAAC,CAACK,KAAK,CAAC;IAC9E,CAAC,CACD,OAAOC,KAAK,EAAE;MAAEJ,CAAC,GAAG;QAAEI,KAAK,EAAEA;MAAM,CAAC;IAAE,CAAC,SAC/B;MACJ,IAAI;QACA,IAAIN,CAAC,IAAI,CAACA,CAAC,CAACG,IAAI,KAAKR,CAAC,GAAGG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAEH,CAAC,CAACI,IAAI,CAACD,CAAC,CAAC;MACpD,CAAC,SACO;QAAE,IAAII,CAAC,EAAE,MAAMA,CAAC,CAACI,KAAK;MAAE;IACpC;IACA,OAAOL,EAAE;EACb,CAAC;EACD,IAAIM,aAAa,GAAI,IAAI,IAAI,IAAI,CAACA,aAAa,IAAK,UAAUC,EAAE,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAC1E,IAAIA,IAAI,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEe,CAAC,GAAGJ,IAAI,CAACG,MAAM,EAAEX,EAAE,EAAEH,CAAC,GAAGe,CAAC,EAAEf,CAAC,EAAE,EAAE;MACjF,IAAIG,EAAE,IAAI,EAAEH,CAAC,IAAIW,IAAI,CAAC,EAAE;QACpB,IAAI,CAACR,EAAE,EAAEA,EAAE,GAAGa,KAAK,CAACC,SAAS,CAACC,KAAK,CAACjB,IAAI,CAACU,IAAI,EAAE,CAAC,EAAEX,CAAC,CAAC;QACpDG,EAAE,CAACH,CAAC,CAAC,GAAGW,IAAI,CAACX,CAAC,CAAC;MACnB;IACJ;IACA,OAAOU,EAAE,CAACS,MAAM,CAAChB,EAAE,IAAIa,KAAK,CAACC,SAAS,CAACC,KAAK,CAACjB,IAAI,CAACU,IAAI,CAAC,CAAC;EAC5D,CAAC;EACD,IAAI/B,GAAG,GAAGH,OAAO,CAAC,YAAY,CAAC;EAC/B,IAAIK,wBAAwB,GAAGL,OAAO,CAAC,+BAA+B,CAAC,CAACK,wBAAwB;EAChG,IAAID,kBAAkB,GAAGJ,OAAO,CAAC,wBAAwB,CAAC,CAACI,kBAAkB;EAC7E,IAAIuC,kBAAkB,GAAG,SAAAA,CAAA,EAAY;IACjC,IAAIC,QAAQ,GAAG,6CAA6C,GACxD,sCAAsC,GACtC,gDAAgD,GAChD,4DAA4D,GAC5D,qCAAqC,GACrC,yDAAyD,GACzD,wBAAwB;IAC5B,IAAIC,SAAS,GAAG,SAAAA,CAAA,EAAY;MACxB,IAAIC,CAAC,GAAG,EAAE;MACV,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGX,SAAS,CAACC,MAAM,EAAEU,EAAE,EAAE,EAAE;QAC1CD,CAAC,CAACC,EAAE,CAAC,GAAGX,SAAS,CAACW,EAAE,CAAC;MACzB;MACA,OAAOD,CAAC,CACHE,MAAM,CAAC,UAAUF,CAAC,EAAEG,CAAC,EAAE;QAAE,OAAOH,CAAC,CAACI,OAAO,CAAC,UAAUC,CAAC,EAAE;UAAE,OAAOF,CAAC,CAACG,GAAG,CAAC,UAAUzB,CAAC,EAAE;YAAE,OAAO,CAACwB,CAAC,EAAExB,CAAC,CAAC,CAAC0B,IAAI,CAAC,CAAC;UAAE,CAAC,CAAC;QAAE,CAAC,CAAC;MAAE,CAAC,CAAC,CACrHD,GAAG,CAAC,UAAUE,KAAK,EAAE;QAAE,OAAOA,KAAK,CAACC,IAAI,CAAC,EAAE,CAAC;MAAE,CAAC,CAAC;IACzD,CAAC;IACD,IAAIC,YAAY,GAAGxB,aAAa,CAACA,aAAa,CAACA,aAAa,CAACA,aAAa,CAAC,CACvE,KAAK,EACL,MAAM,EACN,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,MAAM,EACN,MAAM,EACN,MAAM,EACN,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,CACR,EAAEf,MAAM,CAAC4B,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE5B,MAAM,CAAC4B,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE5B,MAAM,CAAC4B,SAAS,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE5B,MAAM,CAAC4B,SAAS,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAACU,IAAI,CAAC,GAAG,CAAC;IACrS,IAAIE,SAAS,GAAG,CACZ,KAAK,EACL,GAAG,EACH,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,KAAK,EACL,KAAK,EACL,GAAG,EACH,KAAK,EACL,GAAG,EACH,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,CACP,CACIf,MAAM,CAAC,GAAG,CAAC,CACXU,GAAG,CAAC,UAAUM,QAAQ,EAAE;MAAE,OAAOA,QAAQ,GAAG,GAAG;IAAE,CAAC,CAAC,CACnDhB,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAC9Ca,IAAI,CAAC,GAAG,CAAC;IACd,IAAII,gBAAgB,GAAG,gDAAgD;IACvE,IAAIC,gBAAgB,GAAG,gBAAgB;IACvC,IAAIC,aAAa,GAAG,IAAI,CAACC,mBAAmB,CAAC;MACzCC,OAAO,EAAEnB,QAAQ;MACjB,mBAAmB,EAAEgB,gBAAgB;MACrC,kBAAkB,EAAED,gBAAgB;MACpC,cAAc,EAAEH;IACpB,CAAC,EAAE,EAAE,CAAC;IACN,IAAIQ,cAAc,GAAG,wDAAwD,CAACC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC;IAC5G,IAAI,CAAC3D,MAAM,GAAG;MACVO,KAAK,EAAE,CACH;QACIN,KAAK,EAAE,SAAS;QAChBC,KAAK,EAAE;MACX,CAAC,EACDH,wBAAwB,CAACS,YAAY,CAAC,WAAW,CAAC,EAClD;QACIP,KAAK,EAAE,eAAe;QAAE;QACxBC,KAAK,EAAE,QAAQ;QACfO,IAAI,EAAE;MACV,CAAC,EACD;QACIR,KAAK,EAAE,QAAQ;QAAE;QACjBC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,QAAQ;QAAE;QACjBC,KAAK,EAAE,GAAG;QACVO,IAAI,EAAE;MACV,CAAC,EACD;QACIR,KAAK,EAAE,kBAAkB;QACzBC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,kBAAkB;QAAE;QAC3BC,KAAK,EAAE,yDAAyD,GAC5DwD,cAAc,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,GAC/B;MACR,CAAC,EACD;QACI1D,KAAK,EAAE,kBAAkB;QAAE;QAC3BC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,kBAAkB;QAAE;QAC3BC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,CACH,sBAAsB,EACtB,MAAM,EACN,kBAAkB,EAClB,MAAM,EACN,SAAS,CACZ;QACDC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,SAAAA,CAAU2D,GAAG,EAAE;UAClB,IAAIA,GAAG,CAACA,GAAG,CAAC7B,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE;YAC5B,OAAO,CACH;cACI8B,IAAI,EAAEN,aAAa,CAACK,GAAG,CAACzB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,kBAAkB;cAC3DX,KAAK,EAAEoC,GAAG,CAACzB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;YAC1B,CAAC,EACD;cACI0B,IAAI,EAAE,cAAc;cACpBrC,KAAK,EAAEoC,GAAG,CAACzB,KAAK,CAAC,CAAC,CAAC;YACvB,CAAC,CACJ;UACL;UACA,OAAOoB,aAAa,CAACK,GAAG,CAAC,IAAI,YAAY;QAC7C,CAAC;QACD1D,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,kBAAkB;QACzBC,KAAK,EAAEiD;MACX,CAAC,EACD;QACIlD,KAAK,EAAE,sBAAsB;QAC7BC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,MAAM;QACbC,KAAK,EAAE;MACX,CAAC,CACJ;MACD4D,OAAO,EAAE,CACL;QACI7D,KAAK,EAAE,aAAa;QACpBC,KAAK,EAAE,QAAQ;QACfO,IAAI,EAAE;MACV,CAAC,EACD;QACIL,YAAY,EAAE;MAClB,CAAC,CACJ;MACD2D,QAAQ,EAAE,CACN;QACI9D,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE,GAAG;QACVO,IAAI,EAAE;MACV,CAAC,EACD;QACIL,YAAY,EAAE;MAClB,CAAC;IAET,CAAC;IACD,IAAI,CAAC4D,UAAU,CAACjE,wBAAwB,EAAE,MAAM,EAAE,CAC9CA,wBAAwB,CAACW,UAAU,CAAC,OAAO,CAAC,CAC/C,CAAC;EACN,CAAC;EACDb,GAAG,CAACS,QAAQ,CAAC+B,kBAAkB,EAAEvC,kBAAkB,CAAC;EACpDH,OAAO,CAAC0C,kBAAkB,GAAGA,kBAAkB;AAE/C,CAAC,CAAC;AAEF7C,GAAG,CAACC,MAAM,CAAC,iCAAiC,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,WAAW,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EACxI,IAAIqE,KAAK,GAAGvE,OAAO,CAAC,UAAU,CAAC,CAACuE,KAAK;EACrC,IAAIC,oBAAoB,GAAG,SAAAA,CAAA,EAAY,CAAE,CAAC;EAC1C,CAAC,YAAY;IACT,IAAI,CAACC,YAAY,GAAG,UAAUC,IAAI,EAAEC,KAAK,EAAE;MACvC,IAAI,CAAC,OAAO,CAACC,IAAI,CAACF,IAAI,CAAC,EACnB,OAAO,KAAK;MAChB,OAAO,QAAQ,CAACE,IAAI,CAACD,KAAK,CAAC;IAC/B,CAAC;IACD,IAAI,CAACE,WAAW,GAAG,UAAUC,GAAG,EAAEC,GAAG,EAAE;MACnC,IAAIL,IAAI,GAAGI,GAAG,CAACE,OAAO,CAACD,GAAG,CAAC;MAC3B,IAAIE,KAAK,GAAGP,IAAI,CAACO,KAAK,CAAC,UAAU,CAAC;MAClC,IAAI,CAACA,KAAK,EACN,OAAO,CAAC;MACZ,IAAIC,MAAM,GAAGD,KAAK,CAAC,CAAC,CAAC,CAAC5C,MAAM;MAC5B,IAAI8C,YAAY,GAAGL,GAAG,CAACM,mBAAmB,CAAC;QAAEL,GAAG,EAAEA,GAAG;QAAEG,MAAM,EAAEA;MAAO,CAAC,CAAC;MACxE,IAAI,CAACC,YAAY,IAAIA,YAAY,CAACJ,GAAG,IAAIA,GAAG,EACxC,OAAO,CAAC;MACZ,IAAIM,MAAM,GAAG,IAAI,CAACC,UAAU,CAACR,GAAG,CAACE,OAAO,CAACG,YAAY,CAACJ,GAAG,CAAC,CAAC;MAC3DD,GAAG,CAACb,OAAO,CAAC,IAAIM,KAAK,CAACQ,GAAG,EAAE,CAAC,EAAEA,GAAG,EAAEG,MAAM,GAAG,CAAC,CAAC,EAAEG,MAAM,CAAC;IAC3D,CAAC;IACD,IAAI,CAACC,UAAU,GAAG,UAAUZ,IAAI,EAAE;MAC9B,OAAOA,IAAI,CAACO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;EACL,CAAC,EAAEzD,IAAI,CAACgD,oBAAoB,CAAChC,SAAS,CAAC;EACvCvC,OAAO,CAACuE,oBAAoB,GAAGA,oBAAoB;AAEnD,CAAC,CAAC;AAEF1E,GAAG,CAACC,MAAM,CAAC,yBAAyB,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,aAAa,EAAC,WAAW,EAAC,4BAA4B,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EAC3K,IAAIC,GAAG,GAAGH,OAAO,CAAC,eAAe,CAAC;EAClC,IAAIuE,KAAK,GAAGvE,OAAO,CAAC,aAAa,CAAC,CAACuE,KAAK;EACxC,IAAIgB,YAAY,GAAGvF,OAAO,CAAC,aAAa,CAAC,CAACwF,QAAQ;EAClD,IAAIA,QAAQ,GAAGvF,OAAO,CAACuF,QAAQ,GAAG,UAAUC,YAAY,EAAE;IACtD,IAAIA,YAAY,EAAE;MACd,IAAI,CAACC,kBAAkB,GAAG,IAAIC,MAAM,CAAC,IAAI,CAACD,kBAAkB,CAACE,MAAM,CAAC3B,OAAO,CAAC,WAAW,EAAE,GAAG,GAAGwB,YAAY,CAAC5E,KAAK,CAAC,CAAC;MACnH,IAAI,CAACgF,iBAAiB,GAAG,IAAIF,MAAM,CAAC,IAAI,CAACE,iBAAiB,CAACD,MAAM,CAAC3B,OAAO,CAAC,WAAW,EAAE,GAAG,GAAGwB,YAAY,CAACK,GAAG,CAAC,CAAC;IACnH;EACJ,CAAC;EACD3F,GAAG,CAACS,QAAQ,CAAC4E,QAAQ,EAAED,YAAY,CAAC;EACpC,CAAC,YAAY;IACT,IAAI,CAACG,kBAAkB,GAAG,kCAAkC;IAC5D,IAAI,CAACG,iBAAiB,GAAG,sCAAsC;IAC/D,IAAI,CAACE,wBAAwB,GAAG,sBAAsB;IACtD,IAAI,CAACC,wBAAwB,GAAG,0BAA0B;IAC1D,IAAI,CAACC,aAAa,GAAG,2BAA2B;IAChD,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACC,aAAa;IAC5C,IAAI,CAACA,aAAa,GAAG,UAAUC,OAAO,EAAEC,SAAS,EAAEtB,GAAG,EAAE;MACpD,IAAIL,IAAI,GAAG0B,OAAO,CAACpB,OAAO,CAACD,GAAG,CAAC;MAC/B,IAAI,IAAI,CAACgB,wBAAwB,CAACnB,IAAI,CAACF,IAAI,CAAC,EAAE;QAC1C,IAAI,CAAC,IAAI,CAACuB,aAAa,CAACrB,IAAI,CAACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAACsB,wBAAwB,CAACpB,IAAI,CAACF,IAAI,CAAC,EAC3E,OAAO,EAAE;MACjB;MACA,IAAI4B,EAAE,GAAG,IAAI,CAACJ,kBAAkB,CAACE,OAAO,EAAEC,SAAS,EAAEtB,GAAG,CAAC;MACzD,IAAI,CAACuB,EAAE,IAAI,IAAI,CAACL,aAAa,CAACrB,IAAI,CAACF,IAAI,CAAC,EACpC,OAAO,OAAO,CAAC,CAAC;MACpB,OAAO4B,EAAE;IACb,CAAC;IACD,IAAI,CAACC,kBAAkB,GAAG,UAAUH,OAAO,EAAEC,SAAS,EAAEtB,GAAG,EAAEyB,cAAc,EAAE;MACzE,IAAI9B,IAAI,GAAG0B,OAAO,CAACpB,OAAO,CAACD,GAAG,CAAC;MAC/B,IAAI,IAAI,CAACkB,aAAa,CAACrB,IAAI,CAACF,IAAI,CAAC,EAC7B,OAAO,IAAI,CAAC+B,qBAAqB,CAACL,OAAO,EAAE1B,IAAI,EAAEK,GAAG,CAAC;MACzD,IAAIE,KAAK,GAAGP,IAAI,CAACO,KAAK,CAAC,IAAI,CAACS,kBAAkB,CAAC;MAC/C,IAAIT,KAAK,EAAE;QACP,IAAI1D,CAAC,GAAG0D,KAAK,CAACyB,KAAK;QACnB,IAAIzB,KAAK,CAAC,CAAC,CAAC,EACR,OAAO,IAAI,CAAC0B,mBAAmB,CAACP,OAAO,EAAEnB,KAAK,CAAC,CAAC,CAAC,EAAEF,GAAG,EAAExD,CAAC,CAAC;QAC9D,IAAIqF,KAAK,GAAGR,OAAO,CAACS,mBAAmB,CAAC9B,GAAG,EAAExD,CAAC,GAAG0D,KAAK,CAAC,CAAC,CAAC,CAAC5C,MAAM,EAAE,CAAC,CAAC;QACpE,IAAIuE,KAAK,IAAI,CAACA,KAAK,CAACE,WAAW,CAAC,CAAC,EAAE;UAC/B,IAAIN,cAAc,EAAE;YAChBI,KAAK,GAAG,IAAI,CAACG,eAAe,CAACX,OAAO,EAAErB,GAAG,CAAC;UAC9C,CAAC,MACI,IAAIsB,SAAS,IAAI,KAAK,EACvBO,KAAK,GAAG,IAAI;QACpB;QACA,OAAOA,KAAK;MAChB;MACA,IAAIP,SAAS,KAAK,WAAW,EACzB;MACJ,IAAIpB,KAAK,GAAGP,IAAI,CAACO,KAAK,CAAC,IAAI,CAACY,iBAAiB,CAAC;MAC9C,IAAIZ,KAAK,EAAE;QACP,IAAI1D,CAAC,GAAG0D,KAAK,CAACyB,KAAK,GAAGzB,KAAK,CAAC,CAAC,CAAC,CAAC5C,MAAM;QACrC,IAAI4C,KAAK,CAAC,CAAC,CAAC,EACR,OAAO,IAAI,CAAC+B,mBAAmB,CAACZ,OAAO,EAAEnB,KAAK,CAAC,CAAC,CAAC,EAAEF,GAAG,EAAExD,CAAC,CAAC;QAC9D,OAAO6E,OAAO,CAACS,mBAAmB,CAAC9B,GAAG,EAAExD,CAAC,EAAE,CAAC,CAAC,CAAC;MAClD;IACJ,CAAC;IACD,IAAI,CAACwF,eAAe,GAAG,UAAUX,OAAO,EAAErB,GAAG,EAAE;MAC3C,IAAIL,IAAI,GAAG0B,OAAO,CAACpB,OAAO,CAACD,GAAG,CAAC;MAC/B,IAAIkC,WAAW,GAAGvC,IAAI,CAACwC,MAAM,CAAC,IAAI,CAAC;MACnC,IAAIC,QAAQ,GAAGpC,GAAG;MAClB,IAAIqC,WAAW,GAAG1C,IAAI,CAACrC,MAAM;MAC7B0C,GAAG,GAAGA,GAAG,GAAG,CAAC;MACb,IAAIsC,MAAM,GAAGtC,GAAG;MAChB,IAAIuC,MAAM,GAAGlB,OAAO,CAACmB,SAAS,CAAC,CAAC;MAChC,OAAO,EAAExC,GAAG,GAAGuC,MAAM,EAAE;QACnB5C,IAAI,GAAG0B,OAAO,CAACpB,OAAO,CAACD,GAAG,CAAC;QAC3B,IAAIM,MAAM,GAAGX,IAAI,CAACwC,MAAM,CAAC,IAAI,CAAC;QAC9B,IAAI7B,MAAM,KAAK,CAAC,CAAC,EACb;QACJ,IAAI4B,WAAW,GAAG5B,MAAM,EACpB;QACJ,IAAImC,QAAQ,GAAG,IAAI,CAACjB,kBAAkB,CAACH,OAAO,EAAE,KAAK,EAAErB,GAAG,CAAC;QAC3D,IAAIyC,QAAQ,EAAE;UACV,IAAIA,QAAQ,CAAC3G,KAAK,CAACkE,GAAG,IAAIoC,QAAQ,EAAE;YAChC;UACJ,CAAC,MACI,IAAIK,QAAQ,CAACV,WAAW,CAAC,CAAC,EAAE;YAC7B/B,GAAG,GAAGyC,QAAQ,CAAC1B,GAAG,CAACf,GAAG;UAC1B,CAAC,MACI,IAAIkC,WAAW,IAAI5B,MAAM,EAAE;YAC5B;UACJ;QACJ;QACAgC,MAAM,GAAGtC,GAAG;MAChB;MACA,OAAO,IAAIR,KAAK,CAAC4C,QAAQ,EAAEC,WAAW,EAAEC,MAAM,EAAEjB,OAAO,CAACpB,OAAO,CAACqC,MAAM,CAAC,CAAChF,MAAM,CAAC;IACnF,CAAC;IACD,IAAI,CAACoE,qBAAqB,GAAG,UAAUL,OAAO,EAAE1B,IAAI,EAAEK,GAAG,EAAE;MACvD,IAAIqC,WAAW,GAAG1C,IAAI,CAACwC,MAAM,CAAC,MAAM,CAAC;MACrC,IAAII,MAAM,GAAGlB,OAAO,CAACmB,SAAS,CAAC,CAAC;MAChC,IAAIJ,QAAQ,GAAGpC,GAAG;MAClB,IAAI0C,EAAE,GAAG,sCAAsC;MAC/C,IAAIC,KAAK,GAAG,CAAC;MACb,OAAO,EAAE3C,GAAG,GAAGuC,MAAM,EAAE;QACnB5C,IAAI,GAAG0B,OAAO,CAACpB,OAAO,CAACD,GAAG,CAAC;QAC3B,IAAI3D,CAAC,GAAGqG,EAAE,CAACE,IAAI,CAACjD,IAAI,CAAC;QACrB,IAAI,CAACtD,CAAC,EACF;QACJ,IAAIA,CAAC,CAAC,CAAC,CAAC,EACJsG,KAAK,EAAE,CAAC,KAERA,KAAK,EAAE;QACX,IAAI,CAACA,KAAK,EACN;MACR;MACA,IAAIL,MAAM,GAAGtC,GAAG;MAChB,IAAIsC,MAAM,GAAGF,QAAQ,EAAE;QACnB,OAAO,IAAI5C,KAAK,CAAC4C,QAAQ,EAAEC,WAAW,EAAEC,MAAM,EAAE3C,IAAI,CAACrC,MAAM,CAAC;MAChE;IACJ,CAAC;EACL,CAAC,EAAEb,IAAI,CAACgE,QAAQ,CAAChD,SAAS,CAAC;AAE3B,CAAC,CAAC;AAEF1C,GAAG,CAACC,MAAM,CAAC,eAAe,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,aAAa,EAAC,eAAe,EAAC,+BAA+B,EAAC,iCAAiC,EAAC,yBAAyB,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,IAAIC,GAAG,GAAGH,OAAO,CAAC,YAAY,CAAC;EACvP,IAAI4H,QAAQ,GAAG5H,OAAO,CAAC,QAAQ,CAAC,CAAC6H,IAAI;EACrC,IAAIlF,kBAAkB,GAAG3C,OAAO,CAAC,wBAAwB,CAAC,CAAC2C,kBAAkB;EAC7E,IAAI6B,oBAAoB,GAAGxE,OAAO,CAAC,0BAA0B,CAAC,CAACwE,oBAAoB;EACnF,IAAIsD,cAAc,GAAG9H,OAAO,CAAC,kBAAkB,CAAC,CAACwF,QAAQ;EACzD,IAAIqC,IAAI,GAAG,SAAAA,CAAA,EAAY;IACnB,IAAI,CAACE,cAAc,GAAGpF,kBAAkB;IACxC,IAAI,CAACqF,QAAQ,GAAG,IAAIxD,oBAAoB,CAAC,CAAC;IAC1C,IAAI,CAACyD,YAAY,GAAG,IAAIH,cAAc,CAAC,CAAC;IACxC,IAAI,CAACI,UAAU,GAAG,IAAI,CAACC,iBAAiB;EAC5C,CAAC;EACDhI,GAAG,CAACS,QAAQ,CAACiH,IAAI,EAAED,QAAQ,CAAC;EAC5B,CAAC,YAAY;IACT,IAAI,CAACQ,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,YAAY,GAAG;MAAExH,KAAK,EAAE,IAAI;MAAEiF,GAAG,EAAE;IAAK,CAAC;IAC9C,IAAI,CAACwC,iBAAiB,GAAG,UAAUC,KAAK,EAAE7D,IAAI,EAAE8D,GAAG,EAAE;MACjD,IAAInD,MAAM,GAAG,IAAI,CAACC,UAAU,CAACZ,IAAI,CAAC;MAClC,IAAI+D,aAAa,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC,CAACC,aAAa,CAACjE,IAAI,EAAE6D,KAAK,CAAC;MAClE,IAAIK,MAAM,GAAGH,aAAa,CAACG,MAAM;MACjC,IAAIA,MAAM,CAACvG,MAAM,IAAIuG,MAAM,CAACA,MAAM,CAACvG,MAAM,GAAG,CAAC,CAAC,CAAC8B,IAAI,IAAI,SAAS,EAAE;QAC9D,OAAOkB,MAAM;MACjB;MACA,IAAIkD,KAAK,IAAI,OAAO,EAAE;QAClB,IAAItD,KAAK,GAAGP,IAAI,CAACO,KAAK,CAAC,kBAAkB,CAAC;QAC1C,IAAIA,KAAK,EAAE;UACPI,MAAM,IAAImD,GAAG;QACjB;MACJ;MACA,OAAOnD,MAAM;IACjB,CAAC,CAAC,CAAC;IACH,IAAI,CAACZ,YAAY,GAAG,UAAU8D,KAAK,EAAE7D,IAAI,EAAEC,KAAK,EAAE;MAC9C,OAAO,IAAI,CAACqD,QAAQ,CAACvD,YAAY,CAACC,IAAI,EAAEC,KAAK,CAAC;IAClD,CAAC;IACD,IAAI,CAACE,WAAW,GAAG,UAAU0D,KAAK,EAAEzD,GAAG,EAAEC,GAAG,EAAE;MAC1C,IAAI,CAACiD,QAAQ,CAACnD,WAAW,CAACC,GAAG,EAAEC,GAAG,CAAC;IACvC,CAAC;IACD,IAAI,CAAC8D,GAAG,GAAG,eAAe;EAC9B,CAAC,EAAErH,IAAI,CAACqG,IAAI,CAACrF,SAAS,CAAC;EACvBvC,OAAO,CAAC4H,IAAI,GAAGA,IAAI;AAEnB,CAAC,CAAC;AAAiB,CAAC,YAAW;EACX/H,GAAG,CAACE,OAAO,CAAC,CAAC,eAAe,CAAC,EAAE,UAASoB,CAAC,EAAE;IACvC,IAAI,OAAOlB,MAAM,IAAI,QAAQ,IAAI,OAAOD,OAAO,IAAI,QAAQ,IAAIC,MAAM,EAAE;MACnEA,MAAM,CAACD,OAAO,GAAGmB,CAAC;IACtB;EACJ,CAAC,CAAC;AACN,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}