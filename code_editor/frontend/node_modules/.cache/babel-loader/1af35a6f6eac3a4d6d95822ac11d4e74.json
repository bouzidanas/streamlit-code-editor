{"ast":null,"code":"ace.define(\"ace/mode/prolog_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from https://raw.github.com/stephenroller/prolog-tmbundle/master/Syntaxes/Prolog.tmLanguage (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var PrologHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: '#comment'\n      }, {\n        include: '#basic_fact'\n      }, {\n        include: '#rule'\n      }, {\n        include: '#directive'\n      }, {\n        include: '#fact'\n      }],\n      '#atom': [{\n        token: 'constant.other.atom.prolog',\n        regex: '\\\\b[a-z][a-zA-Z0-9_]*\\\\b'\n      }, {\n        token: 'constant.numeric.prolog',\n        regex: '-?\\\\d+(?:\\\\.\\\\d+)?'\n      }, {\n        include: '#string'\n      }],\n      '#basic_elem': [{\n        include: '#comment'\n      }, {\n        include: '#statement'\n      }, {\n        include: '#constants'\n      }, {\n        include: '#operators'\n      }, {\n        include: '#builtins'\n      }, {\n        include: '#list'\n      }, {\n        include: '#atom'\n      }, {\n        include: '#variable'\n      }],\n      '#basic_fact': [{\n        token: ['entity.name.function.fact.basic.prolog', 'punctuation.end.fact.basic.prolog'],\n        regex: '([a-z]\\\\w*)(\\\\.)'\n      }],\n      '#builtins': [{\n        token: 'support.function.builtin.prolog',\n        regex: '\\\\b(?:abolish|abort|ancestors|arg|ascii|assert[az]|atom(?:ic)?|body|char|close|conc|concat|consult|define|definition|dynamic|dump|fail|file|free|free_proc|functor|getc|goal|halt|head|head|integer|length|listing|match_args|member|next_clause|nl|nonvar|nth|number|cvars|nvars|offset|op|print?|prompt|putc|quoted|ratom|read|redefine|rename|retract(?:all)?|see|seeing|seen|skip|spy|statistics|system|tab|tell|telling|term|time|told|univ|unlink_clause|unspy_predicate|var|write)\\\\b'\n      }],\n      '#comment': [{\n        token: ['punctuation.definition.comment.prolog', 'comment.line.percentage.prolog'],\n        regex: '(%)(.*$)'\n      }, {\n        token: 'punctuation.definition.comment.prolog',\n        regex: '/\\\\*',\n        push: [{\n          token: 'punctuation.definition.comment.prolog',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.prolog'\n        }]\n      }],\n      '#constants': [{\n        token: 'constant.language.prolog',\n        regex: '\\\\b(?:true|false|yes|no)\\\\b'\n      }],\n      '#directive': [{\n        token: 'keyword.operator.directive.prolog',\n        regex: ':-',\n        push: [{\n          token: 'meta.directive.prolog',\n          regex: '\\\\.',\n          next: 'pop'\n        }, {\n          include: '#comment'\n        }, {\n          include: '#statement'\n        }, {\n          defaultToken: 'meta.directive.prolog'\n        }]\n      }],\n      '#expr': [{\n        include: '#comments'\n      }, {\n        token: 'meta.expression.prolog',\n        regex: '\\\\(',\n        push: [{\n          token: 'meta.expression.prolog',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#expr'\n        }, {\n          defaultToken: 'meta.expression.prolog'\n        }]\n      }, {\n        token: 'keyword.control.cutoff.prolog',\n        regex: '!'\n      }, {\n        token: 'punctuation.control.and.prolog',\n        regex: ','\n      }, {\n        token: 'punctuation.control.or.prolog',\n        regex: ';'\n      }, {\n        include: '#basic_elem'\n      }],\n      '#fact': [{\n        token: ['entity.name.function.fact.prolog', 'punctuation.begin.fact.parameters.prolog'],\n        regex: '([a-z]\\\\w*)(\\\\()(?!.*:-)',\n        push: [{\n          token: ['punctuation.end.fact.parameters.prolog', 'punctuation.end.fact.prolog'],\n          regex: '(\\\\))(\\\\.?)',\n          next: 'pop'\n        }, {\n          include: '#parameter'\n        }, {\n          defaultToken: 'meta.fact.prolog'\n        }]\n      }],\n      '#list': [{\n        token: 'punctuation.begin.list.prolog',\n        regex: '\\\\[(?=.*\\\\])',\n        push: [{\n          token: 'punctuation.end.list.prolog',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          include: '#comment'\n        }, {\n          token: 'punctuation.separator.list.prolog',\n          regex: ','\n        }, {\n          token: 'punctuation.concat.list.prolog',\n          regex: '\\\\|',\n          push: [{\n            token: 'meta.list.concat.prolog',\n            regex: '(?=\\\\s*\\\\])',\n            next: 'pop'\n          }, {\n            include: '#basic_elem'\n          }, {\n            defaultToken: 'meta.list.concat.prolog'\n          }]\n        }, {\n          include: '#basic_elem'\n        }, {\n          defaultToken: 'meta.list.prolog'\n        }]\n      }],\n      '#operators': [{\n        token: 'keyword.operator.prolog',\n        regex: '\\\\\\\\\\\\+|\\\\bnot\\\\b|\\\\bis\\\\b|->|[><]|[><\\\\\\\\:=]?=|(?:=\\\\\\\\|\\\\\\\\=)='\n      }],\n      '#parameter': [{\n        token: 'variable.language.anonymous.prolog',\n        regex: '\\\\b_\\\\b'\n      }, {\n        token: 'variable.parameter.prolog',\n        regex: '\\\\b[A-Z_]\\\\w*\\\\b'\n      }, {\n        token: 'punctuation.separator.parameters.prolog',\n        regex: ','\n      }, {\n        include: '#basic_elem'\n      }, {\n        token: 'text',\n        regex: '[^\\\\s]'\n      }],\n      '#rule': [{\n        token: 'meta.rule.prolog',\n        regex: '(?=[a-z]\\\\w*.*:-)',\n        push: [{\n          token: 'punctuation.rule.end.prolog',\n          regex: '\\\\.',\n          next: 'pop'\n        }, {\n          token: 'meta.rule.signature.prolog',\n          regex: '(?=[a-z]\\\\w*.*:-)',\n          push: [{\n            token: 'meta.rule.signature.prolog',\n            regex: '(?=:-)',\n            next: 'pop'\n          }, {\n            token: 'entity.name.function.rule.prolog',\n            regex: '[a-z]\\\\w*(?=\\\\(|\\\\s*:-)'\n          }, {\n            token: 'punctuation.rule.parameters.begin.prolog',\n            regex: '\\\\(',\n            push: [{\n              token: 'punctuation.rule.parameters.end.prolog',\n              regex: '\\\\)',\n              next: 'pop'\n            }, {\n              include: '#parameter'\n            }, {\n              defaultToken: 'meta.rule.parameters.prolog'\n            }]\n          }, {\n            defaultToken: 'meta.rule.signature.prolog'\n          }]\n        }, {\n          token: 'keyword.operator.definition.prolog',\n          regex: ':-',\n          push: [{\n            token: 'meta.rule.definition.prolog',\n            regex: '(?=\\\\.)',\n            next: 'pop'\n          }, {\n            include: '#comment'\n          }, {\n            include: '#expr'\n          }, {\n            defaultToken: 'meta.rule.definition.prolog'\n          }]\n        }, {\n          defaultToken: 'meta.rule.prolog'\n        }]\n      }],\n      '#statement': [{\n        token: 'meta.statement.prolog',\n        regex: '(?=[a-z]\\\\w*\\\\()',\n        push: [{\n          token: 'punctuation.end.statement.parameters.prolog',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#builtins'\n        }, {\n          include: '#atom'\n        }, {\n          token: 'punctuation.begin.statement.parameters.prolog',\n          regex: '\\\\(',\n          push: [{\n            token: 'meta.statement.parameters.prolog',\n            regex: '(?=\\\\))',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.statement.prolog',\n            regex: ','\n          }, {\n            include: '#basic_elem'\n          }, {\n            defaultToken: 'meta.statement.parameters.prolog'\n          }]\n        }, {\n          defaultToken: 'meta.statement.prolog'\n        }]\n      }],\n      '#string': [{\n        token: 'punctuation.definition.string.begin.prolog',\n        regex: '\\'',\n        push: [{\n          token: 'punctuation.definition.string.end.prolog',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.prolog',\n          regex: '\\\\\\\\.'\n        }, {\n          token: 'constant.character.escape.quote.prolog',\n          regex: '\\'\\''\n        }, {\n          defaultToken: 'string.quoted.single.prolog'\n        }]\n      }],\n      '#variable': [{\n        token: 'variable.language.anonymous.prolog',\n        regex: '\\\\b_\\\\b'\n      }, {\n        token: 'variable.other.prolog',\n        regex: '\\\\b[A-Z_][a-zA-Z0-9_]*\\\\b'\n      }]\n    };\n    this.normalizeRules();\n  };\n  PrologHighlightRules.metaData = {\n    fileTypes: ['plg', 'prolog'],\n    foldingStartMarker: '(%\\\\s*region \\\\w*)|([a-z]\\\\w*.*:- ?)',\n    foldingStopMarker: '(%\\\\s*end(\\\\s*region)?)|(?=\\\\.)',\n    keyEquivalent: '^~P',\n    name: 'Prolog',\n    scopeName: 'source.prolog'\n  };\n  oop.inherits(PrologHighlightRules, TextHighlightRules);\n  exports.PrologHighlightRules = PrologHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/prolog\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/prolog_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var PrologHighlightRules = require(\"./prolog_highlight_rules\").PrologHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = PrologHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/prolog\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/prolog\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","PrologHighlightRules","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","foldingStartMarker","foldingStopMarker","keyEquivalent","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","RegExp","source","replace","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-prolog.js"],"sourcesContent":["ace.define(\"ace/mode/prolog_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from https://raw.github.com/stephenroller/prolog-tmbundle/master/Syntaxes/Prolog.tmLanguage (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar PrologHighlightRules = function () {\n    this.$rules = { start: [{ include: '#comment' },\n            { include: '#basic_fact' },\n            { include: '#rule' },\n            { include: '#directive' },\n            { include: '#fact' }],\n        '#atom': [{ token: 'constant.other.atom.prolog',\n                regex: '\\\\b[a-z][a-zA-Z0-9_]*\\\\b' },\n            { token: 'constant.numeric.prolog',\n                regex: '-?\\\\d+(?:\\\\.\\\\d+)?' },\n            { include: '#string' }],\n        '#basic_elem': [{ include: '#comment' },\n            { include: '#statement' },\n            { include: '#constants' },\n            { include: '#operators' },\n            { include: '#builtins' },\n            { include: '#list' },\n            { include: '#atom' },\n            { include: '#variable' }],\n        '#basic_fact': [{ token: ['entity.name.function.fact.basic.prolog',\n                    'punctuation.end.fact.basic.prolog'],\n                regex: '([a-z]\\\\w*)(\\\\.)' }],\n        '#builtins': [{ token: 'support.function.builtin.prolog',\n                regex: '\\\\b(?:abolish|abort|ancestors|arg|ascii|assert[az]|atom(?:ic)?|body|char|close|conc|concat|consult|define|definition|dynamic|dump|fail|file|free|free_proc|functor|getc|goal|halt|head|head|integer|length|listing|match_args|member|next_clause|nl|nonvar|nth|number|cvars|nvars|offset|op|print?|prompt|putc|quoted|ratom|read|redefine|rename|retract(?:all)?|see|seeing|seen|skip|spy|statistics|system|tab|tell|telling|term|time|told|univ|unlink_clause|unspy_predicate|var|write)\\\\b' }],\n        '#comment': [{ token: ['punctuation.definition.comment.prolog',\n                    'comment.line.percentage.prolog'],\n                regex: '(%)(.*$)' },\n            { token: 'punctuation.definition.comment.prolog',\n                regex: '/\\\\*',\n                push: [{ token: 'punctuation.definition.comment.prolog',\n                        regex: '\\\\*/',\n                        next: 'pop' },\n                    { defaultToken: 'comment.block.prolog' }] }],\n        '#constants': [{ token: 'constant.language.prolog',\n                regex: '\\\\b(?:true|false|yes|no)\\\\b' }],\n        '#directive': [{ token: 'keyword.operator.directive.prolog',\n                regex: ':-',\n                push: [{ token: 'meta.directive.prolog', regex: '\\\\.', next: 'pop' },\n                    { include: '#comment' },\n                    { include: '#statement' },\n                    { defaultToken: 'meta.directive.prolog' }] }],\n        '#expr': [{ include: '#comments' },\n            { token: 'meta.expression.prolog',\n                regex: '\\\\(',\n                push: [{ token: 'meta.expression.prolog', regex: '\\\\)', next: 'pop' },\n                    { include: '#expr' },\n                    { defaultToken: 'meta.expression.prolog' }] },\n            { token: 'keyword.control.cutoff.prolog', regex: '!' },\n            { token: 'punctuation.control.and.prolog', regex: ',' },\n            { token: 'punctuation.control.or.prolog', regex: ';' },\n            { include: '#basic_elem' }],\n        '#fact': [{ token: ['entity.name.function.fact.prolog',\n                    'punctuation.begin.fact.parameters.prolog'],\n                regex: '([a-z]\\\\w*)(\\\\()(?!.*:-)',\n                push: [{ token: ['punctuation.end.fact.parameters.prolog',\n                            'punctuation.end.fact.prolog'],\n                        regex: '(\\\\))(\\\\.?)',\n                        next: 'pop' },\n                    { include: '#parameter' },\n                    { defaultToken: 'meta.fact.prolog' }] }],\n        '#list': [{ token: 'punctuation.begin.list.prolog',\n                regex: '\\\\[(?=.*\\\\])',\n                push: [{ token: 'punctuation.end.list.prolog',\n                        regex: '\\\\]',\n                        next: 'pop' },\n                    { include: '#comment' },\n                    { token: 'punctuation.separator.list.prolog', regex: ',' },\n                    { token: 'punctuation.concat.list.prolog',\n                        regex: '\\\\|',\n                        push: [{ token: 'meta.list.concat.prolog',\n                                regex: '(?=\\\\s*\\\\])',\n                                next: 'pop' },\n                            { include: '#basic_elem' },\n                            { defaultToken: 'meta.list.concat.prolog' }] },\n                    { include: '#basic_elem' },\n                    { defaultToken: 'meta.list.prolog' }] }],\n        '#operators': [{ token: 'keyword.operator.prolog',\n                regex: '\\\\\\\\\\\\+|\\\\bnot\\\\b|\\\\bis\\\\b|->|[><]|[><\\\\\\\\:=]?=|(?:=\\\\\\\\|\\\\\\\\=)=' }],\n        '#parameter': [{ token: 'variable.language.anonymous.prolog',\n                regex: '\\\\b_\\\\b' },\n            { token: 'variable.parameter.prolog',\n                regex: '\\\\b[A-Z_]\\\\w*\\\\b' },\n            { token: 'punctuation.separator.parameters.prolog', regex: ',' },\n            { include: '#basic_elem' },\n            { token: 'text', regex: '[^\\\\s]' }],\n        '#rule': [{ token: 'meta.rule.prolog',\n                regex: '(?=[a-z]\\\\w*.*:-)',\n                push: [{ token: 'punctuation.rule.end.prolog',\n                        regex: '\\\\.',\n                        next: 'pop' },\n                    { token: 'meta.rule.signature.prolog',\n                        regex: '(?=[a-z]\\\\w*.*:-)',\n                        push: [{ token: 'meta.rule.signature.prolog',\n                                regex: '(?=:-)',\n                                next: 'pop' },\n                            { token: 'entity.name.function.rule.prolog',\n                                regex: '[a-z]\\\\w*(?=\\\\(|\\\\s*:-)' },\n                            { token: 'punctuation.rule.parameters.begin.prolog',\n                                regex: '\\\\(',\n                                push: [{ token: 'punctuation.rule.parameters.end.prolog',\n                                        regex: '\\\\)',\n                                        next: 'pop' },\n                                    { include: '#parameter' },\n                                    { defaultToken: 'meta.rule.parameters.prolog' }] },\n                            { defaultToken: 'meta.rule.signature.prolog' }] },\n                    { token: 'keyword.operator.definition.prolog',\n                        regex: ':-',\n                        push: [{ token: 'meta.rule.definition.prolog',\n                                regex: '(?=\\\\.)',\n                                next: 'pop' },\n                            { include: '#comment' },\n                            { include: '#expr' },\n                            { defaultToken: 'meta.rule.definition.prolog' }] },\n                    { defaultToken: 'meta.rule.prolog' }] }],\n        '#statement': [{ token: 'meta.statement.prolog',\n                regex: '(?=[a-z]\\\\w*\\\\()',\n                push: [{ token: 'punctuation.end.statement.parameters.prolog',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { include: '#builtins' },\n                    { include: '#atom' },\n                    { token: 'punctuation.begin.statement.parameters.prolog',\n                        regex: '\\\\(',\n                        push: [{ token: 'meta.statement.parameters.prolog',\n                                regex: '(?=\\\\))',\n                                next: 'pop' },\n                            { token: 'punctuation.separator.statement.prolog', regex: ',' },\n                            { include: '#basic_elem' },\n                            { defaultToken: 'meta.statement.parameters.prolog' }] },\n                    { defaultToken: 'meta.statement.prolog' }] }],\n        '#string': [{ token: 'punctuation.definition.string.begin.prolog',\n                regex: '\\'',\n                push: [{ token: 'punctuation.definition.string.end.prolog',\n                        regex: '\\'',\n                        next: 'pop' },\n                    { token: 'constant.character.escape.prolog', regex: '\\\\\\\\.' },\n                    { token: 'constant.character.escape.quote.prolog',\n                        regex: '\\'\\'' },\n                    { defaultToken: 'string.quoted.single.prolog' }] }],\n        '#variable': [{ token: 'variable.language.anonymous.prolog',\n                regex: '\\\\b_\\\\b' },\n            { token: 'variable.other.prolog',\n                regex: '\\\\b[A-Z_][a-zA-Z0-9_]*\\\\b' }] };\n    this.normalizeRules();\n};\nPrologHighlightRules.metaData = { fileTypes: ['plg', 'prolog'],\n    foldingStartMarker: '(%\\\\s*region \\\\w*)|([a-z]\\\\w*.*:- ?)',\n    foldingStopMarker: '(%\\\\s*end(\\\\s*region)?)|(?=\\\\.)',\n    keyEquivalent: '^~P',\n    name: 'Prolog',\n    scopeName: 'source.prolog' };\noop.inherits(PrologHighlightRules, TextHighlightRules);\nexports.PrologHighlightRules = PrologHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/prolog\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prolog_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PrologHighlightRules = require(\"./prolog_highlight_rules\").PrologHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = PrologHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.$id = \"ace/mode/prolog\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/prolog\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}