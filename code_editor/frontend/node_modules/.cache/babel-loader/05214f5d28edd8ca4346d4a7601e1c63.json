{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len, BPE) => (len * BPE + 63 & ~63 || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = (arr, len = 0) => arr.length >= len ? arr.subarray(0, len) : memcpy(new arr.constructor(len), arr, 0);\n/** @ignore */\nexport class BufferBuilder {\n  constructor(buffer, stride = 1) {\n    this.buffer = buffer;\n    this.stride = stride;\n    this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n    this.ArrayType = buffer.constructor;\n    this._resize(this.length = buffer.length / stride | 0);\n  }\n  get byteLength() {\n    return this.length * this.stride * this.BYTES_PER_ELEMENT | 0;\n  }\n  get reservedLength() {\n    return this.buffer.length / this.stride;\n  }\n  get reservedByteLength() {\n    return this.buffer.byteLength;\n  }\n  // @ts-ignore\n  set(index, value) {\n    return this;\n  }\n  append(value) {\n    return this.set(this.length, value);\n  }\n  reserve(extra) {\n    if (extra > 0) {\n      this.length += extra;\n      const stride = this.stride;\n      const length = this.length * stride;\n      const reserved = this.buffer.length;\n      if (length >= reserved) {\n        this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n      }\n    }\n    return this;\n  }\n  flush(length = this.length) {\n    length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n    const array = sliceOrExtendArray(this.buffer, length);\n    this.clear();\n    return array;\n  }\n  clear() {\n    this.length = 0;\n    this._resize(0);\n    return this;\n  }\n  _resize(newLength) {\n    return this.buffer = memcpy(new this.ArrayType(newLength), this.buffer);\n  }\n}\nBufferBuilder.prototype.offset = 0;\n/** @ignore */\nexport class DataBufferBuilder extends BufferBuilder {\n  last() {\n    return this.get(this.length - 1);\n  }\n  get(index) {\n    return this.buffer[index];\n  }\n  set(index, value) {\n    this.reserve(index - this.length + 1);\n    this.buffer[index * this.stride] = value;\n    return this;\n  }\n}\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder {\n  constructor(data = new Uint8Array(0)) {\n    super(data, 1 / 8);\n    this.numValid = 0;\n  }\n  get numInvalid() {\n    return this.length - this.numValid;\n  }\n  get(idx) {\n    return this.buffer[idx >> 3] >> idx % 8 & 1;\n  }\n  set(idx, val) {\n    const {\n      buffer\n    } = this.reserve(idx - this.length + 1);\n    const byte = idx >> 3,\n      bit = idx % 8,\n      cur = buffer[byte] >> bit & 1;\n    // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n    // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n    val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);\n    return this;\n  }\n  clear() {\n    this.numValid = 0;\n    return super.clear();\n  }\n}\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder {\n  constructor(data = new Int32Array(1)) {\n    super(data, 1);\n  }\n  append(value) {\n    return this.set(this.length - 1, value);\n  }\n  set(index, value) {\n    const offset = this.length - 1;\n    const buffer = this.reserve(index - offset + 1).buffer;\n    if (offset < index++) {\n      buffer.fill(buffer[offset], offset, index);\n    }\n    buffer[index] = buffer[index - 1] + value;\n    return this;\n  }\n  flush(length = this.length - 1) {\n    if (length > this.length) {\n      this.set(length - 1, 0);\n    }\n    return super.flush(length + 1);\n  }\n}\n/** @ignore */\nexport class WideBufferBuilder extends BufferBuilder {\n  get ArrayType64() {\n    return this._ArrayType64 || (this._ArrayType64 = this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array);\n  }\n  set(index, value) {\n    this.reserve(index - this.length + 1);\n    switch (typeof value) {\n      case 'bigint':\n        this.buffer64[index] = value;\n        break;\n      case 'number':\n        this.buffer[index * this.stride] = value;\n        break;\n      default:\n        this.buffer.set(value, index * this.stride);\n    }\n    return this;\n  }\n  _resize(newLength) {\n    const data = super._resize(newLength);\n    const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n    if (BigIntAvailable) {\n      this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n    }\n    return data;\n  }\n}","map":{"version":3,"names":["memcpy","BigIntAvailable","BigInt64Array","BigUint64Array","roundLengthUpToNearest64Bytes","len","BPE","sliceOrExtendArray","arr","length","subarray","constructor","BufferBuilder","buffer","stride","BYTES_PER_ELEMENT","ArrayType","_resize","byteLength","reservedLength","reservedByteLength","set","index","value","append","reserve","extra","reserved","flush","array","clear","newLength","prototype","offset","DataBufferBuilder","last","get","BitmapBufferBuilder","data","Uint8Array","numValid","numInvalid","idx","val","byte","bit","cur","OffsetsBufferBuilder","Int32Array","fill","WideBufferBuilder","ArrayType64","_ArrayType64","buffer64","byteOffset"],"sources":["builder/buffer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}