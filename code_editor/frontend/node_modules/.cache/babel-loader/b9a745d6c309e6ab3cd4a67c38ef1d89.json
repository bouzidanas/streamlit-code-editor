{"ast":null,"code":"ace.define(\"ace/mode/haskell_cabal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /**\n  * Haskell Cabal files highlighter (https://www.haskell.org/cabal/users-guide/developing-packages.html)\n  **/\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var CabalHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"^\\\\s*--.*$\"\n      }, {\n        token: [\"keyword\"],\n        regex: /^(\\s*\\w.*?)(:(?:\\s+|$))/\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: /[\\d_]+(?:(?:[\\.\\d_]*)?)/\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n      }, {\n        token: \"markup.heading\",\n        regex: /^(\\w.*)$/\n      }]\n    };\n  };\n  oop.inherits(CabalHighlightRules, TextHighlightRules);\n  exports.CabalHighlightRules = CabalHighlightRules;\n});\nace.define(\"ace/mode/folding/haskell_cabal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  /*\n  * Folding mode for Cabal files (Haskell): allow folding each seaction, including\n  * the initial general section.\n  */\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var Range = require(\"../../range\").Range;\n  var FoldMode = exports.FoldMode = function () {};\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.isHeading = function (session, row) {\n      var heading = \"markup.heading\";\n      var token = session.getTokens(row)[0];\n      return row == 0 || token && token.type.lastIndexOf(heading, 0) === 0;\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n      if (this.isHeading(session, row)) {\n        return \"start\";\n      } else if (foldStyle === \"markbeginend\" && !/^\\s*$/.test(session.getLine(row))) {\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n          if (!/^\\s*$/.test(session.getLine(row))) {\n            break;\n          }\n        }\n        if (row == maxRow || this.isHeading(session, row)) {\n          return \"end\";\n        }\n      }\n      return \"\";\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      if (this.isHeading(session, row)) {\n        while (++row < maxRow) {\n          if (this.isHeading(session, row)) {\n            row--;\n            break;\n          }\n        }\n        endRow = row;\n        if (endRow > startRow) {\n          while (endRow > startRow && /^\\s*$/.test(session.getLine(endRow))) endRow--;\n        }\n        if (endRow > startRow) {\n          var endColumn = session.getLine(endRow).length;\n          return new Range(startRow, startColumn, endRow, endColumn);\n        }\n      } else if (this.getFoldWidget(session, foldStyle, row) === \"end\") {\n        var endRow = row;\n        var endColumn = session.getLine(endRow).length;\n        while (--row >= 0) {\n          if (this.isHeading(session, row)) {\n            break;\n          }\n        }\n        var line = session.getLine(row);\n        var startColumn = line.length;\n        return new Range(row, startColumn, endRow, endColumn);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/haskell_cabal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/haskell_cabal_highlight_rules\", \"ace/mode/folding/haskell_cabal\"], function (require, exports, module) {\n  /**\n  * Haskell Cabal files mode (https://www.haskell.org/cabal/users-guide/developing-packages.html)\n  **/\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var CabalHighlightRules = require(\"./haskell_cabal_highlight_rules\").CabalHighlightRules;\n  var FoldMode = require(\"./folding/haskell_cabal\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = CabalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell_cabal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/haskell_cabal\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","CabalHighlightRules","$rules","token","regex","inherits","BaseFoldMode","FoldMode","Range","isHeading","session","row","heading","getTokens","type","lastIndexOf","getFoldWidget","foldStyle","test","getLine","maxRow","getLength","getFoldWidgetRange","line","startColumn","length","startRow","endRow","endColumn","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id","m"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-haskell_cabal.js"],"sourcesContent":["ace.define(\"ace/mode/haskell_cabal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/**\n * Haskell Cabal files highlighter (https://www.haskell.org/cabal/users-guide/developing-packages.html)\n **/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar CabalHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment\",\n                regex: \"^\\\\s*--.*$\"\n            }, {\n                token: [\"keyword\"],\n                regex: /^(\\s*\\w.*?)(:(?:\\s+|$))/\n            }, {\n                token: \"constant.numeric\", // float\n                regex: /[\\d_]+(?:(?:[\\.\\d_]*)?)/\n            }, {\n                token: \"constant.language.boolean\",\n                regex: \"(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n            }, {\n                token: \"markup.heading\",\n                regex: /^(\\w.*)$/\n            }\n        ]\n    };\n};\noop.inherits(CabalHighlightRules, TextHighlightRules);\nexports.CabalHighlightRules = CabalHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/haskell_cabal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module){/*\n* Folding mode for Cabal files (Haskell): allow folding each seaction, including\n* the initial general section.\n*/\n\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar FoldMode = exports.FoldMode = function () { };\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.isHeading = function (session, row) {\n        var heading = \"markup.heading\";\n        var token = session.getTokens(row)[0];\n        return row == 0 || (token && token.type.lastIndexOf(heading, 0) === 0);\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n        if (this.isHeading(session, row)) {\n            return \"start\";\n        }\n        else if (foldStyle === \"markbeginend\" && !(/^\\s*$/.test(session.getLine(row)))) {\n            var maxRow = session.getLength();\n            while (++row < maxRow) {\n                if (!(/^\\s*$/.test(session.getLine(row)))) {\n                    break;\n                }\n            }\n            if (row == maxRow || this.isHeading(session, row)) {\n                return \"end\";\n            }\n        }\n        return \"\";\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n        if (this.isHeading(session, row)) {\n            while (++row < maxRow) {\n                if (this.isHeading(session, row)) {\n                    row--;\n                    break;\n                }\n            }\n            endRow = row;\n            if (endRow > startRow) {\n                while (endRow > startRow && /^\\s*$/.test(session.getLine(endRow)))\n                    endRow--;\n            }\n            if (endRow > startRow) {\n                var endColumn = session.getLine(endRow).length;\n                return new Range(startRow, startColumn, endRow, endColumn);\n            }\n        }\n        else if (this.getFoldWidget(session, foldStyle, row) === \"end\") {\n            var endRow = row;\n            var endColumn = session.getLine(endRow).length;\n            while (--row >= 0) {\n                if (this.isHeading(session, row)) {\n                    break;\n                }\n            }\n            var line = session.getLine(row);\n            var startColumn = line.length;\n            return new Range(row, startColumn, endRow, endColumn);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/haskell_cabal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/haskell_cabal_highlight_rules\",\"ace/mode/folding/haskell_cabal\"], function(require, exports, module){/**\n* Haskell Cabal files mode (https://www.haskell.org/cabal/users-guide/developing-packages.html)\n**/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar CabalHighlightRules = require(\"./haskell_cabal_highlight_rules\").CabalHighlightRules;\nvar FoldMode = require(\"./folding/haskell_cabal\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = CabalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell_cabal\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/haskell_cabal\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}