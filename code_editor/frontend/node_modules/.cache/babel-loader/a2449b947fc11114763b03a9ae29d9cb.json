{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType } from '../type';\nTable.prototype.countBy = function (name) {\n  return new DataFrame(this.chunks).countBy(name);\n};\nTable.prototype.scan = function (next, bind) {\n  return new DataFrame(this.chunks).scan(next, bind);\n};\nTable.prototype.scanReverse = function (next, bind) {\n  return new DataFrame(this.chunks).scanReverse(next, bind);\n};\nTable.prototype.filter = function (predicate) {\n  return new DataFrame(this.chunks).filter(predicate);\n};\nexport class DataFrame extends Table {\n  filter(predicate) {\n    return new FilteredDataFrame(this.chunks, predicate);\n  }\n  scan(next, bind) {\n    const batches = this.chunks,\n      numBatches = batches.length;\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      if (bind) {\n        bind(batch);\n      }\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        next(index, batch);\n      }\n    }\n  }\n  scanReverse(next, bind) {\n    const batches = this.chunks,\n      numBatches = batches.length;\n    for (let batchIndex = numBatches; --batchIndex >= 0;) {\n      // load batches\n      const batch = batches[batchIndex];\n      if (bind) {\n        bind(batch);\n      }\n      // yield all indices\n      for (let index = batch.length; --index >= 0;) {\n        next(index, batch);\n      }\n    }\n  }\n  countBy(name) {\n    const batches = this.chunks,\n      numBatches = batches.length;\n    const count_by = typeof name === 'string' ? new Col(name) : name;\n    // Assume that all dictionary batches are deltas, which means that the\n    // last record batch has the most complete dictionary\n    count_by.bind(batches[numBatches - 1]);\n    const vector = count_by.vector;\n    if (!DataType.isDictionary(vector.type)) {\n      throw new Error('countBy currently only supports dictionary-encoded columns');\n    }\n    const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n    const CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n    const counts = new CountsArrayType(vector.dictionary.length);\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      // rebind the countBy Col\n      count_by.bind(batch);\n      const keys = count_by.vector.indices;\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        let key = keys.get(index);\n        if (key !== null) {\n          counts[key]++;\n        }\n      }\n    }\n    return new CountByResult(vector.dictionary, IntVector.from(counts));\n  }\n}\n/** @ignore */\nexport class CountByResult extends Table {\n  constructor(values, counts) {\n    const schema = new Schema([new Field('values', values.type), new Field('counts', counts.type)]);\n    super(new RecordBatch(schema, counts.length, [values, counts]));\n  }\n  toJSON() {\n    const values = this.getColumnAt(0);\n    const counts = this.getColumnAt(1);\n    const result = {};\n    for (let i = -1; ++i < this.length;) {\n      result[values.get(i)] = counts.get(i);\n    }\n    return result;\n  }\n}\n/** @ignore */\nexport class FilteredDataFrame extends DataFrame {\n  constructor(batches, predicate) {\n    super(batches);\n    this._predicate = predicate;\n  }\n  scan(next, bind) {\n    // inlined version of this:\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) next(idx, columns);\n    // });\n    const batches = this._chunks;\n    const numBatches = batches.length;\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      const predicate = this._predicate.bind(batch);\n      let isBound = false;\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          // bind batches lazily - if predicate doesn't match anything\n          // in the batch we don't need to call bind on the batch\n          if (bind && !isBound) {\n            bind(batch);\n            isBound = true;\n          }\n          next(index, batch);\n        }\n      }\n    }\n  }\n  scanReverse(next, bind) {\n    const batches = this._chunks;\n    const numBatches = batches.length;\n    for (let batchIndex = numBatches; --batchIndex >= 0;) {\n      // load batches\n      const batch = batches[batchIndex];\n      const predicate = this._predicate.bind(batch);\n      let isBound = false;\n      // yield all indices\n      for (let index = batch.length; --index >= 0;) {\n        if (predicate(index, batch)) {\n          // bind batches lazily - if predicate doesn't match anything\n          // in the batch we don't need to call bind on the batch\n          if (bind && !isBound) {\n            bind(batch);\n            isBound = true;\n          }\n          next(index, batch);\n        }\n      }\n    }\n  }\n  count() {\n    // inlined version of this:\n    // let sum = 0;\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) ++sum;\n    // });\n    // return sum;\n    let sum = 0;\n    const batches = this._chunks;\n    const numBatches = batches.length;\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      const predicate = this._predicate.bind(batch);\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          ++sum;\n        }\n      }\n    }\n    return sum;\n  }\n  *[Symbol.iterator]() {\n    // inlined version of this:\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) next(idx, columns);\n    // });\n    const batches = this._chunks;\n    const numBatches = batches.length;\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      // TODO: bind batches lazily\n      // If predicate doesn't match anything in the batch we don't need\n      // to bind the callback\n      const predicate = this._predicate.bind(batch);\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          yield batch.get(index);\n        }\n      }\n    }\n  }\n  filter(predicate) {\n    return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n  }\n  countBy(name) {\n    const batches = this._chunks,\n      numBatches = batches.length;\n    const count_by = typeof name === 'string' ? new Col(name) : name;\n    // Assume that all dictionary batches are deltas, which means that the\n    // last record batch has the most complete dictionary\n    count_by.bind(batches[numBatches - 1]);\n    const vector = count_by.vector;\n    if (!DataType.isDictionary(vector.type)) {\n      throw new Error('countBy currently only supports dictionary-encoded columns');\n    }\n    const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n    const CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n    const counts = new CountsArrayType(vector.dictionary.length);\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      const predicate = this._predicate.bind(batch);\n      // rebind the countBy Col\n      count_by.bind(batch);\n      const keys = count_by.vector.indices;\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        let key = keys.get(index);\n        if (key !== null && predicate(index, batch)) {\n          counts[key]++;\n        }\n      }\n    }\n    return new CountByResult(vector.dictionary, IntVector.from(counts));\n  }\n}","map":{"version":3,"names":["Table","IntVector","Field","Schema","Col","RecordBatch","DataType","prototype","countBy","name","DataFrame","chunks","scan","next","bind","scanReverse","filter","predicate","FilteredDataFrame","batches","numBatches","length","batchIndex","batch","index","numRows","count_by","vector","isDictionary","type","Error","countByteLength","Math","ceil","log","CountsArrayType","Uint32Array","Uint16Array","Uint8Array","counts","dictionary","keys","indices","key","get","CountByResult","from","constructor","values","schema","toJSON","getColumnAt","result","i","_predicate","_chunks","isBound","count","sum","Symbol","iterator","and"],"sources":["compute/dataframe.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}