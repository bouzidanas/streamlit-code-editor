{"ast":null,"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@\\\\w+(?=\\\\s|$)\"\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc.body\",\n        caseInsensitive: true\n      }]\n    };\n  };\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: /\\/\\*\\*(?!\\/)/,\n      next: start\n    };\n  };\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/rust_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\", \"ace/mode/doc_comment_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from https://raw.github.com/dbp/sublime-rust/master/Rust.tmLanguage (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var stringEscape = /\\\\(?:[nrt0'\"\\\\]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\})/.source;\n  var wordPattern = /[a-zA-Z_\\xa1-\\uffff][a-zA-Z0-9_\\xa1-\\uffff]*/.source;\n  var RustHighlightRules = function () {\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword.source.rust\": \"abstract|alignof|as|async|await|become|box|break|catch|continue|const|crate|\" + \"default|do|dyn|else|enum|extern|for|final|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|\" + \"override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|\" + \"unsafe|unsized|use|virtual|where|while|yield|try\",\n      \"storage.type.source.rust\": \"Self|isize|usize|char|bool|u8|u16|u32|u64|u128|f16|f32|f64|i8|i16|i32|i64|\" + \"i128|str|option|either|c_float|c_double|c_void|FILE|fpos_t|DIR|dirent|c_char|c_schar|c_uchar|c_short|\" + \"c_ushort|c_int|c_uint|c_long|c_ulong|size_t|ptrdiff_t|clock_t|time_t|c_longlong|c_ulonglong|intptr_t|\" + \"uintptr_t|off_t|dev_t|ino_t|pid_t|mode_t|ssize_t\",\n      \"constant.language.source.rust\": \"true|false|Some|None|Ok|Err|FALSE|TRUE\",\n      \"support.constant.source.rust\": \"EXIT_FAILURE|EXIT_SUCCESS|RAND_MAX|EOF|SEEK_SET|SEEK_CUR|SEEK_END|_IOFBF|\" + \"_IONBF|_IOLBF|\" + \"BUFSIZ|FOPEN_MAX|FILENAME_MAX|L_tmpnam|TMP_MAX|O_RDONLY|O_WRONLY|O_RDWR|O_APPEND|O_CREAT|O_EXCL|O_TRUNC|\" + \"S_IFIFO|S_IFCHR|S_IFBLK|S_IFDIR|S_IFREG|S_IFMT|S_IEXEC|S_IWRITE|S_IREAD|S_IRWXU|S_IXUSR|S_IWUSR|S_IRUSR|\" + \"F_OK|R_OK|W_OK|X_OK|STDIN_FILENO|STDOUT_FILENO|STDERR_FILENO\",\n      \"constant.language\": \"macro_rules|mac_variant\"\n    }, \"identifier\");\n    this.$rules = {\n      start: [{\n        token: 'variable.other.source.rust',\n        // `(?![\\\\\\'])` to keep a lifetime name highlighting from continuing one character\n        regex: '\\'' + wordPattern + '(?![\\\\\\'])'\n      }, {\n        token: 'string.quoted.single.source.rust',\n        regex: \"'(?:[^'\\\\\\\\]|\" + stringEscape + \")'\"\n      }, {\n        token: 'identifier',\n        regex: \"r#\" + wordPattern + \"\\\\b\"\n      }, {\n        stateName: \"bracketedComment\",\n        onMatch: function (value, currentState, stack) {\n          stack.unshift(this.next, value.length - 1, currentState);\n          return \"string.quoted.raw.source.rust\";\n        },\n        regex: /r#*\"/,\n        next: [{\n          onMatch: function (value, currentState, stack) {\n            var token = \"string.quoted.raw.source.rust\";\n            if (value.length >= stack[1]) {\n              if (value.length > stack[1]) token = \"invalid\";\n              stack.shift();\n              stack.shift();\n              this.next = stack.shift();\n            } else {\n              this.next = \"\";\n            }\n            return token;\n          },\n          regex: /\"#*/,\n          next: \"start\"\n        }, {\n          defaultToken: \"string.quoted.raw.source.rust\"\n        }]\n      }, {\n        token: 'string.quoted.double.source.rust',\n        regex: '\"',\n        push: [{\n          token: 'string.quoted.double.source.rust',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.source.rust',\n          regex: stringEscape\n        }, {\n          defaultToken: 'string.quoted.double.source.rust'\n        }]\n      }, {\n        token: ['keyword.source.rust', 'text', 'entity.name.function.source.rust', 'punctuation'],\n        regex: '\\\\b(fn)(\\\\s+)((?:r#)?' + wordPattern + ')(<)',\n        push: \"generics\"\n      }, {\n        token: ['keyword.source.rust', 'text', 'entity.name.function.source.rust'],\n        regex: '\\\\b(fn)(\\\\s+)((?:r#)?' + wordPattern + ')'\n      }, {\n        token: ['support.constant', \"punctuation\"],\n        regex: \"(\" + wordPattern + '::)(<)',\n        push: \"generics\"\n      }, {\n        token: 'support.constant',\n        regex: wordPattern + '::'\n      }, {\n        token: 'variable.language.source.rust',\n        regex: '\\\\bself\\\\b'\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: 'comment.line.doc.source.rust',\n        regex: '///.*$'\n      }, {\n        token: 'comment.line.doc.source.rust',\n        regex: '//!.*$'\n      }, {\n        token: 'comment.line.double-dash.source.rust',\n        regex: '//.*$'\n      }, {\n        token: 'comment.start.block.source.rust',\n        regex: '/\\\\*',\n        stateName: 'comment',\n        push: [{\n          token: 'comment.start.block.source.rust',\n          regex: '/\\\\*',\n          push: 'comment'\n        }, {\n          token: 'comment.end.block.source.rust',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.source.rust'\n        }]\n      }, {\n        token: [\"keyword.source.rust\", \"identifier\", \"punctuaction\"],\n        regex: \"(?:(impl)|(\" + wordPattern + \"))(<)\",\n        stateName: 'generics',\n        push: [{\n          token: \"punctuaction\",\n          regex: \"<\",\n          push: \"generics\"\n        }, {\n          token: 'variable.other.source.rust',\n          // `(?![\\\\\\'])` to keep a lifetime name highlighting from continuing one character\n          regex: '\\'' + wordPattern + '(?![\\\\\\'])'\n        }, {\n          token: \"storage.type.source.rust\",\n          regex: \"\\\\b(u8|u16|u32|u64|u128|usize|i8|i16|i32|i64|i128|isize|char|bool)\\\\b\"\n        }, {\n          token: \"punctuation.operator\",\n          regex: \"[,:]\"\n        }, {\n          token: \"keyword\",\n          regex: \"\\\\b(?:const|dyn)\\\\b\"\n        }, {\n          token: \"punctuation\",\n          regex: \">\",\n          next: \"pop\"\n        }, {\n          token: \"paren.lparen\",\n          regex: \"[(]\"\n        }, {\n          token: \"paren.rparen\",\n          regex: \"[)]\"\n        }, {\n          token: \"identifier\",\n          regex: \"\\\\b\" + wordPattern + \"\\\\b\"\n        }, {\n          token: 'keyword.operator',\n          regex: \"=\"\n        }]\n      }, {\n        token: keywordMapper,\n        regex: wordPattern\n      }, {\n        token: 'keyword.operator',\n        // `[*/](?![*/])=?` is separated because `//` and `/* */` become comments and must be\n        regex: /\\$|[-=]>|[-+%^=!&|<>]=?|[*/](?![*/])=?/\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[?:,;.]/\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[({]/\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\])}]/\n      }, {\n        token: 'meta.preprocessor.source.rust',\n        regex: '\\\\b\\\\w\\\\(\\\\w\\\\)*!|#\\\\[[\\\\w=\\\\(\\\\)_]+\\\\]\\\\b'\n      }, {\n        token: 'constant.numeric.source.rust',\n        regex: /\\b(?:0x[a-fA-F0-9_]+|0o[0-7_]+|0b[01_]+|[0-9][0-9_]*(?!\\.))(?:[iu](?:size|8|16|32|64|128))?\\b/\n      }, {\n        token: 'constant.numeric.source.rust',\n        regex: /\\b(?:[0-9][0-9_]*)(?:\\.[0-9][0-9_]*)?(?:[Ee][+-][0-9][0-9_]*)?(?:f32|f64)?\\b/\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n  RustHighlightRules.metaData = {\n    fileTypes: ['rs', 'rc'],\n    foldingStartMarker: '^.*\\\\bfn\\\\s*(\\\\w+\\\\s*)?\\\\([^\\\\)]*\\\\)(\\\\s*\\\\{[^\\\\}]*)?\\\\s*$',\n    foldingStopMarker: '^\\\\s*\\\\}',\n    name: 'Rust',\n    scopeName: 'source.rust'\n  };\n  oop.inherits(RustHighlightRules, TextHighlightRules);\n  exports.RustHighlightRules = RustHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/rust\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/rust_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var RustHighlightRules = require(\"./rust_highlight_rules\").RustHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = RustHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\",\n      nestable: true\n    };\n    this.$quotes = {\n      '\"': '\"'\n    };\n    this.$id = \"ace/mode/rust\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/rust\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","stringEscape","source","wordPattern","RustHighlightRules","keywordMapper","createKeywordMapper","stateName","onMatch","value","currentState","stack","unshift","length","shift","push","embedRules","normalizeRules","metaData","fileTypes","foldingStartMarker","foldingStopMarker","name","scopeName","Range","BaseFoldMode","FoldMode","commentRegex","RegExp","replace","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","nestable","$quotes","$id"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-rust.js"],"sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\nDocCommentHighlightRules.getTagRule = function (start) {\n    return {\n        token: \"comment.doc.tag.storage.type\",\n        regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\nDocCommentHighlightRules.getStartRule = function (start) {\n    return {\n        token: \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next: start\n    };\n};\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token: \"comment.doc\", // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: start\n    };\n};\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/rust_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\",\"ace/mode/doc_comment_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from https://raw.github.com/dbp/sublime-rust/master/Rust.tmLanguage (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar stringEscape = /\\\\(?:[nrt0'\"\\\\]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\})/.source;\nvar wordPattern = /[a-zA-Z_\\xa1-\\uffff][a-zA-Z0-9_\\xa1-\\uffff]*/.source;\nvar RustHighlightRules = function () {\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword.source.rust\": \"abstract|alignof|as|async|await|become|box|break|catch|continue|const|crate|\"\n            + \"default|do|dyn|else|enum|extern|for|final|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|\"\n            + \"override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|\"\n            + \"unsafe|unsized|use|virtual|where|while|yield|try\",\n        \"storage.type.source.rust\": \"Self|isize|usize|char|bool|u8|u16|u32|u64|u128|f16|f32|f64|i8|i16|i32|i64|\"\n            + \"i128|str|option|either|c_float|c_double|c_void|FILE|fpos_t|DIR|dirent|c_char|c_schar|c_uchar|c_short|\"\n            + \"c_ushort|c_int|c_uint|c_long|c_ulong|size_t|ptrdiff_t|clock_t|time_t|c_longlong|c_ulonglong|intptr_t|\"\n            + \"uintptr_t|off_t|dev_t|ino_t|pid_t|mode_t|ssize_t\",\n        \"constant.language.source.rust\": \"true|false|Some|None|Ok|Err|FALSE|TRUE\",\n        \"support.constant.source.rust\": \"EXIT_FAILURE|EXIT_SUCCESS|RAND_MAX|EOF|SEEK_SET|SEEK_CUR|SEEK_END|_IOFBF|\"\n            + \"_IONBF|_IOLBF|\"\n            + \"BUFSIZ|FOPEN_MAX|FILENAME_MAX|L_tmpnam|TMP_MAX|O_RDONLY|O_WRONLY|O_RDWR|O_APPEND|O_CREAT|O_EXCL|O_TRUNC|\"\n            + \"S_IFIFO|S_IFCHR|S_IFBLK|S_IFDIR|S_IFREG|S_IFMT|S_IEXEC|S_IWRITE|S_IREAD|S_IRWXU|S_IXUSR|S_IWUSR|S_IRUSR|\"\n            + \"F_OK|R_OK|W_OK|X_OK|STDIN_FILENO|STDOUT_FILENO|STDERR_FILENO\",\n        \"constant.language\": \"macro_rules|mac_variant\"\n    }, \"identifier\");\n    this.$rules = {\n        start: [\n            {\n                token: 'variable.other.source.rust', // `(?![\\\\\\'])` to keep a lifetime name highlighting from continuing one character\n                regex: '\\'' + wordPattern + '(?![\\\\\\'])'\n            }, {\n                token: 'string.quoted.single.source.rust',\n                regex: \"'(?:[^'\\\\\\\\]|\" + stringEscape + \")'\"\n            }, {\n                token: 'identifier',\n                regex: \"r#\" + wordPattern + \"\\\\b\"\n            }, {\n                stateName: \"bracketedComment\",\n                onMatch: function (value, currentState, stack) {\n                    stack.unshift(this.next, value.length - 1, currentState);\n                    return \"string.quoted.raw.source.rust\";\n                },\n                regex: /r#*\"/,\n                next: [\n                    {\n                        onMatch: function (value, currentState, stack) {\n                            var token = \"string.quoted.raw.source.rust\";\n                            if (value.length >= stack[1]) {\n                                if (value.length > stack[1])\n                                    token = \"invalid\";\n                                stack.shift();\n                                stack.shift();\n                                this.next = stack.shift();\n                            }\n                            else {\n                                this.next = \"\";\n                            }\n                            return token;\n                        },\n                        regex: /\"#*/,\n                        next: \"start\"\n                    }, {\n                        defaultToken: \"string.quoted.raw.source.rust\"\n                    }\n                ]\n            }, {\n                token: 'string.quoted.double.source.rust',\n                regex: '\"',\n                push: [\n                    {\n                        token: 'string.quoted.double.source.rust',\n                        regex: '\"',\n                        next: 'pop'\n                    }, {\n                        token: 'constant.character.escape.source.rust',\n                        regex: stringEscape\n                    }, { defaultToken: 'string.quoted.double.source.rust' }\n                ]\n            }, {\n                token: ['keyword.source.rust', 'text', 'entity.name.function.source.rust', 'punctuation'],\n                regex: '\\\\b(fn)(\\\\s+)((?:r#)?' + wordPattern + ')(<)',\n                push: \"generics\"\n            }, {\n                token: ['keyword.source.rust', 'text', 'entity.name.function.source.rust'],\n                regex: '\\\\b(fn)(\\\\s+)((?:r#)?' + wordPattern + ')'\n            }, {\n                token: ['support.constant', \"punctuation\"],\n                regex: \"(\" + wordPattern + '::)(<)',\n                push: \"generics\"\n            }, {\n                token: 'support.constant',\n                regex: wordPattern + '::'\n            }, {\n                token: 'variable.language.source.rust',\n                regex: '\\\\bself\\\\b'\n            }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n                token: 'comment.line.doc.source.rust',\n                regex: '///.*$'\n            }, {\n                token: 'comment.line.doc.source.rust',\n                regex: '//!.*$'\n            }, {\n                token: 'comment.line.double-dash.source.rust',\n                regex: '//.*$'\n            }, {\n                token: 'comment.start.block.source.rust',\n                regex: '/\\\\*',\n                stateName: 'comment',\n                push: [\n                    {\n                        token: 'comment.start.block.source.rust',\n                        regex: '/\\\\*',\n                        push: 'comment'\n                    }, {\n                        token: 'comment.end.block.source.rust',\n                        regex: '\\\\*/',\n                        next: 'pop'\n                    }, { defaultToken: 'comment.block.source.rust' }\n                ]\n            }, {\n                token: [\"keyword.source.rust\", \"identifier\", \"punctuaction\"],\n                regex: \"(?:(impl)|(\" + wordPattern + \"))(<)\",\n                stateName: 'generics',\n                push: [\n                    {\n                        token: \"punctuaction\",\n                        regex: \"<\",\n                        push: \"generics\"\n                    }, {\n                        token: 'variable.other.source.rust', // `(?![\\\\\\'])` to keep a lifetime name highlighting from continuing one character\n                        regex: '\\'' + wordPattern + '(?![\\\\\\'])'\n                    }, {\n                        token: \"storage.type.source.rust\",\n                        regex: \"\\\\b(u8|u16|u32|u64|u128|usize|i8|i16|i32|i64|i128|isize|char|bool)\\\\b\"\n                    }, {\n                        token: \"punctuation.operator\",\n                        regex: \"[,:]\"\n                    }, {\n                        token: \"keyword\",\n                        regex: \"\\\\b(?:const|dyn)\\\\b\"\n                    }, {\n                        token: \"punctuation\",\n                        regex: \">\",\n                        next: \"pop\"\n                    }, {\n                        token: \"paren.lparen\",\n                        regex: \"[(]\"\n                    }, {\n                        token: \"paren.rparen\",\n                        regex: \"[)]\"\n                    }, {\n                        token: \"identifier\",\n                        regex: \"\\\\b\" + wordPattern + \"\\\\b\"\n                    }, {\n                        token: 'keyword.operator',\n                        regex: \"=\"\n                    }\n                ]\n            }, {\n                token: keywordMapper,\n                regex: wordPattern\n            }, {\n                token: 'keyword.operator', // `[*/](?![*/])=?` is separated because `//` and `/* */` become comments and must be\n                regex: /\\$|[-=]>|[-+%^=!&|<>]=?|[*/](?![*/])=?/\n            }, {\n                token: \"punctuation.operator\",\n                regex: /[?:,;.]/\n            }, {\n                token: \"paren.lparen\",\n                regex: /[\\[({]/\n            }, {\n                token: \"paren.rparen\",\n                regex: /[\\])}]/\n            }, {\n                token: 'meta.preprocessor.source.rust',\n                regex: '\\\\b\\\\w\\\\(\\\\w\\\\)*!|#\\\\[[\\\\w=\\\\(\\\\)_]+\\\\]\\\\b'\n            }, {\n                token: 'constant.numeric.source.rust',\n                regex: /\\b(?:0x[a-fA-F0-9_]+|0o[0-7_]+|0b[01_]+|[0-9][0-9_]*(?!\\.))(?:[iu](?:size|8|16|32|64|128))?\\b/\n            }, {\n                token: 'constant.numeric.source.rust',\n                regex: /\\b(?:[0-9][0-9_]*)(?:\\.[0-9][0-9_]*)?(?:[Ee][+-][0-9][0-9_]*)?(?:f32|f64)?\\b/\n            }\n        ]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n};\nRustHighlightRules.metaData = { fileTypes: ['rs', 'rc'],\n    foldingStartMarker: '^.*\\\\bfn\\\\s*(\\\\w+\\\\s*)?\\\\([^\\\\)]*\\\\)(\\\\s*\\\\{[^\\\\}]*)?\\\\s*$',\n    foldingStopMarker: '^\\\\s*\\\\}',\n    name: 'Rust',\n    scopeName: 'source.rust' };\noop.inherits(RustHighlightRules, TextHighlightRules);\nexports.RustHighlightRules = RustHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/rust\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/rust_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar RustHighlightRules = require(\"./rust_highlight_rules\").RustHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = RustHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = { start: \"/*\", end: \"*/\", nestable: true };\n    this.$quotes = { '\"': '\"' };\n    this.$id = \"ace/mode/rust\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/rust\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}