{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType } from './type';\nexport class Visitor {\n  visitMany(nodes, ...args) {\n    return nodes.map((node, i) => this.visit(node, ...args.map(x => x[i])));\n  }\n  visit(...args) {\n    return this.getVisitFn(args[0], false).apply(this, args);\n  }\n  getVisitFn(node, throwIfNotFound = true) {\n    return getVisitFn(this, node, throwIfNotFound);\n  }\n  visitNull(_node, ..._args) {\n    return null;\n  }\n  visitBool(_node, ..._args) {\n    return null;\n  }\n  visitInt(_node, ..._args) {\n    return null;\n  }\n  visitFloat(_node, ..._args) {\n    return null;\n  }\n  visitUtf8(_node, ..._args) {\n    return null;\n  }\n  visitBinary(_node, ..._args) {\n    return null;\n  }\n  visitFixedSizeBinary(_node, ..._args) {\n    return null;\n  }\n  visitDate(_node, ..._args) {\n    return null;\n  }\n  visitTimestamp(_node, ..._args) {\n    return null;\n  }\n  visitTime(_node, ..._args) {\n    return null;\n  }\n  visitDecimal(_node, ..._args) {\n    return null;\n  }\n  visitList(_node, ..._args) {\n    return null;\n  }\n  visitStruct(_node, ..._args) {\n    return null;\n  }\n  visitUnion(_node, ..._args) {\n    return null;\n  }\n  visitDictionary(_node, ..._args) {\n    return null;\n  }\n  visitInterval(_node, ..._args) {\n    return null;\n  }\n  visitFixedSizeList(_node, ..._args) {\n    return null;\n  }\n  visitMap(_node, ..._args) {\n    return null;\n  }\n}\n/** @ignore */\nfunction getVisitFn(visitor, node, throwIfNotFound = true) {\n  let fn = null;\n  let dtype = Type.NONE;\n  // tslint:disable\n  if (node instanceof Data) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof Vector) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof DataType) {\n    dtype = inferDType(node);\n  } else if (typeof (dtype = node) !== 'number') {\n    dtype = Type[node];\n  }\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return () => null;\n  throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n/** @ignore */\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n    case Type.Int:\n      const {\n        bitWidth,\n        isSigned\n      } = type;\n      switch (bitWidth) {\n        case 8:\n          return isSigned ? Type.Int8 : Type.Uint8;\n        case 16:\n          return isSigned ? Type.Int16 : Type.Uint16;\n        case 32:\n          return isSigned ? Type.Int32 : Type.Uint32;\n        case 64:\n          return isSigned ? Type.Int64 : Type.Uint64;\n      }\n      return Type.Int;\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n        case Precision.SINGLE:\n          return Type.Float32;\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n      return Type.Float;\n    case Type.Binary:\n      return Type.Binary;\n    case Type.Utf8:\n      return Type.Utf8;\n    case Type.Bool:\n      return Type.Bool;\n    case Type.Decimal:\n      return Type.Decimal;\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n      return Type.Time;\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n      return Type.Timestamp;\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n      return Type.Date;\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n      return Type.Interval;\n    case Type.Map:\n      return Type.Map;\n    case Type.List:\n      return Type.List;\n    case Type.Struct:\n      return Type.Struct;\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n      return Type.Union;\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n  throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"names":["Data","Vector","Type","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","DataType","Visitor","visitMany","nodes","args","map","node","i","visit","x","getVisitFn","apply","throwIfNotFound","visitNull","_node","_args","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","visitor","fn","dtype","NONE","inferDType","type","Null","Bool","Int","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","Utf8","Binary","FixedSizeBinary","Date","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","Timestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","Time","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","Decimal","List","Struct","Union","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","Interval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","FixedSizeList","Map","Error","typeId","bitWidth","isSigned","precision","HALF","SINGLE","DOUBLE","unit","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","DAY","DAY_TIME","YEAR_MONTH","mode","Dense","Sparse","prototype"],"sources":["visitor.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}