{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32 } from '../../type';\n/**\n * @ignore\n * @private\n **/\nexport class Message {\n  constructor(bodyLength, version, headerType, header) {\n    this._version = version;\n    this._headerType = headerType;\n    this.body = new Uint8Array(0);\n    header && (this._createHeader = () => header);\n    this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n  /** @nocollapse */\n  static fromJSON(msg, headerType) {\n    const message = new Message(0, MetadataVersion.V4, headerType);\n    message._createHeader = messageHeaderFromJSON(msg, headerType);\n    return message;\n  }\n  /** @nocollapse */\n  static decode(buf) {\n    buf = new ByteBuffer(toUint8Array(buf));\n    const _message = _Message.getRootAsMessage(buf);\n    const bodyLength = _message.bodyLength();\n    const version = _message.version();\n    const headerType = _message.headerType();\n    const message = new Message(bodyLength, version, headerType);\n    message._createHeader = decodeMessageHeader(_message, headerType);\n    return message;\n  }\n  /** @nocollapse */\n  static encode(message) {\n    let b = new Builder(),\n      headerOffset = -1;\n    if (message.isSchema()) {\n      headerOffset = Schema.encode(b, message.header());\n    } else if (message.isRecordBatch()) {\n      headerOffset = RecordBatch.encode(b, message.header());\n    } else if (message.isDictionaryBatch()) {\n      headerOffset = DictionaryBatch.encode(b, message.header());\n    }\n    _Message.startMessage(b);\n    _Message.addVersion(b, MetadataVersion.V4);\n    _Message.addHeader(b, headerOffset);\n    _Message.addHeaderType(b, message.headerType);\n    _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n    _Message.finishMessageBuffer(b, _Message.endMessage(b));\n    return b.asUint8Array();\n  }\n  /** @nocollapse */\n  static from(header, bodyLength = 0) {\n    if (header instanceof Schema) {\n      return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n    }\n    if (header instanceof RecordBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n    }\n    if (header instanceof DictionaryBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n    }\n    throw new Error(`Unrecognized Message header: ${header}`);\n  }\n  get type() {\n    return this.headerType;\n  }\n  get version() {\n    return this._version;\n  }\n  get headerType() {\n    return this._headerType;\n  }\n  get bodyLength() {\n    return this._bodyLength;\n  }\n  header() {\n    return this._createHeader();\n  }\n  isSchema() {\n    return this.headerType === MessageHeader.Schema;\n  }\n  isRecordBatch() {\n    return this.headerType === MessageHeader.RecordBatch;\n  }\n  isDictionaryBatch() {\n    return this.headerType === MessageHeader.DictionaryBatch;\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n  get nodes() {\n    return this._nodes;\n  }\n  get length() {\n    return this._length;\n  }\n  get buffers() {\n    return this._buffers;\n  }\n  constructor(length, nodes, buffers) {\n    this._nodes = nodes;\n    this._buffers = buffers;\n    this._length = typeof length === 'number' ? length : length.low;\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n  get id() {\n    return this._id;\n  }\n  get data() {\n    return this._data;\n  }\n  get isDelta() {\n    return this._isDelta;\n  }\n  get length() {\n    return this.data.length;\n  }\n  get nodes() {\n    return this.data.nodes;\n  }\n  get buffers() {\n    return this.data.buffers;\n  }\n  constructor(data, id, isDelta = false) {\n    this._data = data;\n    this._isDelta = isDelta;\n    this._id = typeof id === 'number' ? id : id.low;\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n  constructor(offset, length) {\n    this.offset = typeof offset === 'number' ? offset : offset.low;\n    this.length = typeof length === 'number' ? length : length.low;\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n  constructor(length, nullCount) {\n    this.length = typeof length === 'number' ? length : length.low;\n    this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n  }\n}\n/** @ignore */\nfunction messageHeaderFromJSON(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.fromJSON(message);\n      case MessageHeader.RecordBatch:\n        return RecordBatch.fromJSON(message);\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.fromJSON(message);\n    }\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\n/** @ignore */\nfunction decodeMessageHeader(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.decode(message.header(new _Schema()));\n      case MessageHeader.RecordBatch:\n        return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n    }\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\nfunction decodeSchema(_schema, dictionaries = new Map()) {\n  const fields = decodeSchemaFields(_schema, dictionaries);\n  return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\nfunction decodeRecordBatch(batch, version = MetadataVersion.V4) {\n  return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\nfunction decodeDictionaryBatch(batch, version = MetadataVersion.V4) {\n  return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\nfunction decodeBufferRegion(b) {\n  return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\nfunction decodeFieldNode(f) {\n  return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\nfunction decodeFieldNodes(batch) {\n  const nodes = [];\n  for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n    if (f = batch.nodes(i)) {\n      nodes[++j] = FieldNode.decode(f);\n    }\n  }\n  return nodes;\n}\n/** @ignore */\nfunction decodeBuffers(batch, version) {\n  const bufferRegions = [];\n  for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n    if (b = batch.buffers(i)) {\n      // If this Arrow buffer was written before version 4,\n      // advance the buffer's bb_pos 8 bytes to skip past\n      // the now-removed page_id field\n      if (version < MetadataVersion.V4) {\n        b.bb_pos += 8 * (i + 1);\n      }\n      bufferRegions[++j] = BufferRegion.decode(b);\n    }\n  }\n  return bufferRegions;\n}\n/** @ignore */\nfunction decodeSchemaFields(schema, dictionaries) {\n  const fields = [];\n  for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n    if (f = schema.fields(i)) {\n      fields[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return fields;\n}\n/** @ignore */\nfunction decodeFieldChildren(field, dictionaries) {\n  const children = [];\n  for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n    if (f = field.children(i)) {\n      children[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return children;\n}\n/** @ignore */\nfunction decodeField(f, dictionaries) {\n  let id;\n  let field;\n  let type;\n  let keys;\n  let dictType;\n  let dictMeta;\n  // If no dictionary encoding\n  if (!dictionaries || !(dictMeta = f.dictionary())) {\n    type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n    field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n  }\n  // tslint:disable\n  // If dictionary encoded and the first time we've seen this dictionary id, decode\n  // the data type and child fields, then wrap in a Dictionary type and insert the\n  // data type into the dictionary types map.\n  else if (!dictionaries.has(id = dictMeta.id().low)) {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n    dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n  // data type and wrap in a new Dictionary type and field.\n  else {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  return field || null;\n}\n/** @ignore */\nfunction decodeCustomMetadata(parent) {\n  const data = new Map();\n  if (parent) {\n    for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n        data.set(key, entry.value());\n      }\n    }\n  }\n  return data;\n}\n/** @ignore */\nfunction decodeIndexType(_type) {\n  return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\nfunction decodeFieldType(f, children) {\n  const typeId = f.typeType();\n  switch (typeId) {\n    case Type.NONE:\n      return new Null();\n    case Type.Null:\n      return new Null();\n    case Type.Binary:\n      return new Binary();\n    case Type.Utf8:\n      return new Utf8();\n    case Type.Bool:\n      return new Bool();\n    case Type.List:\n      return new List((children || [])[0]);\n    case Type.Struct_:\n      return new Struct(children || []);\n  }\n  switch (typeId) {\n    case Type.Int:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n        return new Int(t.isSigned(), t.bitWidth());\n      }\n    case Type.FloatingPoint:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n        return new Float(t.precision());\n      }\n    case Type.Decimal:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n        return new Decimal(t.scale(), t.precision());\n      }\n    case Type.Date:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n        return new Date_(t.unit());\n      }\n    case Type.Time:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n        return new Time(t.unit(), t.bitWidth());\n      }\n    case Type.Timestamp:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n        return new Timestamp(t.unit(), t.timezone());\n      }\n    case Type.Interval:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n        return new Interval(t.unit());\n      }\n    case Type.Union:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n        return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n      }\n    case Type.FixedSizeBinary:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n        return new FixedSizeBinary(t.byteWidth());\n      }\n    case Type.FixedSizeList:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n        return new FixedSizeList(t.listSize(), (children || [])[0]);\n      }\n    case Type.Map:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n        return new Map_((children || [])[0], t.keysSorted());\n      }\n  }\n  throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n/** @ignore */\nfunction encodeSchema(b, schema) {\n  const fieldOffsets = schema.fields.map(f => Field.encode(b, f));\n  _Schema.startFieldsVector(b, fieldOffsets.length);\n  const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n  const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  _Schema.startSchema(b);\n  _Schema.addFields(b, fieldsVectorOffset);\n  _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n  if (metadataOffset !== -1) {\n    _Schema.addCustomMetadata(b, metadataOffset);\n  }\n  return _Schema.endSchema(b);\n}\n/** @ignore */\nfunction encodeField(b, field) {\n  let nameOffset = -1;\n  let typeOffset = -1;\n  let dictionaryOffset = -1;\n  let type = field.type;\n  let typeId = field.typeId;\n  if (!DataType.isDictionary(type)) {\n    typeOffset = typeAssembler.visit(type, b);\n  } else {\n    typeId = type.dictionary.typeId;\n    dictionaryOffset = typeAssembler.visit(type, b);\n    typeOffset = typeAssembler.visit(type.dictionary, b);\n  }\n  const childOffsets = (type.children || []).map(f => Field.encode(b, f));\n  const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n  const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  if (field.name) {\n    nameOffset = b.createString(field.name);\n  }\n  _Field.startField(b);\n  _Field.addType(b, typeOffset);\n  _Field.addTypeType(b, typeId);\n  _Field.addChildren(b, childrenVectorOffset);\n  _Field.addNullable(b, !!field.nullable);\n  if (nameOffset !== -1) {\n    _Field.addName(b, nameOffset);\n  }\n  if (dictionaryOffset !== -1) {\n    _Field.addDictionary(b, dictionaryOffset);\n  }\n  if (metadataOffset !== -1) {\n    _Field.addCustomMetadata(b, metadataOffset);\n  }\n  return _Field.endField(b);\n}\n/** @ignore */\nfunction encodeRecordBatch(b, recordBatch) {\n  const nodes = recordBatch.nodes || [];\n  const buffers = recordBatch.buffers || [];\n  _RecordBatch.startNodesVector(b, nodes.length);\n  nodes.slice().reverse().forEach(n => FieldNode.encode(b, n));\n  const nodesVectorOffset = b.endVector();\n  _RecordBatch.startBuffersVector(b, buffers.length);\n  buffers.slice().reverse().forEach(b_ => BufferRegion.encode(b, b_));\n  const buffersVectorOffset = b.endVector();\n  _RecordBatch.startRecordBatch(b);\n  _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n  _RecordBatch.addNodes(b, nodesVectorOffset);\n  _RecordBatch.addBuffers(b, buffersVectorOffset);\n  return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n  const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n  _DictionaryBatch.startDictionaryBatch(b);\n  _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n  _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n  _DictionaryBatch.addData(b, dataOffset);\n  return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\nfunction encodeFieldNode(b, node) {\n  return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\nfunction encodeBufferRegion(b, node) {\n  return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\nconst platformIsLittleEndian = function () {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n}();","map":{"version":3,"names":["flatbuffers","Schema_","Message_","Schema","Field","toUint8Array","MessageHeader","MetadataVersion","instance","typeAssembler","fieldFromJSON","schemaFromJSON","recordBatchFromJSON","dictionaryBatchFromJSON","Long","Builder","ByteBuffer","Type","org","apache","arrow","flatbuf","_Field","_Schema","_Buffer","Buffer","_Message","Message","_KeyValue","KeyValue","_FieldNode","FieldNode","_Endianness","Endianness","_RecordBatch","RecordBatch","_DictionaryBatch","DictionaryBatch","DataType","Dictionary","Utf8","Binary","Decimal","FixedSizeBinary","List","FixedSizeList","Map_","Struct","Union","Bool","Null","Int","Float","Date_","Time","Interval","Timestamp","Int32","constructor","bodyLength","version","headerType","header","_version","_headerType","body","Uint8Array","_createHeader","_bodyLength","low","fromJSON","msg","message","V4","messageHeaderFromJSON","decode","buf","_message","getRootAsMessage","decodeMessageHeader","encode","b","headerOffset","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addVersion","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","asUint8Array","from","Error","type","nodes","_nodes","length","_length","buffers","_buffers","id","_id","data","_data","isDelta","_isDelta","BufferRegion","offset","nullCount","encodeField","decodeField","encodeSchema","decodeSchema","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","_schema","dictionaries","Map","fields","decodeSchemaFields","decodeCustomMetadata","batch","decodeFieldNodes","decodeBuffers","f","i","j","n","nodesLength","bufferRegions","buffersLength","bb_pos","schema","fieldsLength","decodeFieldChildren","field","children","childrenLength","keys","dictType","dictMeta","dictionary","decodeFieldType","name","nullable","has","indexType","decodeIndexType","set","isOrdered","get","parent","entry","key","customMetadataLength","customMetadata","value","_type","isSigned","bitWidth","typeId","typeType","NONE","Struct_","t","FloatingPoint","precision","scale","Date","unit","timezone","mode","typeIdsArray","byteWidth","listSize","keysSorted","fieldOffsets","map","startFieldsVector","fieldsVectorOffset","createFieldsVector","metadataOffset","metadata","size","createCustomMetadataVector","k","v","createString","val","startKeyValue","addKey","addValue","endKeyValue","startSchema","addFields","addEndianness","platformIsLittleEndian","Little","Big","addCustomMetadata","endSchema","nameOffset","typeOffset","dictionaryOffset","isDictionary","visit","childOffsets","childrenVectorOffset","createChildrenVector","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","endField","recordBatch","startNodesVector","slice","reverse","forEach","nodesVectorOffset","endVector","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","dictionaryBatch","dataOffset","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","node","createFieldNode","createBuffer","buffer","ArrayBuffer","DataView","setInt16","Int16Array"],"sources":["ipc/metadata/message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}