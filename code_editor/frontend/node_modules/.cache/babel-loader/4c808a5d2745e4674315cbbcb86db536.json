{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n  visitNull() {\n    return NullVector;\n  }\n  visitBool() {\n    return BoolVector;\n  }\n  visitInt() {\n    return IntVector;\n  }\n  visitInt8() {\n    return Int8Vector;\n  }\n  visitInt16() {\n    return Int16Vector;\n  }\n  visitInt32() {\n    return Int32Vector;\n  }\n  visitInt64() {\n    return Int64Vector;\n  }\n  visitUint8() {\n    return Uint8Vector;\n  }\n  visitUint16() {\n    return Uint16Vector;\n  }\n  visitUint32() {\n    return Uint32Vector;\n  }\n  visitUint64() {\n    return Uint64Vector;\n  }\n  visitFloat() {\n    return FloatVector;\n  }\n  visitFloat16() {\n    return Float16Vector;\n  }\n  visitFloat32() {\n    return Float32Vector;\n  }\n  visitFloat64() {\n    return Float64Vector;\n  }\n  visitUtf8() {\n    return Utf8Vector;\n  }\n  visitBinary() {\n    return BinaryVector;\n  }\n  visitFixedSizeBinary() {\n    return FixedSizeBinaryVector;\n  }\n  visitDate() {\n    return DateVector;\n  }\n  visitDateDay() {\n    return DateDayVector;\n  }\n  visitDateMillisecond() {\n    return DateMillisecondVector;\n  }\n  visitTimestamp() {\n    return TimestampVector;\n  }\n  visitTimestampSecond() {\n    return TimestampSecondVector;\n  }\n  visitTimestampMillisecond() {\n    return TimestampMillisecondVector;\n  }\n  visitTimestampMicrosecond() {\n    return TimestampMicrosecondVector;\n  }\n  visitTimestampNanosecond() {\n    return TimestampNanosecondVector;\n  }\n  visitTime() {\n    return TimeVector;\n  }\n  visitTimeSecond() {\n    return TimeSecondVector;\n  }\n  visitTimeMillisecond() {\n    return TimeMillisecondVector;\n  }\n  visitTimeMicrosecond() {\n    return TimeMicrosecondVector;\n  }\n  visitTimeNanosecond() {\n    return TimeNanosecondVector;\n  }\n  visitDecimal() {\n    return DecimalVector;\n  }\n  visitList() {\n    return ListVector;\n  }\n  visitStruct() {\n    return StructVector;\n  }\n  visitUnion() {\n    return UnionVector;\n  }\n  visitDenseUnion() {\n    return DenseUnionVector;\n  }\n  visitSparseUnion() {\n    return SparseUnionVector;\n  }\n  visitDictionary() {\n    return DictionaryVector;\n  }\n  visitInterval() {\n    return IntervalVector;\n  }\n  visitIntervalDayTime() {\n    return IntervalDayTimeVector;\n  }\n  visitIntervalYearMonth() {\n    return IntervalYearMonthVector;\n  }\n  visitFixedSizeList() {\n    return FixedSizeListVector;\n  }\n  visitMap() {\n    return MapVector;\n  }\n}\n/** @ignore */\nexport const instance = new GetVectorConstructor();","map":{"version":3,"names":["Visitor","BinaryVector","BoolVector","DateVector","DateDayVector","DateMillisecondVector","DecimalVector","DictionaryVector","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","Float16Vector","Float32Vector","Float64Vector","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","MapVector","NullVector","StructVector","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","Utf8Vector","GetVectorConstructor","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","instance"],"sources":["visitor/vectorctor.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}