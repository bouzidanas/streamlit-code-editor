{"ast":null,"code":"ace.define(\"ace/mode/zig_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var ZigHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: \"#dummy_main\"\n      }],\n      \"#block\": [{\n        token: [\"storage.type.zig\", \"text\", \"punctuation.section.braces.begin.zig\"],\n        regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(\\{)/,\n        push: [{\n          token: \"punctuation.section.braces.end.zig\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#dummy_main\"\n        }]\n      }],\n      \"#character_escapes\": [{\n        token: \"constant.character.escape.newline.zig\",\n        regex: /\\\\n/\n      }, {\n        token: \"constant.character.escape.carrigereturn.zig\",\n        regex: /\\\\r/\n      }, {\n        token: \"constant.character.escape.tabulator.zig\",\n        regex: /\\\\t/\n      }, {\n        token: \"constant.character.escape.backslash.zig\",\n        regex: /\\\\\\\\/\n      }, {\n        token: \"constant.character.escape.single-quote.zig\",\n        regex: /\\\\'/\n      }, {\n        token: \"constant.character.escape.double-quote.zig\",\n        regex: /\\\\\\\"/\n      }, {\n        token: \"constant.character.escape.hexidecimal.zig\",\n        regex: /\\\\x[a-fA-F\\d]{2}/\n      }, {\n        token: \"constant.character.escape.hexidecimal.zig\",\n        regex: /\\\\u\\{[a-fA-F\\d]{1,6}\\}/\n      }],\n      \"#comments\": [{\n        token: \"comment.line.documentation.zig\",\n        regex: /\\/\\/[!\\/](?=[^\\/])/,\n        push: [{\n          token: \"comment.line.documentation.zig\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          include: \"#commentContents\"\n        }, {\n          defaultToken: \"comment.line.documentation.zig\"\n        }]\n      }, {\n        token: \"comment.line.double-slash.zig\",\n        regex: /\\/\\//,\n        push: [{\n          token: \"comment.line.double-slash.zig\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          include: \"#commentContents\"\n        }, {\n          defaultToken: \"comment.line.double-slash.zig\"\n        }]\n      }],\n      \"#commentContents\": [{\n        token: \"keyword.todo.zig\",\n        regex: /\\b(?:TODO|FIXME|XXX|NOTE)\\b:?/\n      }],\n      \"#constants\": [{\n        token: \"constant.language.zig\",\n        regex: /\\b(?:null|undefined|true|false)\\b/\n      }, {\n        token: \"constant.numeric.integer.zig\",\n        regex: /\\b(?!\\.)-?[\\d_]+(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.integer.hexadecimal.zig\",\n        regex: /\\b(?!\\.)0x[a-fA-F\\d_]+(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.integer.octal.zig\",\n        regex: /\\b(?!\\.)0o[0-7_]+(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.integer.binary.zig\",\n        regex: /\\b(?!\\.)0b[01_]+(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.float.zig\",\n        regex: /(?!\\.)-?\\b[\\d_]+(?:\\.[\\d_]+)?(?:[eE][+-]?[\\d_]+)?(?!\\.)\\b/\n      }, {\n        token: \"constant.numeric.float.hexadecimal.zig\",\n        regex: /(?!\\.)-?\\b0x[a-fA-F\\d_]+(?:\\.[a-fA-F\\d_]+)?[pP]?(?:[+-]?[\\d_]+)?(?!\\.)\\b/\n      }],\n      \"#container_decl\": [{\n        token: \"entity.name.union.zig\",\n        regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*union\\s*[(\\{])/\n      }, {\n        token: \"entity.name.struct.zig\",\n        regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*struct\\s*[(\\{])/\n      }, {\n        token: \"entity.name.enum.zig\",\n        regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*enum\\s*[(\\{])/\n      }, {\n        token: \"entity.name.error.zig\",\n        regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*error\\s*[(\\{])/\n      }, {\n        token: [\"storage.type.error.zig\", \"punctuation.accessor.zig\", \"entity.name.error.zig\"],\n        regex: /\\b(error)(\\.)([a-zA-Z_]\\w*|@\\\".+\\\")/\n      }],\n      \"#dummy_main\": [{\n        include: \"#label\"\n      }, {\n        include: \"#function_type\"\n      }, {\n        include: \"#function_def\"\n      }, {\n        include: \"#punctuation\"\n      }, {\n        include: \"#storage_modifier\"\n      }, {\n        include: \"#container_decl\"\n      }, {\n        include: \"#constants\"\n      }, {\n        include: \"#comments\"\n      }, {\n        include: \"#strings\"\n      }, {\n        include: \"#storage\"\n      }, {\n        include: \"#keywords\"\n      }, {\n        include: \"#operators\"\n      }, {\n        include: \"#support\"\n      }, {\n        include: \"#field_decl\"\n      }, {\n        include: \"#block\"\n      }, {\n        include: \"#function_call\"\n      }, {\n        include: \"#enum_literal\"\n      }, {\n        include: \"#variables\"\n      }],\n      \"#enum_literal\": [{\n        token: \"constant.language.enum\",\n        regex: /(?!\\w|\\)|\\?|\\}|\\]|\\*|\\.)\\.(?:[a-zA-Z_]\\w*\\b|@\\\"[^\\\"]*\\\")(?!\\(|\\s*=[^=>])/\n      }],\n      \"#field_decl\": [{\n        token: [\"variable.other.member.zig\", \"text\", \"punctuation.separator.zig\", \"text\"],\n        regex: /([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,\n        push: [{\n          token: [\"storage.type.zig\", \"text\", \"punctuation.separator.zig\", \"keyword.operator.assignment.zig\"],\n          regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(=)|$)/,\n          next: \"pop\"\n        }, {\n          include: \"#dummy_main\"\n        }]\n      }],\n      \"#function_call\": [{\n        token: \"variable.function.zig\",\n        regex: /\\b(?!fn)(?:[a-zA-Z_]\\w*|@\\\".+\\\")(?=\\s*\\()/\n      }],\n      \"#keywords\": [{\n        token: \"keyword.control.zig\",\n        regex: /\\b(?:while|for|break|return|continue|asm|defer|errdefer|unreachable)\\b/\n      }, {\n        token: \"keyword.control.async.zig\",\n        regex: /\\b(?:async|await|suspend|nosuspend|resume)\\b/\n      }, {\n        token: \"keyword.control.conditional.zig\",\n        regex: /\\b(?:if|else|switch|try|catch|orelse)\\b/\n      }, {\n        token: \"keyword.control.import.zig\",\n        regex: /\\b(?!\\w)(?:@import|@cImport|@cInclude)\\b/\n      }, {\n        token: \"keyword.other.usingnamespace.zig\",\n        regex: /\\busingnamespace\\b/\n      }],\n      \"#label\": [{\n        token: [\"keyword.control.zig\", \"text\", \"entity.name.label.zig\", \"entity.name.label.zig\"],\n        regex: /\\b(break|continue)(\\s*:\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")\\b|\\b(?!\\d)([a-zA-Z_]\\w*|@\\\".+\\\")\\b(?=\\s*:\\s*(?:\\{|while\\b))/\n      }],\n      \"#operators\": [{\n        token: \"keyword.operator.zig\",\n        regex: /\\b!\\b/\n      }, {\n        token: \"keyword.operator.logical.zig\",\n        regex: /==|(?:!|>|<)=?/\n      }, {\n        token: \"keyword.operator.word.zig\",\n        regex: /\\b(?:and|or)\\b/\n      }, {\n        token: \"keyword.operator.assignment.zig\",\n        regex: /(?:(?:\\+|-|\\*)\\%?|\\/|%|<<|>>|&|\\|(?=[^\\|])|\\^)?=/\n      }, {\n        token: \"keyword.operator.arithmetic.zig\",\n        regex: /(?:\\+|-|\\*)\\%?|\\/(?!\\/)|%/\n      }, {\n        token: \"keyword.operator.bitwise.zig\",\n        regex: /<<|>>|&(?=[a-zA-Z_]|@\\\")|\\|(?=[^\\|])|\\^|~/\n      }, {\n        token: \"keyword.operator.other.zig\",\n        regex: /\\+\\+|\\*\\*|->|\\.\\?|\\.\\*|&(?=[a-zA-Z_]|@\\\")|\\?|\\|\\||\\.{2,3}/\n      }],\n      \"#param_list\": [{\n        token: [\"variable.parameter.zig\", \"text\", \"punctuation.separator.zig\", \"text\"],\n        regex: /([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,\n        push: [{\n          token: [\"storage.type.zig\", \"text\", \"punctuation.separator.zig\", \"punctuation.section.parens.end.zig\"],\n          regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(\\)))/,\n          next: \"pop\"\n        }, {\n          include: \"#dummy_main\"\n        }, {\n          token: \"storage.type.zig\",\n          regex: /[a-zA-Z_][\\w.]*|@\\\".+\\\"/\n        }]\n      }],\n      \"#punctuation\": [{\n        token: \"punctuation.separator.zig\",\n        regex: /,/\n      }, {\n        token: \"punctuation.terminator.zig\",\n        regex: /;/\n      }, {\n        token: \"punctuation.section.parens.begin.zig\",\n        regex: /\\(/\n      }, {\n        token: \"punctuation.section.parens.end.zig\",\n        regex: /\\)/\n      }],\n      \"#storage\": [{\n        token: \"storage.type.zig\",\n        regex: /\\b(?:bool|void|noreturn|type|anyerror|anytype)\\b/\n      }, {\n        token: \"storage.type.integer.zig\",\n        regex: /\\b(?!\\.)(?:[iu]\\d+|[iu]size|comptime_int)\\b/\n      }, {\n        token: \"storage.type.float.zig\",\n        regex: /\\b(?:f16|f32|f64|f128|comptime_float)\\b/\n      }, {\n        token: \"storage.type.c_compat.zig\",\n        regex: /\\b(?:c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\\b/\n      }, {\n        token: [\"storage.type.zig\", \"text\", \"keyword.operator.zig\", \"text\", \"storage.type.zig\"],\n        regex: /\\b(anyframe)\\b(\\s*)((?:->)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")\\b(?!\\s*\\())?/\n      }, {\n        token: \"storage.type.function.zig\",\n        regex: /\\bfn\\b/\n      }, {\n        token: \"storage.type.test.zig\",\n        regex: /\\btest\\b/\n      }, {\n        token: \"storage.type.struct.zig\",\n        regex: /\\bstruct\\b/\n      }, {\n        token: \"storage.type.enum.zig\",\n        regex: /\\benum\\b/\n      }, {\n        token: \"storage.type.union.zig\",\n        regex: /\\bunion\\b/\n      }, {\n        token: \"storage.type.error.zig\",\n        regex: /\\berror\\b/\n      }],\n      \"#storage_modifier\": [{\n        token: \"storage.modifier.zig\",\n        regex: /\\b(?:const|var|extern|packed|export|pub|noalias|inline|noinline|comptime|volatile|align|linksection|threadlocal|allowzero)\\b/\n      }],\n      \"#strings\": [{\n        token: \"string.quoted.single.zig\",\n        regex: /\\'/,\n        push: [{\n          token: \"string.quoted.single.zig\",\n          regex: /\\'/,\n          next: \"pop\"\n        }, {\n          include: \"#character_escapes\"\n        }, {\n          token: \"invalid.illegal.character.zig\",\n          regex: /\\\\[^\\'][^\\']*?/\n        }, {\n          defaultToken: \"string.quoted.single.zig\"\n        }]\n      }, {\n        token: \"string.quoted.double.zig\",\n        regex: /c?\\\"/,\n        push: [{\n          token: \"string.quoted.double.zig\",\n          regex: /\\\"/,\n          next: \"pop\"\n        }, {\n          include: \"#character_escapes\"\n        }, {\n          token: \"invalid.illegal.character.zig\",\n          regex: /\\\\[^\\'][^\\']*?/\n        }, {\n          defaultToken: \"string.quoted.double.zig\"\n        }]\n      }, {\n        token: \"string.quoted.other.zig\",\n        regex: /c?\\\\\\\\/,\n        push: [{\n          token: \"string.quoted.other.zig\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quoted.other.zig\"\n        }]\n      }],\n      \"#function_type\": [{\n        token: [\"storage.type.function.zig\", \"text\", \"punctuation.section.parens.begin.zig\"],\n        regex: /\\b(fn)(\\s*)(\\()/,\n        push: [{\n          token: [\"text\", \"storage.type.zig\", \"text\", \"keyword.operator.zig\", \"text\", \"storage.type.zig\"],\n          regex: /(\\s*)(?:([a-zA-Z_]\\w*|@\\\".+\\\"))?(\\s*)((?:!)?)(\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")/,\n          next: \"pop\"\n        }, {\n          include: \"#label\"\n        }, {\n          include: \"#param_list\"\n        }, {\n          token: \"storage.type.zig\",\n          regex: /[a-zA-Z_]\\w*|@\\\".+\\\"/\n        }, {\n          include: \"#dummy_main\"\n        }, {\n          defaultToken: \"meta.function.parameters.zig\"\n        }]\n      }],\n      \"#function_def\": [{\n        token: [\"text\", \"entity.name.function\", \"punctuation.section.parens.begin.zig\"],\n        regex: /(?=fn\\s+)(\\s+)([a-zA-Z_]\\w*|@\\\".+\\\")(\\()/,\n        push: [{\n          token: [\"text\", \"storage.type.zig\", \"keyword.operator.zig\", \"text\", \"storage.type.zig\"],\n          regex: /(\\s*)((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)((?:!)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")?)/,\n          next: \"pop\"\n        }, {\n          include: \"#label\"\n        }, {\n          include: \"#param_list\"\n        }, {\n          token: \"storage.type.zig\",\n          regex: /[a-zA-Z_][\\w.]*|@\\\".+\\\"/\n        }, {\n          include: \"#dummy_main\"\n        }]\n      }],\n      \"#support\": [{\n        token: \"support.function.zig\",\n        regex: /\\b@(?!\\w|\\\"|[0-9])[a-zA-Z_]\\w*\\b/\n      }],\n      \"#variables\": [{\n        token: \"variable.constant.zig\",\n        regex: /\\b[_A-Z][_A-Z0-9]+\\b/\n      }, {\n        token: \"entity.name.type.zig\",\n        regex: /\\b[_a-zA-Z][_a-zA-Z0-9]*_t\\b/\n      }, {\n        token: \"entity.name.type.zig\",\n        regex: /\\b[A-Z][a-zA-Z0-9]*\\b/\n      }, {\n        token: \"variable.zig\",\n        regex: /\\b[_a-zA-Z][_a-zA-Z0-9]*\\b/\n      }]\n    };\n    this.normalizeRules();\n  };\n  ZigHighlightRules.metaData = {\n    fileTypes: [\"zig\"],\n    keyEquivalent: \"^~Z\",\n    name: \"Zig\",\n    scopeName: \"source.zig\"\n  };\n  oop.inherits(ZigHighlightRules, TextHighlightRules);\n  exports.ZigHighlightRules = ZigHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/zig\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/zig_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var ZigHighlightRules = require(\"./zig_highlight_rules\").ZigHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = ZigHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/zig\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/zig\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","ZigHighlightRules","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","keyEquivalent","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-zig.js"],"sourcesContent":["ace.define(\"ace/mode/zig_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar ZigHighlightRules = function () {\n    this.$rules = {\n        start: [{\n                include: \"#dummy_main\"\n            }],\n        \"#block\": [{\n                token: [\n                    \"storage.type.zig\",\n                    \"text\",\n                    \"punctuation.section.braces.begin.zig\"\n                ],\n                regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(\\{)/,\n                push: [{\n                        token: \"punctuation.section.braces.end.zig\",\n                        regex: /\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#dummy_main\"\n                    }]\n            }],\n        \"#character_escapes\": [{\n                token: \"constant.character.escape.newline.zig\",\n                regex: /\\\\n/\n            }, {\n                token: \"constant.character.escape.carrigereturn.zig\",\n                regex: /\\\\r/\n            }, {\n                token: \"constant.character.escape.tabulator.zig\",\n                regex: /\\\\t/\n            }, {\n                token: \"constant.character.escape.backslash.zig\",\n                regex: /\\\\\\\\/\n            }, {\n                token: \"constant.character.escape.single-quote.zig\",\n                regex: /\\\\'/\n            }, {\n                token: \"constant.character.escape.double-quote.zig\",\n                regex: /\\\\\\\"/\n            }, {\n                token: \"constant.character.escape.hexidecimal.zig\",\n                regex: /\\\\x[a-fA-F\\d]{2}/\n            }, {\n                token: \"constant.character.escape.hexidecimal.zig\",\n                regex: /\\\\u\\{[a-fA-F\\d]{1,6}\\}/\n            }],\n        \"#comments\": [{\n                token: \"comment.line.documentation.zig\",\n                regex: /\\/\\/[!\\/](?=[^\\/])/,\n                push: [{\n                        token: \"comment.line.documentation.zig\",\n                        regex: /$/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#commentContents\"\n                    }, {\n                        defaultToken: \"comment.line.documentation.zig\"\n                    }]\n            }, {\n                token: \"comment.line.double-slash.zig\",\n                regex: /\\/\\//,\n                push: [{\n                        token: \"comment.line.double-slash.zig\",\n                        regex: /$/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#commentContents\"\n                    }, {\n                        defaultToken: \"comment.line.double-slash.zig\"\n                    }]\n            }],\n        \"#commentContents\": [{\n                token: \"keyword.todo.zig\",\n                regex: /\\b(?:TODO|FIXME|XXX|NOTE)\\b:?/\n            }],\n        \"#constants\": [{\n                token: \"constant.language.zig\",\n                regex: /\\b(?:null|undefined|true|false)\\b/\n            }, {\n                token: \"constant.numeric.integer.zig\",\n                regex: /\\b(?!\\.)-?[\\d_]+(?!\\.)\\b/\n            }, {\n                token: \"constant.numeric.integer.hexadecimal.zig\",\n                regex: /\\b(?!\\.)0x[a-fA-F\\d_]+(?!\\.)\\b/\n            }, {\n                token: \"constant.numeric.integer.octal.zig\",\n                regex: /\\b(?!\\.)0o[0-7_]+(?!\\.)\\b/\n            }, {\n                token: \"constant.numeric.integer.binary.zig\",\n                regex: /\\b(?!\\.)0b[01_]+(?!\\.)\\b/\n            }, {\n                token: \"constant.numeric.float.zig\",\n                regex: /(?!\\.)-?\\b[\\d_]+(?:\\.[\\d_]+)?(?:[eE][+-]?[\\d_]+)?(?!\\.)\\b/\n            }, {\n                token: \"constant.numeric.float.hexadecimal.zig\",\n                regex: /(?!\\.)-?\\b0x[a-fA-F\\d_]+(?:\\.[a-fA-F\\d_]+)?[pP]?(?:[+-]?[\\d_]+)?(?!\\.)\\b/\n            }],\n        \"#container_decl\": [{\n                token: \"entity.name.union.zig\",\n                regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*union\\s*[(\\{])/\n            }, {\n                token: \"entity.name.struct.zig\",\n                regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*struct\\s*[(\\{])/\n            }, {\n                token: \"entity.name.enum.zig\",\n                regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*enum\\s*[(\\{])/\n            }, {\n                token: \"entity.name.error.zig\",\n                regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*error\\s*[(\\{])/\n            }, {\n                token: [\n                    \"storage.type.error.zig\",\n                    \"punctuation.accessor.zig\",\n                    \"entity.name.error.zig\"\n                ],\n                regex: /\\b(error)(\\.)([a-zA-Z_]\\w*|@\\\".+\\\")/\n            }],\n        \"#dummy_main\": [{\n                include: \"#label\"\n            }, {\n                include: \"#function_type\"\n            }, {\n                include: \"#function_def\"\n            }, {\n                include: \"#punctuation\"\n            }, {\n                include: \"#storage_modifier\"\n            }, {\n                include: \"#container_decl\"\n            }, {\n                include: \"#constants\"\n            }, {\n                include: \"#comments\"\n            }, {\n                include: \"#strings\"\n            }, {\n                include: \"#storage\"\n            }, {\n                include: \"#keywords\"\n            }, {\n                include: \"#operators\"\n            }, {\n                include: \"#support\"\n            }, {\n                include: \"#field_decl\"\n            }, {\n                include: \"#block\"\n            }, {\n                include: \"#function_call\"\n            }, {\n                include: \"#enum_literal\"\n            }, {\n                include: \"#variables\"\n            }],\n        \"#enum_literal\": [{\n                token: \"constant.language.enum\",\n                regex: /(?!\\w|\\)|\\?|\\}|\\]|\\*|\\.)\\.(?:[a-zA-Z_]\\w*\\b|@\\\"[^\\\"]*\\\")(?!\\(|\\s*=[^=>])/\n            }],\n        \"#field_decl\": [{\n                token: [\n                    \"variable.other.member.zig\",\n                    \"text\",\n                    \"punctuation.separator.zig\",\n                    \"text\"\n                ],\n                regex: /([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,\n                push: [{\n                        token: [\n                            \"storage.type.zig\",\n                            \"text\",\n                            \"punctuation.separator.zig\",\n                            \"keyword.operator.assignment.zig\"\n                        ],\n                        regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(=)|$)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#dummy_main\"\n                    }]\n            }],\n        \"#function_call\": [{\n                token: \"variable.function.zig\",\n                regex: /\\b(?!fn)(?:[a-zA-Z_]\\w*|@\\\".+\\\")(?=\\s*\\()/\n            }],\n        \"#keywords\": [{\n                token: \"keyword.control.zig\",\n                regex: /\\b(?:while|for|break|return|continue|asm|defer|errdefer|unreachable)\\b/\n            }, {\n                token: \"keyword.control.async.zig\",\n                regex: /\\b(?:async|await|suspend|nosuspend|resume)\\b/\n            }, {\n                token: \"keyword.control.conditional.zig\",\n                regex: /\\b(?:if|else|switch|try|catch|orelse)\\b/\n            }, {\n                token: \"keyword.control.import.zig\",\n                regex: /\\b(?!\\w)(?:@import|@cImport|@cInclude)\\b/\n            }, {\n                token: \"keyword.other.usingnamespace.zig\",\n                regex: /\\busingnamespace\\b/\n            }],\n        \"#label\": [{\n                token: [\n                    \"keyword.control.zig\",\n                    \"text\",\n                    \"entity.name.label.zig\",\n                    \"entity.name.label.zig\"\n                ],\n                regex: /\\b(break|continue)(\\s*:\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")\\b|\\b(?!\\d)([a-zA-Z_]\\w*|@\\\".+\\\")\\b(?=\\s*:\\s*(?:\\{|while\\b))/\n            }],\n        \"#operators\": [{\n                token: \"keyword.operator.zig\",\n                regex: /\\b!\\b/\n            }, {\n                token: \"keyword.operator.logical.zig\",\n                regex: /==|(?:!|>|<)=?/\n            }, {\n                token: \"keyword.operator.word.zig\",\n                regex: /\\b(?:and|or)\\b/\n            }, {\n                token: \"keyword.operator.assignment.zig\",\n                regex: /(?:(?:\\+|-|\\*)\\%?|\\/|%|<<|>>|&|\\|(?=[^\\|])|\\^)?=/\n            }, {\n                token: \"keyword.operator.arithmetic.zig\",\n                regex: /(?:\\+|-|\\*)\\%?|\\/(?!\\/)|%/\n            }, {\n                token: \"keyword.operator.bitwise.zig\",\n                regex: /<<|>>|&(?=[a-zA-Z_]|@\\\")|\\|(?=[^\\|])|\\^|~/\n            }, {\n                token: \"keyword.operator.other.zig\",\n                regex: /\\+\\+|\\*\\*|->|\\.\\?|\\.\\*|&(?=[a-zA-Z_]|@\\\")|\\?|\\|\\||\\.{2,3}/\n            }],\n        \"#param_list\": [{\n                token: [\n                    \"variable.parameter.zig\",\n                    \"text\",\n                    \"punctuation.separator.zig\",\n                    \"text\"\n                ],\n                regex: /([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,\n                push: [{\n                        token: [\n                            \"storage.type.zig\",\n                            \"text\",\n                            \"punctuation.separator.zig\",\n                            \"punctuation.section.parens.end.zig\"\n                        ],\n                        regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(\\)))/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#dummy_main\"\n                    }, {\n                        token: \"storage.type.zig\",\n                        regex: /[a-zA-Z_][\\w.]*|@\\\".+\\\"/\n                    }]\n            }],\n        \"#punctuation\": [{\n                token: \"punctuation.separator.zig\",\n                regex: /,/\n            }, {\n                token: \"punctuation.terminator.zig\",\n                regex: /;/\n            }, {\n                token: \"punctuation.section.parens.begin.zig\",\n                regex: /\\(/\n            }, {\n                token: \"punctuation.section.parens.end.zig\",\n                regex: /\\)/\n            }],\n        \"#storage\": [{\n                token: \"storage.type.zig\",\n                regex: /\\b(?:bool|void|noreturn|type|anyerror|anytype)\\b/\n            }, {\n                token: \"storage.type.integer.zig\",\n                regex: /\\b(?!\\.)(?:[iu]\\d+|[iu]size|comptime_int)\\b/\n            }, {\n                token: \"storage.type.float.zig\",\n                regex: /\\b(?:f16|f32|f64|f128|comptime_float)\\b/\n            }, {\n                token: \"storage.type.c_compat.zig\",\n                regex: /\\b(?:c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\\b/\n            }, {\n                token: [\n                    \"storage.type.zig\",\n                    \"text\",\n                    \"keyword.operator.zig\",\n                    \"text\",\n                    \"storage.type.zig\"\n                ],\n                regex: /\\b(anyframe)\\b(\\s*)((?:->)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")\\b(?!\\s*\\())?/\n            }, {\n                token: \"storage.type.function.zig\",\n                regex: /\\bfn\\b/\n            }, {\n                token: \"storage.type.test.zig\",\n                regex: /\\btest\\b/\n            }, {\n                token: \"storage.type.struct.zig\",\n                regex: /\\bstruct\\b/\n            }, {\n                token: \"storage.type.enum.zig\",\n                regex: /\\benum\\b/\n            }, {\n                token: \"storage.type.union.zig\",\n                regex: /\\bunion\\b/\n            }, {\n                token: \"storage.type.error.zig\",\n                regex: /\\berror\\b/\n            }],\n        \"#storage_modifier\": [{\n                token: \"storage.modifier.zig\",\n                regex: /\\b(?:const|var|extern|packed|export|pub|noalias|inline|noinline|comptime|volatile|align|linksection|threadlocal|allowzero)\\b/\n            }],\n        \"#strings\": [{\n                token: \"string.quoted.single.zig\",\n                regex: /\\'/,\n                push: [{\n                        token: \"string.quoted.single.zig\",\n                        regex: /\\'/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#character_escapes\"\n                    }, {\n                        token: \"invalid.illegal.character.zig\",\n                        regex: /\\\\[^\\'][^\\']*?/\n                    }, {\n                        defaultToken: \"string.quoted.single.zig\"\n                    }]\n            }, {\n                token: \"string.quoted.double.zig\",\n                regex: /c?\\\"/,\n                push: [{\n                        token: \"string.quoted.double.zig\",\n                        regex: /\\\"/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#character_escapes\"\n                    }, {\n                        token: \"invalid.illegal.character.zig\",\n                        regex: /\\\\[^\\'][^\\']*?/\n                    }, {\n                        defaultToken: \"string.quoted.double.zig\"\n                    }]\n            }, {\n                token: \"string.quoted.other.zig\",\n                regex: /c?\\\\\\\\/,\n                push: [{\n                        token: \"string.quoted.other.zig\",\n                        regex: /$/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string.quoted.other.zig\"\n                    }]\n            }],\n        \"#function_type\": [{\n                token: [\n                    \"storage.type.function.zig\",\n                    \"text\",\n                    \"punctuation.section.parens.begin.zig\"\n                ],\n                regex: /\\b(fn)(\\s*)(\\()/,\n                push: [{\n                        token: [\n                            \"text\",\n                            \"storage.type.zig\",\n                            \"text\",\n                            \"keyword.operator.zig\",\n                            \"text\",\n                            \"storage.type.zig\"\n                        ],\n                        regex: /(\\s*)(?:([a-zA-Z_]\\w*|@\\\".+\\\"))?(\\s*)((?:!)?)(\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#label\"\n                    }, {\n                        include: \"#param_list\"\n                    }, {\n                        token: \"storage.type.zig\",\n                        regex: /[a-zA-Z_]\\w*|@\\\".+\\\"/\n                    }, {\n                        include: \"#dummy_main\"\n                    }, {\n                        defaultToken: \"meta.function.parameters.zig\"\n                    }]\n            }],\n        \"#function_def\": [{\n                token: [\n                    \"text\",\n                    \"entity.name.function\",\n                    \"punctuation.section.parens.begin.zig\"\n                ],\n                regex: /(?=fn\\s+)(\\s+)([a-zA-Z_]\\w*|@\\\".+\\\")(\\()/,\n                push: [{\n                        token: [\n                            \"text\",\n                            \"storage.type.zig\",\n                            \"keyword.operator.zig\",\n                            \"text\",\n                            \"storage.type.zig\"\n                        ],\n                        regex: /(\\s*)((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)((?:!)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")?)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#label\"\n                    }, {\n                        include: \"#param_list\"\n                    }, {\n                        token: \"storage.type.zig\",\n                        regex: /[a-zA-Z_][\\w.]*|@\\\".+\\\"/\n                    }, {\n                        include: \"#dummy_main\"\n                    }]\n            }],\n        \"#support\": [{\n                token: \"support.function.zig\",\n                regex: /\\b@(?!\\w|\\\"|[0-9])[a-zA-Z_]\\w*\\b/\n            }],\n        \"#variables\": [{\n                token: \"variable.constant.zig\",\n                regex: /\\b[_A-Z][_A-Z0-9]+\\b/\n            }, {\n                token: \"entity.name.type.zig\",\n                regex: /\\b[_a-zA-Z][_a-zA-Z0-9]*_t\\b/\n            }, {\n                token: \"entity.name.type.zig\",\n                regex: /\\b[A-Z][a-zA-Z0-9]*\\b/\n            }, {\n                token: \"variable.zig\",\n                regex: /\\b[_a-zA-Z][_a-zA-Z0-9]*\\b/\n            }]\n    };\n    this.normalizeRules();\n};\nZigHighlightRules.metaData = {\n    fileTypes: [\"zig\"],\n    keyEquivalent: \"^~Z\",\n    name: \"Zig\",\n    scopeName: \"source.zig\"\n};\noop.inherits(ZigHighlightRules, TextHighlightRules);\nexports.ZigHighlightRules = ZigHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/zig\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/zig_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ZigHighlightRules = require(\"./zig_highlight_rules\").ZigHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = ZigHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/zig\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/zig\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}