{"ast":null,"code":"import{useEffect,useRef}from\"react\";import AceEditor from\"react-ace\";import ace from\"ace-builds\";import\"ace-builds/webpack-resolver\";import\"ace-builds/src-noconflict/mode-python\";import\"ace-builds/src-noconflict/mode-javascript\";import\"ace-builds/src-noconflict/ext-language_tools\";import\"ace-builds/src-noconflict/ext-searchbox\";import\"ace-builds/src-noconflict/ext-prompt\";import\"ace-builds/src-noconflict/ext-modelist\";import\"ace-builds/src-noconflict/ext-keybinding_menu\";import{jsx as _jsx}from\"react/jsx-runtime\";export const Editor=_ref=>{let{lang,theme,shortcuts,props,snippetString,commands,completions,ghostText,keybindingString,editorRef,code,replaceCompleter,onChange,onSelectionChange,onBlur}=_ref;let commandsList=useRef(commands);useEffect(()=>{if(editorRef.current){// Add/remove keybindings\nace.require('ace/autocomplete').Autocomplete.for(editorRef.current.editor);const keybindings=JSON.parse(keybindingString);if(keybindings.commands&&keybindings.commands.length>0){// const bindkeySelector = editorRef.current.editor.commands.platform as string;\nkeybindings.commands.forEach(binding=>{if(binding.name&&typeof binding.name===\"string\"){var _editorRef$current$ed;if(JSON.stringify((_editorRef$current$ed=editorRef.current.editor.commands.commands[binding.name].bindKey)!==null&&_editorRef$current$ed!==void 0?_editorRef$current$ed:\"\")!==JSON.stringify(binding.bindkey)){const newCommand={...editorRef.current.editor.commands.commands[binding.name]};newCommand.bindKey=binding.bindkey;editorRef.current.editor.commands.addCommand(newCommand);commandsList.current=[...commandsList.current,newCommand];}}});}if(keybindings.completer&&keybindings.completer.length>0){// const bindkeySelector = editorRef.current.editor.completer.keyboardHandler.platform as string;\nkeybindings.completer.forEach(binding=>{if(binding.name&&typeof binding.name===\"string\"){var _editorRef$current$ed2;if(JSON.stringify((_editorRef$current$ed2=editorRef.current.editor.completer.keyboardHandler.commands[binding.name].bindKey)!==null&&_editorRef$current$ed2!==void 0?_editorRef$current$ed2:\"\")!==JSON.stringify(binding.bindkey)){const newCommand={...editorRef.current.editor.completer.keyboardHandler.commands[binding.name]};newCommand.bindKey=binding.bindkey;editorRef.current.editor.completer.keyboardHandler.addCommand(newCommand);}}});}// Add/remove snippets\nace.require(\"ace/ext/keybinding_menu\").init(editorRef.current.editor);const snippetManager=ace.require('ace/snippets').snippetManager;const snippets=JSON.parse(snippetString);for(const[snippetsLang,snippetsAddRemove]of Object.entries(snippets)){if(snippetsAddRemove[0])snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0],snippetsLang),snippetsLang);if(snippetsAddRemove[1])snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1],snippetsLang),snippetsLang);}// Add completions\nif(completions.length>0){const customCompleter={getCompletions:(editor,session,pos,prefix,callback)=>{callback(null,completions);}};if(replaceCompleter){editorRef.current.editor.completers.pop();}ace.require(\"ace/ext/language_tools\").addCompleter(customCompleter);}}},[snippetString,keybindingString]);useEffect(()=>{if(editorRef.current&&ghostText!==\"\"){const aceInline=ace.require(\"ace/autocomplete/inline\").AceInline;const inline=new aceInline();const testCompletion={snippet:ghostText};const result=inline.show(editorRef.current.editor,testCompletion,\"\");!result&&inline.hide()&&console.log(\"failed to show ghost text\");}},[ghostText,editorRef]);return/*#__PURE__*/_jsx(AceEditor,{ref:editorRef,name:\"REACT_ACE_EDITOR\",mode:lang,theme:theme,value:code,keyboardHandler:shortcuts,commands:commandsList.current,onChange:onChange,onSelectionChange:onSelectionChange,onBlur:onBlur,...props});};","map":{"version":3,"names":["useEffect","useRef","AceEditor","ace","jsx","_jsx","Editor","_ref","lang","theme","shortcuts","props","snippetString","commands","completions","ghostText","keybindingString","editorRef","code","replaceCompleter","onChange","onSelectionChange","onBlur","commandsList","current","require","Autocomplete","for","editor","keybindings","JSON","parse","length","forEach","binding","name","_editorRef$current$ed","stringify","bindKey","bindkey","newCommand","addCommand","completer","_editorRef$current$ed2","keyboardHandler","init","snippetManager","snippets","snippetsLang","snippetsAddRemove","Object","entries","register","parseSnippetFile","unregister","customCompleter","getCompletions","session","pos","prefix","callback","completers","pop","addCompleter","aceInline","AceInline","inline","testCompletion","snippet","result","show","hide","console","log","ref","mode","value"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/src/editor.tsx"],"sourcesContent":["import { useEffect, useRef} from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\n\nexport interface KeyBinding {\n    bindkey: string | object,\n    name: string\n}\n\nexport interface EditorKeyBindings {\n  commands?: KeyBinding[],\n  completer?: KeyBinding[]\n}\n\nexport type EditorProps = {\n    code: string,\n    lang: string,\n    theme: string,\n    shortcuts: string,\n    props: any,\n    editorRef: any,\n    snippetString: string,\n    ghostText: string,\n    commands: object[],\n    completions: object[],\n    keybindingString: string,\n    replaceCompleter: boolean,\n    onChange: (value: string, event?: any) => void,\n    onSelectionChange: (value: any, event?: any) => void,\n    onBlur: (event: any, editor?: any) => void\n  }\n  \nexport const Editor = ({ lang, theme, shortcuts, props, snippetString, commands, completions, ghostText, keybindingString, editorRef, code, replaceCompleter, onChange, onSelectionChange, onBlur }: EditorProps ) => {\n    \n  let commandsList = useRef<object[]>(commands);\n  useEffect(() => {\n    if(editorRef.current){\n\n      // Add/remove keybindings\n      ace.require('ace/autocomplete').Autocomplete.for(editorRef.current.editor);\n      const keybindings = JSON.parse(keybindingString) as EditorKeyBindings;\n      if(keybindings.commands && keybindings.commands.length > 0){\n        // const bindkeySelector = editorRef.current.editor.commands.platform as string;\n        keybindings.commands.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.commands.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.commands.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.commands.addCommand(newCommand);\n                commandsList.current= [...commandsList.current, newCommand];\n              }\n            }\n   \n        });\n      }\n      if(keybindings.completer && keybindings.completer.length > 0){\n        // const bindkeySelector = editorRef.current.editor.completer.keyboardHandler.platform as string;\n        keybindings.completer.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.completer.keyboardHandler.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.completer.keyboardHandler.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.completer.keyboardHandler.addCommand(newCommand);\n              }\n            }\n        });\n      }\n\n      // Add/remove snippets\n      ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current.editor);\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      const snippets = JSON.parse(snippetString) as object;\n      for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)){\n        if(snippetsAddRemove[0])\n          snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang)\n        \n        if(snippetsAddRemove[1])\n          snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang)\n      }\n\n      // Add completions\n      if (completions.length > 0) {\n        const customCompleter = {\n          getCompletions: (\n              editor: ace.Ace.Editor,\n              session: ace.Ace.EditSession,\n              pos: ace.Ace.Point,\n              prefix: string,\n              callback: ace.Ace.CompleterCallback\n          ): void => {\n              callback(\n                  null,\n                  (completions as ace.Ace.Completion[])\n              );\n            },\n          };\n        if(replaceCompleter) {\n          editorRef.current.editor.completers.pop();\n        }\n        ace.require(\"ace/ext/language_tools\").addCompleter(customCompleter);\n      }\n    }\n  }, [snippetString, keybindingString]);\n\n  useEffect(() => {\n    if(editorRef.current && ghostText !== \"\"){\n      const aceInline = ace.require(\"ace/autocomplete/inline\").AceInline;\n      const inline = new aceInline();\n      const testCompletion: ace.Ace.Completion = {\n        snippet: ghostText,\n      }\n      const result = inline.show(editorRef.current.editor, testCompletion, \"\");\n      !result && inline.hide() && console.log(\"failed to show ghost text\");\n    }\n  }, [ghostText, editorRef]);\n\n  return (\n          <AceEditor\n           ref={editorRef}\n           name=\"REACT_ACE_EDITOR\"\n           mode={lang}\n           theme={theme}\n           value={code}\n           keyboardHandler={shortcuts}\n           commands={commandsList.current}\n           onChange={onChange}\n           onSelectionChange={onSelectionChange}\n           onBlur={onBlur}\n           {...props}/>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}