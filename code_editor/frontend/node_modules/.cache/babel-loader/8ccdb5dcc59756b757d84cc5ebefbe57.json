{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\n/** @ignore */\nexport class VectorLoader extends Visitor {\n  constructor(bytes, nodes, buffers, dictionaries) {\n    super();\n    this.nodesIndex = -1;\n    this.buffersIndex = -1;\n    this.bytes = bytes;\n    this.nodes = nodes;\n    this.buffers = buffers;\n    this.dictionaries = dictionaries;\n  }\n  visit(node) {\n    return super.visit(node instanceof Field ? node.type : node);\n  }\n  visitNull(type) {\n    let {\n      length\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Null(type, 0, length);\n  }\n  visitBool(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitInt(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitFloat(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitUtf8(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n  }\n  visitBinary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n  }\n  visitFixedSizeBinary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitDate(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitTimestamp(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitTime(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitDecimal(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitList(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n  }\n  visitStruct(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));\n  }\n  visitUnion(type) {\n    return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n  }\n  visitDenseUnion(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children));\n  }\n  visitSparseUnion(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));\n  }\n  visitDictionary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));\n  }\n  visitInterval(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitFixedSizeList(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));\n  }\n  visitMap(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n  }\n  nextFieldNode() {\n    return this.nodes[++this.nodesIndex];\n  }\n  nextBufferRange() {\n    return this.buffers[++this.buffersIndex];\n  }\n  readNullBitmap(type, nullCount) {\n    let buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n    return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n  }\n  readOffsets(type, buffer) {\n    return this.readData(type, buffer);\n  }\n  readTypeIds(type, buffer) {\n    return this.readData(type, buffer);\n  }\n  readData(_type) {\n    let {\n      length,\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return this.bytes.subarray(offset, offset + length);\n  }\n  readDictionary(type) {\n    return this.dictionaries.get(type.id);\n  }\n}\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n  constructor(sources, nodes, buffers, dictionaries) {\n    super(new Uint8Array(0), nodes, buffers, dictionaries);\n    this.sources = sources;\n  }\n  readNullBitmap(_type, nullCount) {\n    let {\n      offset\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n    return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n  }\n  readOffsets(_type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n  }\n  readTypeIds(type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n  }\n  readData(type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    const {\n      sources\n    } = this;\n    if (DataType.isTimestamp(type)) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDecimal(type)) {\n      return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n    } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n      return binaryDataFromJSON(sources[offset]);\n    } else if (DataType.isBool(type)) {\n      return packBools(sources[offset]);\n    } else if (DataType.isUtf8(type)) {\n      return encodeUtf8(sources[offset].join(''));\n    }\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map(x => +x)));\n  }\n}\n/** @ignore */\nfunction binaryDataFromJSON(values) {\n  // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n  // There are definitely more efficient ways to do this... but it gets the\n  // job done.\n  const joined = values.join('');\n  const data = new Uint8Array(joined.length / 2);\n  for (let i = 0; i < joined.length; i += 2) {\n    data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n  }\n  return data;\n}","map":{"version":3,"names":["Data","Field","DataType","Visitor","packBools","encodeUtf8","Int64","Int128","UnionMode","DateUnit","toArrayBufferView","VectorLoader","constructor","bytes","nodes","buffers","dictionaries","nodesIndex","buffersIndex","visit","node","type","visitNull","length","arguments","undefined","nextFieldNode","Null","visitBool","nullCount","Bool","readNullBitmap","readData","visitInt","Int","visitFloat","Float","visitUtf8","Utf8","readOffsets","visitBinary","Binary","visitFixedSizeBinary","FixedSizeBinary","visitDate","Date","visitTimestamp","Timestamp","visitTime","Time","visitDecimal","Decimal","visitList","List","children","visitStruct","Struct","visitMany","visitUnion","mode","Sparse","visitSparseUnion","visitDenseUnion","Union","readTypeIds","visitDictionary","Dictionary","indices","readDictionary","visitInterval","Interval","visitFixedSizeList","FixedSizeList","visitMap","Map","nextBufferRange","buffer","Uint8Array","_type","offset","subarray","get","id","JSONVectorLoader","sources","Int32Array","ArrayType","isTimestamp","convertArray","isInt","isTime","bitWidth","isDate","unit","MILLISECOND","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","join","map","x","values","joined","data","i","parseInt","substr"],"sources":["visitor/vectorloader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}