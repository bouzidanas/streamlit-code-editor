{"ast":null,"code":"ace.define(\"ace/mode/flix_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var FlixHighlightRules = function () {\n    var keywords = \"use|checked_cast|checked_ecast|unchecked_cast|masked_cast|as|discard|from|\" + \"into|inject|project|solve|query|where|select|force|import|region|red|deref\";\n    var controlKeywords = \"choose|debug|do|for|forA|forM|foreach|yield|if|else|case|\" + \"match|typematch|try|catch|resume|spawn|par|branch|jumpto\";\n    var operators = \"not|and|or|fix\";\n    var declarations = \"eff|def|law|enum|case|type|alias|class|instance|mod|let\";\n    var modifiers = \"with|without|opaque|lazy|lawful|pub|override|sealed|static\";\n    var primitives = \"Unit|Bool|Char|Float32|Float64|Int8|Int16|Int32|Int64|BigInt|String\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"keyword.control\": controlKeywords,\n      \"keyword.operator\": operators,\n      \"storage.type\": declarations,\n      \"storage.modifier\": modifiers,\n      \"support.type\": primitives\n    }, \"identifier\");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.line\",\n        regex: \"\\\\/\\\\/.*$\"\n      }, {\n        token: \"comment.block\",\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        regex: '\"',\n        next: \"string\"\n      }, {\n        token: \"string.regexp\",\n        regex: 'regex\"',\n        next: \"regex\"\n      }, {\n        token: \"constant.character\",\n        regex: \"'\",\n        next: \"char\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0x[a-fA-F0-9](_*[a-fA-F0-9])*(i8|i16|i32|i64|ii)?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[0-9](_*[0-9])*\\\\.[0-9](_*[0-9])*(f32|f64)?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // integer\n        regex: \"[0-9](_*[0-9])*(i8|i16|i32|i64|ii)?\\\\b\"\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(true|false)\\\\b\"\n      }, {\n        token: \"constant.language\",\n        regex: \"null\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\\\->|~>|<\\\\-|=>\"\n      }, {\n        token: \"storage.modifier\",\n        regex: \"@(Deprecated|Experimental|Internal|ParallelWhenPure|Parallel|LazyWhenPure|Lazy|Skip|Test)\\\\b\"\n      }, {\n        token: \"keyword\",\n        // hole\n        regex: \"(\\\\?\\\\?\\\\?|\\\\?[a-zA-Z0-9]+)\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"comment\": [{\n        token: \"comment.block\",\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment.block\"\n      }],\n      \"string\": [{\n        token: \"constant.character.escape\",\n        // unicode\n        regex: \"\\\\\\\\(u[0-9a-fA-F]{4})\"\n      }, {\n        token: \"constant.character.escape\",\n        regex: '\\\\\\\\.'\n      }, {\n        token: \"string\",\n        regex: '\"',\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '[^\"\\\\\\\\]+'\n      }],\n      \"regex\": [{\n        token: \"constant.character.escape\",\n        // unicode\n        regex: \"\\\\\\\\(u[0-9a-fA-F]{4})\"\n      }, {\n        token: \"constant.character.escape\",\n        regex: '\\\\\\\\.'\n      }, {\n        token: \"string.regexp\",\n        regex: '\"',\n        next: \"start\"\n      }, {\n        token: \"string.regexp\",\n        regex: '[^\"\\\\\\\\]+'\n      }],\n      \"char\": [{\n        token: \"constant.character.escape\",\n        // unicode\n        regex: \"\\\\\\\\(u[0-9a-fA-F]{4})\"\n      }, {\n        token: \"constant.character.escape\",\n        regex: '\\\\\\\\.'\n      }, {\n        token: \"constant.character\",\n        regex: \"'\",\n        next: \"start\"\n      }, {\n        token: \"constant.character\",\n        regex: \"[^'\\\\\\\\]+\"\n      }]\n    };\n  };\n  oop.inherits(FlixHighlightRules, TextHighlightRules);\n  exports.FlixHighlightRules = FlixHighlightRules;\n});\nace.define(\"ace/mode/flix\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/flix_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var FlixHighlightRules = require(\"./flix_highlight_rules\").FlixHighlightRules;\n  var Mode = function () {\n    this.HighlightRules = FlixHighlightRules;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/flix\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/flix\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","FlixHighlightRules","keywords","controlKeywords","operators","declarations","modifiers","primitives","keywordMapper","createKeywordMapper","$rules","token","regex","next","defaultToken","inherits","TextMode","Mode","HighlightRules","$id","call","prototype","m"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-flix.js"],"sourcesContent":["ace.define(\"ace/mode/flix_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar FlixHighlightRules = function () {\n    var keywords = (\"use|checked_cast|checked_ecast|unchecked_cast|masked_cast|as|discard|from|\" +\n        \"into|inject|project|solve|query|where|select|force|import|region|red|deref\");\n    var controlKeywords = (\"choose|debug|do|for|forA|forM|foreach|yield|if|else|case|\" +\n        \"match|typematch|try|catch|resume|spawn|par|branch|jumpto\");\n    var operators = \"not|and|or|fix\";\n    var declarations = \"eff|def|law|enum|case|type|alias|class|instance|mod|let\";\n    var modifiers = \"with|without|opaque|lazy|lawful|pub|override|sealed|static\";\n    var primitives = \"Unit|Bool|Char|Float32|Float64|Int8|Int16|Int32|Int64|BigInt|String\";\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"keyword.control\": controlKeywords,\n        \"keyword.operator\": operators,\n        \"storage.type\": declarations,\n        \"storage.modifier\": modifiers,\n        \"support.type\": primitives\n    }, \"identifier\");\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.line\",\n                regex: \"\\\\/\\\\/.*$\"\n            }, {\n                token: \"comment.block\",\n                regex: \"\\\\/\\\\*\",\n                next: \"comment\"\n            }, {\n                token: \"string\",\n                regex: '\"',\n                next: \"string\"\n            }, {\n                token: \"string.regexp\",\n                regex: 'regex\"',\n                next: \"regex\"\n            }, {\n                token: \"constant.character\",\n                regex: \"'\",\n                next: \"char\"\n            }, {\n                token: \"constant.numeric\", // hex\n                regex: \"0x[a-fA-F0-9](_*[a-fA-F0-9])*(i8|i16|i32|i64|ii)?\\\\b\"\n            }, {\n                token: \"constant.numeric\", // float\n                regex: \"[0-9](_*[0-9])*\\\\.[0-9](_*[0-9])*(f32|f64)?\\\\b\"\n            }, {\n                token: \"constant.numeric\", // integer\n                regex: \"[0-9](_*[0-9])*(i8|i16|i32|i64|ii)?\\\\b\"\n            }, {\n                token: \"constant.language.boolean\",\n                regex: \"(true|false)\\\\b\"\n            }, {\n                token: \"constant.language\",\n                regex: \"null\\\\b\"\n            }, {\n                token: \"keyword.operator\",\n                regex: \"\\\\->|~>|<\\\\-|=>\"\n            }, {\n                token: \"storage.modifier\",\n                regex: \"@(Deprecated|Experimental|Internal|ParallelWhenPure|Parallel|LazyWhenPure|Lazy|Skip|Test)\\\\b\"\n            }, {\n                token: \"keyword\", // hole\n                regex: \"(\\\\?\\\\?\\\\?|\\\\?[a-zA-Z0-9]+)\"\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"[[({]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\])}]\"\n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }\n        ],\n        \"comment\": [\n            {\n                token: \"comment.block\",\n                regex: \"\\\\*\\\\/\",\n                next: \"start\"\n            }, {\n                defaultToken: \"comment.block\"\n            }\n        ],\n        \"string\": [\n            {\n                token: \"constant.character.escape\", // unicode\n                regex: \"\\\\\\\\(u[0-9a-fA-F]{4})\"\n            }, {\n                token: \"constant.character.escape\",\n                regex: '\\\\\\\\.'\n            }, {\n                token: \"string\",\n                regex: '\"',\n                next: \"start\"\n            }, {\n                token: \"string\",\n                regex: '[^\"\\\\\\\\]+'\n            }\n        ],\n        \"regex\": [\n            {\n                token: \"constant.character.escape\", // unicode\n                regex: \"\\\\\\\\(u[0-9a-fA-F]{4})\"\n            }, {\n                token: \"constant.character.escape\",\n                regex: '\\\\\\\\.'\n            }, {\n                token: \"string.regexp\",\n                regex: '\"',\n                next: \"start\"\n            }, {\n                token: \"string.regexp\",\n                regex: '[^\"\\\\\\\\]+'\n            }\n        ],\n        \"char\": [\n            {\n                token: \"constant.character.escape\", // unicode\n                regex: \"\\\\\\\\(u[0-9a-fA-F]{4})\"\n            }, {\n                token: \"constant.character.escape\",\n                regex: '\\\\\\\\.'\n            }, {\n                token: \"constant.character\",\n                regex: \"'\",\n                next: \"start\"\n            }, {\n                token: \"constant.character\",\n                regex: \"[^'\\\\\\\\]+\"\n            }\n        ]\n    };\n};\noop.inherits(FlixHighlightRules, TextHighlightRules);\nexports.FlixHighlightRules = FlixHighlightRules;\n\n});\n\nace.define(\"ace/mode/flix\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/flix_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar FlixHighlightRules = require(\"./flix_highlight_rules\").FlixHighlightRules;\nvar Mode = function () {\n    this.HighlightRules = FlixHighlightRules;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.$id = \"ace/mode/flix\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/flix\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"AAAAA,GAAG,CAACC,MAAM,CAAC,+BAA+B,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,aAAa,EAAC,+BAA+B,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EACxK,IAAIC,GAAG,GAAGH,OAAO,CAAC,YAAY,CAAC;EAC/B,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,wBAAwB,CAAC,CAACI,kBAAkB;EAC7E,IAAIC,kBAAkB,GAAG,SAAAA,CAAA,EAAY;IACjC,IAAIC,QAAQ,GAAI,4EAA4E,GACxF,4EAA6E;IACjF,IAAIC,eAAe,GAAI,2DAA2D,GAC9E,0DAA2D;IAC/D,IAAIC,SAAS,GAAG,gBAAgB;IAChC,IAAIC,YAAY,GAAG,yDAAyD;IAC5E,IAAIC,SAAS,GAAG,4DAA4D;IAC5E,IAAIC,UAAU,GAAG,qEAAqE;IACtF,IAAIC,aAAa,GAAG,IAAI,CAACC,mBAAmB,CAAC;MACzC,SAAS,EAAEP,QAAQ;MACnB,iBAAiB,EAAEC,eAAe;MAClC,kBAAkB,EAAEC,SAAS;MAC7B,cAAc,EAAEC,YAAY;MAC5B,kBAAkB,EAAEC,SAAS;MAC7B,cAAc,EAAEC;IACpB,CAAC,EAAE,YAAY,CAAC;IAChB,IAAI,CAACG,MAAM,GAAG;MACV,OAAO,EAAE,CACL;QACIC,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,eAAe;QACtBC,KAAK,EAAE,QAAQ;QACfC,IAAI,EAAE;MACV,CAAC,EAAE;QACCF,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE,GAAG;QACVC,IAAI,EAAE;MACV,CAAC,EAAE;QACCF,KAAK,EAAE,eAAe;QACtBC,KAAK,EAAE,QAAQ;QACfC,IAAI,EAAE;MACV,CAAC,EAAE;QACCF,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE,GAAG;QACVC,IAAI,EAAE;MACV,CAAC,EAAE;QACCF,KAAK,EAAE,kBAAkB;QAAE;QAC3BC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,kBAAkB;QAAE;QAC3BC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,kBAAkB;QAAE;QAC3BC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,2BAA2B;QAClCC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,mBAAmB;QAC1BC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,kBAAkB;QACzBC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,kBAAkB;QACzBC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,SAAS;QAAE;QAClBC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAEH,aAAa;QACpBI,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,MAAM;QACbC,KAAK,EAAE;MACX,CAAC,CACJ;MACD,SAAS,EAAE,CACP;QACID,KAAK,EAAE,eAAe;QACtBC,KAAK,EAAE,QAAQ;QACfC,IAAI,EAAE;MACV,CAAC,EAAE;QACCC,YAAY,EAAE;MAClB,CAAC,CACJ;MACD,QAAQ,EAAE,CACN;QACIH,KAAK,EAAE,2BAA2B;QAAE;QACpCC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,2BAA2B;QAClCC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE,GAAG;QACVC,IAAI,EAAE;MACV,CAAC,EAAE;QACCF,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE;MACX,CAAC,CACJ;MACD,OAAO,EAAE,CACL;QACID,KAAK,EAAE,2BAA2B;QAAE;QACpCC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,2BAA2B;QAClCC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,eAAe;QACtBC,KAAK,EAAE,GAAG;QACVC,IAAI,EAAE;MACV,CAAC,EAAE;QACCF,KAAK,EAAE,eAAe;QACtBC,KAAK,EAAE;MACX,CAAC,CACJ;MACD,MAAM,EAAE,CACJ;QACID,KAAK,EAAE,2BAA2B;QAAE;QACpCC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,2BAA2B;QAClCC,KAAK,EAAE;MACX,CAAC,EAAE;QACCD,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE,GAAG;QACVC,IAAI,EAAE;MACV,CAAC,EAAE;QACCF,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE;MACX,CAAC;IAET,CAAC;EACL,CAAC;EACDb,GAAG,CAACgB,QAAQ,CAACd,kBAAkB,EAAED,kBAAkB,CAAC;EACpDH,OAAO,CAACI,kBAAkB,GAAGA,kBAAkB;AAE/C,CAAC,CAAC;AAEFP,GAAG,CAACC,MAAM,CAAC,eAAe,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,aAAa,EAAC,eAAe,EAAC,+BAA+B,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EACxK,IAAIC,GAAG,GAAGH,OAAO,CAAC,YAAY,CAAC;EAC/B,IAAIoB,QAAQ,GAAGpB,OAAO,CAAC,QAAQ,CAAC,CAACqB,IAAI;EACrC,IAAIhB,kBAAkB,GAAGL,OAAO,CAAC,wBAAwB,CAAC,CAACK,kBAAkB;EAC7E,IAAIgB,IAAI,GAAG,SAAAA,CAAA,EAAY;IACnB,IAAI,CAACC,cAAc,GAAGjB,kBAAkB;EAC5C,CAAC;EACDF,GAAG,CAACgB,QAAQ,CAACE,IAAI,EAAED,QAAQ,CAAC;EAC5B,CAAC,YAAY;IACT,IAAI,CAACG,GAAG,GAAG,eAAe;EAC9B,CAAC,EAAEC,IAAI,CAACH,IAAI,CAACI,SAAS,CAAC;EACvBxB,OAAO,CAACoB,IAAI,GAAGA,IAAI;AAEnB,CAAC,CAAC;AAAiB,CAAC,YAAW;EACXvB,GAAG,CAACE,OAAO,CAAC,CAAC,eAAe,CAAC,EAAE,UAAS0B,CAAC,EAAE;IACvC,IAAI,OAAOxB,MAAM,IAAI,QAAQ,IAAI,OAAOD,OAAO,IAAI,QAAQ,IAAIC,MAAM,EAAE;MACnEA,MAAM,CAACD,OAAO,GAAGyB,CAAC;IACtB;EACJ,CAAC,CAAC;AACN,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}