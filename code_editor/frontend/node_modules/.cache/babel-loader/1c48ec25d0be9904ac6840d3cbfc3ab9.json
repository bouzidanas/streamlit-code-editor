{"ast":null,"code":"ace.define(\"ace/mode/kotlin_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var KotlinHighlightRules = function () {\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n      \"storage.modifier.kotlin\": \"var|val|public|private|protected|abstract|final|enum|open|attribute|\" + \"annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|\" + \"yield|typealias|typeof|sealed|inner|value|lateinit|external|suspend|noinline|crossinline|reified|\" + \"expect|actual\",\n      \"keyword\": \"companion|class|object|interface|namespace|type|fun|constructor|if|else|while|for|do|return|when|\" + \"where|break|continue|try|catch|finally|throw|in|is|as|assert|constructor\",\n      \"constant.language.kotlin\": \"true|false|null|this|super\",\n      \"entity.name.function.kotlin\": \"get|set\"\n    }, \"identifier\");\n    this.$rules = {\n      start: [{\n        include: \"#comments\"\n      }, {\n        token: [\"text\", \"keyword.other.kotlin\", \"text\", \"entity.name.package.kotlin\", \"text\"],\n        regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n      }, {\n        token: \"comment\",\n        regex: /^\\s*#!.*$/\n      }, {\n        include: \"#imports\"\n      }, {\n        include: \"#expressions\"\n      }, {\n        token: \"string\",\n        regex: /@[a-zA-Z][a-zA-Z:]*\\b/\n      }, {\n        token: [\"keyword.other.kotlin\", \"text\", \"entity.name.variable.kotlin\"],\n        regex: /\\b(var|val)(\\s+)([a-zA-Z_][\\w]*)\\b/\n      }, {\n        token: [\"keyword.other.kotlin\", \"text\", \"entity.name.variable.kotlin\", \"paren.lparen\"],\n        regex: /(fun)(\\s+)(\\w+)(\\()/,\n        push: [{\n          token: [\"variable.parameter.function.kotlin\", \"text\", \"keyword.operator\"],\n          regex: /(\\w+)(\\s*)(:)/\n        }, {\n          token: \"paren.rparen\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#comments\"\n        }, {\n          include: \"#types\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        token: [\"text\", \"keyword\", \"text\", \"identifier\"],\n        regex: /^(\\s*)(class)(\\s*)([a-zA-Z]+)/,\n        next: \"#classes\"\n      }, {\n        token: [\"identifier\", \"punctuaction\"],\n        regex: /([a-zA-Z_][\\w]*)(<)/,\n        push: [{\n          include: \"#generics\"\n        }, {\n          include: \"#defaultTypes\"\n        }, {\n          token: \"punctuation\",\n          regex: />/,\n          next: \"pop\"\n        }]\n      }, {\n        token: keywordMapper,\n        regex: /[a-zA-Z_][\\w]*\\b/\n      }, {\n        token: \"paren.lparen\",\n        regex: /[{(\\[]/\n      }, {\n        token: \"paren.rparen\",\n        regex: /[})\\]]/\n      }],\n      \"#comments\": [{\n        token: \"comment\",\n        regex: /\\/\\*/,\n        push: [{\n          token: \"comment\",\n          regex: /\\*\\//,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment\"\n        }]\n      }, {\n        token: [\"text\", \"comment\"],\n        regex: /(\\s*)(\\/\\/.*$)/\n      }],\n      \"#constants\": [{\n        token: \"constant.numeric.kotlin\",\n        regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n      }, {\n        token: \"constant.other.kotlin\",\n        regex: /\\b[A-Z][A-Z0-9_]+\\b/\n      }],\n      \"#expressions\": [{\n        include: \"#strings\"\n      }, {\n        include: \"#constants\"\n      }, {\n        include: \"#keywords\"\n      }],\n      \"#imports\": [{\n        token: [\"text\", \"keyword.other.kotlin\", \"text\", \"keyword.other.kotlin\"],\n        regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n      }],\n      \"#generics\": [{\n        token: \"punctuation\",\n        regex: /</,\n        push: [{\n          token: \"punctuation\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          token: \"storage.type.generic.kotlin\",\n          regex: /\\w+/\n        }, {\n          token: \"keyword.operator\",\n          regex: /:/\n        }, {\n          token: \"punctuation\",\n          regex: /,/\n        }, {\n          include: \"#generics\"\n        }]\n      }],\n      \"#classes\": [{\n        include: \"#generics\"\n      }, {\n        token: \"keyword\",\n        regex: /public|private|constructor/\n      }, {\n        token: \"string\",\n        regex: /@[a-zA-Z][a-zA-Z:]*\\b/\n      }, {\n        token: \"text\",\n        regex: /(?=$|\\(|{)/,\n        next: \"start\"\n      }],\n      \"#keywords\": [{\n        token: \"keyword.operator.kotlin\",\n        regex: /==|!=|===|!==|<=|>=|<|>|=>|->|::|\\?:/\n      }, {\n        token: \"keyword.operator.assignment.kotlin\",\n        regex: /=/\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/,\n        push: [{\n          token: \"text\",\n          regex: /(?=$|{|=|,)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        token: \"keyword.operator.dot.kotlin\",\n        regex: /\\./\n      }, {\n        token: \"keyword.operator.increment-decrement.kotlin\",\n        regex: /\\-\\-|\\+\\+/\n      }, {\n        token: \"keyword.operator.arithmetic.kotlin\",\n        regex: /\\-|\\+|\\*|\\/|%/\n      }, {\n        token: \"keyword.operator.arithmetic.assign.kotlin\",\n        regex: /\\+=|\\-=|\\*=|\\/=/\n      }, {\n        token: \"keyword.operator.logical.kotlin\",\n        regex: /!|&&|\\|\\|/\n      }, {\n        token: \"keyword.operator.range.kotlin\",\n        regex: /\\.\\./\n      }, {\n        token: \"punctuation.kotlin\",\n        regex: /[;,]/\n      }],\n      \"#types\": [{\n        include: \"#defaultTypes\"\n      }, {\n        token: \"paren.lparen\",\n        regex: /\\(/,\n        push: [{\n          token: \"paren.rparen\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#defaultTypes\"\n        }, {\n          token: \"punctuation\",\n          regex: /,/\n        }]\n      }, {\n        include: \"#generics\"\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /->/\n      }, {\n        token: \"paren.rparen\",\n        regex: /\\)/\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/,\n        push: [{\n          token: \"text\",\n          regex: /(?=$|{|=|,)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }],\n      \"#defaultTypes\": [{\n        token: \"storage.type.buildin.kotlin\",\n        regex: /\\b(Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic|IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray|Array|List|Map|Nothing|Enum|Throwable|Comparable)\\b/\n      }],\n      \"#strings\": [{\n        token: \"string\",\n        regex: /\"\"\"/,\n        push: [{\n          token: \"string\",\n          regex: /\"\"\"/,\n          next: \"pop\"\n        }, {\n          token: \"variable.parameter.template.kotlin\",\n          regex: /\\$\\w+|\\${[^}]+}/\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string\",\n        regex: /\"/,\n        push: [{\n          token: \"string\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"variable.parameter.template.kotlin\",\n          regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string\",\n        regex: /'/,\n        push: [{\n          token: \"string\",\n          regex: /'/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string\",\n        regex: /`/,\n        push: [{\n          token: \"string\",\n          regex: /`/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }]\n    };\n    this.normalizeRules();\n  };\n  KotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n  };\n  oop.inherits(KotlinHighlightRules, TextHighlightRules);\n  exports.KotlinHighlightRules = KotlinHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/kotlin\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/kotlin_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var KotlinHighlightRules = require(\"./kotlin_highlight_rules\").KotlinHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/kotlin\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/kotlin\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","KotlinHighlightRules","keywordMapper","$keywords","createKeywordMapper","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-kotlin.js"],"sourcesContent":["ace.define(\"ace/mode/kotlin_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar KotlinHighlightRules = function () {\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"storage.modifier.kotlin\": \"var|val|public|private|protected|abstract|final|enum|open|attribute|\"\n            + \"annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|\"\n            + \"yield|typealias|typeof|sealed|inner|value|lateinit|external|suspend|noinline|crossinline|reified|\"\n            + \"expect|actual\",\n        \"keyword\": \"companion|class|object|interface|namespace|type|fun|constructor|if|else|while|for|do|return|when|\"\n            + \"where|break|continue|try|catch|finally|throw|in|is|as|assert|constructor\",\n        \"constant.language.kotlin\": \"true|false|null|this|super\",\n        \"entity.name.function.kotlin\": \"get|set\"\n    }, \"identifier\");\n    this.$rules = {\n        start: [{\n                include: \"#comments\"\n            }, {\n                token: [\n                    \"text\",\n                    \"keyword.other.kotlin\",\n                    \"text\",\n                    \"entity.name.package.kotlin\",\n                    \"text\"\n                ],\n                regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n            }, {\n                token: \"comment\",\n                regex: /^\\s*#!.*$/\n            }, {\n                include: \"#imports\"\n            }, {\n                include: \"#expressions\"\n            }, {\n                token: \"string\",\n                regex: /@[a-zA-Z][a-zA-Z:]*\\b/\n            }, {\n                token: [\"keyword.other.kotlin\", \"text\", \"entity.name.variable.kotlin\"],\n                regex: /\\b(var|val)(\\s+)([a-zA-Z_][\\w]*)\\b/\n            }, {\n                token: [\"keyword.other.kotlin\", \"text\", \"entity.name.variable.kotlin\", \"paren.lparen\"],\n                regex: /(fun)(\\s+)(\\w+)(\\()/,\n                push: [{\n                        token: [\"variable.parameter.function.kotlin\", \"text\", \"keyword.operator\"],\n                        regex: /(\\w+)(\\s*)(:)/\n                    }, {\n                        token: \"paren.rparen\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#comments\"\n                    }, {\n                        include: \"#types\"\n                    }, {\n                        include: \"#expressions\"\n                    }]\n            }, {\n                token: [\"text\", \"keyword\", \"text\", \"identifier\"],\n                regex: /^(\\s*)(class)(\\s*)([a-zA-Z]+)/,\n                next: \"#classes\"\n            }, {\n                token: [\"identifier\", \"punctuaction\"],\n                regex: /([a-zA-Z_][\\w]*)(<)/,\n                push: [{\n                        include: \"#generics\"\n                    }, {\n                        include: \"#defaultTypes\"\n                    }, {\n                        token: \"punctuation\",\n                        regex: />/,\n                        next: \"pop\"\n                    }]\n            }, {\n                token: keywordMapper,\n                regex: /[a-zA-Z_][\\w]*\\b/\n            }, {\n                token: \"paren.lparen\",\n                regex: /[{(\\[]/\n            }, {\n                token: \"paren.rparen\",\n                regex: /[})\\]]/\n            }],\n        \"#comments\": [{\n                token: \"comment\",\n                regex: /\\/\\*/,\n                push: [{\n                        token: \"comment\",\n                        regex: /\\*\\//,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"comment\"\n                    }]\n            }, {\n                token: [\n                    \"text\",\n                    \"comment\"\n                ],\n                regex: /(\\s*)(\\/\\/.*$)/\n            }],\n        \"#constants\": [{\n                token: \"constant.numeric.kotlin\",\n                regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n            }, {\n                token: \"constant.other.kotlin\",\n                regex: /\\b[A-Z][A-Z0-9_]+\\b/\n            }],\n        \"#expressions\": [{\n                include: \"#strings\"\n            }, {\n                include: \"#constants\"\n            }, {\n                include: \"#keywords\"\n            }],\n        \"#imports\": [{\n                token: [\n                    \"text\",\n                    \"keyword.other.kotlin\",\n                    \"text\",\n                    \"keyword.other.kotlin\"\n                ],\n                regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n            }],\n        \"#generics\": [{\n                token: \"punctuation\",\n                regex: /</,\n                push: [{\n                        token: \"punctuation\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        token: \"storage.type.generic.kotlin\",\n                        regex: /\\w+/\n                    }, {\n                        token: \"keyword.operator\",\n                        regex: /:/\n                    }, {\n                        token: \"punctuation\",\n                        regex: /,/\n                    }, {\n                        include: \"#generics\"\n                    }]\n            }],\n        \"#classes\": [{\n                include: \"#generics\"\n            }, {\n                token: \"keyword\",\n                regex: /public|private|constructor/\n            }, {\n                token: \"string\",\n                regex: /@[a-zA-Z][a-zA-Z:]*\\b/\n            }, {\n                token: \"text\",\n                regex: /(?=$|\\(|{)/,\n                next: \"start\"\n            }],\n        \"#keywords\": [{\n                token: \"keyword.operator.kotlin\",\n                regex: /==|!=|===|!==|<=|>=|<|>|=>|->|::|\\?:/\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                        token: \"text\",\n                        regex: /(?=$|{|=|,)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#types\"\n                    }]\n            }, {\n                token: \"keyword.operator.dot.kotlin\",\n                regex: /\\./\n            }, {\n                token: \"keyword.operator.increment-decrement.kotlin\",\n                regex: /\\-\\-|\\+\\+/\n            }, {\n                token: \"keyword.operator.arithmetic.kotlin\",\n                regex: /\\-|\\+|\\*|\\/|%/\n            }, {\n                token: \"keyword.operator.arithmetic.assign.kotlin\",\n                regex: /\\+=|\\-=|\\*=|\\/=/\n            }, {\n                token: \"keyword.operator.logical.kotlin\",\n                regex: /!|&&|\\|\\|/\n            }, {\n                token: \"keyword.operator.range.kotlin\",\n                regex: /\\.\\./\n            }, {\n                token: \"punctuation.kotlin\",\n                regex: /[;,]/\n            }],\n        \"#types\": [{\n                include: \"#defaultTypes\"\n            }, {\n                token: \"paren.lparen\",\n                regex: /\\(/,\n                push: [{\n                        token: \"paren.rparen\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#defaultTypes\"\n                    }, {\n                        token: \"punctuation\",\n                        regex: /,/\n                    }]\n            }, {\n                include: \"#generics\"\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /->/\n            }, {\n                token: \"paren.rparen\",\n                regex: /\\)/\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                        token: \"text\",\n                        regex: /(?=$|{|=|,)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#types\"\n                    }]\n            }],\n        \"#defaultTypes\": [{\n                token: \"storage.type.buildin.kotlin\",\n                regex: /\\b(Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic|IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray|Array|List|Map|Nothing|Enum|Throwable|Comparable)\\b/\n            }],\n        \"#strings\": [{\n                token: \"string\",\n                regex: /\"\"\"/,\n                push: [{\n                        token: \"string\",\n                        regex: /\"\"\"/,\n                        next: \"pop\"\n                    }, {\n                        token: \"variable.parameter.template.kotlin\",\n                        regex: /\\$\\w+|\\${[^}]+}/\n                    }, {\n                        token: \"constant.character.escape.kotlin\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }, {\n                token: \"string\",\n                regex: /\"/,\n                push: [{\n                        token: \"string\",\n                        regex: /\"/,\n                        next: \"pop\"\n                    }, {\n                        token: \"variable.parameter.template.kotlin\",\n                        regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n                    }, {\n                        token: \"constant.character.escape.kotlin\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }, {\n                token: \"string\",\n                regex: /'/,\n                push: [{\n                        token: \"string\",\n                        regex: /'/,\n                        next: \"pop\"\n                    }, {\n                        token: \"constant.character.escape.kotlin\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }, {\n                token: \"string\",\n                regex: /`/,\n                push: [{\n                        token: \"string\",\n                        regex: /`/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }]\n    };\n    this.normalizeRules();\n};\nKotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n};\noop.inherits(KotlinHighlightRules, TextHighlightRules);\nexports.KotlinHighlightRules = KotlinHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/kotlin\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/kotlin_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar KotlinHighlightRules = require(\"./kotlin_highlight_rules\").KotlinHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.$id = \"ace/mode/kotlin\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/kotlin\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}