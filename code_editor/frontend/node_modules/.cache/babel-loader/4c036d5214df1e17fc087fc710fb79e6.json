{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport { DataType } from '../type';\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n  /** @nocollapse */\n  static assemble() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n  }\n  visit(column) {\n    const {\n      data,\n      name,\n      length\n    } = column;\n    const {\n      offset,\n      nullCount,\n      nullBitmap\n    } = data;\n    const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n    const buffers = Object.assign([], data.buffers, {\n      [BufferType.VALIDITY]: undefined\n    });\n    return {\n      'name': name,\n      'count': length,\n      'VALIDITY': DataType.isNull(type) ? undefined : nullCount <= 0 ? Array.from({\n        length\n      }, () => 1) : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n      ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n    };\n  }\n  visitNull() {\n    return {};\n  }\n  visitBool(_ref) {\n    let {\n      values,\n      offset,\n      length\n    } = _ref;\n    return {\n      'DATA': [...iterateBits(values, offset, length, null, getBool)]\n    };\n  }\n  visitInt(vector) {\n    return {\n      'DATA': vector.type.bitWidth < 64 ? [...vector.values] : [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n  visitFloat(vector) {\n    return {\n      'DATA': [...vector.values]\n    };\n  }\n  visitUtf8(vector) {\n    return {\n      'DATA': [...vector],\n      'OFFSET': [...vector.valueOffsets]\n    };\n  }\n  visitBinary(vector) {\n    return {\n      'DATA': [...binaryToString(vector)],\n      OFFSET: [...vector.valueOffsets]\n    };\n  }\n  visitFixedSizeBinary(vector) {\n    return {\n      'DATA': [...binaryToString(vector)]\n    };\n  }\n  visitDate(vector) {\n    return {\n      'DATA': vector.type.unit === DateUnit.DAY ? [...vector.values] : [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n  visitTimestamp(vector) {\n    return {\n      'DATA': [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n  visitTime(vector) {\n    return {\n      'DATA': vector.type.unit < TimeUnit.MICROSECOND ? [...vector.values] : [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n  visitDecimal(vector) {\n    return {\n      'DATA': [...bigNumsToStrings(vector.values, 4)]\n    };\n  }\n  visitList(vector) {\n    return {\n      'OFFSET': [...vector.valueOffsets],\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n  visitStruct(vector) {\n    return {\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n  visitUnion(vector) {\n    return {\n      'TYPE': [...vector.typeIds],\n      'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n  visitInterval(vector) {\n    return {\n      'DATA': [...vector.values]\n    };\n  }\n  visitFixedSizeList(vector) {\n    return {\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n  visitMap(vector) {\n    return {\n      'OFFSET': [...vector.valueOffsets],\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n}\n/** @ignore */\nfunction* binaryToString(vector) {\n  for (const octets of vector) {\n    yield octets.reduce((str, byte) => {\n      return \"\".concat(str).concat(('0' + (byte & 0xFF).toString(16)).slice(-2));\n    }, '').toUpperCase();\n  }\n}\n/** @ignore */\nfunction* bigNumsToStrings(values, stride) {\n  for (let i = -1, n = values.length / stride; ++i < n;) {\n    yield \"\".concat(BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false));\n  }\n}","map":{"version":3,"names":["BN","Column","Vector","Visitor","BufferType","RecordBatch","UnionMode","DateUnit","TimeUnit","iterateBits","getBit","getBool","selectColumnChildrenArgs","DataType","JSONVectorAssembler","assemble","_len","arguments","length","args","Array","_key","visitMany","visit","column","data","name","offset","nullCount","nullBitmap","type","isDictionary","indices","buffers","Object","assign","VALIDITY","undefined","isNull","from","new","clone","visitNull","visitBool","_ref","values","visitInt","vector","bitWidth","bigNumsToStrings","visitFloat","visitUtf8","valueOffsets","visitBinary","binaryToString","OFFSET","visitFixedSizeBinary","visitDate","unit","DAY","visitTimestamp","visitTime","MICROSECOND","visitDecimal","visitList","children","map","f","i","getChildAt","visitStruct","visitUnion","typeIds","mode","Dense","visitInterval","visitFixedSizeList","visitMap","octets","reduce","str","byte","concat","toString","slice","toUpperCase","stride","n","subarray"],"sources":["visitor/jsonvectorassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): { };\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}