{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { MapRow } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { List } from '../type';\n/** @ignore */\nexport class MapVector extends BaseVector {\n  asList() {\n    const child = this.type.children[0];\n    return Vector.new(this.data.clone(new List(child)));\n  }\n  bind(index) {\n    const child = this.getChildAt(0);\n    const {\n      [index]: begin,\n      [index + 1]: end\n    } = this.valueOffsets;\n    return new MapRow(child.slice(begin, end));\n  }\n}","map":{"version":3,"names":["MapRow","Vector","BaseVector","List","MapVector","asList","child","type","children","new","data","clone","bind","index","getChildAt","begin","end","valueOffsets","slice"],"sources":["vector/map.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAM,QAAQ,OAAO;AAE9B,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,UAAU,QAAQ,QAAQ;AACnC,SAAiCC,IAAI,QAAQ,SAAS;AAEtD;AACA,OAAM,MAAOC,SAA8D,SAAQF,UAAsB;EAC9FG,MAAMA,CAAA;IACT,MAAMC,KAAK,GAAG,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAwC;IAC1E,OAAOP,MAAM,CAACQ,GAAG,CAAC,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,IAAIR,IAAI,CAA+BG,KAAK,CAAC,CAAC,CAAC;EACrF;EACOM,IAAIA,CAACC,KAAa;IACrB,MAAMP,KAAK,GAAG,IAAI,CAACQ,UAAU,CAA+B,CAAC,CAAC;IAC9D,MAAM;MAAE,CAACD,KAAK,GAAGE,KAAK;MAAE,CAACF,KAAK,GAAG,CAAC,GAAGG;IAAG,CAAE,GAAG,IAAI,CAACC,YAAY;IAC9D,OAAO,IAAIjB,MAAM,CAACM,KAAM,CAACY,KAAK,CAACH,KAAK,EAAEC,GAAG,CAAC,CAAC;EAC/C","ignoreList":[]},"metadata":{},"sourceType":"module"}