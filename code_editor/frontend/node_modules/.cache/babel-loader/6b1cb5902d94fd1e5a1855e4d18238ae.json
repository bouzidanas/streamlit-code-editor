{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { StructVector } from './vector/index';\nexport class RecordBatch extends StructVector {\n  constructor(...args) {\n    let data;\n    let schema = args[0];\n    let children;\n    if (args[1] instanceof Data) {\n      [, data, children] = args;\n    } else {\n      const fields = schema.fields;\n      const [, length, childData] = args;\n      data = Data.Struct(new Struct(fields), 0, length, 0, null, childData);\n    }\n    super(data, children);\n    this._schema = schema;\n  }\n  /** @nocollapse */\n  static from(options) {\n    if (isIterable(options['values'])) {\n      return Table.from(options);\n    }\n    return Table.from(options);\n  }\n  /** @nocollapse */\n  static new(...args) {\n    const [fs, xs] = selectFieldArgs(args);\n    const vs = xs.filter(x => x instanceof Vector);\n    return new RecordBatch(...ensureSameLengthData(new Schema(fs), vs.map(x => x.data)));\n  }\n  clone(data, children = this._children) {\n    return new RecordBatch(this._schema, data, children);\n  }\n  concat(...others) {\n    const schema = this._schema,\n      chunks = Chunked.flatten(this, ...others);\n    return new Table(schema, chunks.map(({\n      data\n    }) => new RecordBatch(schema, data)));\n  }\n  get schema() {\n    return this._schema;\n  }\n  get numCols() {\n    return this._schema.fields.length;\n  }\n  get dictionaries() {\n    return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n  }\n  select(...columnNames) {\n    const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name, i), new Map());\n    return this.selectAt(...columnNames.map(columnName => nameToIndex.get(columnName)).filter(x => x > -1));\n  }\n  selectAt(...columnIndices) {\n    const schema = this._schema.selectAt(...columnIndices);\n    const childData = columnIndices.map(i => this.data.childData[i]).filter(Boolean);\n    return new RecordBatch(schema, this.length, childData);\n  }\n}\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch extends RecordBatch {\n  constructor(schema) {\n    super(schema, 0, schema.fields.map(f => Data.new(f.type, 0, 0, 0)));\n  }\n}\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n  constructor() {\n    super(...arguments);\n    this.dictionaries = new Map();\n  }\n  static collect(batch) {\n    return new DictionaryCollector().visit(batch.data, new Struct(batch.schema.fields)).dictionaries;\n  }\n  visit(data, type) {\n    if (DataType.isDictionary(type)) {\n      return this.visitDictionary(data, type);\n    } else {\n      data.childData.forEach((child, i) => this.visit(child, type.children[i].type));\n    }\n    return this;\n  }\n  visitDictionary(data, type) {\n    const dictionary = data.dictionary;\n    if (dictionary && dictionary.length > 0) {\n      this.dictionaries.set(type.id, dictionary);\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["Data","Table","Vector","Visitor","Schema","isIterable","Chunked","selectFieldArgs","DataType","Struct","ensureSameLengthData","StructVector","RecordBatch","constructor","args","data","schema","children","fields","length","childData","_schema","from","options","new","fs","xs","vs","filter","x","map","clone","_children","concat","others","chunks","flatten","numCols","dictionaries","_dictionaries","DictionaryCollector","collect","select","columnNames","nameToIndex","reduce","m","f","i","set","name","Map","selectAt","columnName","get","columnIndices","Boolean","_InternalEmptyPlaceholderRecordBatch","type","batch","visit","isDictionary","visitDictionary","forEach","child","dictionary","id"],"sources":["recordbatch.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,MAAM,QAAe,UAAU;AACxC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,eAAe,QAAQ,aAAa;AAC7C,SAASC,QAAQ,EAAEC,MAAM,QAAoB,QAAQ;AACrD,SAASC,oBAAoB,QAAQ,oBAAoB;AAEzD,SAASC,YAAY,QAAyD,gBAAgB;AAY9F,OAAM,MAAOC,WACT,SAAQD,YAAe;EA6BvBE,YAAY,GAAGC,IAAW;IACtB,IAAIC,IAAqB;IACzB,IAAIC,MAAM,GAAGF,IAAI,CAAC,CAAC,CAAc;IACjC,IAAIG,QAA8B;IAClC,IAAIH,IAAI,CAAC,CAAC,CAAC,YAAYd,IAAI,EAAE;MACzB,GAAGe,IAAI,EAAEE,QAAQ,CAAC,GAAIH,IAAsD;KAC/E,MAAM;MACH,MAAMI,MAAM,GAAGF,MAAM,CAACE,MAA6B;MACnD,MAAM,GAAGC,MAAM,EAAEC,SAAS,CAAC,GAAGN,IAAyC;MACvEC,IAAI,GAAGf,IAAI,CAACS,MAAM,CAAC,IAAIA,MAAM,CAAIS,MAAM,CAAC,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAEC,SAAS,CAAC;;IAE5E,KAAK,CAACL,IAAI,EAAEE,QAAQ,CAAC;IACrB,IAAI,CAACI,OAAO,GAAGL,MAAM;EACzB;EAnCA;EACO,OAAOM,IAAIA,CAA2DC,OAA6F;IACtK,IAAIlB,UAAU,CAAgCkB,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE;MAC9D,OAAOtB,KAAK,CAACqB,IAAI,CAACC,OAAiD,CAAC;;IAExE,OAAOtB,KAAK,CAACqB,IAAI,CAACC,OAAsD,CAAC;EAC7E;EAIA;EACO,OAAOC,GAAGA,CAA8C,GAAGV,IAAW;IACzE,MAAM,CAACW,EAAE,EAAEC,EAAE,CAAC,GAAGnB,eAAe,CAAIO,IAAI,CAAC;IACzC,MAAMa,EAAE,GAAGD,EAAE,CAACE,MAAM,CAAEC,CAAC,IAA8BA,CAAC,YAAY3B,MAAM,CAAC;IACzE,OAAO,IAAIU,WAAW,CAAC,GAAGF,oBAAoB,CAAC,IAAIN,MAAM,CAAIqB,EAAE,CAAC,EAAEE,EAAE,CAACG,GAAG,CAAED,CAAC,IAAKA,CAAC,CAACd,IAAI,CAAC,CAAC,CAAC;EAC7F;EAsBOgB,KAAKA,CAAChB,IAAqB,EAAEE,QAAQ,GAAG,IAAI,CAACe,SAAS;IACzD,OAAO,IAAIpB,WAAW,CAAI,IAAI,CAACS,OAAO,EAAEN,IAAI,EAAEE,QAAQ,CAAC;EAC3D;EAEOgB,MAAMA,CAAC,GAAGC,MAA2B;IACxC,MAAMlB,MAAM,GAAG,IAAI,CAACK,OAAO;MAAEc,MAAM,GAAG7B,OAAO,CAAC8B,OAAO,CAAC,IAAI,EAAE,GAAGF,MAAM,CAAC;IACtE,OAAO,IAAIjC,KAAK,CAACe,MAAM,EAAEmB,MAAM,CAACL,GAAG,CAAC,CAAC;MAAEf;IAAI,CAAE,KAAK,IAAIH,WAAW,CAACI,MAAM,EAAED,IAAI,CAAC,CAAC,CAAC;EACrF;EAEA,IAAWC,MAAMA,CAAA;IAAK,OAAO,IAAI,CAACK,OAAO;EAAE;EAC3C,IAAWgB,OAAOA,CAAA;IAAK,OAAO,IAAI,CAAChB,OAAO,CAACH,MAAM,CAACC,MAAM;EAAE;EAC1D,IAAWmB,YAAYA,CAAA;IACnB,OAAO,IAAI,CAACC,aAAa,KAAK,IAAI,CAACA,aAAa,GAAGC,mBAAmB,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC;EACzF;EAEOC,MAAMA,CAA0B,GAAGC,WAAgB;IACtD,MAAMC,WAAW,GAAG,IAAI,CAACvB,OAAO,CAACH,MAAM,CAAC2B,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAKF,CAAC,CAACG,GAAG,CAACF,CAAC,CAACG,IAAS,EAAEF,CAAC,CAAC,EAAE,IAAIG,GAAG,EAAa,CAAC;IACxG,OAAO,IAAI,CAACC,QAAQ,CAAC,GAAGT,WAAW,CAACb,GAAG,CAAEuB,UAAU,IAAKT,WAAW,CAACU,GAAG,CAACD,UAAU,CAAE,CAAC,CAACzB,MAAM,CAAEC,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAChH;EACOuB,QAAQA,CAA6B,GAAGG,aAAuB;IAClE,MAAMvC,MAAM,GAAG,IAAI,CAACK,OAAO,CAAC+B,QAAQ,CAAC,GAAGG,aAAa,CAAC;IACtD,MAAMnC,SAAS,GAAGmC,aAAa,CAACzB,GAAG,CAAEkB,CAAC,IAAK,IAAI,CAACjC,IAAI,CAACK,SAAS,CAAC4B,CAAC,CAAC,CAAC,CAACpB,MAAM,CAAC4B,OAAO,CAAC;IAClF,OAAO,IAAI5C,WAAW,CAAuBI,MAAM,EAAE,IAAI,CAACG,MAAM,EAAEC,SAAS,CAAC;EAChF;;AAGJ;;;;;;;;AAQA;AACA,OAAM,MAAOqC,oCAAkF,SAAQ7C,WAAc;EACjHC,YAAYG,MAAiB;IACzB,KAAK,CAACA,MAAM,EAAE,CAAC,EAAEA,MAAM,CAACE,MAAM,CAACY,GAAG,CAAEiB,CAAC,IAAK/C,IAAI,CAACwB,GAAG,CAACuB,CAAC,CAACW,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACzE;;AAGJ;AACA,MAAMlB,mBAAoB,SAAQrC,OAAO;EAAzCU,YAAA;;IACW,KAAAyB,YAAY,GAAG,IAAIa,GAAG,EAAkB;EAsBnD;EArBW,OAAOV,OAAOA,CAAwBkB,KAAQ;IACjD,OAAO,IAAInB,mBAAmB,EAAE,CAACoB,KAAK,CAClCD,KAAK,CAAC5C,IAAI,EAAE,IAAIN,MAAM,CAACkD,KAAK,CAAC3C,MAAM,CAACE,MAAM,CAAC,CAC9C,CAACoB,YAAY;EAClB;EACOsB,KAAKA,CAAC7C,IAAU,EAAE2C,IAAc;IACnC,IAAIlD,QAAQ,CAACqD,YAAY,CAACH,IAAI,CAAC,EAAE;MAC7B,OAAO,IAAI,CAACI,eAAe,CAAC/C,IAAI,EAAE2C,IAAI,CAAC;KAC1C,MAAM;MACH3C,IAAI,CAACK,SAAS,CAAC2C,OAAO,CAAC,CAACC,KAAK,EAAEhB,CAAC,KAC5B,IAAI,CAACY,KAAK,CAACI,KAAK,EAAEN,IAAI,CAACzC,QAAQ,CAAC+B,CAAC,CAAC,CAACU,IAAI,CAAC,CAAC;;IAEjD,OAAO,IAAI;EACf;EACOI,eAAeA,CAAC/C,IAAU,EAAE2C,IAAgB;IAC/C,MAAMO,UAAU,GAAGlD,IAAI,CAACkD,UAAU;IAClC,IAAIA,UAAU,IAAIA,UAAU,CAAC9C,MAAM,GAAG,CAAC,EAAE;MACrC,IAAI,CAACmB,YAAY,CAACW,GAAG,CAACS,IAAI,CAACQ,EAAE,EAAED,UAAU,CAAC;;IAE9C,OAAO,IAAI;EACf","ignoreList":[]},"metadata":{},"sourceType":"module"}