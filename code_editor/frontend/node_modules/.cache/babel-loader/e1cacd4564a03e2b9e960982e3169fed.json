{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n/** @ignore */\nconst setEpochMsToDays = (data, index, epochMs) => {\n  data[index] = epochMs / 86400000 | 0;\n};\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n  data[index] = epochMs % 4294967296 | 0;\n  data[index + 1] = epochMs / 4294967296 | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n  data[index] = epochMs * 1000 % 4294967296 | 0;\n  data[index + 1] = epochMs * 1000 / 4294967296 | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n  data[index] = epochMs * 1000000 % 4294967296 | 0;\n  data[index + 1] = epochMs * 1000000 / 4294967296 | 0;\n};\n/** @ignore */\nconst setVariableWidthBytes = (values, valueOffsets, index, value) => {\n  const {\n    [index]: x,\n    [index + 1]: y\n  } = valueOffsets;\n  if (x != null && y != null) {\n    values.set(value.subarray(0, y - x), x);\n  }\n};\n/** @ignore */\nconst setBool = (_ref, index, val) => {\n  let {\n    offset,\n    values\n  } = _ref;\n  const idx = offset + index;\n  val ? values[idx >> 3] |= 1 << idx % 8 // true\n  : values[idx >> 3] &= ~(1 << idx % 8); // false\n};\n/** @ignore */\nconst setDateDay = (_ref2, index, value) => {\n  let {\n    values\n  } = _ref2;\n  setEpochMsToDays(values, index, value.valueOf());\n};\n/** @ignore */\nconst setDateMillisecond = (_ref3, index, value) => {\n  let {\n    values\n  } = _ref3;\n  setEpochMsToMillisecondsLong(values, index * 2, value.valueOf());\n};\n/** @ignore */\nconst setNumeric = (_ref4, index, value) => {\n  let {\n    stride,\n    values\n  } = _ref4;\n  values[stride * index] = value;\n};\n/** @ignore */\nconst setFloat16 = (_ref5, index, value) => {\n  let {\n    stride,\n    values\n  } = _ref5;\n  values[stride * index] = float64ToUint16(value);\n};\n/** @ignore */\nconst setNumericX2 = (vector, index, value) => {\n  switch (typeof value) {\n    case 'bigint':\n      vector.values64[index] = value;\n      break;\n    case 'number':\n      vector.values[index * vector.stride] = value;\n      break;\n    default:\n      const val = value;\n      const {\n        stride,\n        ArrayType\n      } = vector;\n      const long = toArrayBufferView(ArrayType, val);\n      vector.values.set(long.subarray(0, stride), stride * index);\n  }\n};\n/** @ignore */\nconst setFixedSizeBinary = (_ref6, index, value) => {\n  let {\n    stride,\n    values\n  } = _ref6;\n  values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */\nconst setBinary = (_ref7, index, value) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref7;\n  return setVariableWidthBytes(values, valueOffsets, index, value);\n};\n/** @ignore */\nconst setUtf8 = (_ref8, index, value) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref8;\n  setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = (vector, index, value) => {\n  vector.type.bitWidth < 64 ? setNumeric(vector, index, value) : setNumericX2(vector, index, value);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = (vector, index, value) => {\n  vector.type.precision !== Precision.HALF ? setNumeric(vector, index, value) : setFloat16(vector, index, value);\n};\n/* istanbul ignore next */\nconst setDate = (vector, index, value) => {\n  vector.type.unit === DateUnit.DAY ? setDateDay(vector, index, value) : setDateMillisecond(vector, index, value);\n};\n/** @ignore */\nconst setTimestampSecond = (_ref9, index, value) => {\n  let {\n    values\n  } = _ref9;\n  return setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n};\n/** @ignore */\nconst setTimestampMillisecond = (_ref10, index, value) => {\n  let {\n    values\n  } = _ref10;\n  return setEpochMsToMillisecondsLong(values, index * 2, value);\n};\n/** @ignore */\nconst setTimestampMicrosecond = (_ref11, index, value) => {\n  let {\n    values\n  } = _ref11;\n  return setEpochMsToMicrosecondsLong(values, index * 2, value);\n};\n/** @ignore */\nconst setTimestampNanosecond = (_ref12, index, value) => {\n  let {\n    values\n  } = _ref12;\n  return setEpochMsToNanosecondsLong(values, index * 2, value);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp = (vector, index, value) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimestampSecond(vector, index, value);\n    case TimeUnit.MILLISECOND:\n      return setTimestampMillisecond(vector, index, value);\n    case TimeUnit.MICROSECOND:\n      return setTimestampMicrosecond(vector, index, value);\n    case TimeUnit.NANOSECOND:\n      return setTimestampNanosecond(vector, index, value);\n  }\n};\n/** @ignore */\nconst setTimeSecond = (_ref13, index, value) => {\n  let {\n    values,\n    stride\n  } = _ref13;\n  values[stride * index] = value;\n};\n/** @ignore */\nconst setTimeMillisecond = (_ref14, index, value) => {\n  let {\n    values,\n    stride\n  } = _ref14;\n  values[stride * index] = value;\n};\n/** @ignore */\nconst setTimeMicrosecond = (_ref15, index, value) => {\n  let {\n    values\n  } = _ref15;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\nconst setTimeNanosecond = (_ref16, index, value) => {\n  let {\n    values\n  } = _ref16;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setTime = (vector, index, value) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimeSecond(vector, index, value);\n    case TimeUnit.MILLISECOND:\n      return setTimeMillisecond(vector, index, value);\n    case TimeUnit.MICROSECOND:\n      return setTimeMicrosecond(vector, index, value);\n    case TimeUnit.NANOSECOND:\n      return setTimeNanosecond(vector, index, value);\n  }\n};\n/** @ignore */\nconst setDecimal = (_ref17, index, value) => {\n  let {\n    values\n  } = _ref17;\n  values.set(value.subarray(0, 4), 4 * index);\n};\n/** @ignore */\nconst setList = (vector, index, value) => {\n  const values = vector.getChildAt(0),\n    valueOffsets = vector.valueOffsets;\n  for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n    values.set(itr++, value.get(++idx));\n  }\n};\n/** @ignore */\nconst setMap = (vector, index, value) => {\n  const values = vector.getChildAt(0),\n    valueOffsets = vector.valueOffsets;\n  const entries = value instanceof Map ? [...value] : Object.entries(value);\n  for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n    values.set(itr++, entries[++idx]);\n  }\n};\n/** @ignore */\nconst _setStructArrayValue = (o, v) => (c, _, i) => c && c.set(o, v[i]);\n/** @ignore */\nconst _setStructVectorValue = (o, v) => (c, _, i) => c && c.set(o, v.get(i));\n/** @ignore */\nconst _setStructMapValue = (o, v) => (c, f, _) => c && c.set(o, v.get(f.name));\n/** @ignore */\nconst _setStructObjectValue = (o, v) => (c, f, _) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = (vector, index, value) => {\n  const setValue = value instanceof Map ? _setStructMapValue(index, value) : value instanceof Vector ? _setStructVectorValue(index, value) : Array.isArray(value) ? _setStructArrayValue(index, value) : _setStructObjectValue(index, value);\n  vector.type.children.forEach((f, i) => setValue(vector.getChildAt(i), f, i));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = (vector, index, value) => {\n  vector.type.mode === UnionMode.Dense ? setDenseUnion(vector, index, value) : setSparseUnion(vector, index, value);\n};\n/** @ignore */\nconst setDenseUnion = (vector, index, value) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  child && child.set(vector.valueOffsets[index], value);\n};\n/** @ignore */\nconst setSparseUnion = (vector, index, value) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  child && child.set(index, value);\n};\n/** @ignore */\nconst setDictionary = (vector, index, value) => {\n  const key = vector.getKey(index);\n  if (key !== null) {\n    vector.setValue(key, value);\n  }\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = (vector, index, value) => {\n  vector.type.unit === IntervalUnit.DAY_TIME ? setIntervalDayTime(vector, index, value) : setIntervalYearMonth(vector, index, value);\n};\n/** @ignore */\nconst setIntervalDayTime = (_ref18, index, value) => {\n  let {\n    values\n  } = _ref18;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\nconst setIntervalYearMonth = (_ref19, index, value) => {\n  let {\n    values\n  } = _ref19;\n  values[index] = value[0] * 12 + value[1] % 12;\n};\n/** @ignore */\nconst setFixedSizeList = (vector, index, value) => {\n  const child = vector.getChildAt(0),\n    {\n      stride\n    } = vector;\n  for (let idx = -1, offset = index * stride; ++idx < stride;) {\n    child.set(offset + idx, value.get(idx));\n  }\n};\nSetVisitor.prototype.visitBool = setBool;\nSetVisitor.prototype.visitInt = setInt;\nSetVisitor.prototype.visitInt8 = setNumeric;\nSetVisitor.prototype.visitInt16 = setNumeric;\nSetVisitor.prototype.visitInt32 = setNumeric;\nSetVisitor.prototype.visitInt64 = setNumericX2;\nSetVisitor.prototype.visitUint8 = setNumeric;\nSetVisitor.prototype.visitUint16 = setNumeric;\nSetVisitor.prototype.visitUint32 = setNumeric;\nSetVisitor.prototype.visitUint64 = setNumericX2;\nSetVisitor.prototype.visitFloat = setFloat;\nSetVisitor.prototype.visitFloat16 = setFloat16;\nSetVisitor.prototype.visitFloat32 = setNumeric;\nSetVisitor.prototype.visitFloat64 = setNumeric;\nSetVisitor.prototype.visitUtf8 = setUtf8;\nSetVisitor.prototype.visitBinary = setBinary;\nSetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;\nSetVisitor.prototype.visitDate = setDate;\nSetVisitor.prototype.visitDateDay = setDateDay;\nSetVisitor.prototype.visitDateMillisecond = setDateMillisecond;\nSetVisitor.prototype.visitTimestamp = setTimestamp;\nSetVisitor.prototype.visitTimestampSecond = setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;\nSetVisitor.prototype.visitTime = setTime;\nSetVisitor.prototype.visitTimeSecond = setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;\nSetVisitor.prototype.visitDecimal = setDecimal;\nSetVisitor.prototype.visitList = setList;\nSetVisitor.prototype.visitStruct = setStruct;\nSetVisitor.prototype.visitUnion = setUnion;\nSetVisitor.prototype.visitDenseUnion = setDenseUnion;\nSetVisitor.prototype.visitSparseUnion = setSparseUnion;\nSetVisitor.prototype.visitDictionary = setDictionary;\nSetVisitor.prototype.visitInterval = setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList = setFixedSizeList;\nSetVisitor.prototype.visitMap = setMap;\n/** @ignore */\nexport const instance = new SetVisitor();","map":{"version":3,"names":["Vector","Visitor","encodeUtf8","float64ToUint16","toArrayBufferView","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","SetVisitor","setEpochMsToDays","data","index","epochMs","setEpochMsToMillisecondsLong","setEpochMsToMicrosecondsLong","setEpochMsToNanosecondsLong","setVariableWidthBytes","values","valueOffsets","value","x","y","set","subarray","setBool","_ref","val","offset","idx","setDateDay","_ref2","valueOf","setDateMillisecond","_ref3","setNumeric","_ref4","stride","setFloat16","_ref5","setNumericX2","vector","values64","ArrayType","long","setFixedSizeBinary","_ref6","setBinary","_ref7","setUtf8","_ref8","setInt","type","bitWidth","setFloat","precision","HALF","setDate","unit","DAY","setTimestampSecond","_ref9","setTimestampMillisecond","_ref10","setTimestampMicrosecond","_ref11","setTimestampNanosecond","_ref12","setTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","setTimeSecond","_ref13","setTimeMillisecond","_ref14","setTimeMicrosecond","_ref15","setTimeNanosecond","_ref16","setTime","setDecimal","_ref17","setList","getChildAt","itr","end","get","setMap","entries","Map","Object","_setStructArrayValue","o","v","c","_","i","_setStructVectorValue","_setStructMapValue","f","name","_setStructObjectValue","setStruct","setValue","Array","isArray","children","forEach","setUnion","mode","Dense","setDenseUnion","setSparseUnion","childIndex","typeIdToChildIndex","typeIds","child","setDictionary","key","getKey","setIntervalValue","DAY_TIME","setIntervalDayTime","setIntervalYearMonth","_ref18","_ref19","setFixedSizeList","prototype","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","instance"],"sources":["visitor/set.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}