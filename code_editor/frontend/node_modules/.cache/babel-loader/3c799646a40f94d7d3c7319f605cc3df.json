{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { instance as comparer } from './visitor/typecomparator';\nimport { Type, Precision, UnionMode, DateUnit, TimeUnit, IntervalUnit } from './enum';\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport class DataType {\n  /** @nocollapse */static isNull(x) {\n    return x && x.typeId === Type.Null;\n  }\n  /** @nocollapse */\n  static isInt(x) {\n    return x && x.typeId === Type.Int;\n  }\n  /** @nocollapse */\n  static isFloat(x) {\n    return x && x.typeId === Type.Float;\n  }\n  /** @nocollapse */\n  static isBinary(x) {\n    return x && x.typeId === Type.Binary;\n  }\n  /** @nocollapse */\n  static isUtf8(x) {\n    return x && x.typeId === Type.Utf8;\n  }\n  /** @nocollapse */\n  static isBool(x) {\n    return x && x.typeId === Type.Bool;\n  }\n  /** @nocollapse */\n  static isDecimal(x) {\n    return x && x.typeId === Type.Decimal;\n  }\n  /** @nocollapse */\n  static isDate(x) {\n    return x && x.typeId === Type.Date;\n  }\n  /** @nocollapse */\n  static isTime(x) {\n    return x && x.typeId === Type.Time;\n  }\n  /** @nocollapse */\n  static isTimestamp(x) {\n    return x && x.typeId === Type.Timestamp;\n  }\n  /** @nocollapse */\n  static isInterval(x) {\n    return x && x.typeId === Type.Interval;\n  }\n  /** @nocollapse */\n  static isList(x) {\n    return x && x.typeId === Type.List;\n  }\n  /** @nocollapse */\n  static isStruct(x) {\n    return x && x.typeId === Type.Struct;\n  }\n  /** @nocollapse */\n  static isUnion(x) {\n    return x && x.typeId === Type.Union;\n  }\n  /** @nocollapse */\n  static isFixedSizeBinary(x) {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  /** @nocollapse */\n  static isFixedSizeList(x) {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  /** @nocollapse */\n  static isMap(x) {\n    return x && x.typeId === Type.Map;\n  }\n  /** @nocollapse */\n  static isDictionary(x) {\n    return x && x.typeId === Type.Dictionary;\n  }\n  get typeId() {\n    return Type.NONE;\n  }\n  compareTo(other) {\n    return comparer.visit(this, other);\n  }\n}\nDataType[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  proto.ArrayType = Array;\n  return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\n/** @ignore */\nexport class Null extends DataType {\n  toString() {\n    return `Null`;\n  }\n  get typeId() {\n    return Type.Null;\n  }\n}\nNull[Symbol.toStringTag] = (proto => {\n  return proto[Symbol.toStringTag] = 'Null';\n})(Null.prototype);\n/** @ignore */\nclass Int_ extends DataType {\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Int;\n  }\n  get ArrayType() {\n    switch (this.bitWidth) {\n      case 8:\n        return this.isSigned ? Int8Array : Uint8Array;\n      case 16:\n        return this.isSigned ? Int16Array : Uint16Array;\n      case 32:\n        return this.isSigned ? Int32Array : Uint32Array;\n      case 64:\n        return this.isSigned ? Int32Array : Uint32Array;\n    }\n    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  }\n  toString() {\n    return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`;\n  }\n}\nInt_[Symbol.toStringTag] = (proto => {\n  proto.isSigned = null;\n  proto.bitWidth = null;\n  return proto[Symbol.toStringTag] = 'Int';\n})(Int_.prototype);\nexport { Int_ as Int };\n/** @ignore */\nexport class Int8 extends Int_ {\n  constructor() {\n    super(true, 8);\n  }\n}\n/** @ignore */\nexport class Int16 extends Int_ {\n  constructor() {\n    super(true, 16);\n  }\n}\n/** @ignore */\nexport class Int32 extends Int_ {\n  constructor() {\n    super(true, 32);\n  }\n}\n/** @ignore */\nexport class Int64 extends Int_ {\n  constructor() {\n    super(true, 64);\n  }\n}\n/** @ignore */\nexport class Uint8 extends Int_ {\n  constructor() {\n    super(false, 8);\n  }\n}\n/** @ignore */\nexport class Uint16 extends Int_ {\n  constructor() {\n    super(false, 16);\n  }\n}\n/** @ignore */\nexport class Uint32 extends Int_ {\n  constructor() {\n    super(false, 32);\n  }\n}\n/** @ignore */\nexport class Uint64 extends Int_ {\n  constructor() {\n    super(false, 64);\n  }\n}\nObject.defineProperty(Int8.prototype, 'ArrayType', {\n  value: Int8Array\n});\nObject.defineProperty(Int16.prototype, 'ArrayType', {\n  value: Int16Array\n});\nObject.defineProperty(Int32.prototype, 'ArrayType', {\n  value: Int32Array\n});\nObject.defineProperty(Int64.prototype, 'ArrayType', {\n  value: Int32Array\n});\nObject.defineProperty(Uint8.prototype, 'ArrayType', {\n  value: Uint8Array\n});\nObject.defineProperty(Uint16.prototype, 'ArrayType', {\n  value: Uint16Array\n});\nObject.defineProperty(Uint32.prototype, 'ArrayType', {\n  value: Uint32Array\n});\nObject.defineProperty(Uint64.prototype, 'ArrayType', {\n  value: Uint32Array\n});\n/** @ignore */\nexport class Float extends DataType {\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId() {\n    return Type.Float;\n  }\n  get ArrayType() {\n    switch (this.precision) {\n      case Precision.HALF:\n        return Uint16Array;\n      case Precision.SINGLE:\n        return Float32Array;\n      case Precision.DOUBLE:\n        return Float64Array;\n    }\n    throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  }\n  toString() {\n    return `Float${this.precision << 5 || 16}`;\n  }\n}\nFloat[Symbol.toStringTag] = (proto => {\n  proto.precision = null;\n  return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\n/** @ignore */\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\n/** @ignore */\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\n/** @ignore */\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\nObject.defineProperty(Float16.prototype, 'ArrayType', {\n  value: Uint16Array\n});\nObject.defineProperty(Float32.prototype, 'ArrayType', {\n  value: Float32Array\n});\nObject.defineProperty(Float64.prototype, 'ArrayType', {\n  value: Float64Array\n});\n/** @ignore */\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return `Binary`;\n  }\n}\nBinary[Symbol.toStringTag] = (proto => {\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\n/** @ignore */\nexport class Utf8 extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Utf8;\n  }\n  toString() {\n    return `Utf8`;\n  }\n}\nUtf8[Symbol.toStringTag] = (proto => {\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\n/** @ignore */\nexport class Bool extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Bool;\n  }\n  toString() {\n    return `Bool`;\n  }\n}\nBool[Symbol.toStringTag] = (proto => {\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\n/** @ignore */\nexport class Decimal extends DataType {\n  constructor(scale, precision) {\n    super();\n    this.scale = scale;\n    this.precision = precision;\n  }\n  get typeId() {\n    return Type.Decimal;\n  }\n  toString() {\n    return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`;\n  }\n}\nDecimal[Symbol.toStringTag] = (proto => {\n  proto.scale = null;\n  proto.precision = null;\n  proto.ArrayType = Uint32Array;\n  return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\n/** @ignore */\nexport class Date_ extends DataType {\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Date;\n  }\n  toString() {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\nDate_[Symbol.toStringTag] = (proto => {\n  proto.unit = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\n/** @ignore */\nexport class DateDay extends Date_ {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\n/** @ignore */\nexport class DateMillisecond extends Date_ {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n/** @ignore */\nclass Time_ extends DataType {\n  constructor(unit, bitWidth) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Time;\n  }\n  toString() {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n}\nTime_[Symbol.toStringTag] = (proto => {\n  proto.unit = null;\n  proto.bitWidth = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Time';\n})(Time_.prototype);\nexport { Time_ as Time };\n/** @ignore */\nexport class TimeSecond extends Time_ {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\n/** @ignore */\nexport class TimeMillisecond extends Time_ {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n/** @ignore */\nexport class TimeMicrosecond extends Time_ {\n  constructor() {\n    super(TimeUnit.MICROSECOND, 64);\n  }\n}\n/** @ignore */\nexport class TimeNanosecond extends Time_ {\n  constructor() {\n    super(TimeUnit.NANOSECOND, 64);\n  }\n}\n/** @ignore */\nclass Timestamp_ extends DataType {\n  constructor(unit, timezone) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId() {\n    return Type.Timestamp;\n  }\n  toString() {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`;\n  }\n}\nTimestamp_[Symbol.toStringTag] = (proto => {\n  proto.unit = null;\n  proto.timezone = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp_.prototype);\nexport { Timestamp_ as Timestamp };\n/** @ignore */\nexport class TimestampSecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n/** @ignore */\nclass Interval_ extends DataType {\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Interval;\n  }\n  toString() {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\nInterval_[Symbol.toStringTag] = (proto => {\n  proto.unit = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Interval';\n})(Interval_.prototype);\nexport { Interval_ as Interval };\n/** @ignore */\nexport class IntervalDayTime extends Interval_ {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\n/** @ignore */\nexport class IntervalYearMonth extends Interval_ {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n/** @ignore */\nexport class List extends DataType {\n  constructor(child) {\n    super();\n    this.children = [child];\n  }\n  get typeId() {\n    return Type.List;\n  }\n  toString() {\n    return `List<${this.valueType}>`;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  get ArrayType() {\n    return this.valueType.ArrayType;\n  }\n}\nList[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\n/** @ignore */\nexport class Struct extends DataType {\n  constructor(children) {\n    super();\n    this.children = children;\n  }\n  get typeId() {\n    return Type.Struct;\n  }\n  toString() {\n    return `Struct<{${this.children.map(f => `${f.name}:${f.type}`).join(`, `)}}>`;\n  }\n}\nStruct[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\n/** @ignore */\nclass Union_ extends DataType {\n  constructor(mode, typeIds, children) {\n    super();\n    this.mode = mode;\n    this.children = children;\n    this.typeIds = typeIds = Int32Array.from(typeIds);\n    this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n      return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n    }, Object.create(null));\n  }\n  get typeId() {\n    return Type.Union;\n  }\n  toString() {\n    return `${this[Symbol.toStringTag]}<${this.children.map(x => `${x.type}`).join(` | `)}>`;\n  }\n}\nUnion_[Symbol.toStringTag] = (proto => {\n  proto.mode = null;\n  proto.typeIds = null;\n  proto.children = null;\n  proto.typeIdToChildIndex = null;\n  proto.ArrayType = Int8Array;\n  return proto[Symbol.toStringTag] = 'Union';\n})(Union_.prototype);\nexport { Union_ as Union };\n/** @ignore */\nexport class DenseUnion extends Union_ {\n  constructor(typeIds, children) {\n    super(UnionMode.Dense, typeIds, children);\n  }\n}\n/** @ignore */\nexport class SparseUnion extends Union_ {\n  constructor(typeIds, children) {\n    super(UnionMode.Sparse, typeIds, children);\n  }\n}\n/** @ignore */\nexport class FixedSizeBinary extends DataType {\n  constructor(byteWidth) {\n    super();\n    this.byteWidth = byteWidth;\n  }\n  get typeId() {\n    return Type.FixedSizeBinary;\n  }\n  toString() {\n    return `FixedSizeBinary[${this.byteWidth}]`;\n  }\n}\nFixedSizeBinary[Symbol.toStringTag] = (proto => {\n  proto.byteWidth = null;\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\n/** @ignore */\nexport class FixedSizeList extends DataType {\n  constructor(listSize, child) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId() {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  get ArrayType() {\n    return this.valueType.ArrayType;\n  }\n  toString() {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\nFixedSizeList[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  proto.listSize = null;\n  return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\n/** @ignore */\nexport class Map_ extends DataType {\n  constructor(child, keysSorted = false) {\n    super();\n    this.children = [child];\n    this.keysSorted = keysSorted;\n  }\n  get typeId() {\n    return Type.Map;\n  }\n  get keyType() {\n    return this.children[0].type.children[0].type;\n  }\n  get valueType() {\n    return this.children[0].type.children[1].type;\n  }\n  toString() {\n    return `Map<{${this.children[0].type.children.map(f => `${f.name}:${f.type}`).join(`, `)}}>`;\n  }\n}\nMap_[Symbol.toStringTag] = (proto => {\n  proto.children = null;\n  proto.keysSorted = null;\n  return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\n/** @ignore */\nconst getId = (atomicDictionaryId => () => ++atomicDictionaryId)(-1);\n/** @ignore */\nexport class Dictionary extends DataType {\n  constructor(dictionary, indices, id, isOrdered) {\n    super();\n    this.indices = indices;\n    this.dictionary = dictionary;\n    this.isOrdered = isOrdered || false;\n    this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n  }\n  get typeId() {\n    return Type.Dictionary;\n  }\n  get children() {\n    return this.dictionary.children;\n  }\n  get valueType() {\n    return this.dictionary;\n  }\n  get ArrayType() {\n    return this.dictionary.ArrayType;\n  }\n  toString() {\n    return `Dictionary<${this.indices}, ${this.dictionary}>`;\n  }\n}\nDictionary[Symbol.toStringTag] = (proto => {\n  proto.id = null;\n  proto.indices = null;\n  proto.isOrdered = null;\n  proto.dictionary = null;\n  return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\n/** @ignore */\nexport function strideForType(type) {\n  let t = type;\n  switch (type.typeId) {\n    case Type.Decimal:\n      return 4;\n    case Type.Timestamp:\n      return 2;\n    case Type.Date:\n      return 1 + t.unit;\n    case Type.Interval:\n      return 1 + t.unit;\n    case Type.Int:\n      return 1 + +(t.bitWidth > 32);\n    case Type.Time:\n      return 1 + +(t.bitWidth > 32);\n    case Type.FixedSizeList:\n      return t.listSize;\n    case Type.FixedSizeBinary:\n      return t.byteWidth;\n    default:\n      return 1;\n  }\n}","map":{"version":3,"names":["instance","comparer","Type","Precision","UnionMode","DateUnit","TimeUnit","IntervalUnit","DataType","isNull","x","typeId","Null","isInt","Int","isFloat","Float","isBinary","Binary","isUtf8","Utf8","isBool","Bool","isDecimal","Decimal","isDate","Date","isTime","Time","isTimestamp","Timestamp","isInterval","Interval","isList","List","isStruct","Struct","isUnion","Union","isFixedSizeBinary","FixedSizeBinary","isFixedSizeList","FixedSizeList","isMap","Map","isDictionary","Dictionary","NONE","compareTo","other","visit","Symbol","toStringTag","proto","children","ArrayType","Array","prototype","toString","Int_","constructor","isSigned","bitWidth","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Object","defineProperty","value","precision","HALF","SINGLE","Float32Array","DOUBLE","Float64Array","Float16","Float32","Float64","scale","Date_","unit","DateDay","DAY","DateMillisecond","MILLISECOND","Time_","TimeSecond","SECOND","TimeMillisecond","TimeMicrosecond","MICROSECOND","TimeNanosecond","NANOSECOND","Timestamp_","timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","Interval_","IntervalDayTime","DAY_TIME","IntervalYearMonth","YEAR_MONTH","child","valueType","type","valueField","map","f","name","join","Union_","mode","typeIds","from","typeIdToChildIndex","reduce","idx","create","DenseUnion","Dense","SparseUnion","Sparse","byteWidth","listSize","Map_","keysSorted","keyType","getId","atomicDictionaryId","dictionary","indices","id","isOrdered","low","strideForType","t"],"sources":["type.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA,SAASA,QAAQ,IAAIC,QAAQ,QAAQ,0BAA0B;AAG/D,SACIC,IAAI,EACJC,SAAS,EAAEC,SAAS,EACpBC,QAAQ,EAAEC,QAAQ,EAAEC,YAAY,QAC7B,QAAQ;AA8Bf;;;;AAIA,OAAM,MAAgBC,QAAQ;EAK1B,kBAAmB,OAAkBC,MAAMA,CAAEC,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACU,IAAI;EAAa;EAC5H;EAAmB,OAAmBC,KAAKA,CAAEH,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACY,GAAG;EAAc;EAC5H;EAAmB,OAAiBC,OAAOA,CAAEL,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACc,KAAK;EAAY;EAC5H;EAAmB,OAAgBC,QAAQA,CAAEP,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACgB,MAAM;EAAW;EAC5H;EAAmB,OAAkBC,MAAMA,CAAET,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACkB,IAAI;EAAa;EAC5H;EAAmB,OAAkBC,MAAMA,CAAEX,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACoB,IAAI;EAAa;EAC5H;EAAmB,OAAeC,SAASA,CAAEb,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACsB,OAAO;EAAU;EAC5H;EAAmB,OAAkBC,MAAMA,CAAEf,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACwB,IAAI;EAAa;EAC5H;EAAmB,OAAkBC,MAAMA,CAAEjB,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAAC0B,IAAI;EAAa;EAC5H;EAAmB,OAAaC,WAAWA,CAAEnB,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAAC4B,SAAS;EAAQ;EAC5H;EAAmB,OAAcC,UAAUA,CAAErB,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAAC8B,QAAQ;EAAS;EAC5H;EAAmB,OAAkBC,MAAMA,CAAEvB,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACgC,IAAI;EAAa;EAC5H;EAAmB,OAAgBC,QAAQA,CAAEzB,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACkC,MAAM;EAAW;EAC5H;EAAmB,OAAiBC,OAAOA,CAAE3B,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACoC,KAAK;EAAY;EAC5H;EAAmB,OAAOC,iBAAiBA,CAAE7B,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACsC,eAAe;EAAE;EAC5H;EAAmB,OAASC,eAAeA,CAAE/B,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAACwC,aAAa;EAAI;EAC5H;EAAmB,OAAmBC,KAAKA,CAAEjC,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAAC0C,GAAG;EAAc;EAC5H;EAAmB,OAAYC,YAAYA,CAAEnC,CAAM;IAA0B,OAAOA,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKT,IAAI,CAAC4C,UAAU;EAAO;EAE5H,IAAWnC,MAAMA,CAAA;IAAY,OAAaT,IAAI,CAAC6C,IAAI;EAAE;EAC9CC,SAASA,CAACC,KAAe;IAC5B,OAAOhD,QAAQ,CAACiD,KAAK,CAAC,IAAI,EAAED,KAAK,CAAC;EACtC;;AAEiBzC,QAAA,CAAC2C,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAe,IAAI;EAClDA,KAAM,CAACC,QAAQ,GAAG,IAAI;EACtBD,KAAM,CAACE,SAAS,GAAGC,KAAK;EAC/B,OAAOH,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,UAAU;AACjD,CAAC,EAAE5C,QAAQ,CAACiD,SAAS,CAAC;AAK1B;AACA,OAAM,MAAO7C,IAAK,SAAQJ,QAAmB;EAClCkD,QAAQA,CAAA;IAAK,OAAO,MAAM;EAAE;EACnC,IAAW/C,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACU,IAAiB;EAAE;;AACpCA,IAAA,CAACuC,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAW,IAAI;EACrD,OAAOA,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,MAAM;AAC7C,CAAC,EAAExC,IAAI,CAAC6C,SAAS,CAAC;AAoBtB;AACA,MAAME,IAA4B,SAAQnD,QAAW;EACjDoD,YAA4BC,QAA8B,EAC9BC,QAA8B;IACtD,KAAK,EAAE;IAFiB,KAAAD,QAAQ,GAARA,QAAQ;IACR,KAAAC,QAAQ,GAARA,QAAQ;EAEpC;EACA,IAAWnD,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACY,GAAQ;EAAE;EAC5C,IAAWyC,SAASA,CAAA;IAChB,QAAQ,IAAI,CAACO,QAAQ;MACjB,KAAM,CAAC;QAAE,OAAO,IAAI,CAACD,QAAQ,GAAIE,SAAS,GAAIC,UAAU;MACxD,KAAK,EAAE;QAAE,OAAO,IAAI,CAACH,QAAQ,GAAGI,UAAU,GAAGC,WAAW;MACxD,KAAK,EAAE;QAAE,OAAO,IAAI,CAACL,QAAQ,GAAGM,UAAU,GAAGC,WAAW;MACxD,KAAK,EAAE;QAAE,OAAO,IAAI,CAACP,QAAQ,GAAGM,UAAU,GAAGC,WAAW;;IAE5D,MAAM,IAAIC,KAAK,CAAC,gBAAgB,IAAI,CAAClB,MAAM,CAACC,WAAW,CAAC,OAAO,CAAC;EACpE;EACOM,QAAQA,CAAA;IAAK,OAAO,GAAG,IAAI,CAACG,QAAQ,GAAG,GAAG,GAAG,IAAI,KAAK,IAAI,CAACC,QAAQ,EAAE;EAAE;;AAC7DH,IAAA,CAACR,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAW,IAAI;EAC9CA,KAAM,CAACQ,QAAQ,GAAG,IAAI;EACtBR,KAAM,CAACS,QAAQ,GAAG,IAAI;EAC7B,OAAOT,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,KAAK;AAC5C,CAAC,EAAEO,IAAI,CAACF,SAAS,CAAC;AAGtB,SAASE,IAAI,IAAI7C,GAAG;AAEpB;AACA,OAAM,MAAOwD,IAAK,SAAQX,IAAe;EAAGC,YAAA;IAAgB,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;EAAE;;AAC5E;AACA,OAAM,MAAOW,KAAM,SAAQZ,IAAgB;EAAGC,YAAA;IAAgB,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC;EAAE;;AAC/E;AACA,OAAM,MAAOY,KAAM,SAAQb,IAAgB;EAAGC,YAAA;IAAgB,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC;EAAE;;AAC/E;AACA,OAAM,MAAOa,KAAM,SAAQd,IAAgB;EAAGC,YAAA;IAAgB,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC;EAAE;;AAC/E;AACA,OAAM,MAAOc,KAAM,SAAQf,IAAgB;EAAGC,YAAA;IAAgB,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;EAAE;;AAC/E;AACA,OAAM,MAAOe,MAAO,SAAQhB,IAAiB;EAAGC,YAAA;IAAgB,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC;EAAE;;AAClF;AACA,OAAM,MAAOgB,MAAO,SAAQjB,IAAiB;EAAGC,YAAA;IAAgB,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC;EAAE;;AAClF;AACA,OAAM,MAAOiB,MAAO,SAAQlB,IAAiB;EAAGC,YAAA;IAAgB,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC;EAAE;;AAElFkB,MAAM,CAACC,cAAc,CAACT,IAAI,CAACb,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEjB;AAAS,CAAE,CAAC;AACxEe,MAAM,CAACC,cAAc,CAACR,KAAK,CAACd,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEf;AAAU,CAAE,CAAC;AAC1Ea,MAAM,CAACC,cAAc,CAACP,KAAK,CAACf,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEb;AAAU,CAAE,CAAC;AAC1EW,MAAM,CAACC,cAAc,CAACN,KAAK,CAAChB,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEb;AAAU,CAAE,CAAC;AAC1EW,MAAM,CAACC,cAAc,CAACL,KAAK,CAACjB,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEhB;AAAU,CAAE,CAAC;AAC1Ec,MAAM,CAACC,cAAc,CAACJ,MAAM,CAAClB,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEd;AAAW,CAAE,CAAC;AAC5EY,MAAM,CAACC,cAAc,CAACH,MAAM,CAACnB,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEZ;AAAW,CAAE,CAAC;AAC5EU,MAAM,CAACC,cAAc,CAACF,MAAM,CAACpB,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEZ;AAAW,CAAE,CAAC;AAc5E;AACA,OAAM,MAAOpD,KAAiC,SAAQR,QAAW;EAC7DoD,YAA4BqB,SAAoB;IAC5C,KAAK,EAAE;IADiB,KAAAA,SAAS,GAATA,SAAS;EAErC;EACA,IAAWtE,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACc,KAAU;EAAE;EAC9C,IAAWuC,SAASA,CAAA;IAChB,QAAQ,IAAI,CAAC0B,SAAS;MAClB,KAAK9E,SAAS,CAAC+E,IAAI;QAAE,OAAOhB,WAAW;MACvC,KAAK/D,SAAS,CAACgF,MAAM;QAAE,OAAOC,YAAY;MAC1C,KAAKjF,SAAS,CAACkF,MAAM;QAAE,OAAOC,YAAY;;IAE9C,MAAM,IAAIjB,KAAK,CAAC,gBAAgB,IAAI,CAAClB,MAAM,CAACC,WAAW,CAAC,OAAO,CAAC;EACpE;EACOM,QAAQA,CAAA;IAAK,OAAO,QAAS,IAAI,CAACuB,SAAS,IAAI,CAAC,IAAK,EAAE,EAAE;EAAE;;AACjDjE,KAAA,CAACmC,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAY,IAAI;EAC/CA,KAAM,CAAC4B,SAAS,GAAG,IAAI;EAC9B,OAAO5B,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,OAAO;AAC9C,CAAC,EAAEpC,KAAK,CAACyC,SAAS,CAAC;AAGvB;AACA,OAAM,MAAO8B,OAAQ,SAAQvE,KAAmB;EAAG4C,YAAA;IAAgB,KAAK,CAACzD,SAAS,CAAC+E,IAAI,CAAC;EAAE;;AAC1F;AACA,OAAM,MAAOM,OAAQ,SAAQxE,KAAmB;EAAG4C,YAAA;IAAgB,KAAK,CAACzD,SAAS,CAACgF,MAAM,CAAC;EAAE;;AAC5F;AACA,OAAM,MAAOM,OAAQ,SAAQzE,KAAmB;EAAG4C,YAAA;IAAgB,KAAK,CAACzD,SAAS,CAACkF,MAAM,CAAC;EAAE;;AAE5FP,MAAM,CAACC,cAAc,CAACQ,OAAO,CAAC9B,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEd;AAAW,CAAE,CAAC;AAC7EY,MAAM,CAACC,cAAc,CAACS,OAAO,CAAC/B,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEI;AAAY,CAAE,CAAC;AAC9EN,MAAM,CAACC,cAAc,CAACU,OAAO,CAAChC,SAAS,EAAE,WAAW,EAAE;EAAEuB,KAAK,EAAEM;AAAY,CAAE,CAAC;AAI9E;AACA,OAAM,MAAOpE,MAAO,SAAQV,QAAqB;EAC7CoD,YAAA;IACI,KAAK,EAAE;EACX;EACA,IAAWjD,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACgB,MAAqB;EAAE;EAClDwC,QAAQA,CAAA;IAAK,OAAO,QAAQ;EAAE;;AACpBxC,MAAA,CAACiC,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAa,IAAI;EAChDA,KAAM,CAACE,SAAS,GAAGS,UAAU;EACpC,OAAOX,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,QAAQ;AAC/C,CAAC,EAAElC,MAAM,CAACuC,SAAS,CAAC;AAKxB;AACA,OAAM,MAAOrC,IAAK,SAAQZ,QAAmB;EACzCoD,YAAA;IACI,KAAK,EAAE;EACX;EACA,IAAWjD,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACkB,IAAiB;EAAE;EAC9CsC,QAAQA,CAAA;IAAK,OAAO,MAAM;EAAE;;AAClBtC,IAAA,CAAC+B,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAW,IAAI;EAC9CA,KAAM,CAACE,SAAS,GAAGS,UAAU;EACpC,OAAOX,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,MAAM;AAC7C,CAAC,EAAEhC,IAAI,CAACqC,SAAS,CAAC;AAKtB;AACA,OAAM,MAAOnC,IAAK,SAAQd,QAAmB;EACzCoD,YAAA;IACI,KAAK,EAAE;EACX;EACA,IAAWjD,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACoB,IAAiB;EAAE;EAC9CoC,QAAQA,CAAA;IAAK,OAAO,MAAM;EAAE;;AAClBpC,IAAA,CAAC6B,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAW,IAAI;EAC9CA,KAAM,CAACE,SAAS,GAAGS,UAAU;EACpC,OAAOX,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,MAAM;AAC7C,CAAC,EAAE9B,IAAI,CAACmC,SAAS,CAAC;AAKtB;AACA,OAAM,MAAOjC,OAAQ,SAAQhB,QAAsB;EAC/CoD,YAA4B8B,KAAa,EACbT,SAAiB;IACzC,KAAK,EAAE;IAFiB,KAAAS,KAAK,GAALA,KAAK;IACL,KAAAT,SAAS,GAATA,SAAS;EAErC;EACA,IAAWtE,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACsB,OAAuB;EAAE;EACpDkC,QAAQA,CAAA;IAAK,OAAO,WAAW,IAAI,CAACuB,SAAS,IAAI,IAAI,CAACS,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAACA,KAAK,GAAG;EAAE;;AAClFlE,OAAA,CAAC2B,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAc,IAAI;EACjDA,KAAM,CAACqC,KAAK,GAAG,IAAI;EACnBrC,KAAM,CAAC4B,SAAS,GAAG,IAAI;EACvB5B,KAAM,CAACE,SAAS,GAAGa,WAAW;EACrC,OAAOf,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,SAAS;AAChD,CAAC,EAAE5B,OAAO,CAACiC,SAAS,CAAC;AAOzB;AACA,OAAM,MAAOkC,KAA+B,SAAQnF,QAAW;EAC3DoD,YAA4BgC,IAAc;IACtC,KAAK,EAAE;IADiB,KAAAA,IAAI,GAAJA,IAAI;EAEhC;EACA,IAAWjF,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACwB,IAAS;EAAE;EACtCgC,QAAQA,CAAA;IAAK,OAAO,OAAO,CAAC,IAAI,CAACkC,IAAI,GAAG,CAAC,IAAI,EAAE,IAAIvF,QAAQ,CAAC,IAAI,CAACuF,IAAI,CAAC,GAAG;EAAE;;AACjED,KAAA,CAACxC,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAY,IAAI;EAC/CA,KAAM,CAACuC,IAAI,GAAG,IAAI;EAClBvC,KAAM,CAACE,SAAS,GAAGY,UAAU;EACpC,OAAOd,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,MAAM;AAC7C,CAAC,EAAEuC,KAAK,CAAClC,SAAS,CAAC;AAGvB;AACA,OAAM,MAAOoC,OAAQ,SAAQF,KAAmB;EAAG/B,YAAA;IAAgB,KAAK,CAACvD,QAAQ,CAACyF,GAAG,CAAC;EAAE;;AACxF;AACA,OAAM,MAAOC,eAAgB,SAAQJ,KAA2B;EAAG/B,YAAA;IAAgB,KAAK,CAACvD,QAAQ,CAAC2F,WAAW,CAAC;EAAE;;AAehH;AACA,MAAMC,KAA+B,SAAQzF,QAAW;EACpDoD,YAA4BgC,IAA0B,EAC1B9B,QAAsB;IAC9C,KAAK,EAAE;IAFiB,KAAA8B,IAAI,GAAJA,IAAI;IACJ,KAAA9B,QAAQ,GAARA,QAAQ;EAEpC;EACA,IAAWnD,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAAC0B,IAAS;EAAE;EACtC8B,QAAQA,CAAA;IAAK,OAAO,OAAO,IAAI,CAACI,QAAQ,IAAIxD,QAAQ,CAAC,IAAI,CAACsF,IAAI,CAAC,GAAG;EAAE;;AAC1DK,KAAA,CAAC9C,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAY,IAAI;EAC/CA,KAAM,CAACuC,IAAI,GAAG,IAAI;EAClBvC,KAAM,CAACS,QAAQ,GAAG,IAAI;EACtBT,KAAM,CAACE,SAAS,GAAGY,UAAU;EACpC,OAAOd,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,MAAM;AAC7C,CAAC,EAAE6C,KAAK,CAACxC,SAAS,CAAC;AAGvB,SAASwC,KAAK,IAAIrE,IAAI;AAEtB;AACA,OAAM,MAAOsE,UAAW,SAAQD,KAAsB;EAAGrC,YAAA;IAAgB,KAAK,CAACtD,QAAQ,CAAC6F,MAAM,EAAE,EAAE,CAAC;EAAE;;AACrG;AACA,OAAM,MAAOC,eAAgB,SAAQH,KAA2B;EAAGrC,YAAA;IAAgB,KAAK,CAACtD,QAAQ,CAAC0F,WAAW,EAAE,EAAE,CAAC;EAAE;;AACpH;AACA,OAAM,MAAOK,eAAgB,SAAQJ,KAA2B;EAAGrC,YAAA;IAAgB,KAAK,CAACtD,QAAQ,CAACgG,WAAW,EAAE,EAAE,CAAC;EAAE;;AACpH;AACA,OAAM,MAAOC,cAAe,SAAQN,KAA0B;EAAGrC,YAAA;IAAgB,KAAK,CAACtD,QAAQ,CAACkG,UAAU,EAAE,EAAE,CAAC;EAAE;;AAMjH;AACA,MAAMC,UAA8C,SAAQjG,QAAW;EACnEoD,YAA4BgC,IAAc,EACdc,QAAwB;IAChD,KAAK,EAAE;IAFiB,KAAAd,IAAI,GAAJA,IAAI;IACJ,KAAAc,QAAQ,GAARA,QAAQ;EAEpC;EACA,IAAW/F,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAAC4B,SAAc;EAAE;EAC3C4B,QAAQA,CAAA;IAAK,OAAO,aAAapD,QAAQ,CAAC,IAAI,CAACsF,IAAI,CAAC,GAAG,IAAI,CAACc,QAAQ,GAAG,KAAK,IAAI,CAACA,QAAQ,EAAE,GAAG,EAAE,GAAG;EAAE;;AAC3FD,UAAA,CAACtD,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAiB,IAAI;EACpDA,KAAM,CAACuC,IAAI,GAAG,IAAI;EAClBvC,KAAM,CAACqD,QAAQ,GAAG,IAAI;EACtBrD,KAAM,CAACE,SAAS,GAAGY,UAAU;EACpC,OAAOd,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,WAAW;AAClD,CAAC,EAAEqD,UAAU,CAAChD,SAAS,CAAC;AAG5B,SAASgD,UAAU,IAAI3E,SAAS;AAEhC;AACA,OAAM,MAAO6E,eAAgB,SAAQF,UAAgC;EAAG7C,YAAY8C,QAAwB;IAAI,KAAK,CAACpG,QAAQ,CAAC6F,MAAM,EAAEO,QAAQ,CAAC;EAAE;;AAClJ;AACA,OAAM,MAAOE,oBAAqB,SAAQH,UAAqC;EAAG7C,YAAY8C,QAAwB;IAAI,KAAK,CAACpG,QAAQ,CAAC0F,WAAW,EAAEU,QAAQ,CAAC;EAAE;;AACjK;AACA,OAAM,MAAOG,oBAAqB,SAAQJ,UAAqC;EAAG7C,YAAY8C,QAAwB;IAAI,KAAK,CAACpG,QAAQ,CAACgG,WAAW,EAAEI,QAAQ,CAAC;EAAE;;AACjK;AACA,OAAM,MAAOI,mBAAoB,SAAQL,UAAoC;EAAG7C,YAAY8C,QAAwB;IAAI,KAAK,CAACpG,QAAQ,CAACkG,UAAU,EAAEE,QAAQ,CAAC;EAAE;;AAM9J;AACA,MAAMK,SAA2C,SAAQvG,QAAW;EAChEoD,YAA4BgC,IAAkB;IAC1C,KAAK,EAAE;IADiB,KAAAA,IAAI,GAAJA,IAAI;EAEhC;EACA,IAAWjF,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAAC8B,QAAa;EAAE;EAC1C0B,QAAQA,CAAA;IAAK,OAAO,YAAYnD,YAAY,CAAC,IAAI,CAACqF,IAAI,CAAC,GAAG;EAAE;;AAClDmB,SAAA,CAAC5D,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAgB,IAAI;EACnDA,KAAM,CAACuC,IAAI,GAAG,IAAI;EAClBvC,KAAM,CAACE,SAAS,GAAGY,UAAU;EACpC,OAAOd,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,UAAU;AACjD,CAAC,EAAE2D,SAAS,CAACtD,SAAS,CAAC;AAG3B,SAASsD,SAAS,IAAI/E,QAAQ;AAE9B;AACA,OAAM,MAAOgF,eAAgB,SAAQD,SAA+B;EAAGnD,YAAA;IAAgB,KAAK,CAACrD,YAAY,CAAC0G,QAAQ,CAAC;EAAE;;AACrH;AACA,OAAM,MAAOC,iBAAkB,SAAQH,SAAiC;EAAGnD,YAAA;IAAgB,KAAK,CAACrD,YAAY,CAAC4G,UAAU,CAAC;EAAE;;AAI3H;AACA,OAAM,MAAOjF,IAA+B,SAAQ1B,QAA+B;EAC/EoD,YAAYwD,KAAe;IACvB,KAAK,EAAE;IACP,IAAI,CAAC9D,QAAQ,GAAG,CAAC8D,KAAK,CAAC;EAC3B;EAEA,IAAWzG,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACgC,IAAiB;EAAE;EAC9CwB,QAAQA,CAAA;IAAK,OAAO,QAAQ,IAAI,CAAC2D,SAAS,GAAG;EAAE;EACtD,IAAWA,SAASA,CAAA;IAAQ,OAAO,IAAI,CAAC/D,QAAQ,CAAC,CAAC,CAAC,CAACgE,IAAS;EAAE;EAC/D,IAAWC,UAAUA,CAAA;IAAe,OAAO,IAAI,CAACjE,QAAQ,CAAC,CAAC,CAAa;EAAE;EACzE,IAAWC,SAASA,CAAA;IAAqB,OAAO,IAAI,CAAC8D,SAAS,CAAC9D,SAAS;EAAE;;AACzDrB,IAAA,CAACiB,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAW,IAAI;EAC9CA,KAAM,CAACC,QAAQ,GAAG,IAAI;EAC7B,OAAOD,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,MAAM;AAC7C,CAAC,EAAElB,IAAI,CAACuB,SAAS,CAAC;AAKtB;AACA,OAAM,MAAOrB,MAAoD,SAAQ5B,QAAwB;EAE7FoD,YAAYN,QAA6B;IACrC,KAAK,EAAE;IACP,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;EACA,IAAW3C,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACkC,MAAqB;EAAE;EAClDsB,QAAQA,CAAA;IAAK,OAAO,WAAW,IAAI,CAACJ,QAAQ,CAACkE,GAAG,CAAEC,CAAC,IAAK,GAAGA,CAAC,CAACC,IAAI,IAAID,CAAC,CAACH,IAAI,EAAE,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,IAAI;EAAE;;AACrFvF,MAAA,CAACe,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAa,IAAI;EAChDA,KAAM,CAACC,QAAQ,GAAG,IAAI;EAC7B,OAAOD,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,QAAQ;AAC/C,CAAC,EAAEhB,MAAM,CAACqB,SAAS,CAAC;AAOxB;AACA,MAAMmE,MAAkC,SAAQpH,QAAW;EAKvDoD,YAAYiE,IAAe,EACfC,OAA8B,EAC9BxE,QAAsB;IAC9B,KAAK,EAAE;IACP,IAAI,CAACuE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACvE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACwE,OAAO,GAAGA,OAAO,GAAG3D,UAAU,CAAC4D,IAAI,CAACD,OAAO,CAAC;IACjD,IAAI,CAACE,kBAAkB,GAAGF,OAAO,CAACG,MAAM,CAAC,CAACD,kBAAkB,EAAErH,MAAM,EAAEuH,GAAG,KAAI;MACzE,OAAO,CAACF,kBAAkB,CAACrH,MAAM,CAAC,GAAGuH,GAAG,KAAKF,kBAAkB,IAAIA,kBAAkB;IACzF,CAAC,EAAElD,MAAM,CAACqD,MAAM,CAAC,IAAI,CAA8B,CAAC;EACxD;EACA,IAAWxH,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACoC,KAAU;EAAE;EACvCoB,QAAQA,CAAA;IAAK,OAAO,GAAG,IAAI,CAACP,MAAM,CAACC,WAAW,CAAC,IAClD,IAAI,CAACE,QAAQ,CAACkE,GAAG,CAAE9G,CAAC,IAAK,GAAGA,CAAC,CAAC4G,IAAI,EAAE,CAAC,CAACK,IAAI,CAAC,KAAK,CACpD,GAAG;EAAE;;AACYC,MAAA,CAACzE,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAa,IAAI;EAChDA,KAAM,CAACwE,IAAI,GAAG,IAAI;EAClBxE,KAAM,CAACyE,OAAO,GAAG,IAAI;EACrBzE,KAAM,CAACC,QAAQ,GAAG,IAAI;EACtBD,KAAM,CAAC2E,kBAAkB,GAAG,IAAI;EAChC3E,KAAM,CAACE,SAAS,GAAGQ,SAAS;EACnC,OAAOV,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,OAAO;AAC9C,CAAC,EAAEwE,MAAM,CAACnE,SAAS,CAAC;AAGxB,SAASmE,MAAM,IAAItF,KAAK;AAExB;AACA,OAAM,MAAO8F,UAAW,SAAQR,MAAuB;EACnDhE,YAAYkE,OAA8B,EAAExE,QAAiB;IACzD,KAAK,CAAClD,SAAS,CAACiI,KAAK,EAAEP,OAAO,EAAExE,QAAQ,CAAC;EAC7C;;AAGJ;AACA,OAAM,MAAOgF,WAAY,SAAQV,MAAwB;EACrDhE,YAAYkE,OAA8B,EAAExE,QAAiB;IACzD,KAAK,CAAClD,SAAS,CAACmI,MAAM,EAAET,OAAO,EAAExE,QAAQ,CAAC;EAC9C;;AAKJ;AACA,OAAM,MAAOd,eAAgB,SAAQhC,QAA8B;EAC/DoD,YAA4B4E,SAAiB;IACzC,KAAK,EAAE;IADiB,KAAAA,SAAS,GAATA,SAAS;EAErC;EACA,IAAW7H,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACsC,eAAuC;EAAE;EACpEkB,QAAQA,CAAA;IAAK,OAAO,mBAAmB,IAAI,CAAC8E,SAAS,GAAG;EAAE;;AAChDhG,eAAA,CAACW,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAsB,IAAI;EACzDA,KAAM,CAACmF,SAAS,GAAG,IAAI;EACvBnF,KAAM,CAACE,SAAS,GAAGS,UAAU;EACpC,OAAOX,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,iBAAiB;AACxD,CAAC,EAAEZ,eAAe,CAACiB,SAAS,CAAC;AAKjC;AACA,OAAM,MAAOf,aAAwC,SAAQlC,QAAwC;EAEjGoD,YAA4B6E,QAAgB,EAAErB,KAAe;IACzD,KAAK,EAAE;IADiB,KAAAqB,QAAQ,GAARA,QAAQ;IAEhC,IAAI,CAACnF,QAAQ,GAAG,CAAC8D,KAAK,CAAC;EAC3B;EACA,IAAWzG,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAACwC,aAAmC;EAAE;EACvE,IAAW2E,SAASA,CAAA;IAAQ,OAAO,IAAI,CAAC/D,QAAQ,CAAC,CAAC,CAAC,CAACgE,IAAS;EAAE;EAC/D,IAAWC,UAAUA,CAAA;IAAe,OAAO,IAAI,CAACjE,QAAQ,CAAC,CAAC,CAAa;EAAE;EACzE,IAAWC,SAASA,CAAA;IAAqB,OAAO,IAAI,CAAC8D,SAAS,CAAC9D,SAAS;EAAE;EACnEG,QAAQA,CAAA;IAAK,OAAO,iBAAiB,IAAI,CAAC+E,QAAQ,KAAK,IAAI,CAACpB,SAAS,GAAG;EAAE;;AAChE3E,aAAA,CAACS,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAoB,IAAI;EACvDA,KAAM,CAACC,QAAQ,GAAG,IAAI;EACtBD,KAAM,CAACoF,QAAQ,GAAG,IAAI;EAC7B,OAAOpF,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,eAAe;AACtD,CAAC,EAAEV,aAAa,CAACe,SAAS,CAAC;AAU/B;AACA,OAAM,MAAOiF,IAAiE,SAAQlI,QAAkB;EACpGoD,YAAYwD,KAAkD,EAAEuB,UAAU,GAAG,KAAK;IAC9E,KAAK,EAAE;IACP,IAAI,CAACrF,QAAQ,GAAG,CAAC8D,KAAK,CAAC;IACvB,IAAI,CAACuB,UAAU,GAAGA,UAAU;EAChC;EAGA,IAAWhI,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAAC0C,GAAe;EAAE;EACnD,IAAWgG,OAAOA,CAAA;IAAW,OAAO,IAAI,CAACtF,QAAQ,CAAC,CAAC,CAAC,CAACgE,IAAI,CAAChE,QAAQ,CAAC,CAAC,CAAC,CAACgE,IAAY;EAAE;EACpF,IAAWD,SAASA,CAAA;IAAa,OAAO,IAAI,CAAC/D,QAAQ,CAAC,CAAC,CAAC,CAACgE,IAAI,CAAChE,QAAQ,CAAC,CAAC,CAAC,CAACgE,IAAc;EAAE;EACnF5D,QAAQA,CAAA;IAAK,OAAO,QAAQ,IAAI,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAACgE,IAAI,CAAChE,QAAQ,CAACkE,GAAG,CAAEC,CAAC,IAAK,GAAGA,CAAC,CAACC,IAAI,IAAID,CAAC,CAACH,IAAI,EAAE,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,IAAI;EAAE;;AACnGe,IAAA,CAACvF,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAW,IAAI;EAC9CA,KAAM,CAACC,QAAQ,GAAG,IAAI;EACtBD,KAAM,CAACsF,UAAU,GAAG,IAAI;EAC/B,OAAOtF,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,MAAM;AAC7C,CAAC,EAAEsF,IAAI,CAACjF,SAAS,CAAC;AAGtB;AACA,MAAMoF,KAAK,GAAG,CAAEC,kBAAkB,IAAK,MAAM,EAAEA,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAOtE;AACA,OAAM,MAAOhG,UAAiE,SAAQtC,QAAyB;EAK3GoD,YAAYmF,UAAa,EAAEC,OAAa,EAAEC,EAAyB,EAAEC,SAA0B;IAC3F,KAAK,EAAE;IACP,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACG,SAAS,GAAGA,SAAS,IAAI,KAAK;IACnC,IAAI,CAACD,EAAE,GAAGA,EAAE,IAAI,IAAI,GAAGJ,KAAK,EAAE,GAAG,OAAOI,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGA,EAAE,CAACE,GAAG;EACzE;EACA,IAAWxI,MAAMA,CAAA;IAAK,OAAOT,IAAI,CAAC4C,UAA6B;EAAE;EACjE,IAAWQ,QAAQA,CAAA;IAAK,OAAO,IAAI,CAACyF,UAAU,CAACzF,QAAQ;EAAE;EACzD,IAAW+D,SAASA,CAAA;IAAQ,OAAO,IAAI,CAAC0B,UAAe;EAAE;EACzD,IAAWxF,SAASA,CAAA;IAAqB,OAAO,IAAI,CAACwF,UAAU,CAACxF,SAAS;EAAE;EACpEG,QAAQA,CAAA;IAAK,OAAO,cAAc,IAAI,CAACsF,OAAO,KAAK,IAAI,CAACD,UAAU,GAAG;EAAE;;AAC7DjG,UAAA,CAACK,MAAM,CAACC,WAAW,CAAC,GAAG,CAAEC,KAAiB,IAAI;EACpDA,KAAM,CAAC4F,EAAE,GAAG,IAAI;EAChB5F,KAAM,CAAC2F,OAAO,GAAG,IAAI;EACrB3F,KAAM,CAAC6F,SAAS,GAAG,IAAI;EACvB7F,KAAM,CAAC0F,UAAU,GAAG,IAAI;EAC/B,OAAO1F,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,GAAG,YAAY;AACnD,CAAC,EAAEN,UAAU,CAACW,SAAS,CAAC;AAU5B;AACA,OAAM,SAAU2F,aAAaA,CAAC9B,IAAc;EACxC,IAAI+B,CAAC,GAAQ/B,IAAI;EACjB,QAAQA,IAAI,CAAC3G,MAAM;IACf,KAAKT,IAAI,CAACsB,OAAO;MAAE,OAAO,CAAC;IAC3B,KAAKtB,IAAI,CAAC4B,SAAS;MAAE,OAAO,CAAC;IAC7B,KAAK5B,IAAI,CAACwB,IAAI;MAAE,OAAO,CAAC,GAAI2H,CAAW,CAACzD,IAAI;IAC5C,KAAK1F,IAAI,CAAC8B,QAAQ;MAAE,OAAO,CAAC,GAAIqH,CAAe,CAACzD,IAAI;IACpD,KAAK1F,IAAI,CAACY,GAAG;MAAE,OAAO,CAAC,GAAG,EAAGuI,CAAU,CAACvF,QAAQ,GAAG,EAAE,CAAC;IACtD,KAAK5D,IAAI,CAAC0B,IAAI;MAAE,OAAO,CAAC,GAAG,EAAGyH,CAAW,CAACvF,QAAQ,GAAG,EAAE,CAAC;IACxD,KAAK5D,IAAI,CAACwC,aAAa;MAAE,OAAQ2G,CAAmB,CAACZ,QAAQ;IAC7D,KAAKvI,IAAI,CAACsC,eAAe;MAAE,OAAQ6G,CAAqB,CAACb,SAAS;IAClE;MAAS,OAAO,CAAC;;AAEzB","ignoreList":[]},"metadata":{},"sourceType":"module"}