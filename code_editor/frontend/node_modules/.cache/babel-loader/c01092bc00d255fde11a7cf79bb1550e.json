{"ast":null,"code":"ace.define(\"ace/ext/simple_tokenizer\", [\"require\", \"exports\", \"module\", \"ace/tokenizer\", \"ace/layer/text_util\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Tokenizer = require(\"../tokenizer\").Tokenizer;\n  var isTextToken = require(\"../layer/text_util\").isTextToken;\n  var SimpleTokenizer = /** @class */function () {\n    function SimpleTokenizer(content, tokenizer) {\n      this._lines = content.split(/\\r\\n|\\r|\\n/);\n      this._states = [];\n      this._tokenizer = tokenizer;\n    }\n    SimpleTokenizer.prototype.getTokens = function (row) {\n      var line = this._lines[row];\n      var previousState = this._states[row - 1];\n      var data = this._tokenizer.getLineTokens(line, previousState);\n      this._states[row] = data.state;\n      return data.tokens;\n    };\n    SimpleTokenizer.prototype.getLength = function () {\n      return this._lines.length;\n    };\n    return SimpleTokenizer;\n  }();\n  function tokenize(content, highlightRules) {\n    var tokenizer = new SimpleTokenizer(content, new Tokenizer(highlightRules.getRules()));\n    var result = [];\n    for (var lineIndex = 0; lineIndex < tokenizer.getLength(); lineIndex++) {\n      var lineTokens = tokenizer.getTokens(lineIndex);\n      result.push(lineTokens.map(function (token) {\n        return {\n          className: isTextToken(token.type) ? undefined : \"ace_\" + token.type.replace(/\\./g, \" ace_\"),\n          value: token.value\n        };\n      }));\n    }\n    return result;\n  }\n  module.exports = {\n    tokenize: tokenize\n  };\n});\n(function () {\n  ace.require([\"ace/ext/simple_tokenizer\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","Tokenizer","isTextToken","SimpleTokenizer","content","tokenizer","_lines","split","_states","_tokenizer","prototype","getTokens","row","line","previousState","data","getLineTokens","state","tokens","getLength","length","tokenize","highlightRules","getRules","result","lineIndex","lineTokens","push","map","token","className","type","undefined","replace","value","m"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/ext-simple_tokenizer.js"],"sourcesContent":["ace.define(\"ace/ext/simple_tokenizer\",[\"require\",\"exports\",\"module\",\"ace/tokenizer\",\"ace/layer/text_util\"], function(require, exports, module){\"use strict\";\nvar Tokenizer = require(\"../tokenizer\").Tokenizer;\nvar isTextToken = require(\"../layer/text_util\").isTextToken;\nvar SimpleTokenizer = /** @class */ (function () {\n    function SimpleTokenizer(content, tokenizer) {\n        this._lines = content.split(/\\r\\n|\\r|\\n/);\n        this._states = [];\n        this._tokenizer = tokenizer;\n    }\n    SimpleTokenizer.prototype.getTokens = function (row) {\n        var line = this._lines[row];\n        var previousState = this._states[row - 1];\n        var data = this._tokenizer.getLineTokens(line, previousState);\n        this._states[row] = data.state;\n        return data.tokens;\n    };\n    SimpleTokenizer.prototype.getLength = function () {\n        return this._lines.length;\n    };\n    return SimpleTokenizer;\n}());\nfunction tokenize(content, highlightRules) {\n    var tokenizer = new SimpleTokenizer(content, new Tokenizer(highlightRules.getRules()));\n    var result = [];\n    for (var lineIndex = 0; lineIndex < tokenizer.getLength(); lineIndex++) {\n        var lineTokens = tokenizer.getTokens(lineIndex);\n        result.push(lineTokens.map(function (token) { return ({\n            className: isTextToken(token.type) ? undefined : \"ace_\" + token.type.replace(/\\./g, \" ace_\"),\n            value: token.value\n        }); }));\n    }\n    return result;\n}\nmodule.exports = {\n    tokenize: tokenize\n};\n\n});                (function() {\n                    ace.require([\"ace/ext/simple_tokenizer\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"AAAAA,GAAG,CAACC,MAAM,CAAC,0BAA0B,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,eAAe,EAAC,qBAAqB,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EAC3J,IAAIC,SAAS,GAAGH,OAAO,CAAC,cAAc,CAAC,CAACG,SAAS;EACjD,IAAIC,WAAW,GAAGJ,OAAO,CAAC,oBAAoB,CAAC,CAACI,WAAW;EAC3D,IAAIC,eAAe,GAAG,aAAe,YAAY;IAC7C,SAASA,eAAeA,CAACC,OAAO,EAAEC,SAAS,EAAE;MACzC,IAAI,CAACC,MAAM,GAAGF,OAAO,CAACG,KAAK,CAAC,YAAY,CAAC;MACzC,IAAI,CAACC,OAAO,GAAG,EAAE;MACjB,IAAI,CAACC,UAAU,GAAGJ,SAAS;IAC/B;IACAF,eAAe,CAACO,SAAS,CAACC,SAAS,GAAG,UAAUC,GAAG,EAAE;MACjD,IAAIC,IAAI,GAAG,IAAI,CAACP,MAAM,CAACM,GAAG,CAAC;MAC3B,IAAIE,aAAa,GAAG,IAAI,CAACN,OAAO,CAACI,GAAG,GAAG,CAAC,CAAC;MACzC,IAAIG,IAAI,GAAG,IAAI,CAACN,UAAU,CAACO,aAAa,CAACH,IAAI,EAAEC,aAAa,CAAC;MAC7D,IAAI,CAACN,OAAO,CAACI,GAAG,CAAC,GAAGG,IAAI,CAACE,KAAK;MAC9B,OAAOF,IAAI,CAACG,MAAM;IACtB,CAAC;IACDf,eAAe,CAACO,SAAS,CAACS,SAAS,GAAG,YAAY;MAC9C,OAAO,IAAI,CAACb,MAAM,CAACc,MAAM;IAC7B,CAAC;IACD,OAAOjB,eAAe;EAC1B,CAAC,CAAC,CAAE;EACJ,SAASkB,QAAQA,CAACjB,OAAO,EAAEkB,cAAc,EAAE;IACvC,IAAIjB,SAAS,GAAG,IAAIF,eAAe,CAACC,OAAO,EAAE,IAAIH,SAAS,CAACqB,cAAc,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACtF,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGpB,SAAS,CAACc,SAAS,CAAC,CAAC,EAAEM,SAAS,EAAE,EAAE;MACpE,IAAIC,UAAU,GAAGrB,SAAS,CAACM,SAAS,CAACc,SAAS,CAAC;MAC/CD,MAAM,CAACG,IAAI,CAACD,UAAU,CAACE,GAAG,CAAC,UAAUC,KAAK,EAAE;QAAE,OAAQ;UAClDC,SAAS,EAAE5B,WAAW,CAAC2B,KAAK,CAACE,IAAI,CAAC,GAAGC,SAAS,GAAG,MAAM,GAAGH,KAAK,CAACE,IAAI,CAACE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC;UAC5FC,KAAK,EAAEL,KAAK,CAACK;QACjB,CAAC;MAAG,CAAC,CAAC,CAAC;IACX;IACA,OAAOV,MAAM;EACjB;EACAxB,MAAM,CAACD,OAAO,GAAG;IACbsB,QAAQ,EAAEA;EACd,CAAC;AAED,CAAC,CAAC;AAAiB,CAAC,YAAW;EACXzB,GAAG,CAACE,OAAO,CAAC,CAAC,0BAA0B,CAAC,EAAE,UAASqC,CAAC,EAAE;IAClD,IAAI,OAAOnC,MAAM,IAAI,QAAQ,IAAI,OAAOD,OAAO,IAAI,QAAQ,IAAIC,MAAM,EAAE;MACnEA,MAAM,CAACD,OAAO,GAAGoC,CAAC;IACtB;EACJ,CAAC,CAAC;AACN,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}