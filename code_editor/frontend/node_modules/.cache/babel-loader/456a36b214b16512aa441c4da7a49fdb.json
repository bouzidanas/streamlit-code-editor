{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction(nullValues) {\n  if (!nullValues || nullValues.length <= 0) {\n    // @ts-ignore\n    return function isValid(value) {\n      return true;\n    };\n  }\n  let fnBody = '';\n  let noNaNs = nullValues.filter(x => x === x);\n  if (noNaNs.length > 0) {\n    fnBody = `\n    switch (x) {${noNaNs.map(x => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n  }\n  // NaN doesn't equal anything including itself, so it doesn't work as a\n  // switch case. Instead we must explicitly check for NaN before the switch.\n  if (nullValues.length !== noNaNs.length) {\n    fnBody = `if (x !== x) return false;\\n${fnBody}`;\n  }\n  return new Function(`x`, `${fnBody}\\nreturn true;`);\n}\n/** @ignore */\nfunction valueToCase(x) {\n  if (typeof x !== 'bigint') {\n    return valueToString(x);\n  } else if (BigIntAvailable) {\n    return `${valueToString(x)}n`;\n  }\n  return `\"${valueToString(x)}\"`;\n}","map":{"version":3,"names":["valueToString","BigIntAvailable","createIsValidFunction","nullValues","length","isValid","value","fnBody","noNaNs","filter","x","map","valueToCase","join","Function"],"sources":["builder/valid.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,aAAa,QAAQ,gBAAgB;AAC9C,SAASC,eAAe,QAAQ,gBAAgB;AAEhD;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAUC,qBAAqBA,CAAwCC,UAAiC;EAE1G,IAAI,CAACA,UAAU,IAAIA,UAAU,CAACC,MAAM,IAAI,CAAC,EAAE;IACvC;IACA,OAAO,SAASC,OAAOA,CAACC,KAAU;MAAI,OAAO,IAAI;IAAE,CAAC;;EAGxD,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,MAAM,GAAGL,UAAU,CAACM,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKA,CAAC,CAAC;EAE9C,IAAIF,MAAM,CAACJ,MAAM,GAAG,CAAC,EAAE;IACnBG,MAAM,GAAG;kBACCC,MAAM,CAACG,GAAG,CAAED,CAAC,IAAK;eACrBE,WAAW,CAACF,CAAC,CAAC,GAAG,CAAC,CAACG,IAAI,CAAC,EAAE,CAAC;;MAEpC;;EAGF;EACA;EACA,IAAIV,UAAU,CAACC,MAAM,KAAKI,MAAM,CAACJ,MAAM,EAAE;IACrCG,MAAM,GAAG,+BAA+BA,MAAM,EAAE;;EAGpD,OAAO,IAAIO,QAAQ,CAAC,GAAG,EAAE,GAAGP,MAAM,gBAAgB,CAA4C;AAClG;AAEA;AACA,SAASK,WAAWA,CAACF,CAAM;EACvB,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;IACvB,OAAOV,aAAa,CAACU,CAAC,CAAC;GAC1B,MAAM,IAAIT,eAAe,EAAE;IACxB,OAAO,GAAGD,aAAa,CAACU,CAAC,CAAC,GAAG;;EAEjC,OAAO,IAAIV,aAAa,CAACU,CAAC,CAAC,GAAG;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module"}