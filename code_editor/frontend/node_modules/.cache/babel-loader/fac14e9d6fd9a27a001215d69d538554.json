{"ast":null,"code":"import _styled, { createGlobalStyle as _createGlobalStyle, default as _styled2 } from \"styled-components\";\nvar _jsxFileName = \"/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/src/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { v1 } from 'uuid';\nimport { useState, useRef, useEffect, useMemo } from \"react\";\nimport ace from \"ace-builds\";\nimport { Editor } from './editor';\nimport { Menu as ButtonMenu, Set as ButtonSet, Info as InfoBar } from \"./button-menu\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultOptions = {\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: false,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true\n};\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n};\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250\n};\nconst GlobalCSS = _createGlobalStyle`\n  html {\n    opacity: ${props => props.isDisabled ? \"0.5\" : \"1\"};\n    cursor: ${props => props.isDisabled ? \"not-allowed\" : \"auto\"};\n    pointer-events: ${props => props.isDisabled ? \"none\" : \"auto\"};\n  }\n  ${props => props.inject}\n`;\n_c = GlobalCSS;\nconst StyledCodeEditor = _styled.div.withConfig({\n  displayName: \"CodeEditor__StyledCodeEditor\",\n  componentId: \"sc-wmif04-0\"\n})([\"width:100%;border-radius:8px;overflow:hidden;display:flex;flex-direction:column;:hover button{opacity:1;transform:scale(1);}button.always-on{opacity:1;transform:scale(1);transition:none;}:hover button svg{opacity:1;transform:scale(1);}:hover button.with-icon span{opacity:1;transform:scale(1);}button.always-on > span{opacity:1;transform:scale(1);transition:none;}button.always-on > svg{opacity:1;transform:scale(1);transition:none;}\"]);\nvar _StyledStyledCodeEditor = _styled(StyledCodeEditor).withConfig({\n  displayName: \"CodeEditor___StyledStyledCodeEditor\",\n  componentId: \"sc-wmif04-1\"\n})([\"\", \"\"], p => p.$_css);\nconst CodeEditor = ({\n  args,\n  width,\n  disabled,\n  theme\n}) => {\n  _s();\n  var _ref;\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  // const [keybindingAddRemove, setKeybindingAddRemove] = useState([\"\",\"\"]);\n\n  const aceEditor = useRef(null);\n  const infoTextRef = useRef(null);\n  const baseSession = useRef(null);\n  const keepFocus = useRef(false);\n  const reset = useRef(false);\n  var timeoutId;\n\n  /**\n    * This function takes as input either a snippetText string that is expected\n    * to be already formatted like the text in a SnippetFile or a dictionary or \n    * and array of dictionaries. For the first case, it just returns the input.\n    * For the second and third case, a (SnippetFile format) string is constructed\n    * from the dict(s) and returned. Learn more about snippets {@link  here}\n    * @param snippetRaw snippets to be converted to a single snippetText string\n    * @returns {string} snippetText\n    */\n  const createSnippets = snippetRaw => {\n    return typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(({\n      name,\n      code\n    }) => ['snippet ' + name, code.split('\\n').map(c => '\\t' + c).join('\\n')].join('\\n')).join('\\n');\n  };\n  const [snippetAddRemove, setSnippetAddRemove] = useState({\n    [args['lang']]: [createSnippets(args[\"snippets\"][0]), createSnippets(args[\"snippets\"][1])]\n  });\n  const [keybindingAddRemove, setKeybindingAddRemove] = useState(args['keybindings']);\n  useEffect(() => {\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (aceEditor.current && keepFocus.current) {\n      aceEditor.current.editor.focus();\n      keepFocus.current = false;\n    }\n  }, [keepFocus.current]);\n\n  // To reasons for the useEffect here: \n  //   1. to set the focus on the editor only when the focus argument has changed to true.\n  //   2. to set the focus on the editor after rendering the component at which point, the \n  //      editor should be ready.\n  useEffect(() => {\n    if (aceEditor.current && args.focus) {\n      aceEditor.current.editor.focus();\n    }\n  }, [args.focus]);\n  const onChangeHandler = newCode => {\n    setCode(newCode);\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"debounce\") && aceEditor.current && aceEditor.current.editor) {\n      const editor = aceEditor.current.editor;\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      Streamlit.setComponentValue({\n        id: v1().slice(0, 8),\n        type: \"change\",\n        lang: outgoingMode,\n        text: newCode,\n        selected: editor.getSelectedText(),\n        cursor: editor.getCursorPosition()\n      });\n    }\n  };\n  const onSelectionChangeHandler = selectedText => {\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"select\") && aceEditor.current && aceEditor.current.editor) {\n      const editor = aceEditor.current.editor;\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      Streamlit.setComponentValue({\n        id: v1().slice(0, 8),\n        type: \"selection\",\n        lang: outgoingMode,\n        text: code,\n        selected: editor.getSelectedText(),\n        cursor: editor.getCursorPosition()\n      });\n    }\n  };\n  const onEditorBlur = (event, editor) => {\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"blur\") && editor) {\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      setCode(editor.getValue());\n      Streamlit.setComponentValue({\n        id: v1().slice(0, 8),\n        type: \"blur\",\n        lang: outgoingMode,\n        text: editor.getValue(),\n        selected: editor.getSelectedText(),\n        cursor: editor.getCursorPosition()\n      });\n    }\n  };\n\n  // commands is an array of objects containing functions\n  // that the editor can be triggered to call.\n  const commands = {\n    commands: [{\n      name: 'submit',\n      //name for the key binding.\n      description: \"Send 'submit' response\",\n      //description of the command\n      bindKey: {\n        win: 'Ctrl-Enter',\n        mac: 'Command-Enter'\n      },\n      //key combination used for the command.\n      exec: editor => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({\n          id: v1().slice(0, 8),\n          type: \"submit\",\n          lang: outgoingMode,\n          text: editor.getValue(),\n          selected: editor.getSelectedText(),\n          cursor: editor.getCursorPosition()\n        });\n      }\n    }, {\n      name: 'saveState',\n      description: \"Save state\",\n      bindKey: {\n        win: 'Ctrl-Alt-S',\n        mac: 'Command-Alt-S'\n      },\n      exec: editor => {\n        setCode(editor.getValue());\n      }\n    }, {\n      name: 'copyAll',\n      description: \"Copy all text to clipboard\",\n      exec: editor => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    }, {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    }, {\n      name: 'keepFocus',\n      description: \"Return cursor to editor\",\n      exec: () => {\n        keepFocus.current = true;\n      }\n    }, {\n      name: \"setMode\",\n      description: \"Set language mode\",\n      exec: (editor, lang) => {\n        if (lang && typeof lang === \"string\") editor.getSession().setMode(\"ace/mode/\" + lang);\n      },\n      readOnly: true\n    }, {\n      name: \"changeShortcuts\",\n      description: \"Switch shortcuts\",\n      exec: (editor, shortcuts) => {\n        if (shortcuts && typeof shortcuts === \"string\") editor.setKeyboardHandler(\"ace/keyboard/\" + shortcuts);else {\n          //rotate through the available keyboard handlers\n          const handlers = [\"ace/keyboard/vim\", \"ace/keyboard/emacs\", \"ace/keyboard/sublime\", \"ace/keyboard/vscode\"];\n          const currentHandler = handlers[(handlers.indexOf(editor.$keybindingId) + 1) % 4];\n          editor.setKeyboardHandler(currentHandler);\n        }\n      },\n      readOnly: true\n    }, {\n      name: 'toggleKeyboardShortcuts',\n      exec: editor => {\n        if (!document.getElementById('kbshortcutmenu')) editor.execCommand('showKeyboardShortcuts');else editor.execCommand('simulateKeyPress', {\n          type: \"keydown\",\n          keyCode: 27\n        });\n      }\n    }, {\n      name: 'simulateKeyPress',\n      exec: (editor, args) => {\n        if (args.key) document.dispatchEvent(new KeyboardEvent(args.type, {\n          'key': args.key\n        }));else if (args.keyCode) document.dispatchEvent(new KeyboardEvent(args.type, {\n          'keyCode': args.keyCode\n        }));\n      }\n    }, {\n      name: 'infoMessage',\n      description: \"Display message in info bar\",\n      exec: (editor, args) => {\n        if (args.targetQueryString) {\n          const target = document.querySelector(args.targetQueryString);\n          if (target) {\n            target.innerText = args.text;\n            target.classList.add(args.classToggle || \"\");\n            if (args.timeout) {\n              timeoutId = setTimeout(() => {\n                target.classList.remove(args.classToggle || \"\");\n              }, args.timeout);\n            }\n          }\n        } else if (infoTextRef.current) {\n          infoTextRef.current.innerText = args.text;\n          infoTextRef.current.classList.add(args.classToggle || \"\");\n          if (args.timeout) {\n            timeoutId = setTimeout(() => {\n              var _infoTextRef$current;\n              (_infoTextRef$current = infoTextRef.current) === null || _infoTextRef$current === void 0 ? void 0 : _infoTextRef$current.classList.remove(args.classToggle || \"\");\n            }, args.timeout);\n          }\n        }\n      }\n    }, {\n      name: 'response',\n      //name for the key binding.\n      description: \"Send custom response\",\n      //description of the command\n      exec: (editor, responseType = \"\") => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({\n          id: v1().slice(0, 8),\n          type: responseType,\n          lang: outgoingMode,\n          text: editor.getValue(),\n          selected: editor.getSelectedText(),\n          cursor: editor.getCursorPosition()\n        });\n      }\n    }, {\n      name: 'returnSelection',\n      //name for the key binding.\n      description: \"Send selected text to Streamlit\",\n      //description of the command\n      exec: editor => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({\n          id: v1().slice(0, 8),\n          type: \"selection\",\n          lang: outgoingMode,\n          text: editor.getSelectedText(),\n          cursor: editor.getCursorPosition()\n        });\n      }\n    }, {\n      name: 'appendGhostText',\n      description: \"Add ghost test to end of line\",\n      bindKey: {\n        win: 'Ctrl-/',\n        mac: 'Command-/'\n      },\n      exec: editor => {\n        console.log(\"appendGhostText\");\n        const ghostText = editor.renderer.$ghostText;\n        console.log(ghostText);\n        if (ghostText) {\n          editor.session.replace({\n            start: ghostText.position,\n            end: ghostText.position\n          }, ghostText.text);\n        }\n      }\n    }, {\n      name: 'editSnippets',\n      description: \"Edit snippets\",\n      bindKey: {\n        win: 'Ctrl-Alt-N',\n        mac: 'Command-Alt-N'\n      },\n      exec: editor => {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n        if (baseSession.current) {\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if (outgoingMode === \"snippets\") {\n            const snippetText = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            if (outgoingMode === \"snippets\") {}\n            try {\n              const snippetsPlusMinus = snippetText.split(\"###~~~\")[1];\n              const [snippetsPlus, snippetsMinus] = snippetsPlusMinus.split(\"###---\");\n              const snippetsToAdd = snippetsPlus.split(\"###+++\")[1];\n              const snippetsToRemove = snippetsMinus;\n              const langMode = editor.getSession().$modeId.split(\"/\").pop();\n              setSnippetAddRemove({\n                [langMode]: [snippetAddRemove[langMode][0] + snippetsToAdd, snippetAddRemove[langMode][1] + snippetsToRemove]\n              });\n            } catch (error) {\n              editor.execCommand(\"infoMessage\", {\n                text: \"error parsing file, restoring original file\",\n                timeout: 2000,\n                classToggle: \"show\"\n              });\n            }\n          }\n        } else {\n          const langMode = editor.getSession().$modeId.split(\"/\").pop();\n          const snippetConcatText = `\\n###~~~#(DO NOT EDIT THIS LINE)\n# Commented out above are all the snippets that are currently\n# registered for ${args['lang']} mode.\n\\n\\n###+++#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to add below this line.\\n\\n\\n\\n\n\\n\\n\\n###---#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to remove below this line.\\n\\n\\n\\n\\n\\n\\n`;\n          const snippetText = \"#\" + createSnippets(snippetManager.snippetMap[langMode].map(snip => ({\n            name: snip.name,\n            code: snip.content\n          }))).replace(/\\n/g, \"\\n#\") + snippetConcatText;\n          // snippetManager.files[editor.getSession().$modeId].snippetText\n          const lineCount = (snippetText.match(/\\n/g) || []).length;\n          baseSession.current = editor.getSession();\n          const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n          editor.setSession(snippetsSession);\n          const cursorPos = {\n            row: lineCount - 15 > 0 ? lineCount - 15 : 0,\n            column: 0\n          };\n          editor.moveCursorTo(cursorPos.row, cursorPos.column);\n          editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n        }\n      }\n    }, {\n      name: 'editKeyBindings',\n      description: \"Edit keybindings\",\n      bindKey: {\n        win: 'Ctrl-Alt-B',\n        mac: 'Command-Alt-B'\n      },\n      exec: editor => {\n        ace.require('ace/autocomplete').Autocomplete.for(editor);\n        if (baseSession.current) {\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if (outgoingMode === \"json\") {\n            const keybindingsJSON = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            try {\n              setKeybindingAddRemove(JSON.parse(keybindingsJSON));\n            } catch (error) {\n              editor.execCommand(\"infoMessage\", {\n                text: \"error parsing file, restoring original file\",\n                timeout: 2000,\n                classToggle: \"show\"\n              });\n            }\n          }\n        } else {\n          const keybindings = {\n            commands: {},\n            completer: {}\n          };\n          if (editor.completer && editor.completer.keyboardHandler.commands) {\n            keybindings.completer = Object.keys(editor.completer.keyboardHandler.commands).map(key => {\n              var _editor$completer$key;\n              return {\n                bindkey: (_editor$completer$key = editor.completer.keyboardHandler.commands[key].bindKey) !== null && _editor$completer$key !== void 0 ? _editor$completer$key : \"\",\n                name: editor.completer.keyboardHandler.commands[key].name\n              };\n            });\n          }\n          if (editor.commands.commands) {\n            keybindings.commands = Object.keys(editor.commands.commands).map(key => {\n              var _editor$commands$comm;\n              return {\n                bindkey: (_editor$commands$comm = editor.commands.commands[key].bindKey) !== null && _editor$commands$comm !== void 0 ? _editor$commands$comm : \"\",\n                name: editor.commands.commands[key].name\n              };\n            });\n          }\n          const keybindingsJSON = JSON.stringify(keybindings, undefined, 2);\n          baseSession.current = editor.getSession();\n          const keybindingsSession = ace.createEditSession(keybindingsJSON, \"ace/mode/json\");\n          editor.setSession(keybindingsSession);\n        }\n      }\n    }, {\n      name: 'exitSession',\n      //name for the key binding.\n      bindKey: {\n        win: 'Esc',\n        mac: 'Esc'\n      },\n      description: \"Return to main session (keep changes)\",\n      //description of the command\n      exec: editor => {\n        if (baseSession.current) {\n          const mode = editor.getSession().$modeId.split(\"/\").pop();\n          if (mode === \"snippets\") editor.execCommand(\"editSnippets\");else if (mode === \"json\") editor.execCommand(\"editKeyBindings\");\n        }\n      }\n    }, {\n      name: 'abandonSession',\n      //name for the key binding.\n      bindKey: {\n        win: 'Ctrl-Alt-Esc',\n        mac: 'Command-Alt-Esc'\n      },\n      description: \"Return to main session (discard changes)\",\n      //description of the command\n      exec: editor => {\n        if (baseSession.current) {\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n        }\n      }\n    }, {\n      name: 'classART',\n      //name for the key binding.\n      description: \"Add/Remove/Toggle class for element\",\n      //description of the command\n      exec: (editor, args) => {\n        var _document$querySelect, _document$querySelect2, _document$querySelect3;\n        if (args.targetQueryString && args.type && args.class) {\n          switch (args.type) {\n            case \"add\":\n              (_document$querySelect = document.querySelectorAll(args.targetQueryString)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.forEach(el => el.classList.add(args.class));\n              break;\n            case \"remove\":\n              (_document$querySelect2 = document.querySelectorAll(args.targetQueryString)) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.forEach(el => el.classList.remove(args.class));\n              break;\n            case \"toggle\":\n              (_document$querySelect3 = document.querySelectorAll(args.targetQueryString)) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.forEach(el => el.classList.toggle(args.class));\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    }, {\n      name: 'conditionalExecute',\n      //name for the key binding.\n      description: \"Execute command if element exists\",\n      //description of the command\n      exec: (editor, args) => {\n        if (args.targetQueryString && args.command && Array.isArray(args.command)) {\n          var _args$condition;\n          if (!((_args$condition = args.condition) !== null && _args$condition !== void 0 ? _args$condition : true) === !document.querySelector(args.targetQueryString)) {\n            typeof args.command[0] === \"string\" ? execute(args.command[0], args.command[1]) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n        }\n      }\n    }, {\n      name: 'delayedExecute',\n      //name for the key binding.\n      description: \"Execute command after a period of time\",\n      //description of the command\n      exec: (editor, args) => {\n        if (args.command) {\n          if (Array.isArray(args.command) && args.command.length === 2) {\n            var _args$timeout;\n            typeof args.command[0] === \"string\" ? setTimeout(() => {\n              execute(args.command[0], args.command[1]);\n            }, (_args$timeout = args.timeout) !== null && _args$timeout !== void 0 ? _args$timeout : defaultProps.debounceChangePeriod) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          } else if (typeof args.command === \"string\") {\n            var _args$timeout2;\n            setTimeout(() => {\n              execute(args.command);\n            }, (_args$timeout2 = args.timeout) !== null && _args$timeout2 !== void 0 ? _args$timeout2 : defaultProps.debounceChangePeriod);\n          }\n        }\n      }\n    }]\n  };\n  const execute = (command, args = \"\") => {\n    var _aceEditor$current;\n    const editor = (_aceEditor$current = aceEditor.current) === null || _aceEditor$current === void 0 ? void 0 : _aceEditor$current.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command);\n      } else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      } else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach(key => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\" || Array.isArray(args[key]);\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      } else {\n        console.warn(`Function - execute: failed to parse/execute \"${command}\" command!`);\n      }\n    }\n  };\n  const executeAll = commands => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"Function - executeAll: improper command format! Singular commands must contain name of command as first element and arguments as second element.\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"Function - executeAll: failed to parse/execute command(s)!\");\n      }\n    });\n  };\n  const resetEditor = () => {\n    setCode(args['code']);\n  };\n  const unsecureCopyTextToClipboard = text => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  };\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver(entries => {\n    var _entries$0$contentBox;\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height);\n  });\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n\n  // This useEffect is used to reset the editor when the code argument changes and\n  // the allow_reset argument is true. The allow_reset argument only impacts the\n  // behavior of the component when the component has a fixed key argument because\n  // changing the key argument results in the creation of a new component instance.\n  // Everything would be reset anyways.\n  useEffect(() => {\n    if (args['allow_reset'] === true && args['code'] !== code) {\n      reset.current = !reset.current;\n      resetEditor();\n    }\n  }, [args['code']]);\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme ? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme ? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  };\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n  const {\n    info: infoArg,\n    menu: menuArg,\n    focus: focusArg,\n    code: codeArg,\n    ...rest\n  } = args;\n  const editorArgsString = JSON.stringify(rest);\n  const menuArgsString = JSON.stringify(menuArg);\n  const infoArgsString = JSON.stringify(infoArg);\n  const buttonArgsString = JSON.stringify(args['buttons']);\n  const themeString = JSON.stringify(theme);\n  const snippets = JSON.stringify(snippetAddRemove);\n\n  /**\n   * This section contains the main sub-components (child components). These components are wrapped in useMemos\n   * in order to prevent unnecessary re-rendering of the components. This is listed as one of its use cases in the\n   * React docs ({@link https://beta.reactjs.org/reference/react/useMemo#skipping-re-rendering-of-components Skipping re-rendering of components})\n   *\n   * This component is the editor component that is rendered. It is only re-rendered when\n   * certain properties change. This is important because we should account for the possibility that the editor \n   * is being used at any given moment. Unnecessary and frequent re-rendering of the editor (for outside reasons\n   * especially) can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    const keybindings = JSON.stringify(keybindingAddRemove);\n    const revertedArgs = JSON.parse(editorArgsString);\n\n    // Create commands for each button\n    if (revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach(button => {\n        commands.commands = [...commands.commands, {\n          name: button.name.trim().replace(/\\s+/g, '_') + '_button',\n          bindKey: button.bindKey,\n          description: \"Execute '\" + button.name + \"' button command(s)\",\n          exec: () => {\n            executeAll(button.commands);\n          }\n        }];\n      });\n    }\n    let heightProps = {};\n    if (typeof revertedArgs['height'] === \"number\") heightProps = {\n      minLines: 1,\n      maxLines: revertedArgs['height']\n    };else if (typeof revertedArgs['height'] === \"string\") heightProps = {\n      height: revertedArgs['height']\n    };else if (Array.isArray(revertedArgs['height']) && revertedArgs['height'].length === 2) heightProps = {\n      minLines: revertedArgs['height'][0],\n      maxLines: revertedArgs['height'][1]\n    };\n    const aceEditorProps = {\n      ...defaultEditorProps,\n      ...revertedArgs['editor_props']\n    };\n    const aceOptions = {\n      ...defaultOptions,\n      ...revertedArgs['options']\n    };\n    const partProps = {\n      setOptions: aceOptions,\n      editorProps: aceEditorProps\n    };\n    const aceProps = {\n      ...defaultProps,\n      ...partProps,\n      ...heightProps,\n      ...revertedArgs['props']\n    };\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n    return /*#__PURE__*/_jsxDEV(Editor, {\n      editorRef: aceEditor,\n      code: code,\n      lang: revertedArgs['lang'],\n      theme: themeProp,\n      shortcuts: revertedArgs['shortcuts'],\n      snippetString: snippets,\n      ghostText: revertedArgs['ghost_text'],\n      commands: commands.commands,\n      completions: revertedArgs['completions'],\n      replaceCompleter: revertedArgs['replace_completer'],\n      keybindingString: keybindings,\n      props: aceProps,\n      onChange: onChangeHandler,\n      onSelectionChange: onSelectionChangeHandler,\n      onBlur: onEditorBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 9\n    }, this);\n  }, [editorArgsString, themeProp, snippets, keybindingAddRemove, reset.current]);\n  const buttons = useMemo(() => {\n    const revertedButtons = JSON.parse(buttonArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme !== null && revertedTheme !== void 0 ? revertedTheme : {};\n    const customButtons = {\n      buttons: revertedButtons !== null && revertedButtons !== void 0 ? revertedButtons : [],\n      name: \"customButtons\"\n    };\n    return /*#__PURE__*/_jsxDEV(ButtonSet, {\n      buttonGroup: customButtons,\n      theme: customButtonTheme,\n      themeProp: themeProp,\n      executeAll: commands => executeAll(commands)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 7\n    }, this);\n  }, [buttonArgsString, themeString, themeProp]);\n  const menu = useMemo(() => {\n    const revertedMenu = JSON.parse(menuArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme !== null && revertedTheme !== void 0 ? revertedTheme : {};\n    return /*#__PURE__*/_jsxDEV(ButtonMenu, {\n      menu: revertedMenu,\n      theme: menuTheme,\n      themeProp: themeProp,\n      executeAll: commands => executeAll(commands)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }, this);\n  }, [menuArgsString, themeString, themeProp]);\n  const info = useMemo(() => {\n    const revertedInfo = JSON.parse(infoArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme !== null && revertedTheme !== void 0 ? revertedTheme : {};\n    return /*#__PURE__*/_jsxDEV(InfoBar, {\n      infoRef: infoTextRef,\n      info: revertedInfo,\n      theme: infoTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 7\n    }, this);\n  }, [infoArgsString, themeString]);\n  const globalCSS = useMemo(() => {\n    return /*#__PURE__*/_jsxDEV(GlobalCSS, {\n      isDisabled: disabled,\n      inject: componentContainerProps.globalCSS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 7\n    }, this);\n  }, [componentContainerProps.globalCSS, disabled]);\n  return /*#__PURE__*/_jsxDEV(_StyledStyledCodeEditor, {\n    ref: observe,\n    style: componentContainerProps.style,\n    className: (_ref = \"streamlit_code-editor \" + (theme === null || theme === void 0 ? void 0 : theme.base)) !== null && _ref !== void 0 ? _ref : \"\",\n    $_css: componentContainerProps.css,\n    children: [globalCSS, editor, buttons, menu, info]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 714,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"508paNGWcrdruPD7XQ0HUEI0Jhc=\");\n_c2 = CodeEditor;\nexport default _c3 = withStreamlitConnection(CodeEditor);\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GlobalCSS\");\n$RefreshReg$(_c2, \"CodeEditor\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","v1","useState","useRef","useEffect","useMemo","ace","Editor","Menu","ButtonMenu","Set","ButtonSet","Info","InfoBar","jsxDEV","_jsxDEV","defaultOptions","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","animatedScroll","fadeFoldWidgets","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","style","tabSize","width","debounceChangePeriod","GlobalCSS","createGlobalStyle","props","isDisabled","inject","_c","StyledCodeEditor","styled","div","withConfig","displayName","componentId","_StyledStyledCodeEditor","_styled","p","$_css","CodeEditor","args","disabled","theme","_s","_ref","code","setCode","aceEditor","infoTextRef","baseSession","keepFocus","reset","timeoutId","createSnippets","snippetRaw","Array","isArray","map","name","split","c","join","snippetAddRemove","setSnippetAddRemove","keybindingAddRemove","setKeybindingAddRemove","clearTimeout","current","editor","onChangeHandler","newCode","responseMode","includes","outgoingMode","getSession","$modeId","pop","setComponentValue","id","slice","type","lang","text","selected","getSelectedText","cursor","getCursorPosition","onSelectionChangeHandler","selectedText","onEditorBlur","event","getValue","commands","description","bindKey","win","mac","exec","unsecureCopyTextToClipboard","resetEditor","setMode","shortcuts","setKeyboardHandler","handlers","currentHandler","indexOf","$keybindingId","document","getElementById","execCommand","keyCode","key","dispatchEvent","KeyboardEvent","targetQueryString","target","querySelector","innerText","classList","add","classToggle","timeout","setTimeout","remove","_infoTextRef$current","responseType","console","log","ghostText","renderer","$ghostText","session","replace","start","position","end","snippetManager","require","snippetText","setSession","snippetsPlusMinus","snippetsPlus","snippetsMinus","snippetsToAdd","snippetsToRemove","langMode","error","snippetConcatText","snippetMap","snip","content","lineCount","match","length","snippetsSession","createEditSession","cursorPos","row","column","moveCursorTo","scrollCursorIntoView","Autocomplete","for","keybindingsJSON","JSON","parse","keybindings","completer","keyboardHandler","Object","keys","_editor$completer$key","bindkey","_editor$commands$comm","stringify","undefined","keybindingsSession","mode","_document$querySelect","_document$querySelect2","_document$querySelect3","class","querySelectorAll","forEach","el","toggle","command","_args$condition","condition","execute","warn","_args$timeout","_args$timeout2","_aceEditor$current","containsNumsStr","executeAll","singleCommand","textField","createElement","value","body","appendChild","select","resizeObserver","ResizeObserver","entries","_entries$0$contentBox","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","themeChoice","isDarkTheme","base","themeProp","componentContainerProps","info","infoArg","menu","menuArg","focusArg","codeArg","rest","editorArgsString","menuArgsString","infoArgsString","buttonArgsString","themeString","snippets","revertedArgs","button","trim","heightProps","minLines","maxLines","aceEditorProps","aceOptions","partProps","aceProps","editorRef","snippetString","completions","replaceCompleter","keybindingString","onChange","onSelectionChange","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","buttons","revertedButtons","revertedTheme","customButtonTheme","customButtons","buttonGroup","revertedMenu","menuTheme","revertedInfo","infoTheme","infoRef","globalCSS","ref","className","css","children","_c2","_c3","$RefreshReg$"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/src/CodeEditor.tsx"],"sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport {v1} from 'uuid';\nimport styled, { createGlobalStyle } from \"styled-components/macro\"\nimport { useState, useRef, useEffect, useMemo } from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport { Editor } from './editor';\nimport { Menu as ButtonMenu, Set as ButtonSet, customButton, buttonGroup, Info as InfoBar } from \"./button-menu\"\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst defaultOptions = {\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: false,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250,\n}\n\nconst GlobalCSS = createGlobalStyle<{isDisabled?: boolean, inject: string}>`\n  html {\n    opacity: ${props => props.isDisabled? \"0.5\": \"1\"};\n    cursor: ${props => props.isDisabled? \"not-allowed\": \"auto\"};\n    pointer-events: ${props => props.isDisabled? \"none\": \"auto\"};\n  }\n  ${props => props.inject}\n`\nconst StyledCodeEditor = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  // const [keybindingAddRemove, setKeybindingAddRemove] = useState([\"\",\"\"]);\n\n  const aceEditor = useRef<AceEditor>(null);\n  const infoTextRef = useRef<HTMLSpanElement>(null);\n  const baseSession = useRef<ace.Ace.EditSession | null>(null);\n  const keepFocus = useRef<boolean>(false);\n  const reset = useRef<boolean>(false);\n\n  var timeoutId: NodeJS.Timeout;\n\n  /**\n    * This function takes as input either a snippetText string that is expected\n    * to be already formatted like the text in a SnippetFile or a dictionary or \n    * and array of dictionaries. For the first case, it just returns the input.\n    * For the second and third case, a (SnippetFile format) string is constructed\n    * from the dict(s) and returned. Learn more about snippets {@link  here}\n    * @param snippetRaw snippets to be converted to a single snippetText string\n    * @returns {string} snippetText\n    */\n  const createSnippets = (snippetRaw: string | object | [object]): string => {\n    return (typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(({ name, code }) =>\n    ([\n      'snippet ' + name,\n      code.split('\\n')\n        .map((c: string) => '\\t' + c)\n        .join('\\n'),\n    ].join('\\n'))\n    ).join('\\n'))\n  }\n  const [snippetAddRemove, setSnippetAddRemove] = useState({[args['lang']] : [createSnippets(args[\"snippets\"][0]), createSnippets(args[\"snippets\"][1])]});\n  const [keybindingAddRemove, setKeybindingAddRemove] = useState(args['keybindings']);\n\n\n  useEffect(() => {\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if(aceEditor.current && keepFocus.current){\n      aceEditor.current.editor.focus();\n      keepFocus.current = false;\n    }\n  }, [keepFocus.current]);\n\n  // To reasons for the useEffect here: \n  //   1. to set the focus on the editor only when the focus argument has changed to true.\n  //   2. to set the focus on the editor after rendering the component at which point, the \n  //      editor should be ready.\n  useEffect(() => {\n    if(aceEditor.current && args.focus){\n      aceEditor.current.editor.focus();\n    }\n  }, [args.focus]);\n\n  const onChangeHandler = (newCode: string) => {\n    setCode(newCode);\n\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"debounce\") && aceEditor.current && aceEditor.current.editor) {\n      const editor = aceEditor.current.editor as any;\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      Streamlit.setComponentValue({id: v1().slice(0,8), type: \"change\", lang: outgoingMode, text: newCode, selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    }\n  }\n  \n  const onSelectionChangeHandler = (selectedText: any) => {\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"select\") && aceEditor.current && aceEditor.current.editor) {\n      const editor = aceEditor.current.editor as any;\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      Streamlit.setComponentValue({id: v1().slice(0,8), type: \"selection\", lang: outgoingMode, text: code, selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    }\n  }\n\n  const onEditorBlur = (event: any, editor: any) => {\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"blur\") && editor) {\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      setCode(editor.getValue());\n      Streamlit.setComponentValue({id: v1().slice(0,8), type: \"blur\", lang: outgoingMode, text: editor.getValue(), selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    }\n  }\n\n  // commands is an array of objects containing functions\n  // that the editor can be triggered to call.\n  const commands = { commands: [\n    {\n      name: 'submit', //name for the key binding.\n      description: \"Send 'submit' response\", //description of the command\n      bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n      exec: (editor: any) => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({id: v1().slice(0,8), type: \"submit\", lang: outgoingMode, text: editor.getValue(), selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n      }\n    },\n    {\n      name: 'saveState',\n      description: \"Save state\",\n      bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n      exec: (editor: ace.Ace.Editor) => {\n        setCode(editor.getValue());\n      }\n    },\n    {\n      name: 'copyAll',\n      description: \"Copy all text to clipboard\",\n      exec: (editor: ace.Ace.Editor) => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    },\n    {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    },\n    {\n      name: 'keepFocus',\n      description: \"Return cursor to editor\",\n      exec: () => {\n        keepFocus.current = true;\n      }\n    },\n    {\n      name: \"setMode\",\n      description: \"Set language mode\",\n      exec: (editor: ace.Ace.Editor, lang: string) => {\n          if(lang && typeof lang === \"string\")\n            editor.getSession().setMode(\"ace/mode/\" + lang);\n      },\n      readOnly: true\n    },\n    {\n      name: \"changeShortcuts\",\n      description: \"Switch shortcuts\",\n      exec: (editor: any, shortcuts?: string) => {\n        if(shortcuts && typeof shortcuts === \"string\")\n          editor.setKeyboardHandler(\"ace/keyboard/\" + shortcuts);\n        else {\n          //rotate through the available keyboard handlers\n          const handlers = [\"ace/keyboard/vim\", \"ace/keyboard/emacs\", \"ace/keyboard/sublime\", \"ace/keyboard/vscode\"];\n          const currentHandler = handlers[(handlers.indexOf(editor.$keybindingId) + 1) % 4];\n          editor.setKeyboardHandler(currentHandler);\n        }\n      },\n      readOnly: true\n    },\n    {\n      name: 'toggleKeyboardShortcuts',\n      exec: (editor: ace.Ace.Editor) => {\n        if(!document.getElementById('kbshortcutmenu'))\n          editor.execCommand('showKeyboardShortcuts');\n        else \n          editor.execCommand('simulateKeyPress', {type:\"keydown\", keyCode: 27});\n      }\n    },\n    {\n      name: 'simulateKeyPress',\n      exec: (editor: ace.Ace.Editor, args: {type: string, key?: string, keyCode?: number}) => {\n        if(args.key)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'key': args.key})); \n        else if(args.keyCode)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'keyCode': args.keyCode})); \n      }\n    },\n    {\n      name: 'infoMessage',\n      description: \"Display message in info bar\",\n      exec: (editor: ace.Ace.Editor, args: {text: string, timeout?: number, classToggle?: string, targetQueryString?: string} ) => {\n        if(args.targetQueryString){\n          const target = document.querySelector(args.targetQueryString) as HTMLElement;\n          if(target){\n            target.innerText = args.text;\n            target.classList.add(args.classToggle || \"\")\n            if(args.timeout){\n              timeoutId = setTimeout(() => {\n                target.classList.remove(args.classToggle || \"\");\n              }, args.timeout);\n            }\n          }\n        }\n        else if(infoTextRef.current){\n          infoTextRef.current.innerText = args.text;\n          infoTextRef.current.classList.add(args.classToggle || \"\");\n          if(args.timeout){\n            timeoutId = setTimeout(() => {\n              infoTextRef.current?.classList.remove(args.classToggle || \"\");\n            }, args.timeout);\n          }\n        }\n      }\n    },\n    {\n      name: 'response', //name for the key binding.\n      description: \"Send custom response\", //description of the command\n      exec: (editor: any, responseType = \"\") => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({id: v1().slice(0,8), type: responseType, lang: outgoingMode, text: editor.getValue(), selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n      }\n    },\n    {\n      name: 'returnSelection', //name for the key binding.\n      description: \"Send selected text to Streamlit\", //description of the command\n      exec: (editor: any) => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({id: v1().slice(0,8), type: \"selection\", lang: outgoingMode, text: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n      }\n    },\n    {\n      name: 'appendGhostText',\n      description: \"Add ghost test to end of line\",\n      bindKey: { win: 'Ctrl-/', mac: 'Command-/' },\n      exec: (editor: any) => {\n        console.log(\"appendGhostText\");\n        const ghostText = editor.renderer.$ghostText;\n        console.log(ghostText);\n        if(ghostText){\n          editor.session.replace({start: ghostText.position, end: ghostText.position}, ghostText.text);\n        }\n      }\n    },\n    {\n      name: 'editSnippets',\n      description: \"Edit snippets\",\n      bindKey: { win: 'Ctrl-Alt-N', mac: 'Command-Alt-N' },\n      exec: (editor: any) => {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"snippets\"){\n            const snippetText = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            if(outgoingMode === \"snippets\"){}\n            try{\n              const snippetsPlusMinus = snippetText.split(\"###~~~\")[1];\n              const [snippetsPlus, snippetsMinus] = snippetsPlusMinus.split(\"###---\");\n              const snippetsToAdd = snippetsPlus.split(\"###+++\")[1];\n              const snippetsToRemove = snippetsMinus;\n              const langMode = editor.getSession().$modeId.split(\"/\").pop();\n              setSnippetAddRemove({[langMode] : [snippetAddRemove[langMode][0] + snippetsToAdd, snippetAddRemove[langMode][1] + snippetsToRemove]});\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const langMode = editor.getSession().$modeId.split(\"/\").pop()\n          const snippetConcatText = `\\n###~~~#(DO NOT EDIT THIS LINE)\n# Commented out above are all the snippets that are currently\n# registered for ${args['lang']} mode.\n\\n\\n###+++#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to add below this line.\\n\\n\\n\\n\n\\n\\n\\n###---#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to remove below this line.\\n\\n\\n\\n\\n\\n\\n`;\n          const snippetText = \"#\" + createSnippets(snippetManager.snippetMap[langMode].map((snip: any) => ({name: snip.name, code: snip.content}))).replace(/\\n/g, \"\\n#\") + snippetConcatText;\n          // snippetManager.files[editor.getSession().$modeId].snippetText\n          const lineCount = (snippetText.match(/\\n/g) || []).length;\n          baseSession.current = editor.getSession();\n          const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n          editor.setSession(snippetsSession);\n          const cursorPos = {row: (lineCount - 15)>0? lineCount - 15 : 0, column: 0};\n          editor.moveCursorTo(cursorPos.row, cursorPos.column);\n          editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n        }\n      }\n    },\n    {\n      name: 'editKeyBindings',\n      description: \"Edit keybindings\",\n      bindKey: { win: 'Ctrl-Alt-B', mac: 'Command-Alt-B' },\n      exec: (editor: any) => {\n        ace.require('ace/autocomplete').Autocomplete.for(editor);\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"json\"){\n            const keybindingsJSON = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            try{\n              setKeybindingAddRemove(JSON.parse(keybindingsJSON));\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const keybindings = {commands: {}, completer: {}};\n          if(editor.completer && editor.completer.keyboardHandler.commands){\n            keybindings.completer = Object.keys(editor.completer.keyboardHandler.commands).map((key: any) => ({bindkey: editor.completer.keyboardHandler.commands[key].bindKey ?? \"\", name: editor.completer.keyboardHandler.commands[key].name}));\n          }\n          if(editor.commands.commands){\n            keybindings.commands = Object.keys(editor.commands.commands).map((key: any) => ({bindkey: editor.commands.commands[key].bindKey ?? \"\", name: editor.commands.commands[key].name}));\n          }\n          const keybindingsJSON = JSON.stringify(keybindings, undefined, 2);\n          baseSession.current = editor.getSession();\n          const keybindingsSession = ace.createEditSession(keybindingsJSON, \"ace/mode/json\");\n          editor.setSession(keybindingsSession);\n        }\n      }\n    },\n    {\n      name: 'exitSession', //name for the key binding.\n      bindKey: { win: 'Esc', mac: 'Esc' },\n      description: \"Return to main session (keep changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          const mode = editor.getSession().$modeId.split(\"/\").pop();\n          if (mode === \"snippets\")\n            editor.execCommand(\"editSnippets\");\n          else if (mode === \"json\")\n            editor.execCommand(\"editKeyBindings\");\n        }\n      }\n    },\n    {\n      name: 'abandonSession', //name for the key binding.\n      bindKey: { win: 'Ctrl-Alt-Esc', mac: 'Command-Alt-Esc' },\n      description: \"Return to main session (discard changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n        }\n      }\n    },\n    {\n      name: 'classART', //name for the key binding.\n      description: \"Add/Remove/Toggle class for element\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, type: string, class: string}) => {\n        if(args.targetQueryString && args.type && args.class){\n          switch(args.type){\n            case \"add\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.add(args.class));\n              break;\n            case \"remove\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.remove(args.class));\n              break;\n            case \"toggle\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.toggle(args.class));\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    {\n      name: 'conditionalExecute', //name for the key binding.\n      description: \"Execute command if element exists\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, command: any[], condition?: boolean}) => {\n        if(args.targetQueryString && args.command && Array.isArray(args.command)){\n          if(!(args.condition ?? true) === !document.querySelector(args.targetQueryString)){\n            typeof args.command[0] === \"string\" ? execute(args.command[0], args.command[1]) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n        }\n      }\n    },\n    {\n      name: 'delayedExecute', //name for the key binding.\n      description: \"Execute command after a period of time\", //description of the command\n      exec: (editor: any, args: { command: string | any[], timeout?: number}) => {\n        if(args.command){\n          if(Array.isArray(args.command) && args.command.length === 2){\n            typeof args.command[0] === \"string\" ? setTimeout(() => {execute(args.command[0], args.command[1])}, args.timeout ?? defaultProps.debounceChangePeriod) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n          else if(typeof args.command === \"string\"){\n            setTimeout(() => {\n              execute(args.command as string);\n            }, args.timeout ?? defaultProps.debounceChangePeriod);\n          }\n        }\n      }\n    }\n  ]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach((key: any) => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\" || Array.isArray(args[key]);\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`Function - execute: failed to parse/execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  const executeAll = (commands: any[]) => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"Function - executeAll: improper command format! Singular commands must contain name of command as first element and arguments as second element.\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"Function - executeAll: failed to parse/execute command(s)!\");\n      }\n    });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  // This useEffect is used to reset the editor when the code argument changes and\n  // the allow_reset argument is true. The allow_reset argument only impacts the\n  // behavior of the component when the component has a fixed key argument because\n  // changing the key argument results in the creation of a new component instance.\n  // Everything would be reset anyways.\n  useEffect(() => {\n    if (args['allow_reset'] === true && args['code'] !== code) {\n      reset.current = !reset.current;\n      resetEditor();\n    }\n  }, [args['code']]);\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n\n  const {info: infoArg, menu: menuArg, focus: focusArg, code: codeArg, ...rest} = args;\n  const editorArgsString = JSON.stringify(rest);\n  const menuArgsString = JSON.stringify(menuArg);\n  const infoArgsString = JSON.stringify(infoArg);\n  const buttonArgsString = JSON.stringify(args['buttons']);\n  const themeString = JSON.stringify(theme);\n  const snippets = JSON.stringify(snippetAddRemove);\n\n  /**\n   * This section contains the main sub-components (child components). These components are wrapped in useMemos\n   * in order to prevent unnecessary re-rendering of the components. This is listed as one of its use cases in the\n   * React docs ({@link https://beta.reactjs.org/reference/react/useMemo#skipping-re-rendering-of-components Skipping re-rendering of components})\n   *\n   * This component is the editor component that is rendered. It is only re-rendered when\n   * certain properties change. This is important because we should account for the possibility that the editor \n   * is being used at any given moment. Unnecessary and frequent re-rendering of the editor (for outside reasons\n   * especially) can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    const keybindings = JSON.stringify(keybindingAddRemove);\n    const revertedArgs = JSON.parse(editorArgsString);\n\n    // Create commands for each button\n    if(revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach((button: any) => {\n          commands.commands = [...commands.commands, {\n            name: (button.name as string).trim().replace(/\\s+/g, '_') + '_button',\n            bindKey: button.bindKey,\n            description: \"Execute '\" + button.name + \"' button command(s)\",\n            exec: () => {\n            executeAll(button.commands);\n          }}];\n      });\n    }\n\n    let heightProps = {};\n    if(typeof revertedArgs['height'] === \"number\") \n      heightProps = {minLines: 1, maxLines: revertedArgs['height']};\n    else if(typeof revertedArgs['height'] === \"string\") \n      heightProps = {height: revertedArgs['height']};\n    else if(Array.isArray(revertedArgs['height']) && revertedArgs['height'].length === 2) \n      heightProps = {minLines: revertedArgs['height'][0], maxLines: revertedArgs['height'][1]};\n\n    const aceEditorProps = { ...defaultEditorProps, ...revertedArgs['editor_props'] };\n    const aceOptions = { ...defaultOptions, ...revertedArgs['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps,...heightProps, ...revertedArgs['props'] };\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n    return (\n        <Editor\n         editorRef={aceEditor}\n         code={code} \n         lang={revertedArgs['lang']} \n         theme={themeProp} \n         shortcuts={revertedArgs['shortcuts']} \n         snippetString={snippets} \n         ghostText={revertedArgs['ghost_text']}\n         commands={commands.commands} \n         completions={revertedArgs['completions']}\n         replaceCompleter={revertedArgs['replace_completer']}\n         keybindingString={keybindings} \n         props={aceProps} \n         onChange={onChangeHandler}\n         onSelectionChange={onSelectionChangeHandler}\n         onBlur={onEditorBlur}  \n        />\n      );\n  }, [editorArgsString, themeProp, snippets, keybindingAddRemove, reset.current]);\n\n  const buttons = useMemo(() => {\n    const revertedButtons = JSON.parse(buttonArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme ?? {};\n    const customButtons = {buttons: (revertedButtons ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      < ButtonSet\n       buttonGroup={customButtons} \n       theme={customButtonTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [buttonArgsString, themeString, themeProp]);\n\n  const menu = useMemo(() => {\n    const revertedMenu = JSON.parse(menuArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme ?? {};\n    return (\n      <ButtonMenu\n       menu={revertedMenu} \n       theme={menuTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [menuArgsString, themeString, themeProp]);\n\n  const info = useMemo(() => {\n    const revertedInfo = JSON.parse(infoArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme ?? {};\n    return (\n      <InfoBar\n       infoRef={infoTextRef} \n       info={revertedInfo} \n       theme={infoTheme} />\n    );\n  }, [infoArgsString, themeString]);\n\n  const globalCSS = useMemo(() => {\n    return (\n      <GlobalCSS isDisabled={disabled} inject={componentContainerProps.globalCSS} />\n    );\n  }, [componentContainerProps.globalCSS, disabled]);\n\n  return (\n    <StyledCodeEditor ref={observe} style={componentContainerProps.style} css={componentContainerProps.css} className={\"streamlit_code-editor \" + theme?.base ?? \"\" } >\n      {globalCSS}\n      {editor}\n      {buttons}\n      {menu}\n      {info}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}