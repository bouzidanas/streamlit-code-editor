{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\n/** @ignore */\nconst kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector extends BaseVector {\n  bind(index) {\n    const proto = this._row || (this._row = new StructRow(this));\n    const bound = Object.create(proto);\n    bound[kRowIndex] = index;\n    return bound;\n  }\n}","map":{"version":3,"names":["StructRow","BaseVector","kRowIndex","Symbol","for","StructVector","bind","index","proto","_row","bound","Object","create"],"sources":["vector/struct.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAQ,QAAQ;AAGnC;AAAe,MAAMC,SAAS,GAAGC,MAAM,CAACC,GAAG,CAAC,UAAU,CAAC;AACvD;AACA,OAAM,MAAOC,YAA0D,SAAQJ,UAAqB;EAGzFK,IAAIA,CAACC,KAAa;IACrB,MAAMC,KAAK,GAAG,IAAI,CAACC,IAAI,KAAK,IAAI,CAACA,IAAI,GAAG,IAAIT,SAAS,CAAI,IAAI,CAAC,CAAC;IAC/D,MAAMU,KAAK,GAAGC,MAAM,CAACC,MAAM,CAACJ,KAAK,CAAC;IAClCE,KAAK,CAACR,SAAS,CAAC,GAAGK,KAAK;IACxB,OAAOG,KAAK;EAChB","ignoreList":[]},"metadata":{},"sourceType":"module"}