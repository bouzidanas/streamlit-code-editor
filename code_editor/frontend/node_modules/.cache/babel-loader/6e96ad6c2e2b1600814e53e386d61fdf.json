{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { Map_ } from '../type';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\nexport class MapBuilder extends VariableWidthBuilder {\n  set(index, value) {\n    return super.set(index, value);\n  }\n  setValue(index, value) {\n    value = value instanceof Map ? value : new Map(Object.entries(value));\n    const pending = this._pending || (this._pending = new Map());\n    const current = pending.get(index);\n    current && (this._pendingLength -= current.size);\n    this._pendingLength += value.size;\n    pending.set(index, value);\n  }\n  addChild(child, name = `${this.numChildren}`) {\n    if (this.numChildren > 0) {\n      throw new Error('ListBuilder can only have one child.');\n    }\n    this.children[this.numChildren] = child;\n    this.type = new Map_(new Field(name, child.type, true), this.type.keysSorted);\n    return this.numChildren - 1;\n  }\n  _flushPending(pending) {\n    const offsets = this._offsets;\n    const setValue = this._setValue;\n    pending.forEach((value, index) => {\n      if (value === undefined) {\n        offsets.set(index, 0);\n      } else {\n        offsets.set(index, value.size);\n        setValue(this, index, value);\n      }\n    });\n  }\n}","map":{"version":3,"names":["Field","Map_","VariableWidthBuilder","MapBuilder","set","index","value","setValue","Map","Object","entries","pending","_pending","current","get","_pendingLength","size","addChild","child","name","numChildren","Error","children","type","keysSorted","_flushPending","offsets","_offsets","_setValue","forEach","undefined"],"sources":["builder/map.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAK,QAAQ,WAAW;AACjC,SAAmBC,IAAI,QAAgB,SAAS;AAChD,SAAkBC,oBAAoB,QAAQ,YAAY;AAM1D;AACA,OAAM,MAAOC,UAA4E,SAAQD,oBAAuC;EAG7HE,GAAGA,CAACC,KAAa,EAAEC,KAAgC;IACtD,OAAO,KAAK,CAACF,GAAG,CAACC,KAAK,EAAEC,KAA+B,CAAC;EAC5D;EAEOC,QAAQA,CAACF,KAAa,EAAEC,KAAwB;IACnDA,KAAK,GAAGA,KAAK,YAAYE,GAAG,GAAGF,KAAK,GAAG,IAAIE,GAAG,CAACC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,CAAC;IACrE,MAAMK,OAAO,GAAG,IAAI,CAACC,QAAQ,KAAK,IAAI,CAACA,QAAQ,GAAG,IAAIJ,GAAG,EAAqB,CAAC;IAC/E,MAAMK,OAAO,GAAGF,OAAO,CAACG,GAAG,CAACT,KAAK,CAAC;IAClCQ,OAAO,KAAK,IAAI,CAACE,cAAc,IAAIF,OAAO,CAACG,IAAI,CAAC;IAChD,IAAI,CAACD,cAAc,IAAIT,KAAK,CAACU,IAAI;IACjCL,OAAO,CAACP,GAAG,CAACC,KAAK,EAAEC,KAAK,CAAC;EAC7B;EAEOW,QAAQA,CAACC,KAA4C,EAAEC,IAAI,GAAG,GAAG,IAAI,CAACC,WAAW,EAAE;IACtF,IAAI,IAAI,CAACA,WAAW,GAAG,CAAC,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;;IAE3D,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACF,WAAW,CAAC,GAAGF,KAAK;IACvC,IAAI,CAACK,IAAI,GAAG,IAAItB,IAAI,CAAO,IAAID,KAAK,CAACmB,IAAI,EAAED,KAAK,CAACK,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,CAACA,IAAI,CAACC,UAAU,CAAC;IACnF,OAAO,IAAI,CAACJ,WAAW,GAAG,CAAC;EAC/B;EAEUK,aAAaA,CAACd,OAAwB;IAC5C,MAAMe,OAAO,GAAG,IAAI,CAACC,QAAQ;IAC7B,MAAMpB,QAAQ,GAAG,IAAI,CAACqB,SAAS;IAC/BjB,OAAO,CAACkB,OAAO,CAAC,CAACvB,KAAK,EAAED,KAAK,KAAI;MAC7B,IAAIC,KAAK,KAAKwB,SAAS,EAAE;QACrBJ,OAAO,CAACtB,GAAG,CAACC,KAAK,EAAE,CAAC,CAAC;OACxB,MAAM;QACHqB,OAAO,CAACtB,GAAG,CAACC,KAAK,EAAEC,KAAK,CAACU,IAAI,CAAC;QAC9BT,QAAQ,CAAC,IAAI,EAAEF,KAAK,EAAEC,KAAK,CAAC;;IAEpC,CAAC,CAAC;EACN","ignoreList":[]},"metadata":{},"sourceType":"module"}