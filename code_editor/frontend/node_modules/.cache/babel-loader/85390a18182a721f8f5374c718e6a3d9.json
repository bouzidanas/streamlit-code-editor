{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { DateDay, DateMillisecond } from '../type';\n/** @ignore */\nexport class DateVector extends BaseVector {\n  /** @nocollapse */\n  static from() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 2) {\n      return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond(), args[0]);\n    }\n    return vectorFromValuesWithType(() => new DateMillisecond(), args[0]);\n  }\n}\n/** @ignore */\nexport class DateDayVector extends DateVector {}\n/** @ignore */\nexport class DateMillisecondVector extends DateVector {}","map":{"version":3,"names":["DateUnit","BaseVector","vectorFromValuesWithType","DateDay","DateMillisecond","DateVector","from","_len","arguments","length","args","Array","_key","DAY","DateDayVector","DateMillisecondVector"],"sources":["vector/date.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAQ,QAAQ,SAAS;AAElC,SAASC,UAAU,QAAQ,QAAQ;AAGnC,SAASC,wBAAwB,QAAQ,SAAS;AAElD,SAAgBC,OAAO,EAAEC,eAAe,QAAS,SAAS;AAK1D;AACA,OAAM,MAAOC,UAAoC,SAAQJ,UAAa;EAOlE;EACO,OAAOK,IAAIA,CAAA,EAAmL;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAjJC,IAAiJ,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAjJF,IAAiJ,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACjM,IAAIF,IAAI,CAACD,MAAM,KAAK,CAAC,EAAE;MACnB,OAAOP,wBAAwB,CAAC,MAAMQ,IAAI,CAAC,CAAC,CAAC,KAAKV,QAAQ,CAACa,GAAG,GAAG,IAAIV,OAAO,EAAE,GAAG,IAAIC,eAAe,EAAO,EAAEM,IAAI,CAAC,CAAC,CAAC,CAAC;;IAEzH,OAAOR,wBAAwB,CAAC,MAAM,IAAIE,eAAe,EAAO,EAAEM,IAAI,CAAC,CAAC,CAAC,CAAC;EAC9E;;AAGJ;AACA,OAAM,MAAOI,aAAc,SAAQT,UAAmB;AAEtD;AACA,OAAM,MAAOU,qBAAsB,SAAQV,UAA2B","ignoreList":[]},"metadata":{},"sourceType":"module"}