{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Dictionary } from '../type';\nimport { Builder } from '../builder';\n/** @ignore */\nexport class DictionaryBuilder extends Builder {\n  constructor({\n    'type': type,\n    'nullValues': nulls,\n    'dictionaryHashFunction': hashFn\n  }) {\n    super({\n      type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered)\n    });\n    this._nulls = null;\n    this._dictionaryOffset = 0;\n    this._keysToIndices = Object.create(null);\n    this.indices = Builder.new({\n      'type': this.type.indices,\n      'nullValues': nulls\n    });\n    this.dictionary = Builder.new({\n      'type': this.type.dictionary,\n      'nullValues': null\n    });\n    if (typeof hashFn === 'function') {\n      this.valueToKey = hashFn;\n    }\n  }\n  get values() {\n    return this.indices.values;\n  }\n  get nullCount() {\n    return this.indices.nullCount;\n  }\n  get nullBitmap() {\n    return this.indices.nullBitmap;\n  }\n  get byteLength() {\n    return this.indices.byteLength + this.dictionary.byteLength;\n  }\n  get reservedLength() {\n    return this.indices.reservedLength + this.dictionary.reservedLength;\n  }\n  get reservedByteLength() {\n    return this.indices.reservedByteLength + this.dictionary.reservedByteLength;\n  }\n  isValid(value) {\n    return this.indices.isValid(value);\n  }\n  setValid(index, valid) {\n    const indices = this.indices;\n    valid = indices.setValid(index, valid);\n    this.length = indices.length;\n    return valid;\n  }\n  setValue(index, value) {\n    let keysToIndices = this._keysToIndices;\n    let key = this.valueToKey(value);\n    let idx = keysToIndices[key];\n    if (idx === undefined) {\n      keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n    }\n    return this.indices.setValue(index, idx);\n  }\n  flush() {\n    const type = this.type;\n    const prev = this._dictionary;\n    const curr = this.dictionary.toVector();\n    const data = this.indices.flush().clone(type);\n    data.dictionary = prev ? prev.concat(curr) : curr;\n    this.finished || (this._dictionaryOffset += curr.length);\n    this._dictionary = data.dictionary;\n    this.clear();\n    return data;\n  }\n  finish() {\n    this.indices.finish();\n    this.dictionary.finish();\n    this._dictionaryOffset = 0;\n    this._keysToIndices = Object.create(null);\n    return super.finish();\n  }\n  clear() {\n    this.indices.clear();\n    this.dictionary.clear();\n    return super.clear();\n  }\n  valueToKey(val) {\n    return typeof val === 'string' ? val : `${val}`;\n  }\n}","map":{"version":3,"names":["Dictionary","Builder","DictionaryBuilder","constructor","type","nulls","hashFn","dictionary","indices","id","isOrdered","_nulls","_dictionaryOffset","_keysToIndices","Object","create","new","valueToKey","values","nullCount","nullBitmap","byteLength","reservedLength","reservedByteLength","isValid","value","setValid","index","valid","length","setValue","keysToIndices","key","idx","undefined","append","flush","prev","_dictionary","curr","toVector","data","clone","concat","finished","clear","finish","val"],"sources":["builder/dictionary.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}