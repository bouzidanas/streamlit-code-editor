{"ast":null,"code":"ace.define(\"ace/mode/fortran_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* Derived from Python highlighing rules */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var FortranHighlightRules = function () {\n    var keywords = \"call|case|contains|continue|cycle|do|else|elseif|end|enddo|endif|function|\" + \"if|implicit|in|include|inout|intent|module|none|only|out|print|program|return|\" + \"select|status|stop|subroutine|\" + \"return|then|use|while|write|\" + \"CALL|CASE|CONTAINS|CONTINUE|CYCLE|DO|ELSE|ELSEIF|END|ENDDO|ENDIF|FUNCTION|\" + \"IF|IMPLICIT|IN|INCLUDE|INOUT|INTENT|MODULE|NONE|ONLY|OUT|PRINT|PROGRAM|RETURN|\" + \"SELECT|STATUS|STOP|SUBROUTINE|\" + \"RETURN|THEN|USE|WHILE|WRITE\";\n    var keywordOperators = \"and|or|not|eq|ne|gt|ge|lt|le|\" + \"AND|OR|NOT|EQ|NE|GT|GE|LT|LE\";\n    var builtinConstants = \"true|false|TRUE|FALSE\";\n    var builtinFunctions = \"abs|achar|acos|acosh|adjustl|adjustr|aimag|aint|all|allocate|\" + \"anint|any|asin|asinh|associated|atan|atan2|atanh|\" + \"bessel_j0|bessel_j1|bessel_jn|bessel_y0|bessel_y1|bessel_yn|\" + \"bge|bgt|bit_size|ble|blt|btest|ceiling|char|cmplx|conjg|cos|cosh|\" + \"count|cpu_time|cshift|date_and_time|dble|deallocate|digits|dim|dot_product|dprod|\" + \"dshiftl|dshiftr|dsqrt|eoshift|epsilon|erf|erfc|erfc_scaled|exp|float|floor|\" + \"format|fraction|gamma|input|len|lge|lgt|lle|llt|log|log10|maskl|maskr|matmul|max|maxloc|maxval|\" + \"merge|min|minloc|minval|mod|modulo|nint|not|norm2|null|nullify|pack|parity|popcnt|poppar|\" + \"precision|present|product|radix|random_number|random_seed|range|repeat|reshape|round|\" + \"rrspacing|same_type_as|scale|scan|selected_char_kind|selected_int_kind|selected_real_kind|\" + \"set_exponent|shape|shifta|shiftl|shiftr|sign|sin|sinh|size|sngl|spacing|spread|\" + \"sqrt|sum|system_clock|tan|tanh|tiny|trailz|transfer|transpose|trim|ubound|unpack|verify|\" + \"ABS|ACHAR|ACOS|ACOSH|ADJUSTL|ADJUSTR|AIMAG|AINT|ALL|ALLOCATE|\" + \"ANINT|ANY|ASIN|ASINH|ASSOCIATED|ATAN|ATAN2|ATANH|\" + \"BESSEL_J0|BESSEL_J1|BESSEL_JN|BESSEL_Y0|BESSEL_Y1|BESSEL_YN|\" + \"BGE|BGT|BIT_SIZE|BLE|BLT|BTEST|CEILING|CHAR|CMPLX|CONJG|COS|COSH|\" + \"COUNT|CPU_TIME|CSHIFT|DATE_AND_TIME|DBLE|DEALLOCATE|DIGITS|DIM|DOT_PRODUCT|DPROD|\" + \"DSHIFTL|DSHIFTR|DSQRT|EOSHIFT|EPSILON|ERF|ERFC|ERFC_SCALED|EXP|FLOAT|FLOOR|\" + \"FORMAT|FRACTION|GAMMA|INPUT|LEN|LGE|LGT|LLE|LLT|LOG|LOG10|MASKL|MASKR|MATMUL|MAX|MAXLOC|MAXVAL|\" + \"MERGE|MIN|MINLOC|MINVAL|MOD|MODULO|NINT|NOT|NORM2|NULL|NULLIFY|PACK|PARITY|POPCNT|POPPAR|\" + \"PRECISION|PRESENT|PRODUCT|RADIX|RANDOM_NUMBER|RANDOM_SEED|RANGE|REPEAT|RESHAPE|ROUND|\" + \"RRSPACING|SAME_TYPE_AS|SCALE|SCAN|SELECTED_CHAR_KIND|SELECTED_INT_KIND|SELECTED_REAL_KIND|\" + \"SET_EXPONENT|SHAPE|SHIFTA|SHIFTL|SHIFTR|SIGN|SIN|SINH|SIZE|SNGL|SPACING|SPREAD|\" + \"SQRT|SUM|SYSTEM_CLOCK|TAN|TANH|TINY|TRAILZ|TRANSFER|TRANSPOSE|TRIM|UBOUND|UNPACK|VERIFY\";\n    var storageType = \"logical|character|integer|real|type|\" + \"LOGICAL|CHARACTER|INTEGER|REAL|TYPE\";\n    var storageModifiers = \"allocatable|dimension|intent|parameter|pointer|target|private|public|\" + \"ALLOCATABLE|DIMENSION|INTENT|PARAMETER|POINTER|TARGET|PRIVATE|PUBLIC\";\n    var keywordMapper = this.createKeywordMapper({\n      \"invalid.deprecated\": \"debugger\",\n      \"support.function\": builtinFunctions,\n      \"constant.language\": builtinConstants,\n      \"keyword\": keywords,\n      \"keyword.operator\": keywordOperators,\n      \"storage.type\": storageType,\n      \"storage.modifier\": storageModifiers\n    }, \"identifier\");\n    var strPre = \"(?:r|u|ur|R|U|UR|Ur|uR)?\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"!.*$\"\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string start\n        regex: strPre + '\"{3}',\n        next: \"qqstring3\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: strPre + '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // multi line ''' string start\n        regex: strPre + \"'{3}\",\n        next: \"qstring3\"\n      }, {\n        token: \"string\",\n        // ' string\n        regex: strPre + \"'(?=.)\",\n        next: \"qstring\"\n      }, {\n        token: \"constant.numeric\",\n        // imaginary\n        regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: floatNumber\n      }, {\n        token: \"constant.numeric\",\n        // long integer\n        regex: integer + \"[lL]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // integer\n        regex: integer + \"\\\\b\"\n      }, {\n        token: \"keyword\",\n        // pre-compiler directives\n        regex: \"#\\\\s*(?:include|import|define|undef|INCLUDE|IMPORT|DEFINE|UNDEF)\\\\b\"\n      }, {\n        token: \"keyword\",\n        // special case pre-compiler directive\n        regex: \"#\\\\s*(?:endif|ifdef|else|elseif|ifndef|ENDIF|IFDEF|ELSE|ELSEIF|IFNDEF)\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[\\\\[\\\\(\\\\{]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\]\\\\)\\\\}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"qqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n  };\n  oop.inherits(FortranHighlightRules, TextHighlightRules);\n  exports.FortranHighlightRules = FortranHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/fortran\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/fortran_highlight_rules\", \"ace/mode/folding/cstyle\", \"ace/range\"], function (require, exports, module) {\n  /* Derived from Python rules */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var FortranHighlightRules = require(\"./fortran_highlight_rules\").FortranHighlightRules;\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Range = require(\"../range\").Range;\n  var Mode = function () {\n    this.HighlightRules = FortranHighlightRules;\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"!\";\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n        if (match) {\n          indent += tab;\n        }\n      }\n      return indent;\n    };\n    var outdents = {\n      \"return\": 1,\n      \"break\": 1,\n      \"continue\": 1,\n      \"RETURN\": 1,\n      \"BREAK\": 1,\n      \"CONTINUE\": 1\n    };\n    this.checkOutdent = function (state, line, input) {\n      if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\") return false;\n      var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n      if (!tokens) return false;\n      do {\n        var last = tokens.pop();\n      } while (last && (last.type == \"comment\" || last.type == \"text\" && last.value.match(/^\\s+$/)));\n      if (!last) return false;\n      return last.type == \"keyword\" && outdents[last.value];\n    };\n    this.autoOutdent = function (state, doc, row) {\n      row += 1;\n      var indent = this.$getIndent(doc.getLine(row));\n      var tab = doc.getTabString();\n      if (indent.slice(-tab.length) == tab) doc.remove(new Range(row, indent.length - tab.length, row, indent.length));\n    };\n    this.$id = \"ace/mode/fortran\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/fortran\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","FortranHighlightRules","keywords","keywordOperators","builtinConstants","builtinFunctions","storageType","storageModifiers","keywordMapper","createKeywordMapper","strPre","decimalInteger","octInteger","hexInteger","binInteger","integer","exponent","fraction","intPart","pointFloat","exponentFloat","floatNumber","stringEscape","$rules","token","regex","next","defaultToken","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","CStyleFoldMode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","tab","$getIndent","tokenizedLine","getTokenizer","getLineTokens","tokens","type","outdents","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","$id"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-fortran.js"],"sourcesContent":["ace.define(\"ace/mode/fortran_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* Derived from Python highlighing rules */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar FortranHighlightRules = function () {\n    var keywords = (\"call|case|contains|continue|cycle|do|else|elseif|end|enddo|endif|function|\" +\n        \"if|implicit|in|include|inout|intent|module|none|only|out|print|program|return|\" +\n        \"select|status|stop|subroutine|\" +\n        \"return|then|use|while|write|\" +\n        \"CALL|CASE|CONTAINS|CONTINUE|CYCLE|DO|ELSE|ELSEIF|END|ENDDO|ENDIF|FUNCTION|\" +\n        \"IF|IMPLICIT|IN|INCLUDE|INOUT|INTENT|MODULE|NONE|ONLY|OUT|PRINT|PROGRAM|RETURN|\" +\n        \"SELECT|STATUS|STOP|SUBROUTINE|\" +\n        \"RETURN|THEN|USE|WHILE|WRITE\");\n    var keywordOperators = (\"and|or|not|eq|ne|gt|ge|lt|le|\" +\n        \"AND|OR|NOT|EQ|NE|GT|GE|LT|LE\");\n    var builtinConstants = (\"true|false|TRUE|FALSE\");\n    var builtinFunctions = (\"abs|achar|acos|acosh|adjustl|adjustr|aimag|aint|all|allocate|\" +\n        \"anint|any|asin|asinh|associated|atan|atan2|atanh|\" +\n        \"bessel_j0|bessel_j1|bessel_jn|bessel_y0|bessel_y1|bessel_yn|\" +\n        \"bge|bgt|bit_size|ble|blt|btest|ceiling|char|cmplx|conjg|cos|cosh|\" +\n        \"count|cpu_time|cshift|date_and_time|dble|deallocate|digits|dim|dot_product|dprod|\" +\n        \"dshiftl|dshiftr|dsqrt|eoshift|epsilon|erf|erfc|erfc_scaled|exp|float|floor|\" +\n        \"format|fraction|gamma|input|len|lge|lgt|lle|llt|log|log10|maskl|maskr|matmul|max|maxloc|maxval|\" +\n        \"merge|min|minloc|minval|mod|modulo|nint|not|norm2|null|nullify|pack|parity|popcnt|poppar|\" +\n        \"precision|present|product|radix|random_number|random_seed|range|repeat|reshape|round|\" +\n        \"rrspacing|same_type_as|scale|scan|selected_char_kind|selected_int_kind|selected_real_kind|\" +\n        \"set_exponent|shape|shifta|shiftl|shiftr|sign|sin|sinh|size|sngl|spacing|spread|\" +\n        \"sqrt|sum|system_clock|tan|tanh|tiny|trailz|transfer|transpose|trim|ubound|unpack|verify|\" +\n        \"ABS|ACHAR|ACOS|ACOSH|ADJUSTL|ADJUSTR|AIMAG|AINT|ALL|ALLOCATE|\" +\n        \"ANINT|ANY|ASIN|ASINH|ASSOCIATED|ATAN|ATAN2|ATANH|\" +\n        \"BESSEL_J0|BESSEL_J1|BESSEL_JN|BESSEL_Y0|BESSEL_Y1|BESSEL_YN|\" +\n        \"BGE|BGT|BIT_SIZE|BLE|BLT|BTEST|CEILING|CHAR|CMPLX|CONJG|COS|COSH|\" +\n        \"COUNT|CPU_TIME|CSHIFT|DATE_AND_TIME|DBLE|DEALLOCATE|DIGITS|DIM|DOT_PRODUCT|DPROD|\" +\n        \"DSHIFTL|DSHIFTR|DSQRT|EOSHIFT|EPSILON|ERF|ERFC|ERFC_SCALED|EXP|FLOAT|FLOOR|\" +\n        \"FORMAT|FRACTION|GAMMA|INPUT|LEN|LGE|LGT|LLE|LLT|LOG|LOG10|MASKL|MASKR|MATMUL|MAX|MAXLOC|MAXVAL|\" +\n        \"MERGE|MIN|MINLOC|MINVAL|MOD|MODULO|NINT|NOT|NORM2|NULL|NULLIFY|PACK|PARITY|POPCNT|POPPAR|\" +\n        \"PRECISION|PRESENT|PRODUCT|RADIX|RANDOM_NUMBER|RANDOM_SEED|RANGE|REPEAT|RESHAPE|ROUND|\" +\n        \"RRSPACING|SAME_TYPE_AS|SCALE|SCAN|SELECTED_CHAR_KIND|SELECTED_INT_KIND|SELECTED_REAL_KIND|\" +\n        \"SET_EXPONENT|SHAPE|SHIFTA|SHIFTL|SHIFTR|SIGN|SIN|SINH|SIZE|SNGL|SPACING|SPREAD|\" +\n        \"SQRT|SUM|SYSTEM_CLOCK|TAN|TANH|TINY|TRAILZ|TRANSFER|TRANSPOSE|TRIM|UBOUND|UNPACK|VERIFY\");\n    var storageType = (\"logical|character|integer|real|type|\" +\n        \"LOGICAL|CHARACTER|INTEGER|REAL|TYPE\");\n    var storageModifiers = (\"allocatable|dimension|intent|parameter|pointer|target|private|public|\" +\n        \"ALLOCATABLE|DIMENSION|INTENT|PARAMETER|POINTER|TARGET|PRIVATE|PUBLIC\");\n    var keywordMapper = this.createKeywordMapper({\n        \"invalid.deprecated\": \"debugger\",\n        \"support.function\": builtinFunctions,\n        \"constant.language\": builtinConstants,\n        \"keyword\": keywords,\n        \"keyword.operator\": keywordOperators,\n        \"storage.type\": storageType,\n        \"storage.modifier\": storageModifiers\n    }, \"identifier\");\n    var strPre = \"(?:r|u|ur|R|U|UR|Ur|uR)?\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n    this.$rules = {\n        \"start\": [{\n                token: \"comment\",\n                regex: \"!.*$\"\n            }, {\n                token: \"string\", // multi line \"\"\" string start\n                regex: strPre + '\"{3}',\n                next: \"qqstring3\"\n            }, {\n                token: \"string\", // \" string\n                regex: strPre + '\"(?=.)',\n                next: \"qqstring\"\n            }, {\n                token: \"string\", // multi line ''' string start\n                regex: strPre + \"'{3}\",\n                next: \"qstring3\"\n            }, {\n                token: \"string\", // ' string\n                regex: strPre + \"'(?=.)\",\n                next: \"qstring\"\n            }, {\n                token: \"constant.numeric\", // imaginary\n                regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n            }, {\n                token: \"constant.numeric\", // float\n                regex: floatNumber\n            }, {\n                token: \"constant.numeric\", // long integer\n                regex: integer + \"[lL]\\\\b\"\n            }, {\n                token: \"constant.numeric\", // integer\n                regex: integer + \"\\\\b\"\n            }, {\n                token: \"keyword\", // pre-compiler directives\n                regex: \"#\\\\s*(?:include|import|define|undef|INCLUDE|IMPORT|DEFINE|UNDEF)\\\\b\"\n            }, {\n                token: \"keyword\", // special case pre-compiler directive\n                regex: \"#\\\\s*(?:endif|ifdef|else|elseif|ifndef|ENDIF|IFDEF|ELSE|ELSEIF|IFNDEF)\\\\b\"\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token: \"keyword.operator\",\n                regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"[\\\\[\\\\(\\\\{]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\]\\\\)\\\\}]\"\n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }],\n        \"qqstring3\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\", // multi line \"\"\" string end\n                regex: '\"{3}',\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"qstring3\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\", // multi line \"\"\" string end\n                regex: '\"{3}',\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"qqstring\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\",\n                regex: \"\\\\\\\\$\",\n                next: \"qqstring\"\n            }, {\n                token: \"string\",\n                regex: '\"|$',\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"qstring\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\",\n                regex: \"\\\\\\\\$\",\n                next: \"qstring\"\n            }, {\n                token: \"string\",\n                regex: \"'|$\",\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }]\n    };\n};\noop.inherits(FortranHighlightRules, TextHighlightRules);\nexports.FortranHighlightRules = FortranHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/fortran\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/fortran_highlight_rules\",\"ace/mode/folding/cstyle\",\"ace/range\"], function(require, exports, module){/* Derived from Python rules */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar FortranHighlightRules = require(\"./fortran_highlight_rules\").FortranHighlightRules;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Range = require(\"../range\").Range;\nvar Mode = function () {\n    this.HighlightRules = FortranHighlightRules;\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"!\";\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n        return indent;\n    };\n    var outdents = {\n        \"return\": 1,\n        \"break\": 1,\n        \"continue\": 1,\n        \"RETURN\": 1,\n        \"BREAK\": 1,\n        \"CONTINUE\": 1\n    };\n    this.checkOutdent = function (state, line, input) {\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\n            return false;\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n        if (!tokens)\n            return false;\n        do {\n            var last = tokens.pop();\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\n        if (!last)\n            return false;\n        return (last.type == \"keyword\" && outdents[last.value]);\n    };\n    this.autoOutdent = function (state, doc, row) {\n        row += 1;\n        var indent = this.$getIndent(doc.getLine(row));\n        var tab = doc.getTabString();\n        if (indent.slice(-tab.length) == tab)\n            doc.remove(new Range(row, indent.length - tab.length, row, indent.length));\n    };\n    this.$id = \"ace/mode/fortran\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/fortran\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}