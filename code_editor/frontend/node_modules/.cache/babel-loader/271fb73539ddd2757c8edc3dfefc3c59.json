{"ast":null,"code":"ace.define(\"ace/mode/erlang_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from tm bundles\\erlang.tmbundle\\Syntaxes\\Erlang.plist (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var ErlangHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: '#module-directive'\n      }, {\n        include: '#import-export-directive'\n      }, {\n        include: '#behaviour-directive'\n      }, {\n        include: '#record-directive'\n      }, {\n        include: '#define-directive'\n      }, {\n        include: '#macro-directive'\n      }, {\n        include: '#directive'\n      }, {\n        include: '#function'\n      }, {\n        include: '#everything-else'\n      }],\n      '#atom': [{\n        token: 'punctuation.definition.symbol.begin.erlang',\n        regex: '\\'',\n        push: [{\n          token: 'punctuation.definition.symbol.end.erlang',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          token: ['punctuation.definition.escape.erlang', 'constant.other.symbol.escape.erlang', 'punctuation.definition.escape.erlang', 'constant.other.symbol.escape.erlang', 'constant.other.symbol.escape.erlang'],\n          regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'\n        }, {\n          token: 'invalid.illegal.atom.erlang',\n          regex: '\\\\\\\\\\\\^?.?'\n        }, {\n          defaultToken: 'constant.other.symbol.quoted.single.erlang'\n        }]\n      }, {\n        token: 'constant.other.symbol.unquoted.erlang',\n        regex: '[a-z][a-zA-Z\\\\d@_]*'\n      }],\n      '#behaviour-directive': [{\n        token: ['meta.directive.behaviour.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.behaviour.erlang', 'keyword.control.directive.behaviour.erlang', 'meta.directive.behaviour.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.behaviour.erlang', 'entity.name.type.class.behaviour.definition.erlang', 'meta.directive.behaviour.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.behaviour.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }],\n      '#binary': [{\n        token: 'punctuation.definition.binary.begin.erlang',\n        regex: '<<',\n        push: [{\n          token: 'punctuation.definition.binary.end.erlang',\n          regex: '>>',\n          next: 'pop'\n        }, {\n          token: ['punctuation.separator.binary.erlang', 'punctuation.separator.value-size.erlang'],\n          regex: '(,)|(:)'\n        }, {\n          include: '#internal-type-specifiers'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.binary.erlang'\n        }]\n      }],\n      '#character': [{\n        token: ['punctuation.definition.character.erlang', 'punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'constant.character.escape.erlang'],\n        regex: '(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'\n      }, {\n        token: 'invalid.illegal.character.erlang',\n        regex: '\\\\$\\\\\\\\\\\\^?.?'\n      }, {\n        token: ['punctuation.definition.character.erlang', 'constant.character.erlang'],\n        regex: '(\\\\$)(\\\\S)'\n      }, {\n        token: 'invalid.illegal.character.erlang',\n        regex: '\\\\$.?'\n      }],\n      '#comment': [{\n        token: 'punctuation.definition.comment.erlang',\n        regex: '%.*$',\n        push_: [{\n          token: 'comment.line.percentage.erlang',\n          regex: '$',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.line.percentage.erlang'\n        }]\n      }],\n      '#define-directive': [{\n        token: ['meta.directive.define.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.define.erlang', 'keyword.control.directive.define.erlang', 'meta.directive.define.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.define.erlang', 'entity.name.function.macro.definition.erlang', 'meta.directive.define.erlang', 'punctuation.separator.parameters.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.define.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.directive.define.erlang'\n        }]\n      }, {\n        token: 'meta.directive.define.erlang',\n        regex: '(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.define.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          token: ['text', 'punctuation.section.directive.begin.erlang', 'text', 'keyword.control.directive.define.erlang', 'text', 'punctuation.definition.parameters.begin.erlang', 'text', 'entity.name.function.macro.definition.erlang', 'text', 'punctuation.definition.parameters.begin.erlang'],\n          regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',\n          push: [{\n            token: ['punctuation.definition.parameters.end.erlang', 'text', 'punctuation.separator.parameters.erlang'],\n            regex: '(\\\\))(\\\\s*)(,)',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: 'punctuation.separator.define.erlang',\n          regex: '\\\\|\\\\||\\\\||:|;|,|\\\\.|->'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.directive.define.erlang'\n        }]\n      }],\n      '#directive': [{\n        token: ['meta.directive.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.erlang', 'keyword.control.directive.erlang', 'meta.directive.erlang', 'punctuation.definition.parameters.begin.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\)?)(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.directive.erlang'\n        }]\n      }, {\n        token: ['meta.directive.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.erlang', 'keyword.control.directive.erlang', 'meta.directive.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)'\n      }],\n      '#everything-else': [{\n        include: '#comment'\n      }, {\n        include: '#record-usage'\n      }, {\n        include: '#macro-usage'\n      }, {\n        include: '#expression'\n      }, {\n        include: '#keyword'\n      }, {\n        include: '#textual-operator'\n      }, {\n        include: '#function-call'\n      }, {\n        include: '#tuple'\n      }, {\n        include: '#list'\n      }, {\n        include: '#binary'\n      }, {\n        include: '#parenthesized-expression'\n      }, {\n        include: '#character'\n      }, {\n        include: '#number'\n      }, {\n        include: '#atom'\n      }, {\n        include: '#string'\n      }, {\n        include: '#symbolic-operator'\n      }, {\n        include: '#variable'\n      }],\n      '#expression': [{\n        token: 'keyword.control.if.erlang',\n        regex: '\\\\bif\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.if.erlang'\n        }]\n      }, {\n        token: 'keyword.control.case.erlang',\n        regex: '\\\\bcase\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.case.erlang'\n        }]\n      }, {\n        token: 'keyword.control.receive.erlang',\n        regex: '\\\\breceive\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.receive.erlang'\n        }]\n      }, {\n        token: ['keyword.control.fun.erlang', 'text', 'entity.name.type.class.module.erlang', 'text', 'punctuation.separator.module-function.erlang', 'text', 'entity.name.function.erlang', 'text', 'punctuation.separator.function-arity.erlang'],\n        regex: '\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)'\n      }, {\n        token: 'keyword.control.fun.erlang',\n        regex: '\\\\bfun\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          token: 'text',\n          regex: '(?=\\\\()',\n          push: [{\n            token: 'punctuation.separator.clauses.erlang',\n            regex: ';|(?=\\\\bend\\\\b)',\n            next: 'pop'\n          }, {\n            include: '#internal-function-parts'\n          }]\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.fun.erlang'\n        }]\n      }, {\n        token: 'keyword.control.try.erlang',\n        regex: '\\\\btry\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.try.erlang'\n        }]\n      }, {\n        token: 'keyword.control.begin.erlang',\n        regex: '\\\\bbegin\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.begin.erlang'\n        }]\n      }, {\n        token: 'keyword.control.query.erlang',\n        regex: '\\\\bquery\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.query.erlang'\n        }]\n      }],\n      '#function': [{\n        token: ['meta.function.erlang', 'entity.name.function.definition.erlang', 'meta.function.erlang'],\n        regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',\n        push: [{\n          token: 'punctuation.terminator.function.erlang',\n          regex: '\\\\.',\n          next: 'pop'\n        }, {\n          token: ['text', 'entity.name.function.erlang', 'text'],\n          regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()'\n        }, {\n          token: 'text',\n          regex: '(?=\\\\()',\n          push: [{\n            token: 'punctuation.separator.clauses.erlang',\n            regex: ';|(?=\\\\.)',\n            next: 'pop'\n          }, {\n            include: '#parenthesized-expression'\n          }, {\n            include: '#internal-function-parts'\n          }]\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.function.erlang'\n        }]\n      }],\n      '#function-call': [{\n        token: 'meta.function-call.erlang',\n        regex: '(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',\n        push: [{\n          token: 'punctuation.definition.parameters.end.erlang',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          token: ['entity.name.type.class.module.erlang', 'text', 'punctuation.separator.module-function.erlang', 'text', 'entity.name.function.guard.erlang', 'text', 'punctuation.definition.parameters.begin.erlang'],\n          regex: '(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',\n          push: [{\n            token: 'text',\n            regex: '(?=\\\\))',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: ['entity.name.type.class.module.erlang', 'text', 'punctuation.separator.module-function.erlang', 'text', 'entity.name.function.erlang', 'text', 'punctuation.definition.parameters.begin.erlang'],\n          regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',\n          push: [{\n            token: 'text',\n            regex: '(?=\\\\))',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          defaultToken: 'meta.function-call.erlang'\n        }]\n      }],\n      '#import-export-directive': [{\n        token: ['meta.directive.import.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.import.erlang', 'keyword.control.directive.import.erlang', 'meta.directive.import.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.import.erlang', 'entity.name.type.class.module.erlang', 'meta.directive.import.erlang', 'punctuation.separator.parameters.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.import.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#internal-function-list'\n        }, {\n          defaultToken: 'meta.directive.import.erlang'\n        }]\n      }, {\n        token: ['meta.directive.export.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.export.erlang', 'keyword.control.directive.export.erlang', 'meta.directive.export.erlang', 'punctuation.definition.parameters.begin.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.export.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#internal-function-list'\n        }, {\n          defaultToken: 'meta.directive.export.erlang'\n        }]\n      }],\n      '#internal-expression-punctuation': [{\n        token: ['punctuation.separator.clause-head-body.erlang', 'punctuation.separator.clauses.erlang', 'punctuation.separator.expressions.erlang'],\n        regex: '(->)|(;)|(,)'\n      }],\n      '#internal-function-list': [{\n        token: 'punctuation.definition.list.begin.erlang',\n        regex: '\\\\[',\n        push: [{\n          token: 'punctuation.definition.list.end.erlang',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          token: ['entity.name.function.erlang', 'text', 'punctuation.separator.function-arity.erlang'],\n          regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',\n          push: [{\n            token: 'punctuation.separator.list.erlang',\n            regex: ',|(?=\\\\])',\n            next: 'pop'\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.list.function.erlang'\n        }]\n      }],\n      '#internal-function-parts': [{\n        token: 'text',\n        regex: '(?=\\\\()',\n        push: [{\n          token: 'punctuation.separator.clause-head-body.erlang',\n          regex: '->',\n          next: 'pop'\n        }, {\n          token: 'punctuation.definition.parameters.begin.erlang',\n          regex: '\\\\(',\n          push: [{\n            token: 'punctuation.definition.parameters.end.erlang',\n            regex: '\\\\)',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: 'punctuation.separator.guards.erlang',\n          regex: ',|;'\n        }, {\n          include: '#everything-else'\n        }]\n      }, {\n        token: 'punctuation.separator.expressions.erlang',\n        regex: ','\n      }, {\n        include: '#everything-else'\n      }],\n      '#internal-record-body': [{\n        token: 'punctuation.definition.class.record.begin.erlang',\n        regex: '\\\\{',\n        push: [{\n          token: 'meta.structure.record.erlang',\n          regex: '(?=\\\\})',\n          next: 'pop'\n        }, {\n          token: ['variable.other.field.erlang', 'variable.language.omitted.field.erlang', 'text', 'keyword.operator.assignment.erlang'],\n          regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',\n          push: [{\n            token: 'punctuation.separator.class.record.erlang',\n            regex: ',|(?=\\\\})',\n            next: 'pop'\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: ['variable.other.field.erlang', 'text', 'punctuation.separator.class.record.erlang'],\n          regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.record.erlang'\n        }]\n      }],\n      '#internal-type-specifiers': [{\n        token: 'punctuation.separator.value-type.erlang',\n        regex: '/',\n        push: [{\n          token: 'text',\n          regex: '(?=,|:|>>)',\n          next: 'pop'\n        }, {\n          token: ['storage.type.erlang', 'storage.modifier.signedness.erlang', 'storage.modifier.endianness.erlang', 'storage.modifier.unit.erlang', 'punctuation.separator.type-specifiers.erlang'],\n          regex: '(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)'\n        }]\n      }],\n      '#keyword': [{\n        token: 'keyword.control.erlang',\n        regex: '\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b'\n      }],\n      '#list': [{\n        token: 'punctuation.definition.list.begin.erlang',\n        regex: '\\\\[',\n        push: [{\n          token: 'punctuation.definition.list.end.erlang',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          token: 'punctuation.separator.list.erlang',\n          regex: '\\\\||\\\\|\\\\||,'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.list.erlang'\n        }]\n      }],\n      '#macro-directive': [{\n        token: ['meta.directive.ifdef.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.ifdef.erlang', 'keyword.control.directive.ifdef.erlang', 'meta.directive.ifdef.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.ifdef.erlang', 'entity.name.function.macro.erlang', 'meta.directive.ifdef.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.ifdef.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }, {\n        token: ['meta.directive.ifndef.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.ifndef.erlang', 'keyword.control.directive.ifndef.erlang', 'meta.directive.ifndef.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.ifndef.erlang', 'entity.name.function.macro.erlang', 'meta.directive.ifndef.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.ifndef.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }, {\n        token: ['meta.directive.undef.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.undef.erlang', 'keyword.control.directive.undef.erlang', 'meta.directive.undef.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.undef.erlang', 'entity.name.function.macro.erlang', 'meta.directive.undef.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.undef.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }],\n      '#macro-usage': [{\n        token: ['keyword.operator.macro.erlang', 'meta.macro-usage.erlang', 'entity.name.function.macro.erlang'],\n        regex: '(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)'\n      }],\n      '#module-directive': [{\n        token: ['meta.directive.module.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.module.erlang', 'keyword.control.directive.module.erlang', 'meta.directive.module.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.module.erlang', 'entity.name.type.class.module.definition.erlang', 'meta.directive.module.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.module.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }],\n      '#number': [{\n        token: 'text',\n        regex: '(?=\\\\d)',\n        push: [{\n          token: 'text',\n          regex: '(?!\\\\d)',\n          next: 'pop'\n        }, {\n          token: ['constant.numeric.float.erlang', 'punctuation.separator.integer-float.erlang', 'constant.numeric.float.erlang', 'punctuation.separator.float-exponent.erlang'],\n          regex: '(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)'\n        }, {\n          token: ['constant.numeric.integer.binary.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.binary.erlang'],\n          regex: '(2)(#)([0-1]+)'\n        }, {\n          token: ['constant.numeric.integer.base-3.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-3.erlang'],\n          regex: '(3)(#)([0-2]+)'\n        }, {\n          token: ['constant.numeric.integer.base-4.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-4.erlang'],\n          regex: '(4)(#)([0-3]+)'\n        }, {\n          token: ['constant.numeric.integer.base-5.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-5.erlang'],\n          regex: '(5)(#)([0-4]+)'\n        }, {\n          token: ['constant.numeric.integer.base-6.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-6.erlang'],\n          regex: '(6)(#)([0-5]+)'\n        }, {\n          token: ['constant.numeric.integer.base-7.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-7.erlang'],\n          regex: '(7)(#)([0-6]+)'\n        }, {\n          token: ['constant.numeric.integer.octal.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.octal.erlang'],\n          regex: '(8)(#)([0-7]+)'\n        }, {\n          token: ['constant.numeric.integer.base-9.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-9.erlang'],\n          regex: '(9)(#)([0-8]+)'\n        }, {\n          token: ['constant.numeric.integer.decimal.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.decimal.erlang'],\n          regex: '(10)(#)(\\\\d+)'\n        }, {\n          token: ['constant.numeric.integer.base-11.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-11.erlang'],\n          regex: '(11)(#)([\\\\daA]+)'\n        }, {\n          token: ['constant.numeric.integer.base-12.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-12.erlang'],\n          regex: '(12)(#)([\\\\da-bA-B]+)'\n        }, {\n          token: ['constant.numeric.integer.base-13.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-13.erlang'],\n          regex: '(13)(#)([\\\\da-cA-C]+)'\n        }, {\n          token: ['constant.numeric.integer.base-14.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-14.erlang'],\n          regex: '(14)(#)([\\\\da-dA-D]+)'\n        }, {\n          token: ['constant.numeric.integer.base-15.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-15.erlang'],\n          regex: '(15)(#)([\\\\da-eA-E]+)'\n        }, {\n          token: ['constant.numeric.integer.hexadecimal.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.hexadecimal.erlang'],\n          regex: '(16)(#)([\\\\da-fA-F]+)'\n        }, {\n          token: ['constant.numeric.integer.base-17.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-17.erlang'],\n          regex: '(17)(#)([\\\\da-gA-G]+)'\n        }, {\n          token: ['constant.numeric.integer.base-18.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-18.erlang'],\n          regex: '(18)(#)([\\\\da-hA-H]+)'\n        }, {\n          token: ['constant.numeric.integer.base-19.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-19.erlang'],\n          regex: '(19)(#)([\\\\da-iA-I]+)'\n        }, {\n          token: ['constant.numeric.integer.base-20.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-20.erlang'],\n          regex: '(20)(#)([\\\\da-jA-J]+)'\n        }, {\n          token: ['constant.numeric.integer.base-21.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-21.erlang'],\n          regex: '(21)(#)([\\\\da-kA-K]+)'\n        }, {\n          token: ['constant.numeric.integer.base-22.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-22.erlang'],\n          regex: '(22)(#)([\\\\da-lA-L]+)'\n        }, {\n          token: ['constant.numeric.integer.base-23.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-23.erlang'],\n          regex: '(23)(#)([\\\\da-mA-M]+)'\n        }, {\n          token: ['constant.numeric.integer.base-24.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-24.erlang'],\n          regex: '(24)(#)([\\\\da-nA-N]+)'\n        }, {\n          token: ['constant.numeric.integer.base-25.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-25.erlang'],\n          regex: '(25)(#)([\\\\da-oA-O]+)'\n        }, {\n          token: ['constant.numeric.integer.base-26.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-26.erlang'],\n          regex: '(26)(#)([\\\\da-pA-P]+)'\n        }, {\n          token: ['constant.numeric.integer.base-27.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-27.erlang'],\n          regex: '(27)(#)([\\\\da-qA-Q]+)'\n        }, {\n          token: ['constant.numeric.integer.base-28.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-28.erlang'],\n          regex: '(28)(#)([\\\\da-rA-R]+)'\n        }, {\n          token: ['constant.numeric.integer.base-29.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-29.erlang'],\n          regex: '(29)(#)([\\\\da-sA-S]+)'\n        }, {\n          token: ['constant.numeric.integer.base-30.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-30.erlang'],\n          regex: '(30)(#)([\\\\da-tA-T]+)'\n        }, {\n          token: ['constant.numeric.integer.base-31.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-31.erlang'],\n          regex: '(31)(#)([\\\\da-uA-U]+)'\n        }, {\n          token: ['constant.numeric.integer.base-32.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-32.erlang'],\n          regex: '(32)(#)([\\\\da-vA-V]+)'\n        }, {\n          token: ['constant.numeric.integer.base-33.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-33.erlang'],\n          regex: '(33)(#)([\\\\da-wA-W]+)'\n        }, {\n          token: ['constant.numeric.integer.base-34.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-34.erlang'],\n          regex: '(34)(#)([\\\\da-xA-X]+)'\n        }, {\n          token: ['constant.numeric.integer.base-35.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-35.erlang'],\n          regex: '(35)(#)([\\\\da-yA-Y]+)'\n        }, {\n          token: ['constant.numeric.integer.base-36.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-36.erlang'],\n          regex: '(36)(#)([\\\\da-zA-Z]+)'\n        }, {\n          token: 'invalid.illegal.integer.erlang',\n          regex: '\\\\d+#[\\\\da-zA-Z]+'\n        }, {\n          token: 'constant.numeric.integer.decimal.erlang',\n          regex: '\\\\d+'\n        }]\n      }],\n      '#parenthesized-expression': [{\n        token: 'punctuation.section.expression.begin.erlang',\n        regex: '\\\\(',\n        push: [{\n          token: 'punctuation.section.expression.end.erlang',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.parenthesized'\n        }]\n      }],\n      '#record-directive': [{\n        token: ['meta.directive.record.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.record.erlang', 'keyword.control.directive.import.erlang', 'meta.directive.record.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.record.erlang', 'entity.name.type.class.record.definition.erlang', 'meta.directive.record.erlang', 'punctuation.separator.parameters.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n        push: [{\n          token: ['punctuation.definition.class.record.end.erlang', 'meta.directive.record.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.record.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#internal-record-body'\n        }, {\n          defaultToken: 'meta.directive.record.erlang'\n        }]\n      }],\n      '#record-usage': [{\n        token: ['keyword.operator.record.erlang', 'meta.record-usage.erlang', 'entity.name.type.class.record.erlang', 'meta.record-usage.erlang', 'punctuation.separator.record-field.erlang', 'meta.record-usage.erlang', 'variable.other.field.erlang'],\n        regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')'\n      }, {\n        token: ['keyword.operator.record.erlang', 'meta.record-usage.erlang', 'entity.name.type.class.record.erlang'],\n        regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',\n        push: [{\n          token: 'punctuation.definition.class.record.end.erlang',\n          regex: '\\\\}',\n          next: 'pop'\n        }, {\n          include: '#internal-record-body'\n        }, {\n          defaultToken: 'meta.record-usage.erlang'\n        }]\n      }],\n      '#string': [{\n        token: 'punctuation.definition.string.begin.erlang',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.erlang',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: ['punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'constant.character.escape.erlang'],\n          regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'\n        }, {\n          token: 'invalid.illegal.string.erlang',\n          regex: '\\\\\\\\\\\\^?.?'\n        }, {\n          token: ['punctuation.definition.erlang', 'punctuation.separator.erlang', 'constant.other.erlang', 'punctuation.separator.erlang', 'punctuation.separator.erlang', 'constant.other.erlang', 'punctuation.separator.erlang', 'punctuation.separator.erlang', 'punctuation.separator.erlang', 'constant.other.erlang', 'constant.other.erlang'],\n          regex: '(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])'\n        }, {\n          token: ['punctuation.definition.erlang', 'punctuation.separator.erlang', 'constant.other.erlang', 'constant.other.erlang'],\n          regex: '(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])'\n        }, {\n          token: 'invalid.illegal.string.erlang',\n          regex: '~.?'\n        }, {\n          defaultToken: 'string.quoted.double.erlang'\n        }]\n      }],\n      '#symbolic-operator': [{\n        token: 'keyword.operator.symbolic.erlang',\n        regex: '\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::'\n      }],\n      '#textual-operator': [{\n        token: 'keyword.operator.textual.erlang',\n        regex: '\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b'\n      }],\n      '#tuple': [{\n        token: 'punctuation.definition.tuple.begin.erlang',\n        regex: '\\\\{',\n        push: [{\n          token: 'punctuation.definition.tuple.end.erlang',\n          regex: '\\\\}',\n          next: 'pop'\n        }, {\n          token: 'punctuation.separator.tuple.erlang',\n          regex: ','\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.tuple.erlang'\n        }]\n      }],\n      '#variable': [{\n        token: ['variable.other.erlang', 'variable.language.omitted.erlang'],\n        regex: '(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)'\n      }]\n    };\n    this.normalizeRules();\n  };\n  ErlangHighlightRules.metaData = {\n    comment: 'The recognition of function definitions and compiler directives (such as module, record and macro definitions) requires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',\n    fileTypes: ['erl', 'hrl'],\n    keyEquivalent: '^~E',\n    name: 'Erlang',\n    scopeName: 'source.erlang'\n  };\n  oop.inherits(ErlangHighlightRules, TextHighlightRules);\n  exports.ErlangHighlightRules = ErlangHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/erlang\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/erlang_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var ErlangHighlightRules = require(\"./erlang_highlight_rules\").ErlangHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = ErlangHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/erlang\";\n    this.snippetFileId = \"ace/snippets/erlang\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/erlang\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","ErlangHighlightRules","$rules","start","include","token","regex","push","next","defaultToken","push_","normalizeRules","metaData","comment","fileTypes","keyEquivalent","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id","snippetFileId"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-erlang.js"],"sourcesContent":["ace.define(\"ace/mode/erlang_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from tm bundles\\erlang.tmbundle\\Syntaxes\\Erlang.plist (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar ErlangHighlightRules = function () {\n    this.$rules = { start: [{ include: '#module-directive' },\n            { include: '#import-export-directive' },\n            { include: '#behaviour-directive' },\n            { include: '#record-directive' },\n            { include: '#define-directive' },\n            { include: '#macro-directive' },\n            { include: '#directive' },\n            { include: '#function' },\n            { include: '#everything-else' }],\n        '#atom': [{ token: 'punctuation.definition.symbol.begin.erlang',\n                regex: '\\'',\n                push: [{ token: 'punctuation.definition.symbol.end.erlang',\n                        regex: '\\'',\n                        next: 'pop' },\n                    { token: ['punctuation.definition.escape.erlang',\n                            'constant.other.symbol.escape.erlang',\n                            'punctuation.definition.escape.erlang',\n                            'constant.other.symbol.escape.erlang',\n                            'constant.other.symbol.escape.erlang'],\n                        regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n                    { token: 'invalid.illegal.atom.erlang', regex: '\\\\\\\\\\\\^?.?' },\n                    { defaultToken: 'constant.other.symbol.quoted.single.erlang' }] },\n            { token: 'constant.other.symbol.unquoted.erlang',\n                regex: '[a-z][a-zA-Z\\\\d@_]*' }],\n        '#behaviour-directive': [{ token: ['meta.directive.behaviour.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'keyword.control.directive.behaviour.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'entity.name.type.class.behaviour.definition.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' }],\n        '#binary': [{ token: 'punctuation.definition.binary.begin.erlang',\n                regex: '<<',\n                push: [{ token: 'punctuation.definition.binary.end.erlang',\n                        regex: '>>',\n                        next: 'pop' },\n                    { token: ['punctuation.separator.binary.erlang',\n                            'punctuation.separator.value-size.erlang'],\n                        regex: '(,)|(:)' },\n                    { include: '#internal-type-specifiers' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.binary.erlang' }] }],\n        '#character': [{ token: ['punctuation.definition.character.erlang',\n                    'punctuation.definition.escape.erlang',\n                    'constant.character.escape.erlang',\n                    'punctuation.definition.escape.erlang',\n                    'constant.character.escape.erlang',\n                    'constant.character.escape.erlang'],\n                regex: '(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n            { token: 'invalid.illegal.character.erlang',\n                regex: '\\\\$\\\\\\\\\\\\^?.?' },\n            { token: ['punctuation.definition.character.erlang',\n                    'constant.character.erlang'],\n                regex: '(\\\\$)(\\\\S)' },\n            { token: 'invalid.illegal.character.erlang', regex: '\\\\$.?' }],\n        '#comment': [{ token: 'punctuation.definition.comment.erlang',\n                regex: '%.*$',\n                push_: [{ token: 'comment.line.percentage.erlang',\n                        regex: '$',\n                        next: 'pop' },\n                    { defaultToken: 'comment.line.percentage.erlang' }] }],\n        '#define-directive': [{ token: ['meta.directive.define.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.define.erlang',\n                    'keyword.control.directive.define.erlang',\n                    'meta.directive.define.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.define.erlang',\n                    'entity.name.function.macro.definition.erlang',\n                    'meta.directive.define.erlang',\n                    'punctuation.separator.parameters.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.define.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.directive.define.erlang' }] },\n            { token: 'meta.directive.define.erlang',\n                regex: '(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.define.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { token: ['text',\n                            'punctuation.section.directive.begin.erlang',\n                            'text',\n                            'keyword.control.directive.define.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang',\n                            'text',\n                            'entity.name.function.macro.definition.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang'],\n                        regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',\n                        push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                                    'text',\n                                    'punctuation.separator.parameters.erlang'],\n                                regex: '(\\\\))(\\\\s*)(,)',\n                                next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { token: 'punctuation.separator.define.erlang',\n                        regex: '\\\\|\\\\||\\\\||:|;|,|\\\\.|->' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.directive.define.erlang' }] }],\n        '#directive': [{ token: ['meta.directive.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.erlang',\n                    'keyword.control.directive.erlang',\n                    'meta.directive.erlang',\n                    'punctuation.definition.parameters.begin.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\)?)(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.directive.erlang' }] },\n            { token: ['meta.directive.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.erlang',\n                    'keyword.control.directive.erlang',\n                    'meta.directive.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)' }],\n        '#everything-else': [{ include: '#comment' },\n            { include: '#record-usage' },\n            { include: '#macro-usage' },\n            { include: '#expression' },\n            { include: '#keyword' },\n            { include: '#textual-operator' },\n            { include: '#function-call' },\n            { include: '#tuple' },\n            { include: '#list' },\n            { include: '#binary' },\n            { include: '#parenthesized-expression' },\n            { include: '#character' },\n            { include: '#number' },\n            { include: '#atom' },\n            { include: '#string' },\n            { include: '#symbolic-operator' },\n            { include: '#variable' }],\n        '#expression': [{ token: 'keyword.control.if.erlang',\n                regex: '\\\\bif\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.if.erlang' }] },\n            { token: 'keyword.control.case.erlang',\n                regex: '\\\\bcase\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.case.erlang' }] },\n            { token: 'keyword.control.receive.erlang',\n                regex: '\\\\breceive\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.receive.erlang' }] },\n            { token: ['keyword.control.fun.erlang',\n                    'text',\n                    'entity.name.type.class.module.erlang',\n                    'text',\n                    'punctuation.separator.module-function.erlang',\n                    'text',\n                    'entity.name.function.erlang',\n                    'text',\n                    'punctuation.separator.function-arity.erlang'],\n                regex: '\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)' },\n            { token: 'keyword.control.fun.erlang',\n                regex: '\\\\bfun\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { token: 'text',\n                        regex: '(?=\\\\()',\n                        push: [{ token: 'punctuation.separator.clauses.erlang',\n                                regex: ';|(?=\\\\bend\\\\b)',\n                                next: 'pop' },\n                            { include: '#internal-function-parts' }] },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.fun.erlang' }] },\n            { token: 'keyword.control.try.erlang',\n                regex: '\\\\btry\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.try.erlang' }] },\n            { token: 'keyword.control.begin.erlang',\n                regex: '\\\\bbegin\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.begin.erlang' }] },\n            { token: 'keyword.control.query.erlang',\n                regex: '\\\\bquery\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.query.erlang' }] }],\n        '#function': [{ token: ['meta.function.erlang',\n                    'entity.name.function.definition.erlang',\n                    'meta.function.erlang'],\n                regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',\n                push: [{ token: 'punctuation.terminator.function.erlang',\n                        regex: '\\\\.',\n                        next: 'pop' },\n                    { token: ['text', 'entity.name.function.erlang', 'text'],\n                        regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()' },\n                    { token: 'text',\n                        regex: '(?=\\\\()',\n                        push: [{ token: 'punctuation.separator.clauses.erlang',\n                                regex: ';|(?=\\\\.)',\n                                next: 'pop' },\n                            { include: '#parenthesized-expression' },\n                            { include: '#internal-function-parts' }] },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.function.erlang' }] }],\n        '#function-call': [{ token: 'meta.function-call.erlang',\n                regex: '(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',\n                push: [{ token: 'punctuation.definition.parameters.end.erlang',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { token: ['entity.name.type.class.module.erlang',\n                            'text',\n                            'punctuation.separator.module-function.erlang',\n                            'text',\n                            'entity.name.function.guard.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang'],\n                        regex: '(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',\n                        push: [{ token: 'text', regex: '(?=\\\\))', next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { token: ['entity.name.type.class.module.erlang',\n                            'text',\n                            'punctuation.separator.module-function.erlang',\n                            'text',\n                            'entity.name.function.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang'],\n                        regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',\n                        push: [{ token: 'text', regex: '(?=\\\\))', next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { defaultToken: 'meta.function-call.erlang' }] }],\n        '#import-export-directive': [{ token: ['meta.directive.import.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.import.erlang',\n                    'keyword.control.directive.import.erlang',\n                    'meta.directive.import.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.import.erlang',\n                    'entity.name.type.class.module.erlang',\n                    'meta.directive.import.erlang',\n                    'punctuation.separator.parameters.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.import.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#internal-function-list' },\n                    { defaultToken: 'meta.directive.import.erlang' }] },\n            { token: ['meta.directive.export.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.export.erlang',\n                    'keyword.control.directive.export.erlang',\n                    'meta.directive.export.erlang',\n                    'punctuation.definition.parameters.begin.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.export.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#internal-function-list' },\n                    { defaultToken: 'meta.directive.export.erlang' }] }],\n        '#internal-expression-punctuation': [{ token: ['punctuation.separator.clause-head-body.erlang',\n                    'punctuation.separator.clauses.erlang',\n                    'punctuation.separator.expressions.erlang'],\n                regex: '(->)|(;)|(,)' }],\n        '#internal-function-list': [{ token: 'punctuation.definition.list.begin.erlang',\n                regex: '\\\\[',\n                push: [{ token: 'punctuation.definition.list.end.erlang',\n                        regex: '\\\\]',\n                        next: 'pop' },\n                    { token: ['entity.name.function.erlang',\n                            'text',\n                            'punctuation.separator.function-arity.erlang'],\n                        regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',\n                        push: [{ token: 'punctuation.separator.list.erlang',\n                                regex: ',|(?=\\\\])',\n                                next: 'pop' },\n                            { include: '#everything-else' }] },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.list.function.erlang' }] }],\n        '#internal-function-parts': [{ token: 'text',\n                regex: '(?=\\\\()',\n                push: [{ token: 'punctuation.separator.clause-head-body.erlang',\n                        regex: '->',\n                        next: 'pop' },\n                    { token: 'punctuation.definition.parameters.begin.erlang',\n                        regex: '\\\\(',\n                        push: [{ token: 'punctuation.definition.parameters.end.erlang',\n                                regex: '\\\\)',\n                                next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { token: 'punctuation.separator.guards.erlang', regex: ',|;' },\n                    { include: '#everything-else' }] },\n            { token: 'punctuation.separator.expressions.erlang',\n                regex: ',' },\n            { include: '#everything-else' }],\n        '#internal-record-body': [{ token: 'punctuation.definition.class.record.begin.erlang',\n                regex: '\\\\{',\n                push: [{ token: 'meta.structure.record.erlang',\n                        regex: '(?=\\\\})',\n                        next: 'pop' },\n                    { token: ['variable.other.field.erlang',\n                            'variable.language.omitted.field.erlang',\n                            'text',\n                            'keyword.operator.assignment.erlang'],\n                        regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',\n                        push: [{ token: 'punctuation.separator.class.record.erlang',\n                                regex: ',|(?=\\\\})',\n                                next: 'pop' },\n                            { include: '#everything-else' }] },\n                    { token: ['variable.other.field.erlang',\n                            'text',\n                            'punctuation.separator.class.record.erlang'],\n                        regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.record.erlang' }] }],\n        '#internal-type-specifiers': [{ token: 'punctuation.separator.value-type.erlang',\n                regex: '/',\n                push: [{ token: 'text', regex: '(?=,|:|>>)', next: 'pop' },\n                    { token: ['storage.type.erlang',\n                            'storage.modifier.signedness.erlang',\n                            'storage.modifier.endianness.erlang',\n                            'storage.modifier.unit.erlang',\n                            'punctuation.separator.type-specifiers.erlang'],\n                        regex: '(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)' }] }],\n        '#keyword': [{ token: 'keyword.control.erlang',\n                regex: '\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b' }],\n        '#list': [{ token: 'punctuation.definition.list.begin.erlang',\n                regex: '\\\\[',\n                push: [{ token: 'punctuation.definition.list.end.erlang',\n                        regex: '\\\\]',\n                        next: 'pop' },\n                    { token: 'punctuation.separator.list.erlang',\n                        regex: '\\\\||\\\\|\\\\||,' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.list.erlang' }] }],\n        '#macro-directive': [{ token: ['meta.directive.ifdef.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'keyword.control.directive.ifdef.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'entity.name.function.macro.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\n            { token: ['meta.directive.ifndef.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'keyword.control.directive.ifndef.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'entity.name.function.macro.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\n            { token: ['meta.directive.undef.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.undef.erlang',\n                    'keyword.control.directive.undef.erlang',\n                    'meta.directive.undef.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.undef.erlang',\n                    'entity.name.function.macro.erlang',\n                    'meta.directive.undef.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.undef.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' }],\n        '#macro-usage': [{ token: ['keyword.operator.macro.erlang',\n                    'meta.macro-usage.erlang',\n                    'entity.name.function.macro.erlang'],\n                regex: '(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)' }],\n        '#module-directive': [{ token: ['meta.directive.module.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.module.erlang',\n                    'keyword.control.directive.module.erlang',\n                    'meta.directive.module.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.module.erlang',\n                    'entity.name.type.class.module.definition.erlang',\n                    'meta.directive.module.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.module.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' }],\n        '#number': [{ token: 'text',\n                regex: '(?=\\\\d)',\n                push: [{ token: 'text', regex: '(?!\\\\d)', next: 'pop' },\n                    { token: ['constant.numeric.float.erlang',\n                            'punctuation.separator.integer-float.erlang',\n                            'constant.numeric.float.erlang',\n                            'punctuation.separator.float-exponent.erlang'],\n                        regex: '(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)' },\n                    { token: ['constant.numeric.integer.binary.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.binary.erlang'],\n                        regex: '(2)(#)([0-1]+)' },\n                    { token: ['constant.numeric.integer.base-3.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-3.erlang'],\n                        regex: '(3)(#)([0-2]+)' },\n                    { token: ['constant.numeric.integer.base-4.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-4.erlang'],\n                        regex: '(4)(#)([0-3]+)' },\n                    { token: ['constant.numeric.integer.base-5.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-5.erlang'],\n                        regex: '(5)(#)([0-4]+)' },\n                    { token: ['constant.numeric.integer.base-6.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-6.erlang'],\n                        regex: '(6)(#)([0-5]+)' },\n                    { token: ['constant.numeric.integer.base-7.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-7.erlang'],\n                        regex: '(7)(#)([0-6]+)' },\n                    { token: ['constant.numeric.integer.octal.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.octal.erlang'],\n                        regex: '(8)(#)([0-7]+)' },\n                    { token: ['constant.numeric.integer.base-9.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-9.erlang'],\n                        regex: '(9)(#)([0-8]+)' },\n                    { token: ['constant.numeric.integer.decimal.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.decimal.erlang'],\n                        regex: '(10)(#)(\\\\d+)' },\n                    { token: ['constant.numeric.integer.base-11.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-11.erlang'],\n                        regex: '(11)(#)([\\\\daA]+)' },\n                    { token: ['constant.numeric.integer.base-12.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-12.erlang'],\n                        regex: '(12)(#)([\\\\da-bA-B]+)' },\n                    { token: ['constant.numeric.integer.base-13.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-13.erlang'],\n                        regex: '(13)(#)([\\\\da-cA-C]+)' },\n                    { token: ['constant.numeric.integer.base-14.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-14.erlang'],\n                        regex: '(14)(#)([\\\\da-dA-D]+)' },\n                    { token: ['constant.numeric.integer.base-15.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-15.erlang'],\n                        regex: '(15)(#)([\\\\da-eA-E]+)' },\n                    { token: ['constant.numeric.integer.hexadecimal.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.hexadecimal.erlang'],\n                        regex: '(16)(#)([\\\\da-fA-F]+)' },\n                    { token: ['constant.numeric.integer.base-17.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-17.erlang'],\n                        regex: '(17)(#)([\\\\da-gA-G]+)' },\n                    { token: ['constant.numeric.integer.base-18.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-18.erlang'],\n                        regex: '(18)(#)([\\\\da-hA-H]+)' },\n                    { token: ['constant.numeric.integer.base-19.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-19.erlang'],\n                        regex: '(19)(#)([\\\\da-iA-I]+)' },\n                    { token: ['constant.numeric.integer.base-20.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-20.erlang'],\n                        regex: '(20)(#)([\\\\da-jA-J]+)' },\n                    { token: ['constant.numeric.integer.base-21.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-21.erlang'],\n                        regex: '(21)(#)([\\\\da-kA-K]+)' },\n                    { token: ['constant.numeric.integer.base-22.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-22.erlang'],\n                        regex: '(22)(#)([\\\\da-lA-L]+)' },\n                    { token: ['constant.numeric.integer.base-23.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-23.erlang'],\n                        regex: '(23)(#)([\\\\da-mA-M]+)' },\n                    { token: ['constant.numeric.integer.base-24.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-24.erlang'],\n                        regex: '(24)(#)([\\\\da-nA-N]+)' },\n                    { token: ['constant.numeric.integer.base-25.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-25.erlang'],\n                        regex: '(25)(#)([\\\\da-oA-O]+)' },\n                    { token: ['constant.numeric.integer.base-26.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-26.erlang'],\n                        regex: '(26)(#)([\\\\da-pA-P]+)' },\n                    { token: ['constant.numeric.integer.base-27.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-27.erlang'],\n                        regex: '(27)(#)([\\\\da-qA-Q]+)' },\n                    { token: ['constant.numeric.integer.base-28.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-28.erlang'],\n                        regex: '(28)(#)([\\\\da-rA-R]+)' },\n                    { token: ['constant.numeric.integer.base-29.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-29.erlang'],\n                        regex: '(29)(#)([\\\\da-sA-S]+)' },\n                    { token: ['constant.numeric.integer.base-30.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-30.erlang'],\n                        regex: '(30)(#)([\\\\da-tA-T]+)' },\n                    { token: ['constant.numeric.integer.base-31.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-31.erlang'],\n                        regex: '(31)(#)([\\\\da-uA-U]+)' },\n                    { token: ['constant.numeric.integer.base-32.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-32.erlang'],\n                        regex: '(32)(#)([\\\\da-vA-V]+)' },\n                    { token: ['constant.numeric.integer.base-33.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-33.erlang'],\n                        regex: '(33)(#)([\\\\da-wA-W]+)' },\n                    { token: ['constant.numeric.integer.base-34.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-34.erlang'],\n                        regex: '(34)(#)([\\\\da-xA-X]+)' },\n                    { token: ['constant.numeric.integer.base-35.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-35.erlang'],\n                        regex: '(35)(#)([\\\\da-yA-Y]+)' },\n                    { token: ['constant.numeric.integer.base-36.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-36.erlang'],\n                        regex: '(36)(#)([\\\\da-zA-Z]+)' },\n                    { token: 'invalid.illegal.integer.erlang',\n                        regex: '\\\\d+#[\\\\da-zA-Z]+' },\n                    { token: 'constant.numeric.integer.decimal.erlang',\n                        regex: '\\\\d+' }] }],\n        '#parenthesized-expression': [{ token: 'punctuation.section.expression.begin.erlang',\n                regex: '\\\\(',\n                push: [{ token: 'punctuation.section.expression.end.erlang',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.parenthesized' }] }],\n        '#record-directive': [{ token: ['meta.directive.record.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.record.erlang',\n                    'keyword.control.directive.import.erlang',\n                    'meta.directive.record.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.record.erlang',\n                    'entity.name.type.class.record.definition.erlang',\n                    'meta.directive.record.erlang',\n                    'punctuation.separator.parameters.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n                push: [{ token: ['punctuation.definition.class.record.end.erlang',\n                            'meta.directive.record.erlang',\n                            'punctuation.definition.parameters.end.erlang',\n                            'meta.directive.record.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#internal-record-body' },\n                    { defaultToken: 'meta.directive.record.erlang' }] }],\n        '#record-usage': [{ token: ['keyword.operator.record.erlang',\n                    'meta.record-usage.erlang',\n                    'entity.name.type.class.record.erlang',\n                    'meta.record-usage.erlang',\n                    'punctuation.separator.record-field.erlang',\n                    'meta.record-usage.erlang',\n                    'variable.other.field.erlang'],\n                regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')' },\n            { token: ['keyword.operator.record.erlang',\n                    'meta.record-usage.erlang',\n                    'entity.name.type.class.record.erlang'],\n                regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',\n                push: [{ token: 'punctuation.definition.class.record.end.erlang',\n                        regex: '\\\\}',\n                        next: 'pop' },\n                    { include: '#internal-record-body' },\n                    { defaultToken: 'meta.record-usage.erlang' }] }],\n        '#string': [{ token: 'punctuation.definition.string.begin.erlang',\n                regex: '\"',\n                push: [{ token: 'punctuation.definition.string.end.erlang',\n                        regex: '\"',\n                        next: 'pop' },\n                    { token: ['punctuation.definition.escape.erlang',\n                            'constant.character.escape.erlang',\n                            'punctuation.definition.escape.erlang',\n                            'constant.character.escape.erlang',\n                            'constant.character.escape.erlang'],\n                        regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n                    { token: 'invalid.illegal.string.erlang', regex: '\\\\\\\\\\\\^?.?' },\n                    { token: ['punctuation.definition.erlang',\n                            'punctuation.separator.erlang',\n                            'constant.other.erlang',\n                            'punctuation.separator.erlang',\n                            'punctuation.separator.erlang',\n                            'constant.other.erlang',\n                            'punctuation.separator.erlang',\n                            'punctuation.separator.erlang',\n                            'punctuation.separator.erlang',\n                            'constant.other.erlang',\n                            'constant.other.erlang'],\n                        regex: '(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])' },\n                    { token: ['punctuation.definition.erlang',\n                            'punctuation.separator.erlang',\n                            'constant.other.erlang',\n                            'constant.other.erlang'],\n                        regex: '(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])' },\n                    { token: 'invalid.illegal.string.erlang', regex: '~.?' },\n                    { defaultToken: 'string.quoted.double.erlang' }] }],\n        '#symbolic-operator': [{ token: 'keyword.operator.symbolic.erlang',\n                regex: '\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::' }],\n        '#textual-operator': [{ token: 'keyword.operator.textual.erlang',\n                regex: '\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b' }],\n        '#tuple': [{ token: 'punctuation.definition.tuple.begin.erlang',\n                regex: '\\\\{',\n                push: [{ token: 'punctuation.definition.tuple.end.erlang',\n                        regex: '\\\\}',\n                        next: 'pop' },\n                    { token: 'punctuation.separator.tuple.erlang', regex: ',' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.tuple.erlang' }] }],\n        '#variable': [{ token: ['variable.other.erlang', 'variable.language.omitted.erlang'],\n                regex: '(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)' }] };\n    this.normalizeRules();\n};\nErlangHighlightRules.metaData = { comment: 'The recognition of function definitions and compiler directives (such as module, record and macro definitions) requires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',\n    fileTypes: ['erl', 'hrl'],\n    keyEquivalent: '^~E',\n    name: 'Erlang',\n    scopeName: 'source.erlang' };\noop.inherits(ErlangHighlightRules, TextHighlightRules);\nexports.ErlangHighlightRules = ErlangHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/erlang\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/erlang_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ErlangHighlightRules = require(\"./erlang_highlight_rules\").ErlangHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = ErlangHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/erlang\";\n    this.snippetFileId = \"ace/snippets/erlang\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/erlang\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}