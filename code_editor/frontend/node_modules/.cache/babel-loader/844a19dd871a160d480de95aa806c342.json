{"ast":null,"code":"ace.define(\"ace/mode/nasal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* ***** BEGIN LICENSE BLOCK *****\n  * Distributed under the BSD license:\n  *\n  * Copyright (c) 2012, Ajax.org B.V.\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions are met:\n  *     * Redistributions of source code must retain the above copyright\n  *       notice, this list of conditions and the following disclaimer.\n  *     * Redistributions in binary form must reproduce the above copyright\n  *       notice, this list of conditions and the following disclaimer in the\n  *       documentation and/or other materials provided with the distribution.\n  *     * Neither the name of Ajax.org B.V. nor the\n  *       names of its contributors may be used to endorse or promote products\n  *       derived from this software without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  *\n  * ***** END LICENSE BLOCK ***** */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var NasalHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: \"constant.other.allcaps.nasal\",\n        regex: /\\b[[:upper:]_][[:upper:][:digit:]_]*\\b(?![\\.\\(\\'\\\"])/,\n        comment: \"Match identifiers in ALL_CAPS as constants, except when followed by `.`, `(`, `'`, or `\\\"`.\"\n      }, {\n        todo: {\n          token: [\"support.class.nasal\", \"meta.function.nasal\", \"entity.name.function.nasal\", \"meta.function.nasal\", \"keyword.operator.nasal\", \"meta.function.nasal\", \"storage.type.function.nasal\", \"meta.function.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /([a-zA-Z_?.$][\\w?.$]*)(\\.)([a-zA-Z_?.$][\\w?.$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.nasal\"\n          }]\n        },\n        comment: \"match stuff like: Sound.play = func() { … }\"\n      }, {\n        todo: {\n          token: [\"entity.name.function.nasal\", \"meta.function.nasal\", \"keyword.operator.nasal\", \"meta.function.nasal\", \"storage.type.function.nasal\", \"meta.function.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.nasal\"\n          }]\n        },\n        comment: \"match stuff like: play = func() { … }\"\n      }, {\n        todo: {\n          token: [\"entity.name.function.nasal\", \"meta.function.nasal\", \"keyword.operator.nasal\", \"meta.function.nasal\", \"storage.type.function.nasal\", \"meta.function.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*\\(\\s*)(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.nasal\"\n          }]\n        },\n        comment: \"match stuff like: play = (func() { … }\"\n      }, {\n        todo: {\n          token: [\"entity.name.function.nasal\", \"meta.function.hash.nasal\", \"storage.type.function.nasal\", \"meta.function.hash.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /\\b([a-zA-Z_?.$][\\w?.$]*)(\\s*:\\s*\\b)(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.hash.nasal\"\n          }]\n        },\n        comment: \"match stuff like: foobar: func() { … }\"\n      }, {\n        todo: {\n          token: [\"storage.type.function.nasal\", \"meta.function.nasal\", \"punctuation.definition.parameters.begin.nasal\"],\n          regex: /\\b(func)(\\s*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.parameters.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            token: \"variable.parameter.nasal\",\n            regex: /\\w/\n          }, {\n            defaultToken: \"meta.function.nasal\"\n          }]\n        },\n        comment: \"match stuff like: func() { … }\"\n      }, {\n        token: [\"keyword.operator.new.nasal\", \"meta.class.instance.constructor\", \"entity.name.type.instance.nasal\"],\n        regex: /(new)(\\s+)(\\w+(?:\\.\\w*)?)/\n      }, {\n        token: \"keyword.control.nasal\",\n        regex: /\\b(?:if|else|elsif|while|for|foreach|forindex)\\b/\n      }, {\n        token: \"keyword.control.nasal\",\n        regex: /\\b(?:break(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|continue(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|[A-Z]{2,16}(?=\\s*;(?:[^\\)#;]*?;){0,2}[^\\)#;]*?\\)))\\b/\n      }, {\n        token: \"keyword.operator.nasal\",\n        regex: /!|\\*|\\-|\\+|~|\\/|==|=|!=|<=|>=|<|>|!|\\?|\\:|\\*=|\\/=|\\+=|\\-=|~=|\\.\\.\\.|\\b(?:and|or)\\b/\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:me|arg|parents|obj)\\b/\n      }, {\n        token: \"storage.type.nasal\",\n        regex: /\\b(?:return|var)\\b/\n      }, {\n        token: \"constant.language.nil.nasal\",\n        regex: /\\bnil\\b/\n      }, {\n        token: \"punctuation.definition.string.begin.nasal\",\n        regex: /'/,\n        push: [{\n          token: \"punctuation.definition.string.end.nasal\",\n          regex: /'/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.nasal\",\n          regex: /\\\\'/\n        }, {\n          defaultToken: \"string.quoted.single.nasal\"\n        }],\n        comment: \"Single quoted strings\"\n      }, {\n        token: \"punctuation.definition.string.begin.nasal\",\n        regex: /\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.nasal\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.nasal\",\n          regex: /\\\\(?:x[\\da-fA-F]{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|r|n|t|\\\\|\")/\n        }, {\n          token: \"constant.character.escape.nasal\",\n          regex: /%(?:%|(?:\\d+\\$)?[+-]?(?:[ 0]|'.{1})?-?\\d*(?:\\.\\d+)?[bcdeEufFgGosxX])/\n        }, {\n          defaultToken: \"string.quoted.double.nasal\"\n        }],\n        comment: \"Double quoted strings\"\n      }, {\n        token: [\"punctuation.definition.string.begin.nasal\", \"string.other\", \"punctuation.definition.string.end.nasal\"],\n        regex: /(`)(.)(`)/,\n        comment: \"Single-byte ASCII character constants\"\n      }, {\n        token: [\"punctuation.definition.comment.nasal\", \"comment.line.hash.nasal\"],\n        regex: /(#)(.*$)/,\n        comment: \"Comments\"\n      }, {\n        token: \"constant.numeric.nasal\",\n        regex: /(?:(?:\\b[0-9]+)?\\.)?\\b[0-9]+(?:[eE][-+]?[0-9]+)?\\b/,\n        comment: \"Integers, floats, and scientific format\"\n      }, {\n        token: \"constant.numeric.nasal\",\n        regex: /0[x|X][0-9a-fA-F]+/,\n        comment: \"Hex codes\"\n      }, {\n        token: \"punctuation.terminator.statement.nasal\",\n        regex: /\\;/\n      }, {\n        token: [\"punctuation.section.scope.begin.nasal\", \"punctuation.section.scope.end.nasal\"],\n        regex: /(\\[)(\\])/\n      }, {\n        todo: {\n          token: \"punctuation.section.scope.begin.nasal\",\n          regex: /\\{/,\n          push: [{\n            token: \"punctuation.section.scope.end.nasal\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }]\n        }\n      }, {\n        todo: {\n          token: \"punctuation.section.scope.begin.nasal\",\n          regex: /\\(/,\n          push: [{\n            token: \"punctuation.section.scope.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }]\n        }\n      }, {\n        token: \"invalid.illegal\",\n        regex: /%|\\$|@|&|\\^|\\||\\\\|`/,\n        comment: \"Illegal characters\"\n      }, {\n        todo: {\n          comment: \"TODO: Symbols in hash keys\"\n        },\n        comment: \"TODO: Symbols in hash keys\"\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:append|bind|call|caller|chr|closure|cmp|compile|contains|delete|die|find|ghosttype|id|int|keys|left|num|pop|right|setsize|size|sort|split|sprintf|streq|substr|subvec|typeof|readline)\\b/,\n        comment: \"Core functions\"\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:abort|abs|aircraftToCart|addcommand|airportinfo|airwaysRoute|assert|carttogeod|cmdarg|courseAndDistance|createDiscontinuity|createViaTo|createWP|createWPFrom|defined|directory|fgcommand|findAirportsByICAO|findAirportsWithinRange|findFixesByID|findNavaidByFrequency|findNavaidsByFrequency|findNavaidsByID|findNavaidsWithinRange|finddata|flightplan|geodinfo|geodtocart|get_cart_ground_intersection|getprop|greatCircleMove|interpolate|isa|logprint|magvar|maketimer|start|stop|restart|maketimestamp|md5|navinfo|parse_markdown|parsexml|print|printf|printlog|rand|registerFlightPlanDelegate|removecommand|removelistener|resolvepath|setlistener|_setlistener|setprop|srand|systime|thisfunc|tileIndex|tilePath|values)\\b/,\n        comment: \"FG ext core functions\"\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:singleShot|isRunning|simulatedTime)\\b/,\n        comment: \"FG ext core functions\"\n      }, {\n        token: \"constant.language.nasal\",\n        regex: /\\b(?:D2R|FPS2KT|FT2M|GAL2L|IN2M|KG2LB|KT2FPS|KT2MPS|LG2GAL|LB2KG|M2FT|M2IN|M2NM|MPS2KT|NM2M|R2D)\\b/,\n        comment: \"FG ext core constants\"\n      }, {\n        token: \"support.function.nasal\",\n        regex: /\\b(?:addChild|addChildren|alias|clearValue|equals|getAliasTarget|getAttribute|getBoolValue|getChild|getChildren|getIndex|getName|getNode|getParent|getPath|getType|getValue|getValues|initNode|remove|removeAllChildren|removeChild|removeChildren|setAttribute|setBoolValue|setDoubleValue|setIntValue|setValue|setValues|unalias|compileCondition|condition|copy|dump|getNode|nodeList|runBinding|setAll|wrap|wrapNode)\\b/,\n        comment: \"FG func props\"\n      }, {\n        token: \"support.class.nasal\",\n        regex: /\\bNode\\b/,\n        comment: \"FG node class\"\n      }, {\n        token: \"variable.language.nasal\",\n        regex: /\\b(?:props|globals)\\b/,\n        comment: \"FG func props variables\"\n      }, {\n        todo: {\n          token: [\"support.function.nasal\", \"punctuation.definition.arguments.begin.nasal\"],\n          regex: /\\b([a-zA-Z_?$][\\w?$]*)(\\()/,\n          push: [{\n            token: \"punctuation.definition.arguments.end.nasal\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }, {\n            defaultToken: \"meta.function-call.nasal\"\n          }]\n        },\n        comment: \"function call\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  NasalHighlightRules.metaData = {\n    fileTypes: [\"nas\"],\n    name: \"Nasal\",\n    scopeName: \"source.nasal\"\n  };\n  oop.inherits(NasalHighlightRules, TextHighlightRules);\n  exports.NasalHighlightRules = NasalHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/nasal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/nasal_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /* ***** BEGIN LICENSE BLOCK *****\n  * Distributed under the BSD license:\n  *\n  * Copyright (c) 2012, Ajax.org B.V.\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions are met:\n  *     * Redistributions of source code must retain the above copyright\n  *       notice, this list of conditions and the following disclaimer.\n  *     * Redistributions in binary form must reproduce the above copyright\n  *       notice, this list of conditions and the following disclaimer in the\n  *       documentation and/or other materials provided with the distribution.\n  *     * Neither the name of Ajax.org B.V. nor the\n  *       names of its contributors may be used to endorse or promote products\n  *       derived from this software without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  *\n  * ***** END LICENSE BLOCK ***** */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var NasalHighlightRules = require(\"./nasal_highlight_rules\").NasalHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = NasalHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/nasal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/nasal\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","NasalHighlightRules","$rules","start","token","regex","comment","todo","push","next","include","defaultToken","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$id"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-nasal.js"],"sourcesContent":["ace.define(\"ace/mode/nasal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* ***** BEGIN LICENSE BLOCK *****\n * Distributed under the BSD license:\n *\n * Copyright (c) 2012, Ajax.org B.V.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of Ajax.org B.V. nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * ***** END LICENSE BLOCK ***** */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar NasalHighlightRules = function () {\n    this.$rules = {\n        start: [{\n                token: \"constant.other.allcaps.nasal\",\n                regex: /\\b[[:upper:]_][[:upper:][:digit:]_]*\\b(?![\\.\\(\\'\\\"])/,\n                comment: \"Match identifiers in ALL_CAPS as constants, except when followed by `.`, `(`, `'`, or `\\\"`.\"\n            }, {\n                todo: {\n                    token: [\n                        \"support.class.nasal\",\n                        \"meta.function.nasal\",\n                        \"entity.name.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"keyword.operator.nasal\",\n                        \"meta.function.nasal\",\n                        \"storage.type.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /([a-zA-Z_?.$][\\w?.$]*)(\\.)([a-zA-Z_?.$][\\w?.$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: Sound.play = func() { … }\"\n            }, {\n                todo: {\n                    token: [\n                        \"entity.name.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"keyword.operator.nasal\",\n                        \"meta.function.nasal\",\n                        \"storage.type.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: play = func() { … }\"\n            }, {\n                todo: {\n                    token: [\n                        \"entity.name.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"keyword.operator.nasal\",\n                        \"meta.function.nasal\",\n                        \"storage.type.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*\\(\\s*)(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: play = (func() { … }\"\n            }, {\n                todo: {\n                    token: [\n                        \"entity.name.function.nasal\",\n                        \"meta.function.hash.nasal\",\n                        \"storage.type.function.nasal\",\n                        \"meta.function.hash.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /\\b([a-zA-Z_?.$][\\w?.$]*)(\\s*:\\s*\\b)(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.hash.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: foobar: func() { … }\"\n            }, {\n                todo: {\n                    token: [\n                        \"storage.type.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /\\b(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: func() { … }\"\n            }, {\n                token: [\n                    \"keyword.operator.new.nasal\",\n                    \"meta.class.instance.constructor\",\n                    \"entity.name.type.instance.nasal\"\n                ],\n                regex: /(new)(\\s+)(\\w+(?:\\.\\w*)?)/\n            }, {\n                token: \"keyword.control.nasal\",\n                regex: /\\b(?:if|else|elsif|while|for|foreach|forindex)\\b/\n            }, {\n                token: \"keyword.control.nasal\",\n                regex: /\\b(?:break(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|continue(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|[A-Z]{2,16}(?=\\s*;(?:[^\\)#;]*?;){0,2}[^\\)#;]*?\\)))\\b/\n            }, {\n                token: \"keyword.operator.nasal\",\n                regex: /!|\\*|\\-|\\+|~|\\/|==|=|!=|<=|>=|<|>|!|\\?|\\:|\\*=|\\/=|\\+=|\\-=|~=|\\.\\.\\.|\\b(?:and|or)\\b/\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:me|arg|parents|obj)\\b/\n            }, {\n                token: \"storage.type.nasal\",\n                regex: /\\b(?:return|var)\\b/\n            }, {\n                token: \"constant.language.nil.nasal\",\n                regex: /\\bnil\\b/\n            }, {\n                token: \"punctuation.definition.string.begin.nasal\",\n                regex: /'/,\n                push: [{\n                        token: \"punctuation.definition.string.end.nasal\",\n                        regex: /'/,\n                        next: \"pop\"\n                    }, {\n                        token: \"constant.character.escape.nasal\",\n                        regex: /\\\\'/\n                    }, {\n                        defaultToken: \"string.quoted.single.nasal\"\n                    }],\n                comment: \"Single quoted strings\"\n            }, {\n                token: \"punctuation.definition.string.begin.nasal\",\n                regex: /\"/,\n                push: [{\n                        token: \"punctuation.definition.string.end.nasal\",\n                        regex: /\"/,\n                        next: \"pop\"\n                    }, {\n                        token: \"constant.character.escape.nasal\",\n                        regex: /\\\\(?:x[\\da-fA-F]{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|r|n|t|\\\\|\")/\n                    }, {\n                        token: \"constant.character.escape.nasal\",\n                        regex: /%(?:%|(?:\\d+\\$)?[+-]?(?:[ 0]|'.{1})?-?\\d*(?:\\.\\d+)?[bcdeEufFgGosxX])/\n                    }, {\n                        defaultToken: \"string.quoted.double.nasal\"\n                    }],\n                comment: \"Double quoted strings\"\n            }, {\n                token: [\n                    \"punctuation.definition.string.begin.nasal\",\n                    \"string.other\",\n                    \"punctuation.definition.string.end.nasal\"\n                ],\n                regex: /(`)(.)(`)/,\n                comment: \"Single-byte ASCII character constants\"\n            }, {\n                token: [\n                    \"punctuation.definition.comment.nasal\",\n                    \"comment.line.hash.nasal\"\n                ],\n                regex: /(#)(.*$)/,\n                comment: \"Comments\"\n            }, {\n                token: \"constant.numeric.nasal\",\n                regex: /(?:(?:\\b[0-9]+)?\\.)?\\b[0-9]+(?:[eE][-+]?[0-9]+)?\\b/,\n                comment: \"Integers, floats, and scientific format\"\n            }, {\n                token: \"constant.numeric.nasal\",\n                regex: /0[x|X][0-9a-fA-F]+/,\n                comment: \"Hex codes\"\n            }, {\n                token: \"punctuation.terminator.statement.nasal\",\n                regex: /\\;/\n            }, {\n                token: [\n                    \"punctuation.section.scope.begin.nasal\",\n                    \"punctuation.section.scope.end.nasal\"\n                ],\n                regex: /(\\[)(\\])/\n            }, {\n                todo: {\n                    token: \"punctuation.section.scope.begin.nasal\",\n                    regex: /\\{/,\n                    push: [{\n                            token: \"punctuation.section.scope.end.nasal\",\n                            regex: /\\}/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }]\n                }\n            }, {\n                todo: {\n                    token: \"punctuation.section.scope.begin.nasal\",\n                    regex: /\\(/,\n                    push: [{\n                            token: \"punctuation.section.scope.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }]\n                }\n            }, {\n                token: \"invalid.illegal\",\n                regex: /%|\\$|@|&|\\^|\\||\\\\|`/,\n                comment: \"Illegal characters\"\n            }, {\n                todo: {\n                    comment: \"TODO: Symbols in hash keys\"\n                },\n                comment: \"TODO: Symbols in hash keys\"\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:append|bind|call|caller|chr|closure|cmp|compile|contains|delete|die|find|ghosttype|id|int|keys|left|num|pop|right|setsize|size|sort|split|sprintf|streq|substr|subvec|typeof|readline)\\b/,\n                comment: \"Core functions\"\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:abort|abs|aircraftToCart|addcommand|airportinfo|airwaysRoute|assert|carttogeod|cmdarg|courseAndDistance|createDiscontinuity|createViaTo|createWP|createWPFrom|defined|directory|fgcommand|findAirportsByICAO|findAirportsWithinRange|findFixesByID|findNavaidByFrequency|findNavaidsByFrequency|findNavaidsByID|findNavaidsWithinRange|finddata|flightplan|geodinfo|geodtocart|get_cart_ground_intersection|getprop|greatCircleMove|interpolate|isa|logprint|magvar|maketimer|start|stop|restart|maketimestamp|md5|navinfo|parse_markdown|parsexml|print|printf|printlog|rand|registerFlightPlanDelegate|removecommand|removelistener|resolvepath|setlistener|_setlistener|setprop|srand|systime|thisfunc|tileIndex|tilePath|values)\\b/,\n                comment: \"FG ext core functions\"\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:singleShot|isRunning|simulatedTime)\\b/,\n                comment: \"FG ext core functions\"\n            }, {\n                token: \"constant.language.nasal\",\n                regex: /\\b(?:D2R|FPS2KT|FT2M|GAL2L|IN2M|KG2LB|KT2FPS|KT2MPS|LG2GAL|LB2KG|M2FT|M2IN|M2NM|MPS2KT|NM2M|R2D)\\b/,\n                comment: \"FG ext core constants\"\n            }, {\n                token: \"support.function.nasal\",\n                regex: /\\b(?:addChild|addChildren|alias|clearValue|equals|getAliasTarget|getAttribute|getBoolValue|getChild|getChildren|getIndex|getName|getNode|getParent|getPath|getType|getValue|getValues|initNode|remove|removeAllChildren|removeChild|removeChildren|setAttribute|setBoolValue|setDoubleValue|setIntValue|setValue|setValues|unalias|compileCondition|condition|copy|dump|getNode|nodeList|runBinding|setAll|wrap|wrapNode)\\b/,\n                comment: \"FG func props\"\n            }, {\n                token: \"support.class.nasal\",\n                regex: /\\bNode\\b/,\n                comment: \"FG node class\"\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:props|globals)\\b/,\n                comment: \"FG func props variables\"\n            }, {\n                todo: {\n                    token: [\n                        \"support.function.nasal\",\n                        \"punctuation.definition.arguments.begin.nasal\"\n                    ],\n                    regex: /\\b([a-zA-Z_?$][\\w?$]*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.arguments.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            defaultToken: \"meta.function-call.nasal\"\n                        }]\n                },\n                comment: \"function call\"\n            }]\n    };\n    this.normalizeRules();\n};\nNasalHighlightRules.metaData = {\n    fileTypes: [\"nas\"],\n    name: \"Nasal\",\n    scopeName: \"source.nasal\"\n};\noop.inherits(NasalHighlightRules, TextHighlightRules);\nexports.NasalHighlightRules = NasalHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/nasal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/nasal_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/* ***** BEGIN LICENSE BLOCK *****\n * Distributed under the BSD license:\n *\n * Copyright (c) 2012, Ajax.org B.V.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of Ajax.org B.V. nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * ***** END LICENSE BLOCK ***** */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar NasalHighlightRules = require(\"./nasal_highlight_rules\").NasalHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = NasalHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.$id = \"ace/mode/nasal\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/nasal\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}