{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array, joinUint8Arrays, toUint8ArrayIterator, toUint8ArrayAsyncIterator } from '../util/buffer';\n/** @ignore */\nexport default {\n  fromIterable(source) {\n    return pump(fromIterable(source));\n  },\n  fromAsyncIterable(source) {\n    return pump(fromAsyncIterable(source));\n  },\n  fromDOMStream(source) {\n    return pump(fromDOMStream(source));\n  },\n  fromNodeStream(stream) {\n    return pump(fromNodeStream(stream));\n  },\n  // @ts-ignore\n  toDOMStream(source, options) {\n    throw new Error(`\"toDOMStream\" not available in this environment`);\n  },\n  // @ts-ignore\n  toNodeStream(source, options) {\n    throw new Error(`\"toNodeStream\" not available in this environment`);\n  }\n};\n/** @ignore */\nconst pump = iterator => {\n  iterator.next();\n  return iterator;\n};\n/** @ignore */\nfunction* fromIterable(source) {\n  let done,\n    threw = false;\n  let buffers = [],\n    buffer;\n  let cmd,\n    size,\n    bufferLength = 0;\n  function byteRange() {\n    if (cmd === 'peek') {\n      return joinUint8Arrays(buffers, size)[0];\n    }\n    [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n    return buffer;\n  }\n  // Yield so the caller can inject the read command before creating the source Iterator\n  ({\n    cmd,\n    size\n  } = yield null);\n  // initialize the iterator\n  let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n  try {\n    do {\n      // read the next value\n      ({\n        done,\n        value: buffer\n      } = isNaN(size - bufferLength) ? it.next(undefined) : it.next(size - bufferLength));\n      // if chunk is not null or empty, push it onto the queue\n      if (!done && buffer.byteLength > 0) {\n        buffers.push(buffer);\n        bufferLength += buffer.byteLength;\n      }\n      // If we have enough bytes in our buffer, yield chunks until we don't\n      if (done || size <= bufferLength) {\n        do {\n          ({\n            cmd,\n            size\n          } = yield byteRange());\n        } while (size < bufferLength);\n      }\n    } while (!done);\n  } catch (e) {\n    (threw = true) && typeof it.throw === 'function' && it.throw(e);\n  } finally {\n    threw === false && typeof it.return === 'function' && it.return();\n  }\n}\n/** @ignore */\nasync function* fromAsyncIterable(source) {\n  let done,\n    threw = false;\n  let buffers = [],\n    buffer;\n  let cmd,\n    size,\n    bufferLength = 0;\n  function byteRange() {\n    if (cmd === 'peek') {\n      return joinUint8Arrays(buffers, size)[0];\n    }\n    [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n    return buffer;\n  }\n  // Yield so the caller can inject the read command before creating the source AsyncIterator\n  ({\n    cmd,\n    size\n  } = yield null);\n  // initialize the iterator\n  let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n  try {\n    do {\n      // read the next value\n      ({\n        done,\n        value: buffer\n      } = isNaN(size - bufferLength) ? await it.next(undefined) : await it.next(size - bufferLength));\n      // if chunk is not null or empty, push it onto the queue\n      if (!done && buffer.byteLength > 0) {\n        buffers.push(buffer);\n        bufferLength += buffer.byteLength;\n      }\n      // If we have enough bytes in our buffer, yield chunks until we don't\n      if (done || size <= bufferLength) {\n        do {\n          ({\n            cmd,\n            size\n          } = yield byteRange());\n        } while (size < bufferLength);\n      }\n    } while (!done);\n  } catch (e) {\n    (threw = true) && typeof it.throw === 'function' && (await it.throw(e));\n  } finally {\n    threw === false && typeof it.return === 'function' && (await it.return());\n  }\n}\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream(source) {\n  let done = false,\n    threw = false;\n  let buffers = [],\n    buffer;\n  let cmd,\n    size,\n    bufferLength = 0;\n  function byteRange() {\n    if (cmd === 'peek') {\n      return joinUint8Arrays(buffers, size)[0];\n    }\n    [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n    return buffer;\n  }\n  // Yield so the caller can inject the read command before we establish the ReadableStream lock\n  ({\n    cmd,\n    size\n  } = yield null);\n  // initialize the reader and lock the stream\n  let it = new AdaptiveByteReader(source);\n  try {\n    do {\n      // read the next value\n      ({\n        done,\n        value: buffer\n      } = isNaN(size - bufferLength) ? await it['read'](undefined) : await it['read'](size - bufferLength));\n      // if chunk is not null or empty, push it onto the queue\n      if (!done && buffer.byteLength > 0) {\n        buffers.push(toUint8Array(buffer));\n        bufferLength += buffer.byteLength;\n      }\n      // If we have enough bytes in our buffer, yield chunks until we don't\n      if (done || size <= bufferLength) {\n        do {\n          ({\n            cmd,\n            size\n          } = yield byteRange());\n        } while (size < bufferLength);\n      }\n    } while (!done);\n  } catch (e) {\n    (threw = true) && (await it['cancel'](e));\n  } finally {\n    threw === false ? await it['cancel']() : source['locked'] && it.releaseLock();\n  }\n}\n/** @ignore */\nclass AdaptiveByteReader {\n  constructor(source) {\n    this.source = source;\n    this.byobReader = null;\n    this.defaultReader = null;\n    try {\n      this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n    } catch (e) {\n      this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n    }\n  }\n  get closed() {\n    return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n  }\n  releaseLock() {\n    if (this.reader) {\n      this.reader.releaseLock();\n    }\n    this.reader = this.byobReader = this.defaultReader = null;\n  }\n  async cancel(reason) {\n    const {\n      reader,\n      source\n    } = this;\n    reader && (await reader['cancel'](reason).catch(() => {}));\n    source && source['locked'] && this.releaseLock();\n  }\n  async read(size) {\n    if (size === 0) {\n      return {\n        done: this.reader == null,\n        value: new Uint8Array(0)\n      };\n    }\n    const result = !this.supportsBYOB || typeof size !== 'number' ? await this.getDefaultReader().read() : await this.readFromBYOBReader(size);\n    !result.done && (result.value = toUint8Array(result));\n    return result;\n  }\n  getDefaultReader() {\n    if (this.byobReader) {\n      this.releaseLock();\n    }\n    if (!this.defaultReader) {\n      this.defaultReader = this.source['getReader']();\n      // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n      // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n      // about why these errors are raised, but I'm sure there's some important spec reason that\n      // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n      // only solution in this case :/\n      this.defaultReader['closed'].catch(() => {});\n    }\n    return this.reader = this.defaultReader;\n  }\n  getBYOBReader() {\n    if (this.defaultReader) {\n      this.releaseLock();\n    }\n    if (!this.byobReader) {\n      this.byobReader = this.source['getReader']({\n        mode: 'byob'\n      });\n      // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n      // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n      // about why these errors are raised, but I'm sure there's some important spec reason that\n      // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n      // only solution in this case :/\n      this.byobReader['closed'].catch(() => {});\n    }\n    return this.reader = this.byobReader;\n  }\n  // This strategy plucked from the example in the streams spec:\n  // https://streams.spec.whatwg.org/#example-manual-read-bytes\n  async readFromBYOBReader(size) {\n    return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n  }\n}\n/** @ignore */\nasync function readInto(reader, buffer, offset, size) {\n  if (offset >= size) {\n    return {\n      done: false,\n      value: new Uint8Array(buffer, 0, size)\n    };\n  }\n  const {\n    done,\n    value\n  } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n  if ((offset += value.byteLength) < size && !done) {\n    return await readInto(reader, value.buffer, offset, size);\n  }\n  return {\n    done,\n    value: new Uint8Array(value.buffer, 0, offset)\n  };\n}\n/** @ignore */\nconst onEvent = (stream, event) => {\n  let handler = _ => resolve([event, _]);\n  let resolve;\n  return [event, handler, new Promise(r => (resolve = r) && stream['once'](event, handler))];\n};\n/** @ignore */\nasync function* fromNodeStream(stream) {\n  let events = [];\n  let event = 'error';\n  let done = false,\n    err = null;\n  let cmd,\n    size,\n    bufferLength = 0;\n  let buffers = [],\n    buffer;\n  function byteRange() {\n    if (cmd === 'peek') {\n      return joinUint8Arrays(buffers, size)[0];\n    }\n    [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n    return buffer;\n  }\n  // Yield so the caller can inject the read command before we\n  // add the listener for the source stream's 'readable' event.\n  ({\n    cmd,\n    size\n  } = yield null);\n  // ignore stdin if it's a TTY\n  if (stream['isTTY']) {\n    return yield new Uint8Array(0);\n  }\n  try {\n    // initialize the stream event handlers\n    events[0] = onEvent(stream, 'end');\n    events[1] = onEvent(stream, 'error');\n    do {\n      events[2] = onEvent(stream, 'readable');\n      // wait on the first message event from the stream\n      [event, err] = await Promise.race(events.map(x => x[2]));\n      // if the stream emitted an Error, rethrow it\n      if (event === 'error') {\n        break;\n      }\n      if (!(done = event === 'end')) {\n        // If the size is NaN, request to read everything in the stream's internal buffer\n        if (!isFinite(size - bufferLength)) {\n          buffer = toUint8Array(stream['read'](undefined));\n        } else {\n          buffer = toUint8Array(stream['read'](size - bufferLength));\n          // If the byteLength is 0, then the requested amount is more than the stream has\n          // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n          // continue emitting readable events, so request to read everything the stream\n          // has in its internal buffer right now.\n          if (buffer.byteLength < size - bufferLength) {\n            buffer = toUint8Array(stream['read'](undefined));\n          }\n        }\n        // if chunk is not null or empty, push it onto the queue\n        if (buffer.byteLength > 0) {\n          buffers.push(buffer);\n          bufferLength += buffer.byteLength;\n        }\n      }\n      // If we have enough bytes in our buffer, yield chunks until we don't\n      if (done || size <= bufferLength) {\n        do {\n          ({\n            cmd,\n            size\n          } = yield byteRange());\n        } while (size < bufferLength);\n      }\n    } while (!done);\n  } finally {\n    await cleanup(events, event === 'error' ? err : null);\n  }\n  function cleanup(events, err) {\n    buffer = buffers = null;\n    return new Promise(async (resolve, reject) => {\n      for (const [evt, fn] of events) {\n        stream['off'](evt, fn);\n      }\n      try {\n        // Some stream implementations don't call the destroy callback,\n        // because it's really a node-internal API. Just calling `destroy`\n        // here should be enough to conform to the ReadableStream contract\n        const destroy = stream['destroy'];\n        destroy && destroy.call(stream, err);\n        err = undefined;\n      } catch (e) {\n        err = e || err;\n      } finally {\n        err != null ? reject(err) : resolve();\n      }\n    });\n  }\n}","map":{"version":3,"names":["toUint8Array","joinUint8Arrays","toUint8ArrayIterator","toUint8ArrayAsyncIterator","fromIterable","source","pump","fromAsyncIterable","fromDOMStream","fromNodeStream","stream","toDOMStream","options","Error","toNodeStream","iterator","next","done","threw","buffers","buffer","cmd","size","bufferLength","byteRange","it","Symbol","value","isNaN","undefined","byteLength","push","e","throw","return","asyncIterator","AdaptiveByteReader","releaseLock","constructor","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","closed","catch","Promise","resolve","cancel","reason","read","Uint8Array","result","readFromBYOBReader","mode","readInto","ArrayBuffer","offset","onEvent","event","handler","_","r","events","err","race","map","x","isFinite","cleanup","reject","evt","fn","destroy","call"],"sources":["io/adapters.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}