{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS7624605610262437867 from './Schema';\nexport var org;\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        flatbuf.Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        let MessageHeader;\n        (function (MessageHeader) {\n          MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n          MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n          MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n          MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n          MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n          MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n        })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class FieldNode {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FieldNode\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * The number of value slots in the Arrow array at this level of a nested\n           * tree\n           *\n           * @returns flatbuffers.Long\n           */\n          length() {\n            return this.bb.readInt64(this.bb_pos);\n          }\n          /**\n           * The number of observed nulls. Fields with null_count == 0 may choose not\n           * to write their physical validity bitmap out as a materialized buffer,\n           * instead setting the length of the bitmap buffer to 0.\n           *\n           * @returns flatbuffers.Long\n           */\n          nullCount() {\n            return this.bb.readInt64(this.bb_pos + 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long length\n           * @param flatbuffers.Long null_count\n           * @returns flatbuffers.Offset\n           */\n          static createFieldNode(builder, length, null_count) {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n          }\n        }\n        flatbuf.FieldNode = FieldNode;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class RecordBatch {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns RecordBatch\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param RecordBatch= obj\n           * @returns RecordBatch\n           */\n          static getRootAsRecordBatch(bb, obj) {\n            return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * number of records / rows. The arrays in the batch should all have this\n           * length\n           *\n           * @returns flatbuffers.Long\n           */\n          length() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * Nodes correspond to the pre-ordered flattened logical schema\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.FieldNode= obj\n           * @returns org.apache.arrow.flatbuf.FieldNode\n           */\n          nodes(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n          nodesLength() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * Buffers correspond to the pre-ordered flattened buffer tree\n           *\n           * The number of buffers appended to this list depends on the schema. For\n           * example, most primitive arrays will have 2 buffers, 1 for the validity\n           * bitmap and 1 for the values. For struct arrays, there will only be a\n           * single buffer for the validity (nulls) bitmap\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.Buffer= obj\n           * @returns org.apache.arrow.flatbuf.Buffer\n           */\n          buffers(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n          buffersLength() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startRecordBatch(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long length\n           */\n          static addLength(builder, length) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset nodesOffset\n           */\n          static addNodes(builder, nodesOffset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n          static startNodesVector(builder, numElems) {\n            builder.startVector(16, numElems, 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset buffersOffset\n           */\n          static addBuffers(builder, buffersOffset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n          static startBuffersVector(builder, numElems) {\n            builder.startVector(16, numElems, 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endRecordBatch(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createRecordBatch(builder, length, nodesOffset, buffersOffset) {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n          }\n        }\n        flatbuf.RecordBatch = RecordBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class DictionaryBatch {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryBatch\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param DictionaryBatch= obj\n           * @returns DictionaryBatch\n           */\n          static getRootAsDictionaryBatch(bb, obj) {\n            return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns flatbuffers.Long\n           */\n          id() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * @param org.apache.arrow.flatbuf.RecordBatch= obj\n           * @returns org.apache.arrow.flatbuf.RecordBatch|null\n           */\n          data(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n          }\n          /**\n           * If isDelta is true the values in the dictionary are to be appended to a\n           * dictionary with the indicated id\n           *\n           * @returns boolean\n           */\n          isDelta() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startDictionaryBatch(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long id\n           */\n          static addId(builder, id) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset dataOffset\n           */\n          static addData(builder, dataOffset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean isDelta\n           */\n          static addIsDelta(builder, isDelta) {\n            builder.addFieldInt8(2, +isDelta, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endDictionaryBatch(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createDictionaryBatch(builder, id, dataOffset, isDelta) {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n          }\n        }\n        flatbuf.DictionaryBatch = DictionaryBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Message {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Message\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Message= obj\n           * @returns Message\n           */\n          static getRootAsMessage(bb, obj) {\n            return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.MetadataVersion\n           */\n          version() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? ( /**  */this.bb.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.MessageHeader\n           */\n          headerType() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? ( /**  */this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n          }\n          /**\n           * @param flatbuffers.Table obj\n           * @returns ?flatbuffers.Table\n           */\n          header(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n          }\n          /**\n           * @returns flatbuffers.Long\n           */\n          bodyLength() {\n            let offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * @param number index\n           * @param org.apache.arrow.flatbuf.KeyValue= obj\n           * @returns org.apache.arrow.flatbuf.KeyValue\n           */\n          customMetadata(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n          customMetadataLength() {\n            let offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startMessage(builder) {\n            builder.startObject(5);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.MetadataVersion version\n           */\n          static addVersion(builder, version) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.MessageHeader headerType\n           */\n          static addHeaderType(builder, headerType) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset headerOffset\n           */\n          static addHeader(builder, headerOffset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long bodyLength\n           */\n          static addBodyLength(builder, bodyLength) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset customMetadataOffset\n           */\n          static addCustomMetadata(builder, customMetadataOffset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n          static createCustomMetadataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n          static startCustomMetadataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endMessage(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset offset\n           */\n          static finishMessageBuffer(builder, offset) {\n            builder.finish(offset);\n          }\n          static createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n          }\n        }\n        flatbuf.Message = Message;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"names":["NS7624605610262437867","org","apache","arrow","flatbuf","Schema","MessageHeader","FieldNode","constructor","bb","bb_pos","__init","i","length","readInt64","nullCount","createFieldNode","builder","null_count","prep","writeInt64","offset","RecordBatch","getRootAsRecordBatch","obj","readInt32","position","__offset","createLong","nodes","index","__vector","nodesLength","__vector_len","buffers","Buffer","buffersLength","startRecordBatch","startObject","addLength","addFieldInt64","addNodes","nodesOffset","addFieldOffset","startNodesVector","numElems","startVector","addBuffers","buffersOffset","startBuffersVector","endRecordBatch","endObject","createRecordBatch","DictionaryBatch","getRootAsDictionaryBatch","id","data","__indirect","isDelta","readInt8","startDictionaryBatch","addId","addData","dataOffset","addIsDelta","addFieldInt8","endDictionaryBatch","createDictionaryBatch","Message","getRootAsMessage","version","readInt16","MetadataVersion","V1","headerType","readUint8","NONE","header","__union","bodyLength","customMetadata","KeyValue","customMetadataLength","startMessage","addVersion","addFieldInt16","addHeaderType","addHeader","headerOffset","addBodyLength","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","addOffset","endVector","startCustomMetadataVector","endMessage","finishMessageBuffer","finish","createMessage"],"sources":["fb/Message.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n"],"mappings":"AAAA;AAGA,OAAO,KAAKA,qBAAqB,MAAM,UAAU;AACjD,OAAM,IAAWC,GAAG;AAApB,WAAiBA,GAAG;EAAC,IAAAC,MAAM;EAAN,WAAAA,MAAM;IAAC,IAAAC,KAAK;IAAL,WAAAA,KAAK;MAAC,IAAAC,OAAO;MAAP,WAAAA,OAAO;QACvBA,OAAA,CAAAC,MAAM,GAAGL,qBAAqB,CAACC,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAACC,MAAM;MAChF,CAAC,EAFiCD,OAAO,GAAPD,KAAA,CAAAC,OAAO,KAAPD,KAAA,CAAAC,OAAO;IAEzC,CAAC,EAF2BD,KAAK,GAALD,MAAA,CAAAC,KAAK,KAALD,MAAA,CAAAC,KAAK;EAEjC,CAAC,EAFoBD,MAAM,GAAND,GAAA,CAAAC,MAAM,KAAND,GAAA,CAAAC,MAAM;AAE3B,CAAC,EAFgBD,GAAG,KAAHA,GAAG;AAGpB;;;;;;;;;;;;AAYA,WAAiBA,GAAG;EAAC,IAAAC,MAAM;EAAN,WAAAA,MAAM;IAAC,IAAAC,KAAK;IAAL,WAAAA,KAAK;MAAC,IAAAC,OAAO;MAAP,WAAAA,OAAO;QACrC,IAAYE,aAOX;QAPD,WAAYA,aAAa;UACrBA,aAAA,CAAAA,aAAA,sBAAQ;UACRA,aAAA,CAAAA,aAAA,0BAAU;UACVA,aAAA,CAAAA,aAAA,4CAAmB;UACnBA,aAAA,CAAAA,aAAA,oCAAe;UACfA,aAAA,CAAAA,aAAA,0BAAU;UACVA,aAAA,CAAAA,aAAA,sCAAgB;QACpB,CAAC,EAPWA,aAAa,GAAbF,OAAA,CAAAE,aAAa,KAAbF,OAAA,CAAAE,aAAa;MAQ7B,CAAC,EATiCF,OAAO,GAAPD,KAAA,CAAAC,OAAO,KAAPD,KAAA,CAAAC,OAAO;IASzC,CAAC,EAT2BD,KAAK,GAALD,MAAA,CAAAC,KAAK,KAALD,MAAA,CAAAC,KAAK;EASjC,CAAC,EAToBD,MAAM,GAAND,GAAA,CAAAC,MAAM,KAAND,GAAA,CAAAC,MAAM;AAS3B,CAAC,EATgBD,GAAG,KAAHA,GAAG;AAWpB;;;;;;;;;;;;;AAaA,WAAiBA,GAAG;EAAC,IAAAC,MAAM;EAAN,WAAAA,MAAM;IAAC,IAAAC,KAAK;IAAL,WAAAA,KAAK;MAAC,IAAAC,OAAO;MAAP,WAAAA,OAAO;QACrC,MAAaG,SAAS;UAAtBC,YAAA;YACI,KAAAC,EAAE,GAAkC,IAAI;YAExC,KAAAC,MAAM,GAAW,CAAC;UA8CtB;UA7CI;;;;;UAKAC,MAAMA,CAACC,CAAS,EAAEH,EAA0B;YACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;YACf,IAAI,CAACH,EAAE,GAAGA,EAAE;YACZ,OAAO,IAAI;UACf;UAEA;;;;;;UAMAI,MAAMA,CAAA;YACF,OAAO,IAAI,CAACJ,EAAG,CAACK,SAAS,CAAC,IAAI,CAACJ,MAAM,CAAC;UAC1C;UAEA;;;;;;;UAOAK,SAASA,CAAA;YACL,OAAO,IAAI,CAACN,EAAG,CAACK,SAAS,CAAC,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC;UAC9C;UAEA;;;;;;UAMA,OAAOM,eAAeA,CAACC,OAA4B,EAAEJ,MAAwB,EAAEK,UAA4B;YACvGD,OAAO,CAACE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;YACnBF,OAAO,CAACG,UAAU,CAACF,UAAU,CAAC;YAC9BD,OAAO,CAACG,UAAU,CAACP,MAAM,CAAC;YAC1B,OAAOI,OAAO,CAACI,MAAM,EAAE;UAC3B;;QA/CSjB,OAAA,CAAAG,SAAS,GAAAA,SAiDrB;MACL,CAAC,EAnDiCH,OAAO,GAAPD,KAAA,CAAAC,OAAO,KAAPD,KAAA,CAAAC,OAAO;IAmDzC,CAAC,EAnD2BD,KAAK,GAALD,MAAA,CAAAC,KAAK,KAALD,MAAA,CAAAC,KAAK;EAmDjC,CAAC,EAnDoBD,MAAM,GAAND,GAAA,CAAAC,MAAM,KAAND,GAAA,CAAAC,MAAM;AAmD3B,CAAC,EAnDgBD,GAAG,KAAHA,GAAG;AAoDpB;;;;;;;AAOA,WAAiBA,GAAG;EAAC,IAAAC,MAAM;EAAN,WAAAA,MAAM;IAAC,IAAAC,KAAK;IAAL,WAAAA,KAAK;MAAC,IAAAC,OAAO;MAAP,WAAAA,OAAO;QACrC,MAAakB,WAAW;UAAxBd,YAAA;YACI,KAAAC,EAAE,GAAkC,IAAI;YAExC,KAAAC,MAAM,GAAW,CAAC;UA4ItB;UA3II;;;;;UAKAC,MAAMA,CAACC,CAAS,EAAEH,EAA0B;YACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;YACf,IAAI,CAACH,EAAE,GAAGA,EAAE;YACZ,OAAO,IAAI;UACf;UAEA;;;;;UAKA,OAAOc,oBAAoBA,CAACd,EAA0B,EAAEe,GAAiB;YACrE,OAAO,CAACA,GAAG,IAAI,IAAIF,WAAW,CAAX,CAAW,EAAEX,MAAM,CAACF,EAAE,CAACgB,SAAS,CAAChB,EAAE,CAACiB,QAAQ,EAAE,CAAC,GAAGjB,EAAE,CAACiB,QAAQ,EAAE,EAAEjB,EAAE,CAAC;UAC3F;UAEA;;;;;;UAMAI,MAAMA,CAAA;YACF,IAAIQ,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACK,SAAS,CAAC,IAAI,CAACJ,MAAM,GAAGW,MAAM,CAAC,GAAG,IAAI,CAACZ,EAAG,CAACmB,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;UACxF;UAEA;;;;;;;UAOAC,KAAKA,CAACC,KAAa,EAAEN,GAAwC;YACzD,IAAIH,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,GAAG,CAACG,GAAG,IAAI,IAAIvB,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAACG,SAAS,CAAT,CAAS,EAAEI,MAAM,CAAC,IAAI,CAACF,EAAG,CAACsB,QAAQ,CAAC,IAAI,CAACrB,MAAM,GAAGW,MAAM,CAAC,GAAGS,KAAK,GAAG,EAAE,EAAE,IAAI,CAACrB,EAAG,CAAC,GAAG,IAAI;UACjJ;UAEA;;;UAGAuB,WAAWA,CAAA;YACP,IAAIX,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACwB,YAAY,CAAC,IAAI,CAACvB,MAAM,GAAGW,MAAM,CAAC,GAAG,CAAC;UACnE;UAEA;;;;;;;;;;;;UAYAa,OAAOA,CAACJ,KAAa,EAAEN,GAA2D;YAC9E,IAAIH,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,GAAG,CAACG,GAAG,IAAI,IAAIxB,qBAAqB,CAACC,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAAC+B,MAAM,CAAN,CAAM,EAAExB,MAAM,CAAC,IAAI,CAACF,EAAG,CAACsB,QAAQ,CAAC,IAAI,CAACrB,MAAM,GAAGW,MAAM,CAAC,GAAGS,KAAK,GAAG,EAAE,EAAE,IAAI,CAACrB,EAAG,CAAC,GAAG,IAAI;UACpK;UAEA;;;UAGA2B,aAAaA,CAAA;YACT,IAAIf,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACwB,YAAY,CAAC,IAAI,CAACvB,MAAM,GAAGW,MAAM,CAAC,GAAG,CAAC;UACnE;UAEA;;;UAGA,OAAOgB,gBAAgBA,CAACpB,OAA4B;YAChDA,OAAO,CAACqB,WAAW,CAAC,CAAC,CAAC;UAC1B;UAEA;;;;UAIA,OAAOC,SAASA,CAACtB,OAA4B,EAAEJ,MAAwB;YACnEI,OAAO,CAACuB,aAAa,CAAC,CAAC,EAAE3B,MAAM,EAAEI,OAAO,CAACW,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAC9D;UAEA;;;;UAIA,OAAOa,QAAQA,CAACxB,OAA4B,EAAEyB,WAA+B;YACzEzB,OAAO,CAAC0B,cAAc,CAAC,CAAC,EAAED,WAAW,EAAE,CAAC,CAAC;UAC7C;UAEA;;;;UAIA,OAAOE,gBAAgBA,CAAC3B,OAA4B,EAAE4B,QAAgB;YAClE5B,OAAO,CAAC6B,WAAW,CAAC,EAAE,EAAED,QAAQ,EAAE,CAAC,CAAC;UACxC;UAEA;;;;UAIA,OAAOE,UAAUA,CAAC9B,OAA4B,EAAE+B,aAAiC;YAC7E/B,OAAO,CAAC0B,cAAc,CAAC,CAAC,EAAEK,aAAa,EAAE,CAAC,CAAC;UAC/C;UAEA;;;;UAIA,OAAOC,kBAAkBA,CAAChC,OAA4B,EAAE4B,QAAgB;YACpE5B,OAAO,CAAC6B,WAAW,CAAC,EAAE,EAAED,QAAQ,EAAE,CAAC,CAAC;UACxC;UAEA;;;;UAIA,OAAOK,cAAcA,CAACjC,OAA4B;YAC9C,IAAII,MAAM,GAAGJ,OAAO,CAACkC,SAAS,EAAE;YAChC,OAAO9B,MAAM;UACjB;UAEA,OAAO+B,iBAAiBA,CAACnC,OAA4B,EAAEJ,MAAwB,EAAE6B,WAA+B,EAAEM,aAAiC;YAC/I1B,WAAW,CAACe,gBAAgB,CAACpB,OAAO,CAAC;YACrCK,WAAW,CAACiB,SAAS,CAACtB,OAAO,EAAEJ,MAAM,CAAC;YACtCS,WAAW,CAACmB,QAAQ,CAACxB,OAAO,EAAEyB,WAAW,CAAC;YAC1CpB,WAAW,CAACyB,UAAU,CAAC9B,OAAO,EAAE+B,aAAa,CAAC;YAC9C,OAAO1B,WAAW,CAAC4B,cAAc,CAACjC,OAAO,CAAC;UAC9C;;QA9ISb,OAAA,CAAAkB,WAAW,GAAAA,WA+IvB;MACL,CAAC,EAjJiClB,OAAO,GAAPD,KAAA,CAAAC,OAAO,KAAPD,KAAA,CAAAC,OAAO;IAiJzC,CAAC,EAjJ2BD,KAAK,GAALD,MAAA,CAAAC,KAAK,KAALD,MAAA,CAAAC,KAAK;EAiJjC,CAAC,EAjJoBD,MAAM,GAAND,GAAA,CAAAC,MAAM,KAAND,GAAA,CAAAC,MAAM;AAiJ3B,CAAC,EAjJgBD,GAAG,KAAHA,GAAG;AAkJpB;;;;;;;;;;AAUA,WAAiBA,GAAG;EAAC,IAAAC,MAAM;EAAN,WAAAA,MAAM;IAAC,IAAAC,KAAK;IAAL,WAAAA,KAAK;MAAC,IAAAC,OAAO;MAAP,WAAAA,OAAO;QACrC,MAAaiD,eAAe;UAA5B7C,YAAA;YACI,KAAAC,EAAE,GAAkC,IAAI;YAExC,KAAAC,MAAM,GAAW,CAAC;UAgGtB;UA/FI;;;;;UAKAC,MAAMA,CAACC,CAAS,EAAEH,EAA0B;YACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;YACf,IAAI,CAACH,EAAE,GAAGA,EAAE;YACZ,OAAO,IAAI;UACf;UAEA;;;;;UAKA,OAAO6C,wBAAwBA,CAAC7C,EAA0B,EAAEe,GAAqB;YAC7E,OAAO,CAACA,GAAG,IAAI,IAAI6B,eAAe,CAAf,CAAe,EAAE1C,MAAM,CAACF,EAAE,CAACgB,SAAS,CAAChB,EAAE,CAACiB,QAAQ,EAAE,CAAC,GAAGjB,EAAE,CAACiB,QAAQ,EAAE,EAAEjB,EAAE,CAAC;UAC/F;UAEA;;;UAGA8C,EAAEA,CAAA;YACE,IAAIlC,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACK,SAAS,CAAC,IAAI,CAACJ,MAAM,GAAGW,MAAM,CAAC,GAAG,IAAI,CAACZ,EAAG,CAACmB,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;UACxF;UAEA;;;;UAIA4B,IAAIA,CAAChC,GAA0C;YAC3C,IAAIH,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,GAAG,CAACG,GAAG,IAAI,IAAIvB,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAACkB,WAAW,CAAX,CAAW,EAAEX,MAAM,CAAC,IAAI,CAACF,EAAG,CAACgD,UAAU,CAAC,IAAI,CAAC/C,MAAM,GAAGW,MAAM,CAAC,EAAE,IAAI,CAACZ,EAAG,CAAC,GAAG,IAAI;UACxI;UAEA;;;;;;UAMAiD,OAAOA,CAAA;YACH,IAAIrC,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,GAAG,CAAC,CAAC,IAAI,CAACZ,EAAG,CAACkD,QAAQ,CAAC,IAAI,CAACjD,MAAM,GAAGW,MAAM,CAAC,GAAG,KAAK;UACrE;UAEA;;;UAGA,OAAOuC,oBAAoBA,CAAC3C,OAA4B;YACpDA,OAAO,CAACqB,WAAW,CAAC,CAAC,CAAC;UAC1B;UAEA;;;;UAIA,OAAOuB,KAAKA,CAAC5C,OAA4B,EAAEsC,EAAoB;YAC3DtC,OAAO,CAACuB,aAAa,CAAC,CAAC,EAAEe,EAAE,EAAEtC,OAAO,CAACW,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAC1D;UAEA;;;;UAIA,OAAOkC,OAAOA,CAAC7C,OAA4B,EAAE8C,UAA8B;YACvE9C,OAAO,CAAC0B,cAAc,CAAC,CAAC,EAAEoB,UAAU,EAAE,CAAC,CAAC;UAC5C;UAEA;;;;UAIA,OAAOC,UAAUA,CAAC/C,OAA4B,EAAEyC,OAAgB;YAC5DzC,OAAO,CAACgD,YAAY,CAAC,CAAC,EAAE,CAACP,OAAO,EAAE,CAAC,KAAK,CAAC;UAC7C;UAEA;;;;UAIA,OAAOQ,kBAAkBA,CAACjD,OAA4B;YAClD,IAAII,MAAM,GAAGJ,OAAO,CAACkC,SAAS,EAAE;YAChC,OAAO9B,MAAM;UACjB;UAEA,OAAO8C,qBAAqBA,CAAClD,OAA4B,EAAEsC,EAAoB,EAAEQ,UAA8B,EAAEL,OAAgB;YAC7HL,eAAe,CAACO,oBAAoB,CAAC3C,OAAO,CAAC;YAC7CoC,eAAe,CAACQ,KAAK,CAAC5C,OAAO,EAAEsC,EAAE,CAAC;YAClCF,eAAe,CAACS,OAAO,CAAC7C,OAAO,EAAE8C,UAAU,CAAC;YAC5CV,eAAe,CAACW,UAAU,CAAC/C,OAAO,EAAEyC,OAAO,CAAC;YAC5C,OAAOL,eAAe,CAACa,kBAAkB,CAACjD,OAAO,CAAC;UACtD;;QAlGSb,OAAA,CAAAiD,eAAe,GAAAA,eAmG3B;MACL,CAAC,EArGiCjD,OAAO,GAAPD,KAAA,CAAAC,OAAO,KAAPD,KAAA,CAAAC,OAAO;IAqGzC,CAAC,EArG2BD,KAAK,GAALD,MAAA,CAAAC,KAAK,KAALD,MAAA,CAAAC,KAAK;EAqGjC,CAAC,EArGoBD,MAAM,GAAND,GAAA,CAAAC,MAAM,KAAND,GAAA,CAAAC,MAAM;AAqG3B,CAAC,EArGgBD,GAAG,KAAHA,GAAG;AAsGpB;;;AAGA,WAAiBA,GAAG;EAAC,IAAAC,MAAM;EAAN,WAAAA,MAAM;IAAC,IAAAC,KAAK;IAAL,WAAAA,KAAK;MAAC,IAAAC,OAAO;MAAP,WAAAA,OAAO;QACrC,MAAagE,OAAO;UAApB5D,YAAA;YACI,KAAAC,EAAE,GAAkC,IAAI;YAExC,KAAAC,MAAM,GAAW,CAAC;UAsKtB;UArKI;;;;;UAKAC,MAAMA,CAACC,CAAS,EAAEH,EAA0B;YACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;YACf,IAAI,CAACH,EAAE,GAAGA,EAAE;YACZ,OAAO,IAAI;UACf;UAEA;;;;;UAKA,OAAO4D,gBAAgBA,CAAC5D,EAA0B,EAAEe,GAAa;YAC7D,OAAO,CAACA,GAAG,IAAI,IAAI4C,OAAO,CAAP,CAAO,EAAEzD,MAAM,CAACF,EAAE,CAACgB,SAAS,CAAChB,EAAE,CAACiB,QAAQ,EAAE,CAAC,GAAGjB,EAAE,CAACiB,QAAQ,EAAE,EAAEjB,EAAE,CAAC;UACvF;UAEA;;;UAGA6D,OAAOA,CAAA;YACH,IAAIjD,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,KAAG,OAAS,IAAI,CAACZ,EAAG,CAAC8D,SAAS,CAAC,IAAI,CAAC7D,MAAM,GAAGW,MAAM,CAAC,IAAIrB,qBAAqB,CAACC,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAACoE,eAAe,CAACC,EAAE;UAC1I;UAEA;;;UAGAC,UAAUA,CAAA;YACN,IAAIrD,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,KAAG,OAAS,IAAI,CAACZ,EAAG,CAACkE,SAAS,CAAC,IAAI,CAACjE,MAAM,GAAGW,MAAM,CAAC,IAAIpB,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAACE,aAAa,CAACsE,IAAI;UACpH;UAEA;;;;UAIAC,MAAMA,CAA8BrD,GAAM;YACtC,IAAIH,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,CAAC,CAAC;YAC9C,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACqE,OAAO,CAACtD,GAAG,EAAE,IAAI,CAACd,MAAM,GAAGW,MAAM,CAAC,GAAG,IAAI;UACtE;UAEA;;;UAGA0D,UAAUA,CAAA;YACN,IAAI1D,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,EAAE,CAAC;YAC/C,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACK,SAAS,CAAC,IAAI,CAACJ,MAAM,GAAGW,MAAM,CAAC,GAAG,IAAI,CAACZ,EAAG,CAACmB,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;UACxF;UAEA;;;;;UAKAoD,cAAcA,CAAClD,KAAa,EAAEN,GAA6D;YACvF,IAAIH,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,EAAE,CAAC;YAC/C,OAAOW,MAAM,GAAG,CAACG,GAAG,IAAI,IAAIxB,qBAAqB,CAACC,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAAC6E,QAAQ,CAAR,CAAQ,EAAEtE,MAAM,CAAC,IAAI,CAACF,EAAG,CAACgD,UAAU,CAAC,IAAI,CAAChD,EAAG,CAACsB,QAAQ,CAAC,IAAI,CAACrB,MAAM,GAAGW,MAAM,CAAC,GAAGS,KAAK,GAAG,CAAC,CAAC,EAAE,IAAI,CAACrB,EAAG,CAAC,GAAG,IAAI;UAC1L;UAEA;;;UAGAyE,oBAAoBA,CAAA;YAChB,IAAI7D,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,EAAE,EAAE,CAAC;YAC/C,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACwB,YAAY,CAAC,IAAI,CAACvB,MAAM,GAAGW,MAAM,CAAC,GAAG,CAAC;UACnE;UAEA;;;UAGA,OAAO8D,YAAYA,CAAClE,OAA4B;YAC5CA,OAAO,CAACqB,WAAW,CAAC,CAAC,CAAC;UAC1B;UAEA;;;;UAIA,OAAO8C,UAAUA,CAACnE,OAA4B,EAAEqD,OAAuE;YACnHrD,OAAO,CAACoE,aAAa,CAAC,CAAC,EAAEf,OAAO,EAAEtE,qBAAqB,CAACC,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAACoE,eAAe,CAACC,EAAE,CAAC;UACxG;UAEA;;;;UAIA,OAAOa,aAAaA,CAACrE,OAA4B,EAAEyD,UAAkD;YACjGzD,OAAO,CAACgD,YAAY,CAAC,CAAC,EAAES,UAAU,EAAEzE,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAACE,aAAa,CAACsE,IAAI,CAAC;UACpF;UAEA;;;;UAIA,OAAOW,SAASA,CAACtE,OAA4B,EAAEuE,YAAgC;YAC3EvE,OAAO,CAAC0B,cAAc,CAAC,CAAC,EAAE6C,YAAY,EAAE,CAAC,CAAC;UAC9C;UAEA;;;;UAIA,OAAOC,aAAaA,CAACxE,OAA4B,EAAE8D,UAA4B;YAC3E9D,OAAO,CAACuB,aAAa,CAAC,CAAC,EAAEuC,UAAU,EAAE9D,OAAO,CAACW,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAClE;UAEA;;;;UAIA,OAAO8D,iBAAiBA,CAACzE,OAA4B,EAAE0E,oBAAwC;YAC3F1E,OAAO,CAAC0B,cAAc,CAAC,CAAC,EAAEgD,oBAAoB,EAAE,CAAC,CAAC;UACtD;UAEA;;;;;UAKA,OAAOC,0BAA0BA,CAAC3E,OAA4B,EAAEuC,IAA0B;YACtFvC,OAAO,CAAC6B,WAAW,CAAC,CAAC,EAAEU,IAAI,CAAC3C,MAAM,EAAE,CAAC,CAAC;YACtC,KAAK,IAAID,CAAC,GAAG4C,IAAI,CAAC3C,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;cACvCK,OAAO,CAAC4E,SAAS,CAACrC,IAAI,CAAC5C,CAAC,CAAC,CAAC;;YAE9B,OAAOK,OAAO,CAAC6E,SAAS,EAAE;UAC9B;UAEA;;;;UAIA,OAAOC,yBAAyBA,CAAC9E,OAA4B,EAAE4B,QAAgB;YAC3E5B,OAAO,CAAC6B,WAAW,CAAC,CAAC,EAAED,QAAQ,EAAE,CAAC,CAAC;UACvC;UAEA;;;;UAIA,OAAOmD,UAAUA,CAAC/E,OAA4B;YAC1C,IAAII,MAAM,GAAGJ,OAAO,CAACkC,SAAS,EAAE;YAChC,OAAO9B,MAAM;UACjB;UAEA;;;;UAIA,OAAO4E,mBAAmBA,CAAChF,OAA4B,EAAEI,MAA0B;YAC/EJ,OAAO,CAACiF,MAAM,CAAC7E,MAAM,CAAC;UAC1B;UAEA,OAAO8E,aAAaA,CAAClF,OAA4B,EAAEqD,OAAuE,EAAEI,UAAkD,EAAEc,YAAgC,EAAET,UAA4B,EAAEY,oBAAwC;YACpRvB,OAAO,CAACe,YAAY,CAAClE,OAAO,CAAC;YAC7BmD,OAAO,CAACgB,UAAU,CAACnE,OAAO,EAAEqD,OAAO,CAAC;YACpCF,OAAO,CAACkB,aAAa,CAACrE,OAAO,EAAEyD,UAAU,CAAC;YAC1CN,OAAO,CAACmB,SAAS,CAACtE,OAAO,EAAEuE,YAAY,CAAC;YACxCpB,OAAO,CAACqB,aAAa,CAACxE,OAAO,EAAE8D,UAAU,CAAC;YAC1CX,OAAO,CAACsB,iBAAiB,CAACzE,OAAO,EAAE0E,oBAAoB,CAAC;YACxD,OAAOvB,OAAO,CAAC4B,UAAU,CAAC/E,OAAO,CAAC;UACtC;;QAxKSb,OAAA,CAAAgE,OAAO,GAAAA,OAyKnB;MACL,CAAC,EA3KiChE,OAAO,GAAPD,KAAA,CAAAC,OAAO,KAAPD,KAAA,CAAAC,OAAO;IA2KzC,CAAC,EA3K2BD,KAAK,GAALD,MAAA,CAAAC,KAAK,KAALD,MAAA,CAAAC,KAAK;EA2KjC,CAAC,EA3KoBD,MAAM,GAAND,GAAA,CAAAC,MAAM,KAAND,GAAA,CAAAC,MAAM;AA2K3B,CAAC,EA3KgBD,GAAG,KAAHA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}