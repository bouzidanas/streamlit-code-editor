{"ast":null,"code":"ace.define(\"ace/mode/terraform_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var TerraformHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: ['storage.function.terraform'],\n        regex: '\\\\b(output|resource|data|variable|module|export)\\\\b'\n      }, {\n        token: \"variable.terraform\",\n        regex: \"\\\\$\\\\s\",\n        push: [{\n          token: \"keyword.terraform\",\n          regex: \"(-var-file|-var)\"\n        }, {\n          token: \"variable.terraform\",\n          regex: \"\\\\n|$\",\n          next: \"pop\"\n        }, {\n          include: \"strings\"\n        }, {\n          include: \"variables\"\n        }, {\n          include: \"operators\"\n        }, {\n          defaultToken: \"text\"\n        }]\n      }, {\n        token: \"language.support.class\",\n        regex: \"\\\\b(timeouts|provider|connection|provisioner|lifecycleprovider|atlas)\\\\b\"\n      }, {\n        token: \"singleline.comment.terraform\",\n        regex: '#.*$'\n      }, {\n        token: \"singleline.comment.terraform\",\n        regex: '//.*$'\n      }, {\n        token: \"multiline.comment.begin.terraform\",\n        regex: /\\/\\*/,\n        push: \"blockComment\"\n      }, {\n        token: \"storage.function.terraform\",\n        regex: \"^\\\\s*(locals|terraform)\\\\s*{\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        include: \"constants\"\n      }, {\n        include: \"strings\"\n      }, {\n        include: \"operators\"\n      }, {\n        include: \"variables\"\n      }],\n      blockComment: [{\n        regex: /\\*\\//,\n        token: \"multiline.comment.end.terraform\",\n        next: \"pop\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"constants\": [{\n        token: \"constant.language.terraform\",\n        regex: \"\\\\b(true|false|yes|no|on|off|EOF)\\\\b\"\n      }, {\n        token: \"constant.numeric.terraform\",\n        regex: \"(\\\\b([0-9]+)([kKmMgG]b?)?\\\\b)|(\\\\b(0x[0-9A-Fa-f]+)([kKmMgG]b?)?\\\\b)\"\n      }],\n      \"variables\": [{\n        token: [\"variable.assignment.terraform\", \"keyword.operator\"],\n        regex: \"\\\\b([a-zA-Z_]+)(\\\\s*=)\"\n      }],\n      \"interpolated_variables\": [{\n        token: \"variable.terraform\",\n        regex: \"\\\\b(var|self|count|path|local)\\\\b(?:\\\\.*[a-zA-Z_-]*)?\"\n      }],\n      \"strings\": [{\n        token: \"punctuation.quote.terraform\",\n        regex: \"'\",\n        push: [{\n          token: 'punctuation.quote.terraform',\n          regex: \"'\",\n          next: 'pop'\n        }, {\n          include: \"escaped_chars\"\n        }, {\n          defaultToken: 'string'\n        }]\n      }, {\n        token: \"punctuation.quote.terraform\",\n        regex: '\"',\n        push: [{\n          token: 'punctuation.quote.terraform',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          include: \"interpolation\"\n        }, {\n          include: \"escaped_chars\"\n        }, {\n          defaultToken: 'string'\n        }]\n      }],\n      \"escaped_chars\": [{\n        token: \"constant.escaped_char.terraform\",\n        regex: \"\\\\\\\\.\"\n      }],\n      \"operators\": [{\n        token: \"keyword.operator\",\n        regex: \"\\\\?|:|==|!=|>|<|>=|<=|&&|\\\\|\\\\\\||!|%|&|\\\\*|\\\\+|\\\\-|/|=\"\n      }],\n      \"interpolation\": [{\n        token: \"punctuation.interpolated.begin.terraform\",\n        regex: \"\\\\$?\\\\$\\\\{\",\n        push: [{\n          token: \"punctuation.interpolated.end.terraform\",\n          regex: \"\\\\}\",\n          next: \"pop\"\n        }, {\n          include: \"interpolated_variables\"\n        }, {\n          include: \"operators\"\n        }, {\n          include: \"constants\"\n        }, {\n          include: \"strings\"\n        }, {\n          include: \"functions\"\n        }, {\n          include: \"parenthesis\"\n        }, {\n          defaultToken: \"punctuation\"\n        }]\n      }],\n      \"functions\": [{\n        token: \"keyword.function.terraform\",\n        regex: \"\\\\b(abs|basename|base64decode|base64encode|base64gzip|base64sha256|base64sha512|bcrypt|ceil|chomp|chunklist|cidrhost|cidrnetmask|cidrsubnet|coalesce|coalescelist|compact|concat|contains|dirname|distinct|element|file|floor|flatten|format|formatlist|indent|index|join|jsonencode|keys|length|list|log|lookup|lower|map|matchkeys|max|merge|min|md5|pathexpand|pow|replace|rsadecrypt|sha1|sha256|sha512|signum|slice|sort|split|substr|timestamp|timeadd|title|transpose|trimspace|upper|urlencode|uuid|values|zipmap)\\\\b\"\n      }],\n      \"parenthesis\": [{\n        token: \"paren.lparen\",\n        regex: \"\\\\[\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"\\\\]\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  oop.inherits(TerraformHighlightRules, TextHighlightRules);\n  exports.TerraformHighlightRules = TerraformHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/terraform\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/terraform_highlight_rules\", \"ace/mode/folding/cstyle\", \"ace/mode/matching_brace_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var TerraformHighlightRules = require(\"./terraform_highlight_rules\").TerraformHighlightRules;\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var Mode = function () {\n    TextMode.call(this);\n    this.HighlightRules = TerraformHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"#\", \"//\"];\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/terraform\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/terraform\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","TerraformHighlightRules","$rules","token","regex","push","next","include","defaultToken","blockComment","normalizeRules","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","Mode","CStyleFoldMode","HighlightRules","$outdent","$behaviour","$defaultBehaviour","foldingRules","lineCommentStart","$id"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-terraform.js"],"sourcesContent":["ace.define(\"ace/mode/terraform_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar TerraformHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: ['storage.function.terraform'],\n                regex: '\\\\b(output|resource|data|variable|module|export)\\\\b'\n            },\n            {\n                token: \"variable.terraform\",\n                regex: \"\\\\$\\\\s\",\n                push: [\n                    {\n                        token: \"keyword.terraform\",\n                        regex: \"(-var-file|-var)\"\n                    },\n                    {\n                        token: \"variable.terraform\",\n                        regex: \"\\\\n|$\",\n                        next: \"pop\"\n                    },\n                    { include: \"strings\" },\n                    { include: \"variables\" },\n                    { include: \"operators\" },\n                    { defaultToken: \"text\" }\n                ]\n            },\n            {\n                token: \"language.support.class\",\n                regex: \"\\\\b(timeouts|provider|connection|provisioner|lifecycleprovider|atlas)\\\\b\"\n            },\n            {\n                token: \"singleline.comment.terraform\",\n                regex: '#.*$'\n            },\n            {\n                token: \"singleline.comment.terraform\",\n                regex: '//.*$'\n            },\n            {\n                token: \"multiline.comment.begin.terraform\",\n                regex: /\\/\\*/,\n                push: \"blockComment\"\n            },\n            {\n                token: \"storage.function.terraform\",\n                regex: \"^\\\\s*(locals|terraform)\\\\s*{\"\n            },\n            {\n                token: \"paren.lparen\",\n                regex: \"[[({]\"\n            },\n            {\n                token: \"paren.rparen\",\n                regex: \"[\\\\])}]\"\n            },\n            { include: \"constants\" },\n            { include: \"strings\" },\n            { include: \"operators\" },\n            { include: \"variables\" }\n        ],\n        blockComment: [{\n                regex: /\\*\\//,\n                token: \"multiline.comment.end.terraform\",\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment\"\n            }],\n        \"constants\": [\n            {\n                token: \"constant.language.terraform\",\n                regex: \"\\\\b(true|false|yes|no|on|off|EOF)\\\\b\"\n            },\n            {\n                token: \"constant.numeric.terraform\",\n                regex: \"(\\\\b([0-9]+)([kKmMgG]b?)?\\\\b)|(\\\\b(0x[0-9A-Fa-f]+)([kKmMgG]b?)?\\\\b)\"\n            }\n        ],\n        \"variables\": [\n            {\n                token: [\"variable.assignment.terraform\", \"keyword.operator\"],\n                regex: \"\\\\b([a-zA-Z_]+)(\\\\s*=)\"\n            }\n        ],\n        \"interpolated_variables\": [\n            {\n                token: \"variable.terraform\",\n                regex: \"\\\\b(var|self|count|path|local)\\\\b(?:\\\\.*[a-zA-Z_-]*)?\"\n            }\n        ],\n        \"strings\": [\n            {\n                token: \"punctuation.quote.terraform\",\n                regex: \"'\",\n                push: [{\n                        token: 'punctuation.quote.terraform',\n                        regex: \"'\",\n                        next: 'pop'\n                    },\n                    { include: \"escaped_chars\" },\n                    { defaultToken: 'string' }]\n            },\n            {\n                token: \"punctuation.quote.terraform\",\n                regex: '\"',\n                push: [{\n                        token: 'punctuation.quote.terraform',\n                        regex: '\"',\n                        next: 'pop'\n                    },\n                    { include: \"interpolation\" },\n                    { include: \"escaped_chars\" },\n                    { defaultToken: 'string' }]\n            }\n        ],\n        \"escaped_chars\": [\n            {\n                token: \"constant.escaped_char.terraform\",\n                regex: \"\\\\\\\\.\"\n            }\n        ],\n        \"operators\": [\n            {\n                token: \"keyword.operator\",\n                regex: \"\\\\?|:|==|!=|>|<|>=|<=|&&|\\\\|\\\\\\||!|%|&|\\\\*|\\\\+|\\\\-|/|=\"\n            }\n        ],\n        \"interpolation\": [\n            {\n                token: \"punctuation.interpolated.begin.terraform\",\n                regex: \"\\\\$?\\\\$\\\\{\",\n                push: [{\n                        token: \"punctuation.interpolated.end.terraform\",\n                        regex: \"\\\\}\",\n                        next: \"pop\"\n                    },\n                    { include: \"interpolated_variables\" },\n                    { include: \"operators\" },\n                    { include: \"constants\" },\n                    { include: \"strings\" },\n                    { include: \"functions\" },\n                    { include: \"parenthesis\" },\n                    { defaultToken: \"punctuation\" }\n                ]\n            }\n        ],\n        \"functions\": [\n            {\n                token: \"keyword.function.terraform\",\n                regex: \"\\\\b(abs|basename|base64decode|base64encode|base64gzip|base64sha256|base64sha512|bcrypt|ceil|chomp|chunklist|cidrhost|cidrnetmask|cidrsubnet|coalesce|coalescelist|compact|concat|contains|dirname|distinct|element|file|floor|flatten|format|formatlist|indent|index|join|jsonencode|keys|length|list|log|lookup|lower|map|matchkeys|max|merge|min|md5|pathexpand|pow|replace|rsadecrypt|sha1|sha256|sha512|signum|slice|sort|split|substr|timestamp|timeadd|title|transpose|trimspace|upper|urlencode|uuid|values|zipmap)\\\\b\"\n            }\n        ],\n        \"parenthesis\": [\n            {\n                token: \"paren.lparen\",\n                regex: \"\\\\[\"\n            },\n            {\n                token: \"paren.rparen\",\n                regex: \"\\\\]\"\n            }\n        ]\n    };\n    this.normalizeRules();\n};\noop.inherits(TerraformHighlightRules, TextHighlightRules);\nexports.TerraformHighlightRules = TerraformHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/terraform\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/terraform_highlight_rules\",\"ace/mode/folding/cstyle\",\"ace/mode/matching_brace_outdent\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar TerraformHighlightRules = require(\"./terraform_highlight_rules\").TerraformHighlightRules;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Mode = function () {\n    TextMode.call(this);\n    this.HighlightRules = TerraformHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = [\"#\", \"//\"];\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.$id = \"ace/mode/terraform\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/terraform\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"AAAAA,GAAG,CAACC,MAAM,CAAC,oCAAoC,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,aAAa,EAAC,+BAA+B,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EAC7K,IAAIC,GAAG,GAAGH,OAAO,CAAC,YAAY,CAAC;EAC/B,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,wBAAwB,CAAC,CAACI,kBAAkB;EAC7E,IAAIC,uBAAuB,GAAG,SAAAA,CAAA,EAAY;IACtC,IAAI,CAACC,MAAM,GAAG;MACV,OAAO,EAAE,CACL;QACIC,KAAK,EAAE,CAAC,4BAA4B,CAAC;QACrCC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE,QAAQ;QACfC,IAAI,EAAE,CACF;UACIF,KAAK,EAAE,mBAAmB;UAC1BC,KAAK,EAAE;QACX,CAAC,EACD;UACID,KAAK,EAAE,oBAAoB;UAC3BC,KAAK,EAAE,OAAO;UACdE,IAAI,EAAE;QACV,CAAC,EACD;UAAEC,OAAO,EAAE;QAAU,CAAC,EACtB;UAAEA,OAAO,EAAE;QAAY,CAAC,EACxB;UAAEA,OAAO,EAAE;QAAY,CAAC,EACxB;UAAEC,YAAY,EAAE;QAAO,CAAC;MAEhC,CAAC,EACD;QACIL,KAAK,EAAE,wBAAwB;QAC/BC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,8BAA8B;QACrCC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,8BAA8B;QACrCC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,mCAAmC;QAC1CC,KAAK,EAAE,MAAM;QACbC,IAAI,EAAE;MACV,CAAC,EACD;QACIF,KAAK,EAAE,4BAA4B;QACnCC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE;MACX,CAAC,EACD;QAAEG,OAAO,EAAE;MAAY,CAAC,EACxB;QAAEA,OAAO,EAAE;MAAU,CAAC,EACtB;QAAEA,OAAO,EAAE;MAAY,CAAC,EACxB;QAAEA,OAAO,EAAE;MAAY,CAAC,CAC3B;MACDE,YAAY,EAAE,CAAC;QACPL,KAAK,EAAE,MAAM;QACbD,KAAK,EAAE,iCAAiC;QACxCG,IAAI,EAAE;MACV,CAAC,EAAE;QACCE,YAAY,EAAE;MAClB,CAAC,CAAC;MACN,WAAW,EAAE,CACT;QACIL,KAAK,EAAE,6BAA6B;QACpCC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,4BAA4B;QACnCC,KAAK,EAAE;MACX,CAAC,CACJ;MACD,WAAW,EAAE,CACT;QACID,KAAK,EAAE,CAAC,+BAA+B,EAAE,kBAAkB,CAAC;QAC5DC,KAAK,EAAE;MACX,CAAC,CACJ;MACD,wBAAwB,EAAE,CACtB;QACID,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE;MACX,CAAC,CACJ;MACD,SAAS,EAAE,CACP;QACID,KAAK,EAAE,6BAA6B;QACpCC,KAAK,EAAE,GAAG;QACVC,IAAI,EAAE,CAAC;UACCF,KAAK,EAAE,6BAA6B;UACpCC,KAAK,EAAE,GAAG;UACVE,IAAI,EAAE;QACV,CAAC,EACD;UAAEC,OAAO,EAAE;QAAgB,CAAC,EAC5B;UAAEC,YAAY,EAAE;QAAS,CAAC;MAClC,CAAC,EACD;QACIL,KAAK,EAAE,6BAA6B;QACpCC,KAAK,EAAE,GAAG;QACVC,IAAI,EAAE,CAAC;UACCF,KAAK,EAAE,6BAA6B;UACpCC,KAAK,EAAE,GAAG;UACVE,IAAI,EAAE;QACV,CAAC,EACD;UAAEC,OAAO,EAAE;QAAgB,CAAC,EAC5B;UAAEA,OAAO,EAAE;QAAgB,CAAC,EAC5B;UAAEC,YAAY,EAAE;QAAS,CAAC;MAClC,CAAC,CACJ;MACD,eAAe,EAAE,CACb;QACIL,KAAK,EAAE,iCAAiC;QACxCC,KAAK,EAAE;MACX,CAAC,CACJ;MACD,WAAW,EAAE,CACT;QACID,KAAK,EAAE,kBAAkB;QACzBC,KAAK,EAAE;MACX,CAAC,CACJ;MACD,eAAe,EAAE,CACb;QACID,KAAK,EAAE,0CAA0C;QACjDC,KAAK,EAAE,YAAY;QACnBC,IAAI,EAAE,CAAC;UACCF,KAAK,EAAE,wCAAwC;UAC/CC,KAAK,EAAE,KAAK;UACZE,IAAI,EAAE;QACV,CAAC,EACD;UAAEC,OAAO,EAAE;QAAyB,CAAC,EACrC;UAAEA,OAAO,EAAE;QAAY,CAAC,EACxB;UAAEA,OAAO,EAAE;QAAY,CAAC,EACxB;UAAEA,OAAO,EAAE;QAAU,CAAC,EACtB;UAAEA,OAAO,EAAE;QAAY,CAAC,EACxB;UAAEA,OAAO,EAAE;QAAc,CAAC,EAC1B;UAAEC,YAAY,EAAE;QAAc,CAAC;MAEvC,CAAC,CACJ;MACD,WAAW,EAAE,CACT;QACIL,KAAK,EAAE,4BAA4B;QACnCC,KAAK,EAAE;MACX,CAAC,CACJ;MACD,aAAa,EAAE,CACX;QACID,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE;MACX,CAAC,EACD;QACID,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE;MACX,CAAC;IAET,CAAC;IACD,IAAI,CAACM,cAAc,CAAC,CAAC;EACzB,CAAC;EACDX,GAAG,CAACY,QAAQ,CAACV,uBAAuB,EAAED,kBAAkB,CAAC;EACzDH,OAAO,CAACI,uBAAuB,GAAGA,uBAAuB;AAEzD,CAAC,CAAC;AAEFP,GAAG,CAACC,MAAM,CAAC,yBAAyB,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,aAAa,EAAC,WAAW,EAAC,4BAA4B,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EAC3K,IAAIC,GAAG,GAAGH,OAAO,CAAC,eAAe,CAAC;EAClC,IAAIgB,KAAK,GAAGhB,OAAO,CAAC,aAAa,CAAC,CAACgB,KAAK;EACxC,IAAIC,YAAY,GAAGjB,OAAO,CAAC,aAAa,CAAC,CAACkB,QAAQ;EAClD,IAAIA,QAAQ,GAAGjB,OAAO,CAACiB,QAAQ,GAAG,UAAUC,YAAY,EAAE;IACtD,IAAIA,YAAY,EAAE;MACd,IAAI,CAACC,kBAAkB,GAAG,IAAIC,MAAM,CAAC,IAAI,CAACD,kBAAkB,CAACE,MAAM,CAACC,OAAO,CAAC,WAAW,EAAE,GAAG,GAAGJ,YAAY,CAACK,KAAK,CAAC,CAAC;MACnH,IAAI,CAACC,iBAAiB,GAAG,IAAIJ,MAAM,CAAC,IAAI,CAACI,iBAAiB,CAACH,MAAM,CAACC,OAAO,CAAC,WAAW,EAAE,GAAG,GAAGJ,YAAY,CAACO,GAAG,CAAC,CAAC;IACnH;EACJ,CAAC;EACDvB,GAAG,CAACY,QAAQ,CAACG,QAAQ,EAAED,YAAY,CAAC;EACpC,CAAC,YAAY;IACT,IAAI,CAACG,kBAAkB,GAAG,kCAAkC;IAC5D,IAAI,CAACK,iBAAiB,GAAG,sCAAsC;IAC/D,IAAI,CAACE,wBAAwB,GAAG,sBAAsB;IACtD,IAAI,CAACC,wBAAwB,GAAG,0BAA0B;IAC1D,IAAI,CAACC,aAAa,GAAG,2BAA2B;IAChD,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACC,aAAa;IAC5C,IAAI,CAACA,aAAa,GAAG,UAAUC,OAAO,EAAEC,SAAS,EAAEC,GAAG,EAAE;MACpD,IAAIC,IAAI,GAAGH,OAAO,CAACI,OAAO,CAACF,GAAG,CAAC;MAC/B,IAAI,IAAI,CAACP,wBAAwB,CAACU,IAAI,CAACF,IAAI,CAAC,EAAE;QAC1C,IAAI,CAAC,IAAI,CAACN,aAAa,CAACQ,IAAI,CAACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAACP,wBAAwB,CAACS,IAAI,CAACF,IAAI,CAAC,EAC3E,OAAO,EAAE;MACjB;MACA,IAAIG,EAAE,GAAG,IAAI,CAACR,kBAAkB,CAACE,OAAO,EAAEC,SAAS,EAAEC,GAAG,CAAC;MACzD,IAAI,CAACI,EAAE,IAAI,IAAI,CAACT,aAAa,CAACQ,IAAI,CAACF,IAAI,CAAC,EACpC,OAAO,OAAO,CAAC,CAAC;MACpB,OAAOG,EAAE;IACb,CAAC;IACD,IAAI,CAACC,kBAAkB,GAAG,UAAUP,OAAO,EAAEC,SAAS,EAAEC,GAAG,EAAEM,cAAc,EAAE;MACzE,IAAIL,IAAI,GAAGH,OAAO,CAACI,OAAO,CAACF,GAAG,CAAC;MAC/B,IAAI,IAAI,CAACL,aAAa,CAACQ,IAAI,CAACF,IAAI,CAAC,EAC7B,OAAO,IAAI,CAACM,qBAAqB,CAACT,OAAO,EAAEG,IAAI,EAAED,GAAG,CAAC;MACzD,IAAIQ,KAAK,GAAGP,IAAI,CAACO,KAAK,CAAC,IAAI,CAACtB,kBAAkB,CAAC;MAC/C,IAAIsB,KAAK,EAAE;QACP,IAAIC,CAAC,GAAGD,KAAK,CAACE,KAAK;QACnB,IAAIF,KAAK,CAAC,CAAC,CAAC,EACR,OAAO,IAAI,CAACG,mBAAmB,CAACb,OAAO,EAAEU,KAAK,CAAC,CAAC,CAAC,EAAER,GAAG,EAAES,CAAC,CAAC;QAC9D,IAAIG,KAAK,GAAGd,OAAO,CAACe,mBAAmB,CAACb,GAAG,EAAES,CAAC,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACM,MAAM,EAAE,CAAC,CAAC;QACpE,IAAIF,KAAK,IAAI,CAACA,KAAK,CAACG,WAAW,CAAC,CAAC,EAAE;UAC/B,IAAIT,cAAc,EAAE;YAChBM,KAAK,GAAG,IAAI,CAACI,eAAe,CAAClB,OAAO,EAAEE,GAAG,CAAC;UAC9C,CAAC,MACI,IAAID,SAAS,IAAI,KAAK,EACvBa,KAAK,GAAG,IAAI;QACpB;QACA,OAAOA,KAAK;MAChB;MACA,IAAIb,SAAS,KAAK,WAAW,EACzB;MACJ,IAAIS,KAAK,GAAGP,IAAI,CAACO,KAAK,CAAC,IAAI,CAACjB,iBAAiB,CAAC;MAC9C,IAAIiB,KAAK,EAAE;QACP,IAAIC,CAAC,GAAGD,KAAK,CAACE,KAAK,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACM,MAAM;QACrC,IAAIN,KAAK,CAAC,CAAC,CAAC,EACR,OAAO,IAAI,CAACS,mBAAmB,CAACnB,OAAO,EAAEU,KAAK,CAAC,CAAC,CAAC,EAAER,GAAG,EAAES,CAAC,CAAC;QAC9D,OAAOX,OAAO,CAACe,mBAAmB,CAACb,GAAG,EAAES,CAAC,EAAE,CAAC,CAAC,CAAC;MAClD;IACJ,CAAC;IACD,IAAI,CAACO,eAAe,GAAG,UAAUlB,OAAO,EAAEE,GAAG,EAAE;MAC3C,IAAIC,IAAI,GAAGH,OAAO,CAACI,OAAO,CAACF,GAAG,CAAC;MAC/B,IAAIkB,WAAW,GAAGjB,IAAI,CAACkB,MAAM,CAAC,IAAI,CAAC;MACnC,IAAIC,QAAQ,GAAGpB,GAAG;MAClB,IAAIqB,WAAW,GAAGpB,IAAI,CAACa,MAAM;MAC7Bd,GAAG,GAAGA,GAAG,GAAG,CAAC;MACb,IAAIsB,MAAM,GAAGtB,GAAG;MAChB,IAAIuB,MAAM,GAAGzB,OAAO,CAAC0B,SAAS,CAAC,CAAC;MAChC,OAAO,EAAExB,GAAG,GAAGuB,MAAM,EAAE;QACnBtB,IAAI,GAAGH,OAAO,CAACI,OAAO,CAACF,GAAG,CAAC;QAC3B,IAAIyB,MAAM,GAAGxB,IAAI,CAACkB,MAAM,CAAC,IAAI,CAAC;QAC9B,IAAIM,MAAM,KAAK,CAAC,CAAC,EACb;QACJ,IAAIP,WAAW,GAAGO,MAAM,EACpB;QACJ,IAAIC,QAAQ,GAAG,IAAI,CAACrB,kBAAkB,CAACP,OAAO,EAAE,KAAK,EAAEE,GAAG,CAAC;QAC3D,IAAI0B,QAAQ,EAAE;UACV,IAAIA,QAAQ,CAACpC,KAAK,CAACU,GAAG,IAAIoB,QAAQ,EAAE;YAChC;UACJ,CAAC,MACI,IAAIM,QAAQ,CAACX,WAAW,CAAC,CAAC,EAAE;YAC7Bf,GAAG,GAAG0B,QAAQ,CAAClC,GAAG,CAACQ,GAAG;UAC1B,CAAC,MACI,IAAIkB,WAAW,IAAIO,MAAM,EAAE;YAC5B;UACJ;QACJ;QACAH,MAAM,GAAGtB,GAAG;MAChB;MACA,OAAO,IAAIlB,KAAK,CAACsC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,EAAExB,OAAO,CAACI,OAAO,CAACoB,MAAM,CAAC,CAACR,MAAM,CAAC;IACnF,CAAC;IACD,IAAI,CAACP,qBAAqB,GAAG,UAAUT,OAAO,EAAEG,IAAI,EAAED,GAAG,EAAE;MACvD,IAAIqB,WAAW,GAAGpB,IAAI,CAACkB,MAAM,CAAC,MAAM,CAAC;MACrC,IAAII,MAAM,GAAGzB,OAAO,CAAC0B,SAAS,CAAC,CAAC;MAChC,IAAIJ,QAAQ,GAAGpB,GAAG;MAClB,IAAI2B,EAAE,GAAG,sCAAsC;MAC/C,IAAIC,KAAK,GAAG,CAAC;MACb,OAAO,EAAE5B,GAAG,GAAGuB,MAAM,EAAE;QACnBtB,IAAI,GAAGH,OAAO,CAACI,OAAO,CAACF,GAAG,CAAC;QAC3B,IAAI6B,CAAC,GAAGF,EAAE,CAACG,IAAI,CAAC7B,IAAI,CAAC;QACrB,IAAI,CAAC4B,CAAC,EACF;QACJ,IAAIA,CAAC,CAAC,CAAC,CAAC,EACJD,KAAK,EAAE,CAAC,KAERA,KAAK,EAAE;QACX,IAAI,CAACA,KAAK,EACN;MACR;MACA,IAAIN,MAAM,GAAGtB,GAAG;MAChB,IAAIsB,MAAM,GAAGF,QAAQ,EAAE;QACnB,OAAO,IAAItC,KAAK,CAACsC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,EAAErB,IAAI,CAACa,MAAM,CAAC;MAChE;IACJ,CAAC;EACL,CAAC,EAAEiB,IAAI,CAAC/C,QAAQ,CAACgD,SAAS,CAAC;AAE3B,CAAC,CAAC;AAEFpE,GAAG,CAACC,MAAM,CAAC,iCAAiC,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,WAAW,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EACxI,IAAIc,KAAK,GAAGhB,OAAO,CAAC,UAAU,CAAC,CAACgB,KAAK;EACrC,IAAImD,oBAAoB,GAAG,SAAAA,CAAA,EAAY,CAAE,CAAC;EAC1C,CAAC,YAAY;IACT,IAAI,CAACC,YAAY,GAAG,UAAUjC,IAAI,EAAEkC,KAAK,EAAE;MACvC,IAAI,CAAC,OAAO,CAAChC,IAAI,CAACF,IAAI,CAAC,EACnB,OAAO,KAAK;MAChB,OAAO,QAAQ,CAACE,IAAI,CAACgC,KAAK,CAAC;IAC/B,CAAC;IACD,IAAI,CAACC,WAAW,GAAG,UAAUC,GAAG,EAAErC,GAAG,EAAE;MACnC,IAAIC,IAAI,GAAGoC,GAAG,CAACnC,OAAO,CAACF,GAAG,CAAC;MAC3B,IAAIQ,KAAK,GAAGP,IAAI,CAACO,KAAK,CAAC,UAAU,CAAC;MAClC,IAAI,CAACA,KAAK,EACN,OAAO,CAAC;MACZ,IAAI8B,MAAM,GAAG9B,KAAK,CAAC,CAAC,CAAC,CAACM,MAAM;MAC5B,IAAIyB,YAAY,GAAGF,GAAG,CAACG,mBAAmB,CAAC;QAAExC,GAAG,EAAEA,GAAG;QAAEsC,MAAM,EAAEA;MAAO,CAAC,CAAC;MACxE,IAAI,CAACC,YAAY,IAAIA,YAAY,CAACvC,GAAG,IAAIA,GAAG,EACxC,OAAO,CAAC;MACZ,IAAIyB,MAAM,GAAG,IAAI,CAACgB,UAAU,CAACJ,GAAG,CAACnC,OAAO,CAACqC,YAAY,CAACvC,GAAG,CAAC,CAAC;MAC3DqC,GAAG,CAAChD,OAAO,CAAC,IAAIP,KAAK,CAACkB,GAAG,EAAE,CAAC,EAAEA,GAAG,EAAEsC,MAAM,GAAG,CAAC,CAAC,EAAEb,MAAM,CAAC;IAC3D,CAAC;IACD,IAAI,CAACgB,UAAU,GAAG,UAAUxC,IAAI,EAAE;MAC9B,OAAOA,IAAI,CAACO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;EACL,CAAC,EAAEuB,IAAI,CAACE,oBAAoB,CAACD,SAAS,CAAC;EACvCjE,OAAO,CAACkE,oBAAoB,GAAGA,oBAAoB;AAEnD,CAAC,CAAC;AAEFrE,GAAG,CAACC,MAAM,CAAC,oBAAoB,EAAC,CAAC,SAAS,EAAC,SAAS,EAAC,QAAQ,EAAC,aAAa,EAAC,eAAe,EAAC,oCAAoC,EAAC,yBAAyB,EAAC,iCAAiC,CAAC,EAAE,UAASC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAC;EAAC,YAAY;;EAC9O,IAAIC,GAAG,GAAGH,OAAO,CAAC,YAAY,CAAC;EAC/B,IAAI4E,QAAQ,GAAG5E,OAAO,CAAC,QAAQ,CAAC,CAAC6E,IAAI;EACrC,IAAIxE,uBAAuB,GAAGL,OAAO,CAAC,6BAA6B,CAAC,CAACK,uBAAuB;EAC5F,IAAIyE,cAAc,GAAG9E,OAAO,CAAC,kBAAkB,CAAC,CAACkB,QAAQ;EACzD,IAAIiD,oBAAoB,GAAGnE,OAAO,CAAC,0BAA0B,CAAC,CAACmE,oBAAoB;EACnF,IAAIU,IAAI,GAAG,SAAAA,CAAA,EAAY;IACnBD,QAAQ,CAACX,IAAI,CAAC,IAAI,CAAC;IACnB,IAAI,CAACc,cAAc,GAAG1E,uBAAuB;IAC7C,IAAI,CAAC2E,QAAQ,GAAG,IAAIb,oBAAoB,CAAC,CAAC;IAC1C,IAAI,CAACc,UAAU,GAAG,IAAI,CAACC,iBAAiB;IACxC,IAAI,CAACC,YAAY,GAAG,IAAIL,cAAc,CAAC,CAAC;EAC5C,CAAC;EACD3E,GAAG,CAACY,QAAQ,CAAC8D,IAAI,EAAED,QAAQ,CAAC;EAC5B,CAAC,YAAY;IACT,IAAI,CAACQ,gBAAgB,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC;IACnC,IAAI,CAACvE,YAAY,GAAG;MAAEW,KAAK,EAAE,IAAI;MAAEE,GAAG,EAAE;IAAK,CAAC;IAC9C,IAAI,CAAC2D,GAAG,GAAG,oBAAoB;EACnC,CAAC,EAAEpB,IAAI,CAACY,IAAI,CAACX,SAAS,CAAC;EACvBjE,OAAO,CAAC4E,IAAI,GAAGA,IAAI;AAEnB,CAAC,CAAC;AAAiB,CAAC,YAAW;EACX/E,GAAG,CAACE,OAAO,CAAC,CAAC,oBAAoB,CAAC,EAAE,UAAS+D,CAAC,EAAE;IAC5C,IAAI,OAAO7D,MAAM,IAAI,QAAQ,IAAI,OAAOD,OAAO,IAAI,QAAQ,IAAIC,MAAM,EAAE;MACnEA,MAAM,CAACD,OAAO,GAAG8D,CAAC;IACtB;EACJ,CAAC,CAAC;AACN,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}