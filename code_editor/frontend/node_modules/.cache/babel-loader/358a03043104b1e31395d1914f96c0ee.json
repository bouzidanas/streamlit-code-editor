{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\n/** @ignore */\nexport const kUnknownNullCount = -1;\n/** @ignore */\nexport class Data {\n  constructor(type, offset, length, nullCount, buffers, childData, dictionary) {\n    this.type = type;\n    this.dictionary = dictionary;\n    this.offset = Math.floor(Math.max(offset || 0, 0));\n    this.length = Math.floor(Math.max(length || 0, 0));\n    this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    this.childData = (childData || []).map(x => x instanceof Data ? x : x.data);\n    let buffer;\n    if (buffers instanceof Data) {\n      this.stride = buffers.stride;\n      this.values = buffers.values;\n      this.typeIds = buffers.typeIds;\n      this.nullBitmap = buffers.nullBitmap;\n      this.valueOffsets = buffers.valueOffsets;\n    } else {\n      this.stride = strideForType(type);\n      if (buffers) {\n        (buffer = buffers[0]) && (this.valueOffsets = buffer);\n        (buffer = buffers[1]) && (this.values = buffer);\n        (buffer = buffers[2]) && (this.nullBitmap = buffer);\n        (buffer = buffers[3]) && (this.typeIds = buffer);\n      }\n    }\n  }\n  get typeId() {\n    return this.type.typeId;\n  }\n  get ArrayType() {\n    return this.type.ArrayType;\n  }\n  get buffers() {\n    return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];\n  }\n  get byteLength() {\n    let byteLength = 0;\n    let {\n      valueOffsets,\n      values,\n      nullBitmap,\n      typeIds\n    } = this;\n    valueOffsets && (byteLength += valueOffsets.byteLength);\n    values && (byteLength += values.byteLength);\n    nullBitmap && (byteLength += nullBitmap.byteLength);\n    typeIds && (byteLength += typeIds.byteLength);\n    return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n  }\n  get nullCount() {\n    let nullCount = this._nullCount;\n    let nullBitmap;\n    if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n      this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n    }\n    return nullCount;\n  }\n  clone(type, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers = this, childData = this.childData) {\n    return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n  }\n  slice(offset, length) {\n    const {\n      stride,\n      typeId,\n      childData\n    } = this;\n    // +true === 1, +false === 0, so this means\n    // we keep nullCount at 0 if it's already 0,\n    // otherwise set to the invalidated flag -1\n    const nullCount = +(this._nullCount === 0) - 1;\n    const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n    const buffers = this._sliceBuffers(offset, length, stride, typeId);\n    return this.clone(this.type, this.offset + offset, length, nullCount, buffers,\n    // Don't slice children if we have value offsets (the variable-width types)\n    !childData.length || this.valueOffsets ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n  }\n  _changeLengthAndBackfillNullBitmap(newLength) {\n    if (this.typeId === Type.Null) {\n      return this.clone(this.type, 0, newLength, 0);\n    }\n    const {\n      length,\n      nullCount\n    } = this;\n    // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n    const bitmap = new Uint8Array((newLength + 63 & ~63) >> 3).fill(255, 0, length >> 3);\n    // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n    bitmap[length >> 3] = (1 << length - (length & ~7)) - 1;\n    // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n    if (nullCount > 0) {\n      bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n    }\n    const buffers = this.buffers;\n    buffers[BufferType.VALIDITY] = bitmap;\n    return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n  }\n  _sliceBuffers(offset, length, stride, typeId) {\n    let arr,\n      {\n        buffers\n      } = this;\n    // If typeIds exist, slice the typeIds buffer\n    (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n    // If offsets exist, only slice the offsets buffer\n    (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n    // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n    (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n    return buffers;\n  }\n  _sliceChildren(childData, offset, length) {\n    return childData.map(child => child.slice(offset, length));\n  }\n  //\n  // Convenience methods for creating Data instances for each of the Arrow Vector types\n  //\n  /** @nocollapse */\n  static new(type, offset, length, nullCount, buffers, childData, dictionary) {\n    if (buffers instanceof Data) {\n      buffers = buffers.buffers;\n    } else if (!buffers) {\n      buffers = [];\n    }\n    switch (type.typeId) {\n      case Type.Null:\n        return Data.Null(type, offset, length);\n      case Type.Int:\n        return Data.Int(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n      case Type.Dictionary:\n        return Data.Dictionary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary);\n      case Type.Float:\n        return Data.Float(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n      case Type.Bool:\n        return Data.Bool(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n      case Type.Decimal:\n        return Data.Decimal(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n      case Type.Date:\n        return Data.Date(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n      case Type.Time:\n        return Data.Time(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n      case Type.Timestamp:\n        return Data.Timestamp(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n      case Type.Interval:\n        return Data.Interval(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n      case Type.FixedSizeBinary:\n        return Data.FixedSizeBinary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n      case Type.Binary:\n        return Data.Binary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []);\n      case Type.Utf8:\n        return Data.Utf8(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []);\n      case Type.List:\n        return Data.List(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]);\n      case Type.FixedSizeList:\n        return Data.FixedSizeList(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]);\n      case Type.Struct:\n        return Data.Struct(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []);\n      case Type.Map:\n        return Data.Map(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]);\n      case Type.Union:\n        return Data.Union(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData);\n    }\n    throw new Error(`Unrecognized typeId ${type.typeId}`);\n  }\n  /** @nocollapse */\n  static Null(type, offset, length) {\n    return new Data(type, offset, length, 0);\n  }\n  /** @nocollapse */\n  static Int(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static Dictionary(type, offset, length, nullCount, nullBitmap, data, dictionary) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n  }\n  /** @nocollapse */\n  static Float(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static Bool(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static Decimal(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static Date(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static Time(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static Timestamp(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static Interval(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n    return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n    return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n  static List(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n    return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n  }\n  /** @nocollapse */\n  static FixedSizeList(type, offset, length, nullCount, nullBitmap, child) {\n    return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n  }\n  /** @nocollapse */\n  static Struct(type, offset, length, nullCount, nullBitmap, children) {\n    return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n  }\n  /** @nocollapse */\n  static Map(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n    return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n  }\n  /** @nocollapse */\n  static Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildren, children) {\n    const buffers = [undefined, undefined, toUint8Array(nullBitmap), toArrayBufferView(type.ArrayType, typeIds)];\n    if (type.mode === UnionMode.Sparse) {\n      return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren);\n    }\n    buffers[BufferType.OFFSET] = toInt32Array(valueOffsetsOrChildren);\n    return new Data(type, offset, length, nullCount, buffers, children);\n  }\n}\nData.prototype.childData = Object.freeze([]);","map":{"version":3,"names":["truncateBitmap","popcnt_bit_range","BufferType","UnionMode","Type","strideForType","toArrayBufferView","toUint8Array","toInt32Array","kUnknownNullCount","Data","constructor","type","offset","length","nullCount","buffers","childData","dictionary","Math","floor","max","_nullCount","map","x","data","buffer","stride","values","typeIds","nullBitmap","valueOffsets","typeId","ArrayType","byteLength","reduce","child","clone","slice","childStride","_sliceBuffers","_sliceChildren","_changeLengthAndBackfillNullBitmap","newLength","Null","bitmap","Uint8Array","fill","set","VALIDITY","arr","TYPE","subarray","OFFSET","DATA","new","Int","Dictionary","Float","Bool","Decimal","Date","Time","Timestamp","Interval","FixedSizeBinary","Binary","Utf8","List","FixedSizeList","Struct","Map","Union","Error","undefined","indices","children","valueOffsetsOrChildren","mode","Sparse","prototype","Object","freeze"],"sources":["data.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}