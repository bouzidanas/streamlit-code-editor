{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\n/** @ignore */\nexport class TypeComparator extends Visitor {\n  compareSchemas(schema, other) {\n    return schema === other || other instanceof schema.constructor && instance.compareFields(schema.fields, other.fields);\n  }\n  compareFields(fields, others) {\n    return fields === others || Array.isArray(fields) && Array.isArray(others) && fields.length === others.length && fields.every((f, i) => instance.compareField(f, others[i]));\n  }\n  compareField(field, other) {\n    return field === other || other instanceof field.constructor && field.name === other.name && field.nullable === other.nullable && instance.visit(field.type, other.type);\n  }\n}\nfunction compareConstructor(type, other) {\n  return other instanceof type.constructor;\n}\nfunction compareAny(type, other) {\n  return type === other || compareConstructor(type, other);\n}\nfunction compareInt(type, other) {\n  return type === other || compareConstructor(type, other) && type.bitWidth === other.bitWidth && type.isSigned === other.isSigned;\n}\nfunction compareFloat(type, other) {\n  return type === other || compareConstructor(type, other) && type.precision === other.precision;\n}\nfunction compareFixedSizeBinary(type, other) {\n  return type === other || compareConstructor(type, other) && type.byteWidth === other.byteWidth;\n}\nfunction compareDate(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit;\n}\nfunction compareTimestamp(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit && type.timezone === other.timezone;\n}\nfunction compareTime(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit && type.bitWidth === other.bitWidth;\n}\nfunction compareList(type, other) {\n  return type === other || compareConstructor(type, other) && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\nfunction compareStruct(type, other) {\n  return type === other || compareConstructor(type, other) && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\nfunction compareUnion(type, other) {\n  return type === other || compareConstructor(type, other) && type.mode === other.mode && type.typeIds.every((x, i) => x === other.typeIds[i]) && instance.compareFields(type.children, other.children);\n}\nfunction compareDictionary(type, other) {\n  return type === other || compareConstructor(type, other) && type.id === other.id && type.isOrdered === other.isOrdered && instance.visit(type.indices, other.indices) && instance.visit(type.dictionary, other.dictionary);\n}\nfunction compareInterval(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit;\n}\nfunction compareFixedSizeList(type, other) {\n  return type === other || compareConstructor(type, other) && type.listSize === other.listSize && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\nfunction compareMap(type, other) {\n  return type === other || compareConstructor(type, other) && type.keysSorted === other.keysSorted && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\nTypeComparator.prototype.visitNull = compareAny;\nTypeComparator.prototype.visitBool = compareAny;\nTypeComparator.prototype.visitInt = compareInt;\nTypeComparator.prototype.visitInt8 = compareInt;\nTypeComparator.prototype.visitInt16 = compareInt;\nTypeComparator.prototype.visitInt32 = compareInt;\nTypeComparator.prototype.visitInt64 = compareInt;\nTypeComparator.prototype.visitUint8 = compareInt;\nTypeComparator.prototype.visitUint16 = compareInt;\nTypeComparator.prototype.visitUint32 = compareInt;\nTypeComparator.prototype.visitUint64 = compareInt;\nTypeComparator.prototype.visitFloat = compareFloat;\nTypeComparator.prototype.visitFloat16 = compareFloat;\nTypeComparator.prototype.visitFloat32 = compareFloat;\nTypeComparator.prototype.visitFloat64 = compareFloat;\nTypeComparator.prototype.visitUtf8 = compareAny;\nTypeComparator.prototype.visitBinary = compareAny;\nTypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate = compareDate;\nTypeComparator.prototype.visitDateDay = compareDate;\nTypeComparator.prototype.visitDateMillisecond = compareDate;\nTypeComparator.prototype.visitTimestamp = compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;\nTypeComparator.prototype.visitTime = compareTime;\nTypeComparator.prototype.visitTimeSecond = compareTime;\nTypeComparator.prototype.visitTimeMillisecond = compareTime;\nTypeComparator.prototype.visitTimeMicrosecond = compareTime;\nTypeComparator.prototype.visitTimeNanosecond = compareTime;\nTypeComparator.prototype.visitDecimal = compareAny;\nTypeComparator.prototype.visitList = compareList;\nTypeComparator.prototype.visitStruct = compareStruct;\nTypeComparator.prototype.visitUnion = compareUnion;\nTypeComparator.prototype.visitDenseUnion = compareUnion;\nTypeComparator.prototype.visitSparseUnion = compareUnion;\nTypeComparator.prototype.visitDictionary = compareDictionary;\nTypeComparator.prototype.visitInterval = compareInterval;\nTypeComparator.prototype.visitIntervalDayTime = compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth = compareInterval;\nTypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;\nTypeComparator.prototype.visitMap = compareMap;\n/** @ignore */\nexport const instance = new TypeComparator();","map":{"version":3,"names":["Visitor","TypeComparator","compareSchemas","schema","other","constructor","instance","compareFields","fields","others","Array","isArray","length","every","f","i","compareField","field","name","nullable","visit","type","compareConstructor","compareAny","compareInt","bitWidth","isSigned","compareFloat","precision","compareFixedSizeBinary","byteWidth","compareDate","unit","compareTimestamp","timezone","compareTime","compareList","children","compareStruct","compareUnion","mode","typeIds","x","compareDictionary","id","isOrdered","indices","dictionary","compareInterval","compareFixedSizeList","listSize","compareMap","keysSorted","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap"],"sources":["visitor/typecomparator.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}