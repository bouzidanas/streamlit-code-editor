{"ast":null,"code":"'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */\nvar end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function () {\n    return !this.tokens.length;\n  },\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n  read: function () {\n    if (!this.tokens.length) return end_of_stream;\n    return this.tokens.shift();\n  },\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function (token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/token;\n      while (tokens.length) this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function (token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/token;\n      while (tokens.length) this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal) throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function (stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function (stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */\nvar DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n  Object.defineProperty(this, 'encoding', {\n    value: 'utf-8'\n  });\n  Object.defineProperty(this, 'fatal', {\n    value: this._fatal\n  });\n  Object.defineProperty(this, 'ignoreBOM', {\n    value: this._ignoreBOM\n  });\n}\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input && input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer, input.byteOffset, input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n    options = ToDictionary(options);\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({\n        fatal: this._fatal\n      });\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n    var input_stream = new Stream(bytes);\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished) break;\n      if (result === null) continue;\n      if (Array.isArray(result)) code_points.push.apply(code_points, /**@type {!Array.<number>}*/result);else code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished) break;\n        if (result === null) continue;\n        if (Array.isArray(result)) code_points.push.apply(code_points, /**@type {!Array.<number>}*/result);else code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 && !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder)) return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {\n    fatal: Boolean(options['fatal'])\n  };\n  Object.defineProperty(this, 'encoding', {\n    value: 'utf-8'\n  });\n}\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming) this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished) break;\n      if (Array.isArray(result)) bytes.push.apply(bytes, /**@type {!Array.<number>}*/result);else bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished) break;\n        if (Array.isArray(result)) bytes.push.apply(bytes, /**@type {!Array.<number>}*/result);else bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */utf8_code_point = 0,\n    /** @type {number} */utf8_bytes_seen = 0,\n    /** @type {number} */utf8_bytes_needed = 0,\n    /** @type {number} */utf8_lower_boundary = 0x80,\n    /** @type {number} */utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function (stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream) return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0) utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED) utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0) utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4) utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << 6 * utf8_bytes_needed;\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += bite - 0x80 << 6 * (utf8_bytes_needed - utf8_bytes_seen);\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed) return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function (stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream) return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f)) return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> 6 * count) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> 6 * (count - 1);\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | temp & 0x3F);\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\nexport { TextEncoder, TextDecoder };","map":{"version":3,"names":["inRange","a","min","max","ToDictionary","o","undefined","Object","TypeError","stringToCodePoints","string","s","String","n","length","i","u","c","charCodeAt","push","d","b","codePointsToString","code_points","cp","fromCharCode","end_of_stream","Stream","tokens","slice","call","prototype","endOfStream","read","shift","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","Decoder","handler","stream","bite","Encoder","code_point","DEFAULT_ENCODING","TextDecoder","encoding","options","toLowerCase","Error","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","defineProperty","value","decode","input","bytes","ArrayBuffer","Uint8Array","buffer","byteOffset","byteLength","UTF8Decoder","input_stream","result","apply","indexOf","TextEncoder","_encoder","_options","encode","opt_string","UTF8Encoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","count","offset","temp"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":["'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}