{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { uint16ToFloat64 } from '../util/math';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n/** @ignore */\nconst epochDaysToMs = (data, index) => 86400000 * data[index];\n/** @ignore */\nconst epochMillisecondsLongToMs = (data, index) => 4294967296 * data[index + 1] + (data[index] >>> 0);\n/** @ignore */\nconst epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + (data[index] >>> 0) / 1000;\n/** @ignore */\nconst epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + (data[index] >>> 0) / 1000000;\n/** @ignore */\nconst epochMillisecondsToDate = epochMs => new Date(epochMs);\n/** @ignore */\nconst epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */\nconst epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n/** @ignore */\nconst getNull = (_vector, _index) => null;\n/** @ignore */\nconst getVariableWidthBytes = (values, valueOffsets, index) => {\n  const {\n    [index]: x,\n    [index + 1]: y\n  } = valueOffsets;\n  return x != null && y != null ? values.subarray(x, y) : null;\n};\n/** @ignore */\nconst getBool = (_ref, index) => {\n  let {\n    offset,\n    values\n  } = _ref;\n  const idx = offset + index;\n  const byte = values[idx >> 3];\n  return (byte & 1 << idx % 8) !== 0;\n};\n/** @ignore */\nconst getDateDay = (_ref2, index) => {\n  let {\n    values\n  } = _ref2;\n  return epochDaysToDate(values, index);\n};\n/** @ignore */\nconst getDateMillisecond = (_ref3, index) => {\n  let {\n    values\n  } = _ref3;\n  return epochMillisecondsLongToDate(values, index * 2);\n};\n/** @ignore */\nconst getNumeric = (_ref4, index) => {\n  let {\n    stride,\n    values\n  } = _ref4;\n  return values[stride * index];\n};\n/** @ignore */\nconst getFloat16 = (_ref5, index) => {\n  let {\n    stride,\n    values\n  } = _ref5;\n  return uint16ToFloat64(values[stride * index]);\n};\n/** @ignore */\nconst getBigInts = (_ref6, index) => {\n  let {\n    stride,\n    values,\n    type\n  } = _ref6;\n  return BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n};\n/** @ignore */\nconst getFixedSizeBinary = (_ref7, index) => {\n  let {\n    stride,\n    values\n  } = _ref7;\n  return values.subarray(stride * index, stride * (index + 1));\n};\n/** @ignore */\nconst getBinary = (_ref8, index) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref8;\n  return getVariableWidthBytes(values, valueOffsets, index);\n};\n/** @ignore */\nconst getUtf8 = (_ref9, index) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref9;\n  const bytes = getVariableWidthBytes(values, valueOffsets, index);\n  return bytes !== null ? decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = (vector, index) => vector.type.bitWidth < 64 ? getNumeric(vector, index) : getBigInts(vector, index);\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = (vector, index) => vector.type.precision !== Precision.HALF ? getNumeric(vector, index) : getFloat16(vector, index);\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = (vector, index) => vector.type.unit === DateUnit.DAY ? getDateDay(vector, index) : getDateMillisecond(vector, index);\n/** @ignore */\nconst getTimestampSecond = (_ref10, index) => {\n  let {\n    values\n  } = _ref10;\n  return 1000 * epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nconst getTimestampMillisecond = (_ref11, index) => {\n  let {\n    values\n  } = _ref11;\n  return epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nconst getTimestampMicrosecond = (_ref12, index) => {\n  let {\n    values\n  } = _ref12;\n  return epochMicrosecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nconst getTimestampNanosecond = (_ref13, index) => {\n  let {\n    values\n  } = _ref13;\n  return epochNanosecondsLongToMs(values, index * 2);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp = (vector, index) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimestampSecond(vector, index);\n    case TimeUnit.MILLISECOND:\n      return getTimestampMillisecond(vector, index);\n    case TimeUnit.MICROSECOND:\n      return getTimestampMicrosecond(vector, index);\n    case TimeUnit.NANOSECOND:\n      return getTimestampNanosecond(vector, index);\n  }\n};\n/** @ignore */\nconst getTimeSecond = (_ref14, index) => {\n  let {\n    values,\n    stride\n  } = _ref14;\n  return values[stride * index];\n};\n/** @ignore */\nconst getTimeMillisecond = (_ref15, index) => {\n  let {\n    values,\n    stride\n  } = _ref15;\n  return values[stride * index];\n};\n/** @ignore */\nconst getTimeMicrosecond = (_ref16, index) => {\n  let {\n    values\n  } = _ref16;\n  return BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n};\n/** @ignore */\nconst getTimeNanosecond = (_ref17, index) => {\n  let {\n    values\n  } = _ref17;\n  return BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getTime = (vector, index) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimeSecond(vector, index);\n    case TimeUnit.MILLISECOND:\n      return getTimeMillisecond(vector, index);\n    case TimeUnit.MICROSECOND:\n      return getTimeMicrosecond(vector, index);\n    case TimeUnit.NANOSECOND:\n      return getTimeNanosecond(vector, index);\n  }\n};\n/** @ignore */\nconst getDecimal = (_ref18, index) => {\n  let {\n    values\n  } = _ref18;\n  return BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n};\n/** @ignore */\nconst getList = (vector, index) => {\n  const child = vector.getChildAt(0),\n    {\n      valueOffsets,\n      stride\n    } = vector;\n  return child.slice(valueOffsets[index * stride], valueOffsets[index * stride + 1]);\n};\n/** @ignore */\nconst getMap = (vector, index) => {\n  return vector.bind(index);\n};\n/** @ignore */\nconst getStruct = (vector, index) => {\n  return vector.bind(index);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = (vector, index) => {\n  return vector.type.mode === UnionMode.Dense ? getDenseUnion(vector, index) : getSparseUnion(vector, index);\n};\n/** @ignore */\nconst getDenseUnion = (vector, index) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  return child ? child.get(vector.valueOffsets[index]) : null;\n};\n/** @ignore */\nconst getSparseUnion = (vector, index) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  return child ? child.get(index) : null;\n};\n/** @ignore */\nconst getDictionary = (vector, index) => {\n  return vector.getValue(vector.getKey(index));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = (vector, index) => vector.type.unit === IntervalUnit.DAY_TIME ? getIntervalDayTime(vector, index) : getIntervalYearMonth(vector, index);\n/** @ignore */\nconst getIntervalDayTime = (_ref19, index) => {\n  let {\n    values\n  } = _ref19;\n  return values.subarray(2 * index, 2 * (index + 1));\n};\n/** @ignore */\nconst getIntervalYearMonth = (_ref20, index) => {\n  let {\n    values\n  } = _ref20;\n  const interval = values[index];\n  const int32s = new Int32Array(2);\n  int32s[0] = interval / 12 | 0; /* years */\n  int32s[1] = interval % 12 | 0; /* months */\n  return int32s;\n};\n/** @ignore */\nconst getFixedSizeList = (vector, index) => {\n  const child = vector.getChildAt(0),\n    {\n      stride\n    } = vector;\n  return child.slice(index * stride, (index + 1) * stride);\n};\nGetVisitor.prototype.visitNull = getNull;\nGetVisitor.prototype.visitBool = getBool;\nGetVisitor.prototype.visitInt = getInt;\nGetVisitor.prototype.visitInt8 = getNumeric;\nGetVisitor.prototype.visitInt16 = getNumeric;\nGetVisitor.prototype.visitInt32 = getNumeric;\nGetVisitor.prototype.visitInt64 = getBigInts;\nGetVisitor.prototype.visitUint8 = getNumeric;\nGetVisitor.prototype.visitUint16 = getNumeric;\nGetVisitor.prototype.visitUint32 = getNumeric;\nGetVisitor.prototype.visitUint64 = getBigInts;\nGetVisitor.prototype.visitFloat = getFloat;\nGetVisitor.prototype.visitFloat16 = getFloat16;\nGetVisitor.prototype.visitFloat32 = getNumeric;\nGetVisitor.prototype.visitFloat64 = getNumeric;\nGetVisitor.prototype.visitUtf8 = getUtf8;\nGetVisitor.prototype.visitBinary = getBinary;\nGetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;\nGetVisitor.prototype.visitDate = getDate;\nGetVisitor.prototype.visitDateDay = getDateDay;\nGetVisitor.prototype.visitDateMillisecond = getDateMillisecond;\nGetVisitor.prototype.visitTimestamp = getTimestamp;\nGetVisitor.prototype.visitTimestampSecond = getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;\nGetVisitor.prototype.visitTime = getTime;\nGetVisitor.prototype.visitTimeSecond = getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;\nGetVisitor.prototype.visitDecimal = getDecimal;\nGetVisitor.prototype.visitList = getList;\nGetVisitor.prototype.visitStruct = getStruct;\nGetVisitor.prototype.visitUnion = getUnion;\nGetVisitor.prototype.visitDenseUnion = getDenseUnion;\nGetVisitor.prototype.visitSparseUnion = getSparseUnion;\nGetVisitor.prototype.visitDictionary = getDictionary;\nGetVisitor.prototype.visitInterval = getInterval;\nGetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList = getFixedSizeList;\nGetVisitor.prototype.visitMap = getMap;\n/** @ignore */\nexport const instance = new GetVisitor();","map":{"version":3,"names":["BN","Visitor","decodeUtf8","uint16ToFloat64","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","GetVisitor","epochDaysToMs","data","index","epochMillisecondsLongToMs","epochMicrosecondsLongToMs","epochNanosecondsLongToMs","epochMillisecondsToDate","epochMs","Date","epochDaysToDate","epochMillisecondsLongToDate","getNull","_vector","_index","getVariableWidthBytes","values","valueOffsets","x","y","subarray","getBool","_ref","offset","idx","byte","getDateDay","_ref2","getDateMillisecond","_ref3","getNumeric","_ref4","stride","getFloat16","_ref5","getBigInts","_ref6","type","new","isSigned","getFixedSizeBinary","_ref7","getBinary","_ref8","getUtf8","_ref9","bytes","getInt","vector","bitWidth","getFloat","precision","HALF","getDate","unit","DAY","getTimestampSecond","_ref10","getTimestampMillisecond","_ref11","getTimestampMicrosecond","_ref12","getTimestampNanosecond","_ref13","getTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","getTimeSecond","_ref14","getTimeMillisecond","_ref15","getTimeMicrosecond","_ref16","signed","getTimeNanosecond","_ref17","getTime","getDecimal","_ref18","decimal","getList","child","getChildAt","slice","getMap","bind","getStruct","getUnion","mode","Dense","getDenseUnion","getSparseUnion","childIndex","typeIdToChildIndex","typeIds","get","getDictionary","getValue","getKey","getInterval","DAY_TIME","getIntervalDayTime","getIntervalYearMonth","_ref19","_ref20","interval","int32s","Int32Array","getFixedSizeList","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","instance"],"sources":["visitor/get.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}