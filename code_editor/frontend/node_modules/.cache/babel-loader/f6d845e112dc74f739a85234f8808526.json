{"ast":null,"code":"var _jsxFileName = \"/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/src/editor.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Editor = ({\n  lang,\n  theme,\n  shortcuts,\n  props,\n  snippetString,\n  commands,\n  completions,\n  ghostText,\n  keybindingString,\n  editorRef,\n  code,\n  replaceCompleter,\n  onChange,\n  onSelectionChange,\n  onBlur\n}) => {\n  _s();\n  const preventGhostText = useRef(false);\n  if (editorRef.current) {\n    console.log(\"cursor @ useEffect\", editorRef.current.editor.getCursorPosition());\n    if (ghostText === \"\") {\n      // editorRef.current.editor.removeGhostText();\n    } else {\n      editorRef.current.editor.setGhostText(ghostText, undefined);\n    }\n  }\n  let commandsList = useRef(commands);\n  useEffect(() => {\n    if (editorRef.current) {\n      // Add/remove keybindings\n      ace.require('ace/autocomplete').Autocomplete.for(editorRef.current.editor);\n      const keybindings = JSON.parse(keybindingString);\n      if (keybindings.commands && keybindings.commands.length > 0) {\n        // const bindkeySelector = editorRef.current.editor.commands.platform as string;\n        keybindings.commands.forEach(binding => {\n          if (binding.name && typeof binding.name === \"string\") {\n            var _editorRef$current$ed;\n            if (JSON.stringify((_editorRef$current$ed = editorRef.current.editor.commands.commands[binding.name].bindKey) !== null && _editorRef$current$ed !== void 0 ? _editorRef$current$ed : \"\") !== JSON.stringify(binding.bindkey)) {\n              const newCommand = {\n                ...editorRef.current.editor.commands.commands[binding.name]\n              };\n              newCommand.bindKey = binding.bindkey;\n              editorRef.current.editor.commands.addCommand(newCommand);\n              commandsList.current = [...commandsList.current, newCommand];\n            }\n          }\n        });\n      }\n      if (keybindings.completer && keybindings.completer.length > 0) {\n        // const bindkeySelector = editorRef.current.editor.completer.keyboardHandler.platform as string;\n        keybindings.completer.forEach(binding => {\n          if (binding.name && typeof binding.name === \"string\") {\n            var _editorRef$current$ed2;\n            if (JSON.stringify((_editorRef$current$ed2 = editorRef.current.editor.completer.keyboardHandler.commands[binding.name].bindKey) !== null && _editorRef$current$ed2 !== void 0 ? _editorRef$current$ed2 : \"\") !== JSON.stringify(binding.bindkey)) {\n              const newCommand = {\n                ...editorRef.current.editor.completer.keyboardHandler.commands[binding.name]\n              };\n              newCommand.bindKey = binding.bindkey;\n              editorRef.current.editor.completer.keyboardHandler.addCommand(newCommand);\n            }\n          }\n        });\n      }\n\n      // Add/remove snippets\n      ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current.editor);\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      const snippets = JSON.parse(snippetString);\n      for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)) {\n        if (snippetsAddRemove[0]) snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang);\n        if (snippetsAddRemove[1]) snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang);\n      }\n\n      // Add completions\n      if (completions.length > 0) {\n        const customCompleter = {\n          getCompletions: (editor, session, pos, prefix, callback) => {\n            callback(null, completions);\n          }\n        };\n        if (replaceCompleter) {\n          editorRef.current.editor.completers.pop();\n        }\n        ace.require(\"ace/ext/language_tools\").addCompleter(customCompleter);\n      }\n    }\n  }, [snippetString, keybindingString]);\n  useEffect(() => {\n    if (editorRef.current) {\n      console.log(\"cursor @ useEffect\", editorRef.current.editor.getCursorPosition());\n      if (ghostText === \"\") {\n        // editorRef.current.editor.removeGhostText();\n      } else if (!preventGhostText.current) {\n        editorRef.current.editor.setGhostText(ghostText, undefined);\n        // // Can also use editorRef.current.editor.addGhostText();\n        // // However, adding ghost text directly using the editor skips important \n        // // checks for config flags that could disable ghost text.\n        // const aceInline = ace.require(\"ace/autocomplete/inline\").AceInline;\n        // const inline = new aceInline();\n        // const testCompletion: ace.Ace.Completion = {\n        //   snippet: ghostText,\n        // }\n        // const result = inline.show(editorRef.current.editor, testCompletion, \"\");\n        // !result && inline.hide() && console.log(\"failed to show ghost text\");\n      }\n    }\n  }, [ghostText, editorRef]);\n  return /*#__PURE__*/_jsxDEV(AceEditor, {\n    ref: editorRef,\n    name: \"REACT_ACE_EDITOR\",\n    mode: lang,\n    theme: theme,\n    value: code,\n    keyboardHandler: shortcuts,\n    commands: commandsList.current,\n    onChange: onChange,\n    onSelectionChange: onSelectionChange,\n    onBlur: onBlur,\n    onCursorChange: (value, event) => {},\n    onInput: event => {\n      // if (editorRef.current) {\n      //   editorRef.current.editor.removeGhostText();\n      // }\n      // preventGhostText.current = true;\n    },\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 11\n  }, this);\n};\n_s(Editor, \"GiMTHzEWUoOVvGowfL0PGEfSCr8=\");\n_c = Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["useEffect","useRef","AceEditor","ace","jsxDEV","_jsxDEV","Editor","lang","theme","shortcuts","props","snippetString","commands","completions","ghostText","keybindingString","editorRef","code","replaceCompleter","onChange","onSelectionChange","onBlur","_s","preventGhostText","current","console","log","editor","getCursorPosition","setGhostText","undefined","commandsList","require","Autocomplete","for","keybindings","JSON","parse","length","forEach","binding","name","_editorRef$current$ed","stringify","bindKey","bindkey","newCommand","addCommand","completer","_editorRef$current$ed2","keyboardHandler","init","snippetManager","snippets","snippetsLang","snippetsAddRemove","Object","entries","register","parseSnippetFile","unregister","customCompleter","getCompletions","session","pos","prefix","callback","completers","pop","addCompleter","ref","mode","value","onCursorChange","event","onInput","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/src/editor.tsx"],"sourcesContent":["import { useEffect, useRef} from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\n\nexport interface KeyBinding {\n    bindkey: string | object,\n    name: string\n}\n\nexport interface EditorKeyBindings {\n  commands?: KeyBinding[],\n  completer?: KeyBinding[]\n}\n\nexport type EditorProps = {\n    code: string,\n    lang: string,\n    theme: string,\n    shortcuts: string,\n    props: any,\n    editorRef: any,\n    snippetString: string,\n    ghostText: string,\n    commands: object[],\n    completions: object[],\n    keybindingString: string,\n    replaceCompleter: boolean,\n    onChange: (value: string, event?: any) => void,\n    onSelectionChange: (value: any, event?: any) => void,\n    onBlur: (event: any, editor?: any) => void\n  }\n  \nexport const Editor = ({ lang, theme, shortcuts, props, snippetString, commands, completions, ghostText, keybindingString, editorRef, code, replaceCompleter, onChange, onSelectionChange, onBlur }: EditorProps ) => {\n  \n  const preventGhostText = useRef<boolean>(false);\n\n  if(editorRef.current){\n    console.log(\"cursor @ useEffect\", editorRef.current.editor.getCursorPosition());\n    if (ghostText === \"\") {\n      // editorRef.current.editor.removeGhostText();\n    }\n    else {\n      editorRef.current.editor.setGhostText(ghostText, undefined);\n    }\n  }\n\n  let commandsList = useRef<object[]>(commands);\n  useEffect(() => {\n    if(editorRef.current){\n\n      // Add/remove keybindings\n      ace.require('ace/autocomplete').Autocomplete.for(editorRef.current.editor);\n      const keybindings = JSON.parse(keybindingString) as EditorKeyBindings;\n      if(keybindings.commands && keybindings.commands.length > 0){\n        // const bindkeySelector = editorRef.current.editor.commands.platform as string;\n        keybindings.commands.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.commands.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.commands.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.commands.addCommand(newCommand);\n                commandsList.current= [...commandsList.current, newCommand];\n              }\n            }\n   \n        });\n      }\n      if(keybindings.completer && keybindings.completer.length > 0){\n        // const bindkeySelector = editorRef.current.editor.completer.keyboardHandler.platform as string;\n        keybindings.completer.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.completer.keyboardHandler.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.completer.keyboardHandler.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.completer.keyboardHandler.addCommand(newCommand);\n              }\n            }\n        });\n      }\n\n      // Add/remove snippets\n      ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current.editor);\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      const snippets = JSON.parse(snippetString) as object;\n      for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)){\n        if(snippetsAddRemove[0])\n          snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang)\n        \n        if(snippetsAddRemove[1])\n          snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang)\n      }\n\n      // Add completions\n      if (completions.length > 0) {\n        const customCompleter = {\n          getCompletions: (\n              editor: ace.Ace.Editor,\n              session: ace.Ace.EditSession,\n              pos: ace.Ace.Point,\n              prefix: string,\n              callback: ace.Ace.CompleterCallback\n          ): void => {\n              callback(\n                  null,\n                  (completions as ace.Ace.Completion[])\n              );\n            },\n          };\n        if(replaceCompleter) {\n          editorRef.current.editor.completers.pop();\n        }\n        ace.require(\"ace/ext/language_tools\").addCompleter(customCompleter);\n      }\n    }\n  }, [snippetString, keybindingString]);\n\n  useEffect(() => {\n    if(editorRef.current){\n      console.log(\"cursor @ useEffect\", editorRef.current.editor.getCursorPosition());\n      if (ghostText === \"\") {\n        // editorRef.current.editor.removeGhostText();\n      }\n      else if (!preventGhostText.current) {\n        editorRef.current.editor.setGhostText(ghostText, undefined);\n        // // Can also use editorRef.current.editor.addGhostText();\n        // // However, adding ghost text directly using the editor skips important \n        // // checks for config flags that could disable ghost text.\n        // const aceInline = ace.require(\"ace/autocomplete/inline\").AceInline;\n        // const inline = new aceInline();\n        // const testCompletion: ace.Ace.Completion = {\n        //   snippet: ghostText,\n        // }\n        // const result = inline.show(editorRef.current.editor, testCompletion, \"\");\n        // !result && inline.hide() && console.log(\"failed to show ghost text\");\n      }\n    }\n  }, [ghostText, editorRef]);\n\n  return (\n          <AceEditor\n           ref={editorRef}\n           name=\"REACT_ACE_EDITOR\"\n           mode={lang}\n           theme={theme}\n           value={code}\n           keyboardHandler={shortcuts}\n           commands={commandsList.current}\n           onChange={onChange}\n           onSelectionChange={onSelectionChange}\n           onBlur={onBlur}\n           onCursorChange={(value, event) => {\n              \n           }}\n           onInput={(event) => {\n              // if (editorRef.current) {\n              //   editorRef.current.editor.removeGhostText();\n              // }\n              // preventGhostText.current = true;\n           }}\n           {...props}/>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}