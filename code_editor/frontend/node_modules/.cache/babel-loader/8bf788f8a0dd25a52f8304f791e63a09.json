{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n/** @ignore */\nfunction nullableIterator(vector) {\n  const getFn = getVisitor.getVisitFn(vector);\n  return iterateBits(vector.nullBitmap, vector.offset, vector.length, vector, (vec, idx, nullByte, nullBit) => (nullByte & 1 << nullBit) !== 0 ? getFn(vec, idx) : null);\n}\n/** @ignore */\nfunction vectorIterator(vector) {\n  // If nullable, iterate manually\n  if (vector.nullCount > 0) {\n    return nullableIterator(vector);\n  }\n  const {\n    type,\n    typeId,\n    length\n  } = vector;\n  // Fast case, defer to native iterators if possible\n  if (vector.stride === 1 && (typeId === Type.Timestamp || typeId === Type.Int && type.bitWidth !== 64 || typeId === Type.Time && type.bitWidth !== 64 || typeId === Type.Float && type.precision > 0 /* Precision.HALF */)) {\n    return vector.values.subarray(0, length)[Symbol.iterator]();\n  }\n  // Otherwise, iterate manually\n  return function* (getFn) {\n    for (let index = -1; ++index < length;) {\n      yield getFn(vector, index);\n    }\n  }(getVisitor.getVisitFn(vector));\n}\nIteratorVisitor.prototype.visitNull = vectorIterator;\nIteratorVisitor.prototype.visitBool = vectorIterator;\nIteratorVisitor.prototype.visitInt = vectorIterator;\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\nIteratorVisitor.prototype.visitFloat = vectorIterator;\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\nIteratorVisitor.prototype.visitBinary = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\nIteratorVisitor.prototype.visitDate = vectorIterator;\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitTime = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\nIteratorVisitor.prototype.visitList = vectorIterator;\nIteratorVisitor.prototype.visitStruct = vectorIterator;\nIteratorVisitor.prototype.visitUnion = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\nIteratorVisitor.prototype.visitInterval = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\nIteratorVisitor.prototype.visitMap = vectorIterator;\n/** @ignore */\nexport const instance = new IteratorVisitor();","map":{"version":3,"names":["Type","Visitor","iterateBits","instance","getVisitor","IteratorVisitor","nullableIterator","vector","getFn","getVisitFn","nullBitmap","offset","length","vec","idx","nullByte","nullBit","vectorIterator","nullCount","type","typeId","stride","Timestamp","Int","bitWidth","Time","Float","precision","values","subarray","Symbol","iterator","index","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap"],"sources":["visitor/iterator.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,IAAI,QAAQ,SAAS;AAC9B,SAASC,OAAO,QAAQ,YAAY;AAEpC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,IAAIC,UAAU,QAAQ,OAAO;AAgE9C;AACA,OAAM,MAAOC,eAAgB,SAAQJ,OAAO;AAE5C;AACA,SAASK,gBAAgBA,CAAqBC,MAAqB;EAC/D,MAAMC,KAAK,GAAGJ,UAAU,CAACK,UAAU,CAACF,MAAM,CAAC;EAC3C,OAAOL,WAAW,CACdK,MAAM,CAACG,UAAU,EAAEH,MAAM,CAACI,MAAM,EAAEJ,MAAM,CAACK,MAAM,EAAEL,MAAM,EACvD,CAACM,GAAkB,EAAEC,GAAW,EAAEC,QAAgB,EAAEC,OAAe,KAC9D,CAACD,QAAQ,GAAG,CAAC,IAAIC,OAAO,MAAM,CAAC,GAAIR,KAAK,CAACK,GAAG,EAAEC,GAAG,CAAC,GAAG,IAAI,CACjE;AACL;AAEA;AACA,SAASG,cAAcA,CAAqBV,MAAqB;EAE7D;EACA,IAAIA,MAAM,CAACW,SAAS,GAAG,CAAC,EAAE;IACtB,OAAOZ,gBAAgB,CAAIC,MAAM,CAAC;;EAGtC,MAAM;IAAEY,IAAI;IAAEC,MAAM;IAAER;EAAM,CAAE,GAAGL,MAAM;EAEvC;EACA,IAAIA,MAAM,CAACc,MAAM,KAAK,CAAC,KAClBD,MAAM,KAAKpB,IAAI,CAACsB,SAAS,IACzBF,MAAM,KAAKpB,IAAI,CAACuB,GAAG,IAAKJ,IAAY,CAACK,QAAQ,KAAK,EAAG,IACrDJ,MAAM,KAAKpB,IAAI,CAACyB,IAAI,IAAKN,IAAa,CAACK,QAAQ,KAAK,EAAG,IACvDJ,MAAM,KAAKpB,IAAI,CAAC0B,KAAK,IAAKP,IAAc,CAACQ,SAAS,GAAG,CAAC,CAAC,oBAAqB,CAChF,EAAE;IACC,OAAOpB,MAAM,CAACqB,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAEjB,MAAM,CAAC,CAACkB,MAAM,CAACC,QAAQ,CAAC,EAAE;;EAG/D;EACA,OAAQ,WAAWvB,KAAK;IACpB,KAAK,IAAIwB,KAAK,GAAG,CAAC,CAAC,EAAE,EAAEA,KAAK,GAAGpB,MAAM,GAAG;MACpC,MAAMJ,KAAK,CAACD,MAAM,EAAEyB,KAAK,CAAC;;EAElC,CAAC,CAAE5B,UAAU,CAACK,UAAU,CAACF,MAAM,CAAC,CAAC;AACrC;AAEAF,eAAe,CAAC4B,SAAS,CAACC,SAAS,GAAmBjB,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACE,SAAS,GAAmBlB,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACG,QAAQ,GAAoBnB,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACI,SAAS,GAAmBpB,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACK,UAAU,GAAkBrB,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACM,UAAU,GAAkBtB,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACO,UAAU,GAAkBvB,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACQ,UAAU,GAAkBxB,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACS,WAAW,GAAiBzB,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACU,WAAW,GAAiB1B,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACW,WAAW,GAAiB3B,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACY,UAAU,GAAkB5B,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACa,YAAY,GAAgB7B,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACc,YAAY,GAAgB9B,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACe,YAAY,GAAgB/B,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACgB,SAAS,GAAmBhC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACiB,WAAW,GAAiBjC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACkB,oBAAoB,GAAQlC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACmB,SAAS,GAAmBnC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACoB,YAAY,GAAgBpC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACqB,oBAAoB,GAAQrC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACsB,cAAc,GAActC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACuB,oBAAoB,GAAQvC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACwB,yBAAyB,GAAGxC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACyB,yBAAyB,GAAGzC,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAAC0B,wBAAwB,GAAI1C,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAAC2B,SAAS,GAAmB3C,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAAC4B,eAAe,GAAa5C,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAAC6B,oBAAoB,GAAQ7C,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAAC8B,oBAAoB,GAAQ9C,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAAC+B,mBAAmB,GAAS/C,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACgC,YAAY,GAAgBhD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACiC,SAAS,GAAmBjD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACkC,WAAW,GAAiBlD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACmC,UAAU,GAAkBnD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACoC,eAAe,GAAapD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACqC,gBAAgB,GAAYrD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACsC,eAAe,GAAatD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACuC,aAAa,GAAevD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACwC,oBAAoB,GAAQxD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAACyC,sBAAsB,GAAMzD,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAAC0C,kBAAkB,GAAU1D,cAAc;AACpEZ,eAAe,CAAC4B,SAAS,CAAC2C,QAAQ,GAAoB3D,cAAc;AAEpE;AACA,OAAO,MAAMd,QAAQ,GAAG,IAAIE,eAAe,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module"}