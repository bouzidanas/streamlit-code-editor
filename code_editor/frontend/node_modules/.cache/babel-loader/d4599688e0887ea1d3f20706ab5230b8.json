{"ast":null,"code":"ace.define(\"ace/mode/sparql_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  /* This file was autogenerated from sparql.tmLanguage (uuid: ) */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var SPARQLHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: \"#comments\"\n      }, {\n        include: \"#strings\"\n      }, {\n        include: \"#string-language-suffixes\"\n      }, {\n        include: \"#string-datatype-suffixes\"\n      }, {\n        include: \"#logic-operators\"\n      }, {\n        include: \"#relative-urls\"\n      }, {\n        include: \"#xml-schema-types\"\n      }, {\n        include: \"#rdf-schema-types\"\n      }, {\n        include: \"#owl-types\"\n      }, {\n        include: \"#qnames\"\n      }, {\n        include: \"#keywords\"\n      }, {\n        include: \"#built-in-functions\"\n      }, {\n        include: \"#variables\"\n      }, {\n        include: \"#boolean-literal\"\n      }, {\n        include: \"#punctuation-operators\"\n      }],\n      \"#boolean-literal\": [{\n        token: \"constant.language.boolean.sparql\",\n        regex: /true|false/\n      }],\n      \"#built-in-functions\": [{\n        token: \"support.function.sparql\",\n        regex: /[Aa][Bb][Ss]|[Aa][Vv][Gg]|[Bb][Nn][Oo][Dd][Ee]|[Bb][Oo][Uu][Nn][Dd]|[Cc][Ee][Ii][Ll]|[Cc][Oo][Aa][Ll][Ee][Ss][Cc][Ee]|[Cc][Oo][Nn][Cc][Aa][Tt]|[Cc][Oo][Nn][Tt][Aa][Ii][Nn][Ss]|[Cc][Oo][Uu][Nn][Tt]|[Dd][Aa][Tt][Aa][Tt][Yy][Pp][Ee]|[Dd][Aa][Yy]|[Ee][Nn][Cc][Oo][Dd][Ee]_[Ff][Oo][Rr]_[Uu][Rr][Ii]|[Ee][Xx][Ii][Ss][Tt][Ss]|[Ff][Ll][Oo][Oo][Rr]|[Gg][Rr][Oo][Uu][Pp]_[Cc][Oo][Nn][Cc][Aa][Tt]|[Hh][Oo][Uu][Rr][Ss]|[Ii][Ff]|[Ii][Rr][Ii]|[Ii][Ss][Bb][Ll][Aa][Nn][Kk]|[Ii][Ss][Ii][Rr][Ii]|[Ii][Ss][Ll][Ii][Tt][Ee][Rr][Aa][Ll]|[Ii][Ss][Nn][Uu][Mm][Ee][Rr][Ii][Cc]|[Ii][Ss][Uu][Rr][Ii]|[Ll][Aa][Nn][Gg]|[Ll][Aa][Nn][Gg][Mm][Aa][Tt][Cc][Hh][Ee][Ss]|[Ll][Cc][Aa][Ss][Ee]|[Mm][Aa][Xx]|[Mm][Dd]5|[Mm][Ii][Nn]|[Mm][Ii][Nn][Uu][Tt][Ee][Ss]|[Mm][Oo][Nn][Tt][Hh]|[Nn][Oo][Ww]|[Rr][Aa][Nn][Dd]|[Rr][Ee][Gg][Ee][Xx]|[Rr][Ee][Pp][Ll][Aa][Cc][Ee]|[Rr][Oo][Uu][Nn][Dd]|[Ss][Aa][Mm][Ee][Tt][Ee][Rr][Mm]|[Ss][Aa][Mm][Pp][Ll][Ee]|[Ss][Ee][Cc][Oo][Nn][Dd][Ss]|[Ss][Ee][Pp][Aa][Rr][Aa][Tt][Oo][Rr]|[Ss][Hh][Aa](?:1|256|384|512)|[Ss][Tt][Rr]|[Ss][Tt][Rr][Aa][Ff][Tt][Ee][Rr]|[Ss][Tt][Rr][Bb][Ee][Ff][Oo][Rr][Ee]|[Ss][Tt][Rr][Dd][Tt]|[Ss][Tt][Rr][Ee][Nn][Dd][Ss]|[Ss][Tt][Rr][Ll][Aa][Nn][Gg]|[Ss][Tt][Rr][Ll][Ee][Nn]|[Ss][Tt][Rr][Ss][Tt][Aa][Rr][Tt][Ss]|[Ss][Tt][Rr][Uu][Uu][Ii][Dd]|[Ss][Uu][Bb][Ss][Tt][Rr]|[Ss][Uu][Mm]|[Tt][Ii][Mm][Ee][Zz][Oo][Nn][Ee]|[Tt][Zz]|[Uu][Cc][Aa][Ss][Ee]|[Uu][Rr][Ii]|[Uu][Uu][Ii][Dd]|[Yy][Ee][Aa][Rr]/\n      }],\n      \"#comments\": [{\n        token: [\"punctuation.definition.comment.sparql\", \"comment.line.hash.sparql\"],\n        regex: /(#)(.*$)/\n      }],\n      \"#keywords\": [{\n        token: \"keyword.other.sparql\",\n        regex: /[Aa][Dd][Dd]|[Aa][Ll][Ll]|[Aa][Ss]|[As][Ss][Cc]|[Aa][Ss][Kk]|[Bb][Aa][Ss][Ee]|[Bb][Ii][Nn][Dd]|[Bb][Yy]|[Cc][Ll][Ee][Aa][Rr]|[Cc][Oo][Nn][Ss][Tt][Rr][Uu][Cc][Tt]|[Cc][Oo][Pp][Yy]|[Cc][Rr][Ee][Aa][Tt][Ee]|[Dd][Aa][Tt][Aa]|[Dd][Ee][Ff][Aa][Uu][Ll][Tt]|[Dd][Ee][Ll][Ee][Tt][Ee]|[Dd][Ee][Sc][Cc]|[Dd][Ee][Ss][Cc][Rr][Ii][Bb][Ee]|[Dd][Ii][Ss][Tt][Ii][Nn][Cc][Tt]|[Dd][Rr][Oo][Pp]|[Ff][Ii][Ll][Tt][Ee][Rr]|[Ff][Rr][Oo][Mm]|[Gg][Rr][Aa][Pp][Hh]|[Gg][Rr][Oo][Uu][Pp]|[Hh][Aa][Vv][Ii][Nn][Gg]|[Ii][Nn][Ss][Ee][Rr][Tt]|[Ll][Ii][Mm][Ii][Tt]|[Ll][Oo][Aa][Dd]|[Mm][Ii][Nn][Uu][Ss]|[Mm][Oo][Vv][Ee]|[Nn][Aa][Mm][Ee][Dd]|[Oo][Ff][Ff][Ss][Ee][Tt]|[Oo][Pp][Tt][Ii][Oo][Nn][Aa][Ll]|[Oo][Rr][Dd][Ee][Rr]|[Pp][Rr][Ee][Ff][Ii][Xx]|[Rr][Ee][Dd][Uu][Cc][Ee][Dd]|[Ss][Ee][Ll][Ee][Cc][Tt]|[Ss][Ee][Pp][Aa][Rr][Aa][Tt][Oo][Rr]|[Ss][Ee][Rr][Vv][Ii][Cc][Ee]|[Ss][Ii][Ll][Ee][Nn][Tt]|[Tt][Oo]|[Uu][Nn][Dd][Ee][Ff]|[Uu][Nn][Ii][Oo][Nn]|[Uu][Ss][Ii][Nn][Gg]|[Vv][Aa][Ll][Uu][Ee][Ss]|[Ww][He][Ee][Rr][Ee]|[Ww][Ii][Tt][Hh]/\n      }],\n      \"#logic-operators\": [{\n        token: \"keyword.operator.logical.sparql\",\n        regex: /\\|\\||&&|=|!=|<|>|<=|>=|(?:^|!?\\s)IN(?:!?\\s|$)|(?:^|!?\\s)NOT(?:!?\\s|$)|-|\\+|\\*|\\/|\\!/\n      }],\n      \"#owl-types\": [{\n        token: \"support.type.datatype.owl.sparql\",\n        regex: /owl:[a-zA-Z]+/\n      }],\n      \"#punctuation-operators\": [{\n        token: \"keyword.operator.punctuation.sparql\",\n        regex: /;|,|\\.|\\(|\\)|\\{|\\}|\\|/\n      }],\n      \"#qnames\": [{\n        token: \"entity.name.other.qname.sparql\",\n        regex: /(?:[a-zA-Z][-_a-zA-Z0-9]*)?:(?:[_a-zA-Z][-_a-zA-Z0-9]*)?/\n      }],\n      \"#rdf-schema-types\": [{\n        token: \"support.type.datatype.rdf.schema.sparql\",\n        regex: /rdfs?:[a-zA-Z]+|(?:^|\\s)a(?:\\s|$)/\n      }],\n      \"#relative-urls\": [{\n        token: \"string.quoted.other.relative.url.sparql\",\n        regex: /</,\n        push: [{\n          token: \"string.quoted.other.relative.url.sparql\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quoted.other.relative.url.sparql\"\n        }]\n      }],\n      \"#string-datatype-suffixes\": [{\n        token: \"keyword.operator.datatype.suffix.sparql\",\n        regex: /\\^\\^/\n      }],\n      \"#string-language-suffixes\": [{\n        token: [\"keyword.operator.language.suffix.sparql\", \"constant.language.suffix.sparql\"],\n        regex: /(?!\")(@)([a-z]+(?:\\-[a-z0-9]+)*)/\n      }],\n      \"#strings\": [{\n        token: \"string.quoted.triple.sparql\",\n        regex: /\"\"\"/,\n        push: [{\n          token: \"string.quoted.triple.sparql\",\n          regex: /\"\"\"/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quoted.triple.sparql\"\n        }]\n      }, {\n        token: \"string.quoted.double.sparql\",\n        regex: /\"/,\n        push: [{\n          token: \"string.quoted.double.sparql\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"invalid.string.newline\",\n          regex: /$/\n        }, {\n          token: \"constant.character.escape.sparql\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.double.sparql\"\n        }]\n      }],\n      \"#variables\": [{\n        token: \"variable.other.sparql\",\n        regex: /(?:\\?|\\$)[-_a-zA-Z0-9]+/\n      }],\n      \"#xml-schema-types\": [{\n        token: \"support.type.datatype.schema.sparql\",\n        regex: /xsd?:[a-z][a-zA-Z]+/\n      }]\n    };\n    this.normalizeRules();\n  };\n  SPARQLHighlightRules.metaData = {\n    fileTypes: [\"rq\", \"sparql\"],\n    name: \"SPARQL\",\n    scopeName: \"source.sparql\"\n  };\n  oop.inherits(SPARQLHighlightRules, TextHighlightRules);\n  exports.SPARQLHighlightRules = SPARQLHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/sparql\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/sparql_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  /*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n  */\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var SPARQLHighlightRules = require(\"./sparql_highlight_rules\").SPARQLHighlightRules;\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = SPARQLHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/sparql\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/sparql\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","SPARQLHighlightRules","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$id"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-sparql.js"],"sourcesContent":["ace.define(\"ace/mode/sparql_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from sparql.tmLanguage (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar SPARQLHighlightRules = function () {\n    this.$rules = {\n        start: [{\n                include: \"#comments\"\n            }, {\n                include: \"#strings\"\n            }, {\n                include: \"#string-language-suffixes\"\n            }, {\n                include: \"#string-datatype-suffixes\"\n            }, {\n                include: \"#logic-operators\"\n            }, {\n                include: \"#relative-urls\"\n            }, {\n                include: \"#xml-schema-types\"\n            }, {\n                include: \"#rdf-schema-types\"\n            }, {\n                include: \"#owl-types\"\n            }, {\n                include: \"#qnames\"\n            }, {\n                include: \"#keywords\"\n            }, {\n                include: \"#built-in-functions\"\n            }, {\n                include: \"#variables\"\n            }, {\n                include: \"#boolean-literal\"\n            }, {\n                include: \"#punctuation-operators\"\n            }],\n        \"#boolean-literal\": [{\n                token: \"constant.language.boolean.sparql\",\n                regex: /true|false/\n            }],\n        \"#built-in-functions\": [{\n                token: \"support.function.sparql\",\n                regex: /[Aa][Bb][Ss]|[Aa][Vv][Gg]|[Bb][Nn][Oo][Dd][Ee]|[Bb][Oo][Uu][Nn][Dd]|[Cc][Ee][Ii][Ll]|[Cc][Oo][Aa][Ll][Ee][Ss][Cc][Ee]|[Cc][Oo][Nn][Cc][Aa][Tt]|[Cc][Oo][Nn][Tt][Aa][Ii][Nn][Ss]|[Cc][Oo][Uu][Nn][Tt]|[Dd][Aa][Tt][Aa][Tt][Yy][Pp][Ee]|[Dd][Aa][Yy]|[Ee][Nn][Cc][Oo][Dd][Ee]_[Ff][Oo][Rr]_[Uu][Rr][Ii]|[Ee][Xx][Ii][Ss][Tt][Ss]|[Ff][Ll][Oo][Oo][Rr]|[Gg][Rr][Oo][Uu][Pp]_[Cc][Oo][Nn][Cc][Aa][Tt]|[Hh][Oo][Uu][Rr][Ss]|[Ii][Ff]|[Ii][Rr][Ii]|[Ii][Ss][Bb][Ll][Aa][Nn][Kk]|[Ii][Ss][Ii][Rr][Ii]|[Ii][Ss][Ll][Ii][Tt][Ee][Rr][Aa][Ll]|[Ii][Ss][Nn][Uu][Mm][Ee][Rr][Ii][Cc]|[Ii][Ss][Uu][Rr][Ii]|[Ll][Aa][Nn][Gg]|[Ll][Aa][Nn][Gg][Mm][Aa][Tt][Cc][Hh][Ee][Ss]|[Ll][Cc][Aa][Ss][Ee]|[Mm][Aa][Xx]|[Mm][Dd]5|[Mm][Ii][Nn]|[Mm][Ii][Nn][Uu][Tt][Ee][Ss]|[Mm][Oo][Nn][Tt][Hh]|[Nn][Oo][Ww]|[Rr][Aa][Nn][Dd]|[Rr][Ee][Gg][Ee][Xx]|[Rr][Ee][Pp][Ll][Aa][Cc][Ee]|[Rr][Oo][Uu][Nn][Dd]|[Ss][Aa][Mm][Ee][Tt][Ee][Rr][Mm]|[Ss][Aa][Mm][Pp][Ll][Ee]|[Ss][Ee][Cc][Oo][Nn][Dd][Ss]|[Ss][Ee][Pp][Aa][Rr][Aa][Tt][Oo][Rr]|[Ss][Hh][Aa](?:1|256|384|512)|[Ss][Tt][Rr]|[Ss][Tt][Rr][Aa][Ff][Tt][Ee][Rr]|[Ss][Tt][Rr][Bb][Ee][Ff][Oo][Rr][Ee]|[Ss][Tt][Rr][Dd][Tt]|[Ss][Tt][Rr][Ee][Nn][Dd][Ss]|[Ss][Tt][Rr][Ll][Aa][Nn][Gg]|[Ss][Tt][Rr][Ll][Ee][Nn]|[Ss][Tt][Rr][Ss][Tt][Aa][Rr][Tt][Ss]|[Ss][Tt][Rr][Uu][Uu][Ii][Dd]|[Ss][Uu][Bb][Ss][Tt][Rr]|[Ss][Uu][Mm]|[Tt][Ii][Mm][Ee][Zz][Oo][Nn][Ee]|[Tt][Zz]|[Uu][Cc][Aa][Ss][Ee]|[Uu][Rr][Ii]|[Uu][Uu][Ii][Dd]|[Yy][Ee][Aa][Rr]/\n            }],\n        \"#comments\": [{\n                token: [\n                    \"punctuation.definition.comment.sparql\",\n                    \"comment.line.hash.sparql\"\n                ],\n                regex: /(#)(.*$)/\n            }],\n        \"#keywords\": [{\n                token: \"keyword.other.sparql\",\n                regex: /[Aa][Dd][Dd]|[Aa][Ll][Ll]|[Aa][Ss]|[As][Ss][Cc]|[Aa][Ss][Kk]|[Bb][Aa][Ss][Ee]|[Bb][Ii][Nn][Dd]|[Bb][Yy]|[Cc][Ll][Ee][Aa][Rr]|[Cc][Oo][Nn][Ss][Tt][Rr][Uu][Cc][Tt]|[Cc][Oo][Pp][Yy]|[Cc][Rr][Ee][Aa][Tt][Ee]|[Dd][Aa][Tt][Aa]|[Dd][Ee][Ff][Aa][Uu][Ll][Tt]|[Dd][Ee][Ll][Ee][Tt][Ee]|[Dd][Ee][Sc][Cc]|[Dd][Ee][Ss][Cc][Rr][Ii][Bb][Ee]|[Dd][Ii][Ss][Tt][Ii][Nn][Cc][Tt]|[Dd][Rr][Oo][Pp]|[Ff][Ii][Ll][Tt][Ee][Rr]|[Ff][Rr][Oo][Mm]|[Gg][Rr][Aa][Pp][Hh]|[Gg][Rr][Oo][Uu][Pp]|[Hh][Aa][Vv][Ii][Nn][Gg]|[Ii][Nn][Ss][Ee][Rr][Tt]|[Ll][Ii][Mm][Ii][Tt]|[Ll][Oo][Aa][Dd]|[Mm][Ii][Nn][Uu][Ss]|[Mm][Oo][Vv][Ee]|[Nn][Aa][Mm][Ee][Dd]|[Oo][Ff][Ff][Ss][Ee][Tt]|[Oo][Pp][Tt][Ii][Oo][Nn][Aa][Ll]|[Oo][Rr][Dd][Ee][Rr]|[Pp][Rr][Ee][Ff][Ii][Xx]|[Rr][Ee][Dd][Uu][Cc][Ee][Dd]|[Ss][Ee][Ll][Ee][Cc][Tt]|[Ss][Ee][Pp][Aa][Rr][Aa][Tt][Oo][Rr]|[Ss][Ee][Rr][Vv][Ii][Cc][Ee]|[Ss][Ii][Ll][Ee][Nn][Tt]|[Tt][Oo]|[Uu][Nn][Dd][Ee][Ff]|[Uu][Nn][Ii][Oo][Nn]|[Uu][Ss][Ii][Nn][Gg]|[Vv][Aa][Ll][Uu][Ee][Ss]|[Ww][He][Ee][Rr][Ee]|[Ww][Ii][Tt][Hh]/\n            }],\n        \"#logic-operators\": [{\n                token: \"keyword.operator.logical.sparql\",\n                regex: /\\|\\||&&|=|!=|<|>|<=|>=|(?:^|!?\\s)IN(?:!?\\s|$)|(?:^|!?\\s)NOT(?:!?\\s|$)|-|\\+|\\*|\\/|\\!/\n            }],\n        \"#owl-types\": [{\n                token: \"support.type.datatype.owl.sparql\",\n                regex: /owl:[a-zA-Z]+/\n            }],\n        \"#punctuation-operators\": [{\n                token: \"keyword.operator.punctuation.sparql\",\n                regex: /;|,|\\.|\\(|\\)|\\{|\\}|\\|/\n            }],\n        \"#qnames\": [{\n                token: \"entity.name.other.qname.sparql\",\n                regex: /(?:[a-zA-Z][-_a-zA-Z0-9]*)?:(?:[_a-zA-Z][-_a-zA-Z0-9]*)?/\n            }],\n        \"#rdf-schema-types\": [{\n                token: \"support.type.datatype.rdf.schema.sparql\",\n                regex: /rdfs?:[a-zA-Z]+|(?:^|\\s)a(?:\\s|$)/\n            }],\n        \"#relative-urls\": [{\n                token: \"string.quoted.other.relative.url.sparql\",\n                regex: /</,\n                push: [{\n                        token: \"string.quoted.other.relative.url.sparql\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string.quoted.other.relative.url.sparql\"\n                    }]\n            }],\n        \"#string-datatype-suffixes\": [{\n                token: \"keyword.operator.datatype.suffix.sparql\",\n                regex: /\\^\\^/\n            }],\n        \"#string-language-suffixes\": [{\n                token: [\n                    \"keyword.operator.language.suffix.sparql\",\n                    \"constant.language.suffix.sparql\"\n                ],\n                regex: /(?!\")(@)([a-z]+(?:\\-[a-z0-9]+)*)/\n            }],\n        \"#strings\": [{\n                token: \"string.quoted.triple.sparql\",\n                regex: /\"\"\"/,\n                push: [{\n                        token: \"string.quoted.triple.sparql\",\n                        regex: /\"\"\"/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string.quoted.triple.sparql\"\n                    }]\n            }, {\n                token: \"string.quoted.double.sparql\",\n                regex: /\"/,\n                push: [{\n                        token: \"string.quoted.double.sparql\",\n                        regex: /\"/,\n                        next: \"pop\"\n                    }, {\n                        token: \"invalid.string.newline\",\n                        regex: /$/\n                    }, {\n                        token: \"constant.character.escape.sparql\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string.quoted.double.sparql\"\n                    }]\n            }],\n        \"#variables\": [{\n                token: \"variable.other.sparql\",\n                regex: /(?:\\?|\\$)[-_a-zA-Z0-9]+/\n            }],\n        \"#xml-schema-types\": [{\n                token: \"support.type.datatype.schema.sparql\",\n                regex: /xsd?:[a-z][a-zA-Z]+/\n            }]\n    };\n    this.normalizeRules();\n};\nSPARQLHighlightRules.metaData = {\n    fileTypes: [\"rq\", \"sparql\"],\n    name: \"SPARQL\",\n    scopeName: \"source.sparql\"\n};\noop.inherits(SPARQLHighlightRules, TextHighlightRules);\nexports.SPARQLHighlightRules = SPARQLHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/sparql\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/sparql_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar SPARQLHighlightRules = require(\"./sparql_highlight_rules\").SPARQLHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = SPARQLHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.$id = \"ace/mode/sparql\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/sparql\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}