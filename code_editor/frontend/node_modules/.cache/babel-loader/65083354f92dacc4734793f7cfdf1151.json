{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\n/** @ignore */\nexport const ITERATOR_DONE = Object.freeze({\n  done: true,\n  value: void 0\n});\n/** @ignore */\nexport class ArrowJSON {\n  // @ts-ignore\n  constructor(_json) {\n    this._json = _json;\n  }\n  get schema() {\n    return this._json['schema'];\n  }\n  get batches() {\n    return this._json['batches'] || [];\n  }\n  get dictionaries() {\n    return this._json['dictionaries'] || [];\n  }\n}\n/** @ignore */\nexport class ReadableInterop {\n  tee() {\n    return this._getDOMStream().tee();\n  }\n  pipe(writable, options) {\n    return this._getNodeStream().pipe(writable, options);\n  }\n  pipeTo(writable, options) {\n    return this._getDOMStream().pipeTo(writable, options);\n  }\n  pipeThrough(duplex, options) {\n    return this._getDOMStream().pipeThrough(duplex, options);\n  }\n  _getDOMStream() {\n    return this._DOMStream || (this._DOMStream = this.toDOMStream());\n  }\n  _getNodeStream() {\n    return this._nodeStream || (this._nodeStream = this.toNodeStream());\n  }\n}\n/** @ignore */\nexport class AsyncQueue extends ReadableInterop {\n  constructor() {\n    super();\n    this._values = [];\n    this.resolvers = [];\n    this._closedPromise = new Promise(r => this._closedPromiseResolve = r);\n  }\n  get closed() {\n    return this._closedPromise;\n  }\n  async cancel(reason) {\n    await this.return(reason);\n  }\n  write(value) {\n    if (this._ensureOpen()) {\n      this.resolvers.length <= 0 ? this._values.push(value) : this.resolvers.shift().resolve({\n        done: false,\n        value\n      });\n    }\n  }\n  abort(value) {\n    if (this._closedPromiseResolve) {\n      this.resolvers.length <= 0 ? this._error = {\n        error: value\n      } : this.resolvers.shift().reject({\n        done: true,\n        value\n      });\n    }\n  }\n  close() {\n    if (this._closedPromiseResolve) {\n      const {\n        resolvers\n      } = this;\n      while (resolvers.length > 0) {\n        resolvers.shift().resolve(ITERATOR_DONE);\n      }\n      this._closedPromiseResolve();\n      this._closedPromiseResolve = undefined;\n    }\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n  toDOMStream(options) {\n    return streamAdapters.toDOMStream(this._closedPromiseResolve || this._error ? this : this._values, options);\n  }\n  toNodeStream(options) {\n    return streamAdapters.toNodeStream(this._closedPromiseResolve || this._error ? this : this._values, options);\n  }\n  async throw(_) {\n    await this.abort(_);\n    return ITERATOR_DONE;\n  }\n  async return(_) {\n    await this.close();\n    return ITERATOR_DONE;\n  }\n  async read(size) {\n    return (await this.next(size, 'read')).value;\n  }\n  async peek(size) {\n    return (await this.next(size, 'peek')).value;\n  }\n  next(..._args) {\n    if (this._values.length > 0) {\n      return Promise.resolve({\n        done: false,\n        value: this._values.shift()\n      });\n    } else if (this._error) {\n      return Promise.reject({\n        done: true,\n        value: this._error.error\n      });\n    } else if (!this._closedPromiseResolve) {\n      return Promise.resolve(ITERATOR_DONE);\n    } else {\n      return new Promise((resolve, reject) => {\n        this.resolvers.push({\n          resolve,\n          reject\n        });\n      });\n    }\n  }\n  _ensureOpen() {\n    if (this._closedPromiseResolve) {\n      return true;\n    }\n    throw new Error(`${this} is closed`);\n  }\n}","map":{"version":3,"names":["streamAdapters","ITERATOR_DONE","Object","freeze","done","value","ArrowJSON","constructor","_json","schema","batches","dictionaries","ReadableInterop","tee","_getDOMStream","pipe","writable","options","_getNodeStream","pipeTo","pipeThrough","duplex","_DOMStream","toDOMStream","_nodeStream","toNodeStream","AsyncQueue","_values","resolvers","_closedPromise","Promise","r","_closedPromiseResolve","closed","cancel","reason","return","write","_ensureOpen","length","push","shift","resolve","abort","_error","error","reject","close","undefined","Symbol","asyncIterator","throw","_","read","size","next","peek","_args","Error"],"sources":["io/interfaces.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}