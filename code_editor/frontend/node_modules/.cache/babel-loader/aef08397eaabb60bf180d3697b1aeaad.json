{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n  visit(node) {\n    return node == null ? undefined : super.visit(node);\n  }\n  visitNull({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitInt({\n    typeId,\n    bitWidth,\n    isSigned\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'bitWidth': bitWidth,\n      'isSigned': isSigned\n    };\n  }\n  visitFloat({\n    typeId,\n    precision\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'precision': Precision[precision]\n    };\n  }\n  visitBinary({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitBool({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitUtf8({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitDecimal({\n    typeId,\n    scale,\n    precision\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'scale': scale,\n      'precision': precision\n    };\n  }\n  visitDate({\n    typeId,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': DateUnit[unit]\n    };\n  }\n  visitTime({\n    typeId,\n    unit,\n    bitWidth\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      bitWidth\n    };\n  }\n  visitTimestamp({\n    typeId,\n    timezone,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      timezone\n    };\n  }\n  visitInterval({\n    typeId,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': IntervalUnit[unit]\n    };\n  }\n  visitList({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitStruct({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitUnion({\n    typeId,\n    mode,\n    typeIds\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'mode': UnionMode[mode],\n      'typeIds': [...typeIds]\n    };\n  }\n  visitDictionary(node) {\n    return this.visit(node.dictionary);\n  }\n  visitFixedSizeBinary({\n    typeId,\n    byteWidth\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'byteWidth': byteWidth\n    };\n  }\n  visitFixedSizeList({\n    typeId,\n    listSize\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'listSize': listSize\n    };\n  }\n  visitMap({\n    typeId,\n    keysSorted\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'keysSorted': keysSorted\n    };\n  }\n}","map":{"version":3,"names":["Visitor","ArrowType","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","JSONTypeAssembler","visit","node","undefined","visitNull","typeId","toLowerCase","visitInt","bitWidth","isSigned","visitFloat","precision","visitBinary","visitBool","visitUtf8","visitDecimal","scale","visitDate","unit","visitTime","visitTimestamp","timezone","visitInterval","visitList","visitStruct","visitUnion","mode","typeIds","visitDictionary","dictionary","visitFixedSizeBinary","byteWidth","visitFixedSizeList","listSize","visitMap","keysSorted"],"sources":["visitor/jsontypeassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}