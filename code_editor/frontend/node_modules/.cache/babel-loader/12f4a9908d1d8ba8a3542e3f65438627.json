{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport { Builder } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\nimport { Type } from '../enum';\nimport { Utf8Builder } from './utf8';\nimport { Builder } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n/** @nocollapse */\nBuilder.new = newBuilder;\nfunction newBuilder(options) {\n  const type = options.type;\n  const builder = new (getBuilderConstructor.getVisitFn(type)())(options);\n  if (type.children && type.children.length > 0) {\n    const children = options['children'] || [];\n    const defaultOptions = {\n      'nullValues': options['nullValues']\n    };\n    const getChildOptions = Array.isArray(children) ? (_, i) => children[i] || defaultOptions : ({\n      name\n    }) => children[name] || defaultOptions;\n    type.children.forEach((field, index) => {\n      const {\n        type\n      } = field;\n      const opts = getChildOptions(field, index);\n      builder.children.push(newBuilder({\n        ...opts,\n        type\n      }));\n    });\n  }\n  return builder;\n}\nObject.keys(Type).map(T => Type[T]).filter(T => typeof T === 'number' && T !== Type.NONE).forEach(typeId => {\n  const BuilderCtor = getBuilderConstructor.visit(typeId);\n  BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n});\nUtf8Builder.prototype._setValue = setVisitor.visitBinary;","map":{"version":3,"names":["Builder","BoolBuilder","NullBuilder","DateBuilder","DateDayBuilder","DateMillisecondBuilder","DecimalBuilder","DictionaryBuilder","FixedSizeBinaryBuilder","FloatBuilder","Float16Builder","Float32Builder","Float64Builder","IntBuilder","Int8Builder","Int16Builder","Int32Builder","Int64Builder","Uint8Builder","Uint16Builder","Uint32Builder","Uint64Builder","TimeBuilder","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","TimestampBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","IntervalBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","Utf8Builder","BinaryBuilder","ListBuilder","FixedSizeListBuilder","MapBuilder","StructBuilder","UnionBuilder","SparseUnionBuilder","DenseUnionBuilder","Type","instance","setVisitor","getBuilderConstructor","new","newBuilder","options","type","builder","getVisitFn","children","length","defaultOptions","getChildOptions","Array","isArray","_","i","name","forEach","field","index","opts","push","Object","keys","map","T","filter","NONE","typeId","BuilderCtor","visit","prototype","_setValue","visitBinary"],"sources":["builder/index.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}