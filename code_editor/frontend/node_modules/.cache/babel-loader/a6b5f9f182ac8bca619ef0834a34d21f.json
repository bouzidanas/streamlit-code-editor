{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder } from '../builder';\n/** @ignore */\nexport class IntBuilder extends FixedWidthBuilder {\n  setValue(index, value) {\n    this._values.set(index, value);\n  }\n}\n/** @ignore */\nexport class Int8Builder extends IntBuilder {}\n/** @ignore */\nexport class Int16Builder extends IntBuilder {}\n/** @ignore */\nexport class Int32Builder extends IntBuilder {}\n/** @ignore */\nexport class Int64Builder extends IntBuilder {\n  constructor(options) {\n    if (options['nullValues']) {\n      options['nullValues'] = options['nullValues'].map(toBigInt);\n    }\n    super(options);\n    this._values = new WideBufferBuilder(new Int32Array(0), 2);\n  }\n  get values64() {\n    return this._values.buffer64;\n  }\n  isValid(value) {\n    return super.isValid(toBigInt(value));\n  }\n}\n/** @ignore */\nexport class Uint8Builder extends IntBuilder {}\n/** @ignore */\nexport class Uint16Builder extends IntBuilder {}\n/** @ignore */\nexport class Uint32Builder extends IntBuilder {}\n/** @ignore */\nexport class Uint64Builder extends IntBuilder {\n  constructor(options) {\n    if (options['nullValues']) {\n      options['nullValues'] = options['nullValues'].map(toBigInt);\n    }\n    super(options);\n    this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n  }\n  get values64() {\n    return this._values.buffer64;\n  }\n  isValid(value) {\n    return super.isValid(toBigInt(value));\n  }\n}\nconst toBigInt = (memo => value => {\n  if (ArrayBuffer.isView(value)) {\n    memo.buffer = value.buffer;\n    memo.byteOffset = value.byteOffset;\n    memo.byteLength = value.byteLength;\n    value = bignumToBigInt(memo);\n    memo.buffer = null;\n  }\n  return value;\n})({\n  'BigIntArray': BigInt64Array\n});","map":{"version":3,"names":["bignumToBigInt","WideBufferBuilder","BigInt64Array","FixedWidthBuilder","IntBuilder","setValue","index","value","_values","set","Int8Builder","Int16Builder","Int32Builder","Int64Builder","constructor","options","map","toBigInt","Int32Array","values64","buffer64","isValid","Uint8Builder","Uint16Builder","Uint32Builder","Uint64Builder","Uint32Array","memo","ArrayBuffer","isView","buffer","byteOffset","byteLength"],"sources":["builder/int.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,cAAc,QAAQ,YAAY;AAC3C,SAASC,iBAAiB,QAAQ,UAAU;AAC5C,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,SAASC,iBAAiB,QAAwB,YAAY;AAG9D;AACA,OAAM,MAAOC,UAA6C,SAAQD,iBAA2B;EAClFE,QAAQA,CAACC,KAAa,EAAEC,KAAkB;IAC7C,IAAI,CAACC,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEC,KAAK,CAAC;EAClC;;AAGJ;AACA,OAAM,MAAOG,WAAyB,SAAQN,UAAuB;AACrE;AACA,OAAM,MAAOO,YAA0B,SAAQP,UAAwB;AACvE;AACA,OAAM,MAAOQ,YAA0B,SAAQR,UAAwB;AACvE;AACA,OAAM,MAAOS,YAA0B,SAAQT,UAAwB;EAEnEU,YAAYC,OAAqC;IAC7C,IAAIA,OAAO,CAAC,YAAY,CAAC,EAAE;MACvBA,OAAO,CAAC,YAAY,CAAC,GAAIA,OAAO,CAAC,YAAY,CAAa,CAACC,GAAG,CAACC,QAAQ,CAAC;;IAE5E,KAAK,CAACF,OAAO,CAAC;IACd,IAAI,CAACP,OAAO,GAAG,IAAIP,iBAAiB,CAAC,IAAIiB,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC9D;EACA,IAAWC,QAAQA,CAAA;IAAK,OAAO,IAAI,CAACX,OAAO,CAACY,QAAQ;EAAE;EAC/CC,OAAOA,CAACd,KAAkC;IAAI,OAAO,KAAK,CAACc,OAAO,CAACJ,QAAQ,CAACV,KAAK,CAAC,CAAC;EAAE;;AAGhG;AACA,OAAM,MAAOe,YAA0B,SAAQlB,UAAwB;AACvE;AACA,OAAM,MAAOmB,aAA2B,SAAQnB,UAAyB;AACzE;AACA,OAAM,MAAOoB,aAA2B,SAAQpB,UAAyB;AACzE;AACA,OAAM,MAAOqB,aAA2B,SAAQrB,UAAyB;EAErEU,YAAYC,OAAsC;IAC9C,IAAIA,OAAO,CAAC,YAAY,CAAC,EAAE;MACvBA,OAAO,CAAC,YAAY,CAAC,GAAIA,OAAO,CAAC,YAAY,CAAa,CAACC,GAAG,CAACC,QAAQ,CAAC;;IAE5E,KAAK,CAACF,OAAO,CAAC;IACd,IAAI,CAACP,OAAO,GAAG,IAAIP,iBAAiB,CAAC,IAAIyB,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/D;EACA,IAAWP,QAAQA,CAAA;IAAK,OAAO,IAAI,CAACX,OAAO,CAACY,QAAQ;EAAE;EAC/CC,OAAOA,CAACd,KAAmC;IAAI,OAAO,KAAK,CAACc,OAAO,CAACJ,QAAQ,CAACV,KAAK,CAAC,CAAC;EAAE;;AAGjG,MAAMU,QAAQ,GAAG,CAAEU,IAAS,IAAMpB,KAAU,IAAI;EAC5C,IAAIqB,WAAW,CAACC,MAAM,CAACtB,KAAK,CAAC,EAAE;IAC3BoB,IAAI,CAACG,MAAM,GAAGvB,KAAK,CAACuB,MAAM;IAC1BH,IAAI,CAACI,UAAU,GAAGxB,KAAK,CAACwB,UAAU;IAClCJ,IAAI,CAACK,UAAU,GAAGzB,KAAK,CAACyB,UAAU;IAClCzB,KAAK,GAAGP,cAAc,CAAC2B,IAAI,CAAC;IAC5BA,IAAI,CAACG,MAAM,GAAG,IAAI;;EAEtB,OAAOvB,KAAK;AAChB,CAAC,EAAE;EAAE,aAAa,EAAEL;AAAa,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}