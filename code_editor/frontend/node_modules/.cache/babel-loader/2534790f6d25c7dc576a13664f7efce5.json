{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n/** @ignore */\nconst SharedArrayBuf = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer;\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks) {\n  let result = chunks[0] ? [chunks[0]] : [];\n  let xOffset, yOffset, xLen, yLen;\n  for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n    x = result[j];\n    y = chunks[i];\n    // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n    if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n    ({\n      byteOffset: xOffset,\n      byteLength: xLen\n    } = x);\n    ({\n      byteOffset: yOffset,\n      byteLength: yLen\n    } = y);\n    // continue if the byte ranges of x and y aren't contiguous\n    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n    result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n  }\n  return result;\n}\n/** @ignore */\nexport function memcpy(target, source) {\n  let targetByteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sourceByteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : source.byteLength;\n  const targetByteLength = target.byteLength;\n  const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n  const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n  dst.set(src, targetByteOffset);\n  return target;\n}\n/** @ignore */\nexport function joinUint8Arrays(chunks, size) {\n  // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n  // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n  // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n  let result = collapseContiguousByteRanges(chunks);\n  let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n  let source, sliced, buffer;\n  let offset = 0,\n    index = -1,\n    length = Math.min(size || Infinity, byteLength);\n  for (let n = result.length; ++index < n;) {\n    source = result[index];\n    sliced = source.subarray(0, Math.min(source.length, length - offset));\n    if (length <= offset + sliced.length) {\n      if (sliced.length < source.length) {\n        result[index] = source.subarray(sliced.length);\n      } else if (sliced.length === source.length) {\n        index++;\n      }\n      buffer ? memcpy(buffer, sliced, offset) : buffer = sliced;\n      break;\n    }\n    memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n    offset += sliced.length;\n  }\n  return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n  let value = isIteratorResult(input) ? input.value : input;\n  if (value instanceof ArrayBufferViewCtor) {\n    if (ArrayBufferViewCtor === Uint8Array) {\n      // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n      // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n    }\n    return value;\n  }\n  if (!value) {\n    return new ArrayBufferViewCtor(0);\n  }\n  if (typeof value === 'string') {\n    value = encodeUtf8(value);\n  }\n  if (value instanceof ArrayBuffer) {\n    return new ArrayBufferViewCtor(value);\n  }\n  if (value instanceof SharedArrayBuf) {\n    return new ArrayBufferViewCtor(value);\n  }\n  if (value instanceof ByteBuffer) {\n    return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n  }\n  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */\nexport const toInt8Array = input => toArrayBufferView(Int8Array, input);\n/** @ignore */\nexport const toInt16Array = input => toArrayBufferView(Int16Array, input);\n/** @ignore */\nexport const toInt32Array = input => toArrayBufferView(Int32Array, input);\n/** @ignore */\nexport const toBigInt64Array = input => toArrayBufferView(BigInt64Array, input);\n/** @ignore */\nexport const toUint8Array = input => toArrayBufferView(Uint8Array, input);\n/** @ignore */\nexport const toUint16Array = input => toArrayBufferView(Uint16Array, input);\n/** @ignore */\nexport const toUint32Array = input => toArrayBufferView(Uint32Array, input);\n/** @ignore */\nexport const toBigUint64Array = input => toArrayBufferView(BigUint64Array, input);\n/** @ignore */\nexport const toFloat32Array = input => toArrayBufferView(Float32Array, input);\n/** @ignore */\nexport const toFloat64Array = input => toArrayBufferView(Float64Array, input);\n/** @ignore */\nexport const toUint8ClampedArray = input => toArrayBufferView(Uint8ClampedArray, input);\n/** @ignore */\nconst pump = iterator => {\n  iterator.next();\n  return iterator;\n};\n/** @ignore */\nexport function* toArrayBufferViewIterator(ArrayCtor, source) {\n  const wrap = function* (x) {\n    yield x;\n  };\n  const buffers = typeof source === 'string' ? wrap(source) : ArrayBuffer.isView(source) ? wrap(source) : source instanceof ArrayBuffer ? wrap(source) : source instanceof SharedArrayBuf ? wrap(source) : !isIterable(source) ? wrap(source) : source;\n  yield* pump(function* (it) {\n    let r = null;\n    do {\n      r = it.next(yield toArrayBufferView(ArrayCtor, r));\n    } while (!r.done);\n  }(buffers[Symbol.iterator]()));\n}\n/** @ignore */\nexport const toInt8ArrayIterator = input => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */\nexport const toInt16ArrayIterator = input => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */\nexport const toInt32ArrayIterator = input => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */\nexport const toUint8ArrayIterator = input => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */\nexport const toUint16ArrayIterator = input => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */\nexport const toUint32ArrayIterator = input => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */\nexport const toFloat32ArrayIterator = input => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */\nexport const toFloat64ArrayIterator = input => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */\nexport const toUint8ClampedArrayIterator = input => toArrayBufferViewIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n  // if a Promise, unwrap the Promise and iterate the resolved value\n  if (isPromise(source)) {\n    return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n  }\n  const wrap = async function* (x) {\n    yield await x;\n  };\n  const emit = async function* (source) {\n    yield* pump(function* (it) {\n      let r = null;\n      do {\n        r = it.next(yield r && r.value);\n      } while (!r.done);\n    }(source[Symbol.iterator]()));\n  };\n  const buffers = typeof source === 'string' ? wrap(source) // if string, wrap in an AsyncIterableIterator\n  : ArrayBuffer.isView(source) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n  : source instanceof ArrayBuffer ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n  : source instanceof SharedArrayBuf ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n  : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n  : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n  : source; // otherwise if AsyncIterable, use it\n  yield* pump(async function* (it) {\n    let r = null;\n    do {\n      r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n    } while (!r.done);\n  }(buffers[Symbol.asyncIterator]()));\n}\n/** @ignore */\nexport const toInt8ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */\nexport const toInt16ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */\nexport const toInt32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */\nexport const toUint8ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */\nexport const toUint16ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */\nexport const toUint32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */\nexport const toFloat32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */\nexport const toFloat64ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */\nexport const toUint8ClampedArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n  // If we have a non-zero offset, create a new offsets array with the values\n  // shifted by the start offset, such that the new start offset is 0\n  if (offset !== 0) {\n    valueOffsets = valueOffsets.slice(0, length + 1);\n    for (let i = -1; ++i <= length;) {\n      valueOffsets[i] += offset;\n    }\n  }\n  return valueOffsets;\n}\n/** @ignore */\nexport function compareArrayLike(a, b) {\n  let i = 0,\n    n = a.length;\n  if (n !== b.length) {\n    return false;\n  }\n  if (n > 0) {\n    do {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    } while (++i < n);\n  }\n  return true;\n}","map":{"version":3,"names":["flatbuffers","encodeUtf8","ByteBuffer","isPromise","isIterable","isAsyncIterable","isIteratorResult","BigInt64Array","BigUint64Array","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","collapseContiguousByteRanges","chunks","result","xOffset","yOffset","xLen","yLen","x","y","i","j","n","length","buffer","byteOffset","byteLength","Uint8Array","memcpy","target","source","targetByteOffset","arguments","undefined","sourceByteLength","targetByteLength","dst","src","Math","min","set","joinUint8Arrays","size","reduce","b","sliced","offset","index","Infinity","subarray","slice","toArrayBufferView","ArrayBufferViewCtor","input","value","bytes","isView","from","BYTES_PER_ELEMENT","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","Int32Array","toBigInt64Array","toUint8Array","toUint16Array","Uint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","Float32Array","toFloat64Array","Float64Array","toUint8ClampedArray","Uint8ClampedArray","pump","iterator","next","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","r","done","Symbol","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","emit","asyncIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","a"],"sources":["util/buffer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}