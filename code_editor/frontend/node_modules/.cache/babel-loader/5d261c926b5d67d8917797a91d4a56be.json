{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { Chunked } from './vector/chunked';\nexport class Column extends Chunked {\n  constructor(field, vectors = [], offsets) {\n    vectors = Chunked.flatten(...vectors);\n    super(field.type, vectors, offsets);\n    this._field = field;\n    if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n      return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n    }\n  }\n  /** @nocollapse */\n  static new(field, data, ...rest) {\n    const chunks = Chunked.flatten(Array.isArray(data) ? [...data, ...rest] : data instanceof Vector ? [data, ...rest] : [Vector.new(data, ...rest)]);\n    if (typeof field === 'string') {\n      const type = chunks[0].data.type;\n      field = new Field(field, type, true);\n    } else if (!field.nullable && chunks.some(({\n      nullCount\n    }) => nullCount > 0)) {\n      field = field.clone({\n        nullable: true\n      });\n    }\n    return new Column(field, chunks);\n  }\n  get field() {\n    return this._field;\n  }\n  get name() {\n    return this._field.name;\n  }\n  get nullable() {\n    return this._field.nullable;\n  }\n  get metadata() {\n    return this._field.metadata;\n  }\n  clone(chunks = this._chunks) {\n    return new Column(this._field, chunks);\n  }\n  getChildAt(index) {\n    if (index < 0 || index >= this.numChildren) {\n      return null;\n    }\n    let columns = this._children || (this._children = []);\n    let column, field, chunks;\n    if (column = columns[index]) {\n      return column;\n    }\n    if (field = (this.type.children || [])[index]) {\n      chunks = this._chunks.map(vector => vector.getChildAt(index)).filter(vec => vec != null);\n      if (chunks.length > 0) {\n        return columns[index] = new Column(field, chunks);\n      }\n    }\n    return null;\n  }\n}\n/** @ignore */\nclass SingleChunkColumn extends Column {\n  constructor(field, vector, offsets) {\n    super(field, [vector], offsets);\n    this._chunk = vector;\n  }\n  search(index, then) {\n    return then ? then(this, 0, index) : [0, index];\n  }\n  isValid(index) {\n    return this._chunk.isValid(index);\n  }\n  get(index) {\n    return this._chunk.get(index);\n  }\n  set(index, value) {\n    this._chunk.set(index, value);\n  }\n  indexOf(element, offset) {\n    return this._chunk.indexOf(element, offset);\n  }\n}","map":{"version":3,"names":["Field","Vector","Chunked","Column","constructor","field","vectors","offsets","flatten","type","_field","length","SingleChunkColumn","_chunkOffsets","new","data","rest","chunks","Array","isArray","nullable","some","nullCount","clone","name","metadata","_chunks","getChildAt","index","numChildren","columns","_children","column","children","map","vector","filter","vec","_chunk","search","then","isValid","get","set","value","indexOf","element","offset"],"sources":["column.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}