{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { Dictionary } from '../type';\n/** @ignore */\nexport class DictionaryVector extends BaseVector {\n  constructor(data) {\n    super(data);\n    this.indices = Vector.new(data.clone(this.type.indices));\n  }\n  /** @nocollapse */\n  static from(...args) {\n    if (args.length === 3) {\n      const [values, indices, keys] = args;\n      const type = new Dictionary(values.type, indices, null, null);\n      return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n    }\n    return vectorFromValuesWithType(() => args[0].type, args[0]);\n  }\n  get dictionary() {\n    return this.data.dictionary;\n  }\n  reverseLookup(value) {\n    return this.dictionary.indexOf(value);\n  }\n  getKey(idx) {\n    return this.indices.get(idx);\n  }\n  getValue(key) {\n    return this.dictionary.get(key);\n  }\n  setKey(idx, key) {\n    return this.indices.set(idx, key);\n  }\n  setValue(key, value) {\n    return this.dictionary.set(key, value);\n  }\n}\nDictionaryVector.prototype.indices = null;","map":{"version":3,"names":["Data","Vector","BaseVector","vectorFromValuesWithType","Dictionary","DictionaryVector","constructor","data","indices","new","clone","type","from","args","length","values","keys","dictionary","reverseLookup","value","indexOf","getKey","idx","get","getValue","key","setKey","set","setValue","prototype"],"sources":["vector/dictionary.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAI,QAAQ,SAAS;AAC9B,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,UAAU,QAAQ,QAAQ;AAGnC,SAASC,wBAAwB,QAAQ,SAAS;AAElD,SAAmBC,UAAU,QAAe,SAAS;AAKrD;AACA,OAAM,MAAOC,gBAAuE,SAAQH,UAA+B;EAcvHI,YAAYC,IAA+B;IACvC,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACC,OAAO,GAAGP,MAAM,CAACQ,GAAG,CAACF,IAAI,CAACG,KAAK,CAAC,IAAI,CAACC,IAAI,CAACH,OAAO,CAAC,CAAC;EAC5D;EAbA;EACO,OAAOI,IAAIA,CAAuD,GAAGC,IAAW;IACnF,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MACnB,MAAM,CAACC,MAAM,EAAEP,OAAO,EAAEQ,IAAI,CAAC,GAAGH,IAAyB;MACzD,MAAMF,IAAI,GAAG,IAAIP,UAAU,CAACW,MAAM,CAACJ,IAAI,EAAEH,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC;MAC7D,OAAOP,MAAM,CAACQ,GAAG,CAACT,IAAI,CAACI,UAAU,CAACO,IAAI,EAAE,CAAC,EAAEK,IAAI,CAACF,MAAM,EAAE,CAAC,EAAE,IAAI,EAAEE,IAAI,EAAED,MAAM,CAAC,CAAC;;IAEnF,OAAOZ,wBAAwB,CAAC,MAAMU,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,EAAEE,IAAI,CAAC,CAAC,CAAC,CAAC;EAChE;EASA,IAAWI,UAAUA,CAAA;IAAK,OAAmB,IAAI,CAACV,IAAI,CAACU,UAAU;EAAE;EAC5DC,aAAaA,CAACC,KAAQ;IAAI,OAAO,IAAI,CAACF,UAAU,CAACG,OAAO,CAACD,KAAK,CAAC;EAAE;EACjEE,MAAMA,CAACC,GAAW;IAA2B,OAAO,IAAI,CAACd,OAAO,CAACe,GAAG,CAACD,GAAG,CAAC;EAAE;EAC3EE,QAAQA,CAACC,GAAW;IAAwB,OAAO,IAAI,CAACR,UAAU,CAACM,GAAG,CAACE,GAAG,CAAC;EAAE;EAC7EC,MAAMA,CAACJ,GAAW,EAAEG,GAA0B;IAAI,OAAO,IAAI,CAACjB,OAAO,CAACmB,GAAG,CAACL,GAAG,EAAEG,GAAG,CAAC;EAAE;EACrFG,QAAQA,CAACH,GAAW,EAAEN,KAAyB;IAAI,OAAO,IAAI,CAACF,UAAU,CAACU,GAAG,CAACF,GAAG,EAAEN,KAAK,CAAC;EAAE;;AAGrGd,gBAAgB,CAACwB,SAAiB,CAACrB,OAAO,GAAG,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module"}