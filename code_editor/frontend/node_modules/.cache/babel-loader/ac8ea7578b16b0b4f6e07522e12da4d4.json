{"ast":null,"code":"ace.define(\"ace/mode/perl_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var PerlHighlightRules = function () {\n    var keywords = \"base|constant|continue|else|elsif|for|foreach|format|goto|if|last|local|my|next|\" + \"no|package|parent|redo|require|scalar|sub|unless|until|while|use|vars\";\n    var buildinConstants = \"ARGV|ENV|INC|SIG\";\n    var builtinFunctions = \"getprotobynumber|getprotobyname|getservbyname|gethostbyaddr|\" + \"gethostbyname|getservbyport|getnetbyaddr|getnetbyname|getsockname|\" + \"getpeername|setpriority|getprotoent|setprotoent|getpriority|\" + \"endprotoent|getservent|setservent|endservent|sethostent|socketpair|\" + \"getsockopt|gethostent|endhostent|setsockopt|setnetent|quotemeta|\" + \"localtime|prototype|getnetent|endnetent|rewinddir|wantarray|getpwuid|\" + \"closedir|getlogin|readlink|endgrent|getgrgid|getgrnam|shmwrite|\" + \"shutdown|readline|endpwent|setgrent|readpipe|formline|truncate|\" + \"dbmclose|syswrite|setpwent|getpwnam|getgrent|getpwent|ucfirst|sysread|\" + \"setpgrp|shmread|sysseek|sysopen|telldir|defined|opendir|connect|\" + \"lcfirst|getppid|binmode|syscall|sprintf|getpgrp|readdir|seekdir|\" + \"waitpid|reverse|unshift|symlink|dbmopen|semget|msgrcv|rename|listen|\" + \"chroot|msgsnd|shmctl|accept|unpack|exists|fileno|shmget|system|\" + \"unlink|printf|gmtime|msgctl|semctl|values|rindex|substr|splice|\" + \"length|msgget|select|socket|return|caller|delete|alarm|ioctl|index|\" + \"undef|lstat|times|srand|chown|fcntl|close|write|umask|rmdir|study|\" + \"sleep|chomp|untie|print|utime|mkdir|atan2|split|crypt|flock|chmod|\" + \"BEGIN|bless|chdir|semop|shift|reset|link|stat|chop|grep|fork|dump|\" + \"join|open|tell|pipe|exit|glob|warn|each|bind|sort|pack|eval|push|\" + \"keys|getc|kill|seek|sqrt|send|wait|rand|tied|read|time|exec|recv|\" + \"eof|chr|int|ord|exp|pos|pop|sin|log|abs|oct|hex|tie|cos|vec|END|ref|\" + \"map|die|uc|lc|do\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"constant.language\": buildinConstants,\n      \"support.function\": builtinFunctions\n    }, \"identifier\");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc\",\n        regex: \"^=(?:begin|item)\\\\b\",\n        next: \"block_comment\"\n      }, {\n        token: \"string.regexp\",\n        regex: \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: '[\"].*\\\\\\\\$',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: \"['].*\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0x[0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"%#|\\\\$#|\\\\.\\\\.\\\\.|\\\\|\\\\|=|>>=|<<=|<=>|&&=|=>|!~|\\\\^=|&=|\\\\|=|\\\\.=|x=|%=|\\\\/=|\\\\*=|\\\\-=|\\\\+=|=~|\\\\*\\\\*|\\\\-\\\\-|\\\\.\\\\.|\\\\|\\\\||&&|\\\\+\\\\+|\\\\->|!=|==|>=|<=|>>|<<|,|=|\\\\?\\\\:|\\\\^|\\\\||x|%|\\\\/|\\\\*|<|&|\\\\\\\\|~|!|>|\\\\.|\\\\-|\\\\+|\\\\-C|\\\\-b|\\\\-S|\\\\-u|\\\\-t|\\\\-p|\\\\-l|\\\\-d|\\\\-f|\\\\-g|\\\\-s|\\\\-z|\\\\-k|\\\\-e|\\\\-O|\\\\-T|\\\\-B|\\\\-M|\\\\-A|\\\\-X|\\\\-W|\\\\-c|\\\\-R|\\\\-o|\\\\-x|\\\\-w|\\\\-r|\\\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\"\n      }, {\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"qqstring\": [{\n        token: \"string\",\n        regex: '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }],\n      \"qstring\": [{\n        token: \"string\",\n        regex: \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }],\n      \"block_comment\": [{\n        token: \"comment.doc\",\n        regex: \"^=cut\\\\b\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment.doc\"\n      }]\n    };\n  };\n  oop.inherits(PerlHighlightRules, TextHighlightRules);\n  exports.PerlHighlightRules = PerlHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var Range = require(\"../../range\").Range;\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/perl\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/perl_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var PerlHighlightRules = require(\"./perl_highlight_rules\").PerlHighlightRules;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = PerlHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode({\n      start: \"^=(begin|item)\\\\b\",\n      end: \"^=(cut)\\\\b\"\n    });\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.blockComment = [{\n      start: \"=begin\",\n      end: \"=cut\",\n      lineStartOnly: true\n    }, {\n      start: \"=item\",\n      end: \"=cut\",\n      lineStartOnly: true\n    }];\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n        if (match) {\n          indent += tab;\n        }\n      }\n      return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/perl\";\n    this.snippetFileId = \"ace/snippets/perl\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/perl\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","PerlHighlightRules","keywords","buildinConstants","builtinFunctions","keywordMapper","createKeywordMapper","$rules","token","regex","next","defaultToken","inherits","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CStyleFoldMode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","lineStartOnly","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","type","$id","snippetFileId"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-perl.js"],"sourcesContent":["ace.define(\"ace/mode/perl_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar PerlHighlightRules = function () {\n    var keywords = (\"base|constant|continue|else|elsif|for|foreach|format|goto|if|last|local|my|next|\" +\n        \"no|package|parent|redo|require|scalar|sub|unless|until|while|use|vars\");\n    var buildinConstants = (\"ARGV|ENV|INC|SIG\");\n    var builtinFunctions = (\"getprotobynumber|getprotobyname|getservbyname|gethostbyaddr|\" +\n        \"gethostbyname|getservbyport|getnetbyaddr|getnetbyname|getsockname|\" +\n        \"getpeername|setpriority|getprotoent|setprotoent|getpriority|\" +\n        \"endprotoent|getservent|setservent|endservent|sethostent|socketpair|\" +\n        \"getsockopt|gethostent|endhostent|setsockopt|setnetent|quotemeta|\" +\n        \"localtime|prototype|getnetent|endnetent|rewinddir|wantarray|getpwuid|\" +\n        \"closedir|getlogin|readlink|endgrent|getgrgid|getgrnam|shmwrite|\" +\n        \"shutdown|readline|endpwent|setgrent|readpipe|formline|truncate|\" +\n        \"dbmclose|syswrite|setpwent|getpwnam|getgrent|getpwent|ucfirst|sysread|\" +\n        \"setpgrp|shmread|sysseek|sysopen|telldir|defined|opendir|connect|\" +\n        \"lcfirst|getppid|binmode|syscall|sprintf|getpgrp|readdir|seekdir|\" +\n        \"waitpid|reverse|unshift|symlink|dbmopen|semget|msgrcv|rename|listen|\" +\n        \"chroot|msgsnd|shmctl|accept|unpack|exists|fileno|shmget|system|\" +\n        \"unlink|printf|gmtime|msgctl|semctl|values|rindex|substr|splice|\" +\n        \"length|msgget|select|socket|return|caller|delete|alarm|ioctl|index|\" +\n        \"undef|lstat|times|srand|chown|fcntl|close|write|umask|rmdir|study|\" +\n        \"sleep|chomp|untie|print|utime|mkdir|atan2|split|crypt|flock|chmod|\" +\n        \"BEGIN|bless|chdir|semop|shift|reset|link|stat|chop|grep|fork|dump|\" +\n        \"join|open|tell|pipe|exit|glob|warn|each|bind|sort|pack|eval|push|\" +\n        \"keys|getc|kill|seek|sqrt|send|wait|rand|tied|read|time|exec|recv|\" +\n        \"eof|chr|int|ord|exp|pos|pop|sin|log|abs|oct|hex|tie|cos|vec|END|ref|\" +\n        \"map|die|uc|lc|do\");\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"constant.language\": buildinConstants,\n        \"support.function\": builtinFunctions\n    }, \"identifier\");\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc\",\n                regex: \"^=(?:begin|item)\\\\b\",\n                next: \"block_comment\"\n            }, {\n                token: \"string.regexp\",\n                regex: \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\n            }, {\n                token: \"string\", // single line\n                regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token: \"string\", // multi line string start\n                regex: '[\"].*\\\\\\\\$',\n                next: \"qqstring\"\n            }, {\n                token: \"string\", // single line\n                regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token: \"string\", // multi line string start\n                regex: \"['].*\\\\\\\\$\",\n                next: \"qstring\"\n            }, {\n                token: \"constant.numeric\", // hex\n                regex: \"0x[0-9a-fA-F]+\\\\b\"\n            }, {\n                token: \"constant.numeric\", // float\n                regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token: \"keyword.operator\",\n                regex: \"%#|\\\\$#|\\\\.\\\\.\\\\.|\\\\|\\\\|=|>>=|<<=|<=>|&&=|=>|!~|\\\\^=|&=|\\\\|=|\\\\.=|x=|%=|\\\\/=|\\\\*=|\\\\-=|\\\\+=|=~|\\\\*\\\\*|\\\\-\\\\-|\\\\.\\\\.|\\\\|\\\\||&&|\\\\+\\\\+|\\\\->|!=|==|>=|<=|>>|<<|,|=|\\\\?\\\\:|\\\\^|\\\\||x|%|\\\\/|\\\\*|<|&|\\\\\\\\|~|!|>|\\\\.|\\\\-|\\\\+|\\\\-C|\\\\-b|\\\\-S|\\\\-u|\\\\-t|\\\\-p|\\\\-l|\\\\-d|\\\\-f|\\\\-g|\\\\-s|\\\\-z|\\\\-k|\\\\-e|\\\\-O|\\\\-T|\\\\-B|\\\\-M|\\\\-A|\\\\-X|\\\\-W|\\\\-c|\\\\-R|\\\\-o|\\\\-x|\\\\-w|\\\\-r|\\\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\"\n            }, {\n                token: \"comment\",\n                regex: \"#.*$\"\n            }, {\n                token: \"lparen\",\n                regex: \"[[({]\"\n            }, {\n                token: \"rparen\",\n                regex: \"[\\\\])}]\"\n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }\n        ],\n        \"qqstring\": [\n            {\n                token: \"string\",\n                regex: '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\n                next: \"start\"\n            }, {\n                token: \"string\",\n                regex: '.+'\n            }\n        ],\n        \"qstring\": [\n            {\n                token: \"string\",\n                regex: \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\n                next: \"start\"\n            }, {\n                token: \"string\",\n                regex: '.+'\n            }\n        ],\n        \"block_comment\": [\n            {\n                token: \"comment.doc\",\n                regex: \"^=cut\\\\b\",\n                next: \"start\"\n            },\n            {\n                defaultToken: \"comment.doc\"\n            }\n        ]\n    };\n};\noop.inherits(PerlHighlightRules, TextHighlightRules);\nexports.PerlHighlightRules = PerlHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/perl\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/perl_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/cstyle\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PerlHighlightRules = require(\"./perl_highlight_rules\").PerlHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = PerlHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode({ start: \"^=(begin|item)\\\\b\", end: \"^=(cut)\\\\b\" });\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"#\";\n    this.blockComment = [\n        { start: \"=begin\", end: \"=cut\", lineStartOnly: true },\n        { start: \"=item\", end: \"=cut\", lineStartOnly: true }\n    ];\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n        return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/perl\";\n    this.snippetFileId = \"ace/snippets/perl\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/perl\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}