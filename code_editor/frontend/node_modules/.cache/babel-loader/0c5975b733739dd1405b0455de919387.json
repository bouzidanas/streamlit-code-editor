{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays } from '../util/buffer';\nimport { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\n/** @ignore */\nexport class AsyncByteQueue extends AsyncQueue {\n  write(value) {\n    if ((value = toUint8Array(value)).byteLength > 0) {\n      return super.write(value);\n    }\n  }\n  toString(sync = false) {\n    return sync ? decodeUtf8(this.toUint8Array(true)) : this.toUint8Array(false).then(decodeUtf8);\n  }\n  toUint8Array(sync = false) {\n    return sync ? joinUint8Arrays(this._values)[0] : (async () => {\n      let buffers = [],\n        byteLength = 0;\n      for await (const chunk of this) {\n        buffers.push(chunk);\n        byteLength += chunk.byteLength;\n      }\n      return joinUint8Arrays(buffers, byteLength)[0];\n    })();\n  }\n}\n/** @ignore */\nexport class ByteStream {\n  constructor(source) {\n    if (source) {\n      this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n    }\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n  next(value) {\n    return this.source.next(value);\n  }\n  throw(value) {\n    return this.source.throw(value);\n  }\n  return(value) {\n    return this.source.return(value);\n  }\n  peek(size) {\n    return this.source.peek(size);\n  }\n  read(size) {\n    return this.source.read(size);\n  }\n}\n/** @ignore */\nexport class AsyncByteStream {\n  constructor(source) {\n    if (source instanceof AsyncByteStream) {\n      this.source = source.source;\n    } else if (source instanceof AsyncByteQueue) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isReadableNodeStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n    } else if (isReadableDOMStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n    } else if (isFetchResponse(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body));\n    } else if (isIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n    } else if (isPromise(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isAsyncIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    }\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n  next(value) {\n    return this.source.next(value);\n  }\n  throw(value) {\n    return this.source.throw(value);\n  }\n  return(value) {\n    return this.source.return(value);\n  }\n  get closed() {\n    return this.source.closed;\n  }\n  cancel(reason) {\n    return this.source.cancel(reason);\n  }\n  peek(size) {\n    return this.source.peek(size);\n  }\n  read(size) {\n    return this.source.read(size);\n  }\n}\n/** @ignore */\nclass ByteStreamSource {\n  constructor(source) {\n    this.source = source;\n  }\n  cancel(reason) {\n    this.return(reason);\n  }\n  peek(size) {\n    return this.next(size, 'peek').value;\n  }\n  read(size) {\n    return this.next(size, 'read').value;\n  }\n  next(size, cmd = 'read') {\n    return this.source.next({\n      cmd,\n      size\n    });\n  }\n  throw(value) {\n    return Object.create(this.source.throw && this.source.throw(value) || ITERATOR_DONE);\n  }\n  return(value) {\n    return Object.create(this.source.return && this.source.return(value) || ITERATOR_DONE);\n  }\n}\n/** @ignore */\nclass AsyncByteStreamSource {\n  constructor(source) {\n    this.source = source;\n    this._closedPromise = new Promise(r => this._closedPromiseResolve = r);\n  }\n  async cancel(reason) {\n    await this.return(reason);\n  }\n  get closed() {\n    return this._closedPromise;\n  }\n  async read(size) {\n    return (await this.next(size, 'read')).value;\n  }\n  async peek(size) {\n    return (await this.next(size, 'peek')).value;\n  }\n  async next(size, cmd = 'read') {\n    return await this.source.next({\n      cmd,\n      size\n    });\n  }\n  async throw(value) {\n    const result = this.source.throw && (await this.source.throw(value)) || ITERATOR_DONE;\n    this._closedPromiseResolve && this._closedPromiseResolve();\n    this._closedPromiseResolve = undefined;\n    return Object.create(result);\n  }\n  async return(value) {\n    const result = this.source.return && (await this.source.return(value)) || ITERATOR_DONE;\n    this._closedPromiseResolve && this._closedPromiseResolve();\n    this._closedPromiseResolve = undefined;\n    return Object.create(result);\n  }\n}","map":{"version":3,"names":["streamAdapters","decodeUtf8","ITERATOR_DONE","AsyncQueue","toUint8Array","joinUint8Arrays","isPromise","isFetchResponse","isIterable","isAsyncIterable","isReadableDOMStream","isReadableNodeStream","AsyncByteQueue","write","value","byteLength","toString","sync","then","_values","buffers","chunk","push","ByteStream","constructor","source","ByteStreamSource","fromIterable","Symbol","iterator","next","throw","return","peek","size","read","AsyncByteStream","AsyncByteStreamSource","fromAsyncIterable","fromNodeStream","fromDOMStream","body","asyncIterator","closed","cancel","reason","cmd","Object","create","_closedPromise","Promise","r","_closedPromiseResolve","result","undefined"],"sources":["io/stream.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}