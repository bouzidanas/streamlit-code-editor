{"ast":null,"code":"ace.define(\"ace/mode/crystal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var CrystalHighlightRules = function () {\n    var builtinFunctions = \"puts|initialize|previous_def|typeof|as|pointerof|sizeof|instance_sizeof\";\n    var keywords = \"if|end|else|elsif|unless|case|when|break|while|next|until|def|return|class|new|getter|setter|property|lib\" + \"|fun|do|struct|private|protected|public|module|super|abstract|include|extend|begin|enum|raise|yield|with\" + \"|alias|rescue|ensure|macro|uninitialized|union|type|require\";\n    var buildinConstants = \"true|TRUE|false|FALSE|nil|NIL|__LINE__|__END_LINE__|__FILE__|__DIR__\";\n    var builtinVariables = \"$DEBUG|$defout|$FILENAME|$LOAD_PATH|$SAFE|$stdin|$stdout|$stderr|$VERBOSE|\" + \"root_url|flash|session|cookies|params|request|response|logger|self\";\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"constant.language\": buildinConstants,\n      \"variable.language\": builtinVariables,\n      \"support.function\": builtinFunctions\n    }, \"identifier\");\n    var hexNumber = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var decNumber = \"(?:[0-9][\\\\d_]*)\";\n    var octNumber = \"(?:0o[0-7][0-7]*)\";\n    var binNumber = \"(?:0[bB][01]+)\";\n    var intNumber = \"(?:[+-]?)(?:\" + hexNumber + \"|\" + decNumber + \"|\" + octNumber + \"|\" + binNumber + \")(?:_?[iIuU](?:8|16|32|64))?\\\\b\";\n    var escapeExpression = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}})/;\n    var extEscapeExspresssion = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}}|u{(:?[\\da-fA-F]{2}\\s)*[\\da-fA-F]{2}})/;\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"string.regexp\",\n        regex: \"[/]\",\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.regexp\",\n          regex: \"[/][imx]*(?=[).,;\\\\s]|$)\",\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.regexp\"\n        }]\n      }, [{\n        regex: \"[{}]\",\n        onMatch: function (val, state, stack) {\n          this.next = val == \"{\" ? this.nextState : \"\";\n          if (val == \"{\" && stack.length) {\n            stack.unshift(\"start\", state);\n            return \"paren.lparen\";\n          }\n          if (val == \"}\" && stack.length) {\n            stack.shift();\n            this.next = stack.shift();\n            if (this.next.indexOf(\"string\") != -1) return \"paren.end\";\n          }\n          return val == \"{\" ? \"paren.lparen\" : \"paren.rparen\";\n        },\n        nextState: \"start\"\n      }, {\n        token: \"string.start\",\n        regex: /\"/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string\",\n          regex: /\\\\#{/\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          token: \"string.end\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: /`/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string\",\n          regex: /\\\\#{/\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          token: \"string.end\",\n          regex: /`/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"rpstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?\\(/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /\\(/,\n          push: \"rpstring\"\n        }, {\n          token: \"string.end\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"spstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?\\[/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /\\[/,\n          push: \"spstring\"\n        }, {\n          token: \"string.end\",\n          regex: /]/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"fpstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?{/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /{/,\n          push: \"fpstring\"\n        }, {\n          token: \"string.end\",\n          regex: /}/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"tpstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?</,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /</,\n          push: \"tpstring\"\n        }, {\n          token: \"string.end\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"ppstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?\\|/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.end\",\n          regex: /\\|/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"rpqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]\\(/,\n        push: [{\n          token: \"string.start\",\n          regex: /\\(/,\n          push: \"rpqstring\"\n        }, {\n          token: \"string.end\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"spqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]\\[/,\n        push: [{\n          token: \"string.start\",\n          regex: /\\[/,\n          push: \"spqstring\"\n        }, {\n          token: \"string.end\",\n          regex: /]/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"fpqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]{/,\n        push: [{\n          token: \"string.start\",\n          regex: /{/,\n          push: \"fpqstring\"\n        }, {\n          token: \"string.end\",\n          regex: /}/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"tpqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]</,\n        push: [{\n          token: \"string.start\",\n          regex: /</,\n          push: \"tpqstring\"\n        }, {\n          token: \"string.end\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"ppqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]\\|/,\n        push: [{\n          token: \"string.end\",\n          regex: /\\|/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: /'/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: escapeExpression\n        }, {\n          token: \"string.end\",\n          regex: /'|$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }], {\n        token: \"text\",\n        // namespaces aren't symbols\n        regex: \"::\"\n      }, {\n        token: \"variable.instance\",\n        // instance variable\n        regex: \"@{1,2}[a-zA-Z_\\\\d]+\"\n      }, {\n        token: \"variable.fresh\",\n        // fresh variable\n        regex: \"%[a-zA-Z_\\\\d]+\"\n      }, {\n        token: \"support.class\",\n        // class name\n        regex: \"[A-Z][a-zA-Z_\\\\d]+\"\n      }, {\n        token: \"constant.other.symbol\",\n        // symbol\n        regex: \"[:](?:(?:===|<=>|\\\\[]\\\\?|\\\\[]=|\\\\[]|>>|\\\\*\\\\*|<<|==|!=|>=|<=|!~|=~|<|\\\\+|-|\\\\*|\\\\/|%|&|\\\\||\\\\^|>|!|~)|(?:(?:[A-Za-z_]|[@$](?=[a-zA-Z0-9_]))[a-zA-Z0-9_]*[!=?]?))\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d(?:\\\\d|_(?=\\\\d))*(?:(?:\\\\.\\\\d(?:\\\\d|_(?=\\\\d))*)?(?:[eE][+-]?\\\\d+)?)?(?:_?[fF](?:32|64))?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        regex: intNumber\n      }, {\n        token: \"constant.other.symbol\",\n        regex: ':\"',\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"constant.other.symbol\",\n          regex: '\"',\n          next: \"pop\"\n        }, {\n          defaultToken: \"constant.other.symbol\"\n        }]\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false)\\\\b\"\n      }, {\n        token: \"support.function\",\n        regex: \"(?:is_a\\\\?|nil\\\\?|responds_to\\\\?|as\\\\?)\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$!?]*\\\\b\"\n      }, {\n        token: \"variable.system\",\n        regex: \"\\\\$\\\\!|\\\\$\\\\?\"\n      }, {\n        token: \"punctuation.separator.key-value\",\n        regex: \"=>\"\n      }, {\n        stateName: \"heredoc\",\n        onMatch: function (value, currentState, stack) {\n          var next = \"heredoc\";\n          var tokens = value.split(this.splitRegex);\n          stack.push(next, tokens[3]);\n          return [{\n            type: \"constant\",\n            value: tokens[1]\n          }, {\n            type: \"string\",\n            value: tokens[2]\n          }, {\n            type: \"support.class\",\n            value: tokens[3]\n          }, {\n            type: \"string\",\n            value: tokens[4]\n          }];\n        },\n        regex: \"(<<-)([']?)([\\\\w]+)([']?)\",\n        rules: {\n          heredoc: [{\n            token: \"string\",\n            regex: \"^ +\"\n          }, {\n            onMatch: function (value, currentState, stack) {\n              if (value === stack[1]) {\n                stack.shift();\n                stack.shift();\n                this.next = stack[0] || \"start\";\n                return \"support.class\";\n              }\n              this.next = \"\";\n              return \"string\";\n            },\n            regex: \".*$\",\n            next: \"start\"\n          }]\n        }\n      }, {\n        regex: \"$\",\n        token: \"empty\",\n        next: function (currentState, stack) {\n          if (stack[0] === \"heredoc\") return stack[0];\n          return currentState;\n        }\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[.]\\s*(?![.])/,\n        push: [{\n          token: \"punctuation.operator\",\n          regex: /[.]\\s*(?![.])/\n        }, {\n          token: \"support.function\",\n          regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n          regex: \"\",\n          token: \"empty\",\n          next: \"pop\"\n        }]\n      }, {\n        token: \"keyword.operator\",\n        regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|\\\\?|\\\\:|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\^|\\\\|\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[?:,;.]/\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }]\n    };\n    this.normalizeRules();\n  };\n  oop.inherits(CrystalHighlightRules, TextHighlightRules);\n  exports.CrystalHighlightRules = CrystalHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var Range = require(\"../../range\").Range;\n  var FoldMode = exports.FoldMode = function () {};\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.commentBlock = function (session, row) {\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      range = this.commentBlock(session, row);\n      if (range) return range;\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/crystal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/crystal_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/range\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var CrystalHighlightRules = require(\"./crystal_highlight_rules\").CrystalHighlightRules;\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var Range = require(\"../range\").Range;\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = CrystalHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new FoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n        var startingClassOrMethod = line.match(/^\\s*(class|def|module)\\s.*$/);\n        var startingDoBlock = line.match(/.*do(\\s*|\\s+\\|.*\\|\\s*)$/);\n        var startingConditional = line.match(/^\\s*(if|else|when)\\s*/);\n        if (match || startingClassOrMethod || startingDoBlock || startingConditional) {\n          indent += tab;\n        }\n      }\n      return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n      return /^\\s+(end|else)$/.test(line + input) || this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, session, row) {\n      var line = session.getLine(row);\n      if (/}/.test(line)) return this.$outdent.autoOutdent(session, row);\n      var indent = this.$getIndent(line);\n      var prevLine = session.getLine(row - 1);\n      var prevIndent = this.$getIndent(prevLine);\n      var tab = session.getTabString();\n      if (prevIndent.length <= indent.length) {\n        if (indent.slice(-tab.length) == tab) session.remove(new Range(row, indent.length - tab.length, row, indent.length));\n      }\n    };\n    this.$id = \"ace/mode/crystal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/crystal\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","CrystalHighlightRules","builtinFunctions","keywords","buildinConstants","builtinVariables","keywordMapper","$keywords","createKeywordMapper","hexNumber","decNumber","octNumber","binNumber","intNumber","escapeExpression","extEscapeExspresssion","$rules","token","regex","push","next","defaultToken","onMatch","val","state","stack","nextState","length","unshift","shift","indexOf","stateName","value","currentState","tokens","split","splitRegex","type","rules","heredoc","normalizeRules","inherits","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentBlock","session","re","startLevel","search","startColumn","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidgetRange","foldStyle","range","indentationBlock","getFoldWidget","prev","prevIndent","nextIndent","foldWidgets","TextMode","Mode","HighlightRules","$outdent","$behaviour","$defaultBehaviour","foldingRules","lineCommentStart","getNextLineIndent","tab","tokenizedLine","getTokenizer","getLineTokens","startingClassOrMethod","startingDoBlock","startingConditional","prevLine","getTabString","slice","remove","$id","m"],"sources":["/home/anasb/code-projects/streamlit/streamlit-code-editor/code_editor/frontend/node_modules/ace-builds/src-noconflict/mode-crystal.js"],"sourcesContent":["ace.define(\"ace/mode/crystal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar CrystalHighlightRules = function () {\n    var builtinFunctions = (\"puts|initialize|previous_def|typeof|as|pointerof|sizeof|instance_sizeof\");\n    var keywords = (\"if|end|else|elsif|unless|case|when|break|while|next|until|def|return|class|new|getter|setter|property|lib\"\n        + \"|fun|do|struct|private|protected|public|module|super|abstract|include|extend|begin|enum|raise|yield|with\"\n        + \"|alias|rescue|ensure|macro|uninitialized|union|type|require\");\n    var buildinConstants = (\"true|TRUE|false|FALSE|nil|NIL|__LINE__|__END_LINE__|__FILE__|__DIR__\");\n    var builtinVariables = (\"$DEBUG|$defout|$FILENAME|$LOAD_PATH|$SAFE|$stdin|$stdout|$stderr|$VERBOSE|\" +\n        \"root_url|flash|session|cookies|params|request|response|logger|self\");\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"constant.language\": buildinConstants,\n        \"variable.language\": builtinVariables,\n        \"support.function\": builtinFunctions\n    }, \"identifier\");\n    var hexNumber = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var decNumber = \"(?:[0-9][\\\\d_]*)\";\n    var octNumber = \"(?:0o[0-7][0-7]*)\";\n    var binNumber = \"(?:0[bB][01]+)\";\n    var intNumber = \"(?:[+-]?)(?:\" + hexNumber + \"|\" + decNumber + \"|\" + octNumber + \"|\" + binNumber + \")(?:_?[iIuU](?:8|16|32|64))?\\\\b\";\n    var escapeExpression = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}})/;\n    var extEscapeExspresssion = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}}|u{(:?[\\da-fA-F]{2}\\s)*[\\da-fA-F]{2}})/;\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment\",\n                regex: \"#.*$\"\n            }, {\n                token: \"string.regexp\",\n                regex: \"[/]\",\n                push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string.regexp\",\n                        regex: \"[/][imx]*(?=[).,;\\\\s]|$)\",\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string.regexp\"\n                    }]\n            },\n            [{\n                    regex: \"[{}]\", onMatch: function (val, state, stack) {\n                        this.next = val == \"{\" ? this.nextState : \"\";\n                        if (val == \"{\" && stack.length) {\n                            stack.unshift(\"start\", state);\n                            return \"paren.lparen\";\n                        }\n                        if (val == \"}\" && stack.length) {\n                            stack.shift();\n                            this.next = stack.shift();\n                            if (this.next.indexOf(\"string\") != -1)\n                                return \"paren.end\";\n                        }\n                        return val == \"{\" ? \"paren.lparen\" : \"paren.rparen\";\n                    },\n                    nextState: \"start\"\n                }, {\n                    token: \"string.start\",\n                    regex: /\"/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string\",\n                            regex: /\\\\#{/\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /\"/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    token: \"string.start\",\n                    regex: /`/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string\",\n                            regex: /\\\\#{/\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /`/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"rpstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?\\(/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.start\",\n                            regex: /\\(/,\n                            push: \"rpstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"spstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?\\[/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.start\",\n                            regex: /\\[/,\n                            push: \"spstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /]/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"fpstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?{/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.start\",\n                            regex: /{/,\n                            push: \"fpstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /}/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"tpstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?</,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.start\",\n                            regex: /</,\n                            push: \"tpstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: />/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"ppstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?\\|/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: extEscapeExspresssion\n                        }, {\n                            token: \"string.end\",\n                            regex: /\\|/,\n                            next: \"pop\"\n                        }, {\n                            token: \"paren.start\",\n                            regex: /#{/,\n                            push: \"start\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"rpqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]\\(/,\n                    push: [{\n                            token: \"string.start\",\n                            regex: /\\(/,\n                            push: \"rpqstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"spqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]\\[/,\n                    push: [{\n                            token: \"string.start\",\n                            regex: /\\[/,\n                            push: \"spqstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /]/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"fpqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]{/,\n                    push: [{\n                            token: \"string.start\",\n                            regex: /{/,\n                            push: \"fpqstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: /}/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"tpqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]</,\n                    push: [{\n                            token: \"string.start\",\n                            regex: /</,\n                            push: \"tpqstring\"\n                        }, {\n                            token: \"string.end\",\n                            regex: />/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    stateName: \"ppqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]\\|/,\n                    push: [{\n                            token: \"string.end\",\n                            regex: /\\|/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }, {\n                    token: \"string.start\",\n                    regex: /'/,\n                    push: [{\n                            token: \"constant.language.escape\",\n                            regex: escapeExpression\n                        }, {\n                            token: \"string.end\",\n                            regex: /'|$/,\n                            next: \"pop\"\n                        }, {\n                            defaultToken: \"string\"\n                        }]\n                }], {\n                token: \"text\", // namespaces aren't symbols\n                regex: \"::\"\n            }, {\n                token: \"variable.instance\", // instance variable\n                regex: \"@{1,2}[a-zA-Z_\\\\d]+\"\n            }, {\n                token: \"variable.fresh\", // fresh variable\n                regex: \"%[a-zA-Z_\\\\d]+\"\n            }, {\n                token: \"support.class\", // class name\n                regex: \"[A-Z][a-zA-Z_\\\\d]+\"\n            }, {\n                token: \"constant.other.symbol\", // symbol\n                regex: \"[:](?:(?:===|<=>|\\\\[]\\\\?|\\\\[]=|\\\\[]|>>|\\\\*\\\\*|<<|==|!=|>=|<=|!~|=~|<|\\\\+|-|\\\\*|\\\\/|%|&|\\\\||\\\\^|>|!|~)|(?:(?:[A-Za-z_]|[@$](?=[a-zA-Z0-9_]))[a-zA-Z0-9_]*[!=?]?))\"\n            }, {\n                token: \"constant.numeric\", // float\n                regex: \"[+-]?\\\\d(?:\\\\d|_(?=\\\\d))*(?:(?:\\\\.\\\\d(?:\\\\d|_(?=\\\\d))*)?(?:[eE][+-]?\\\\d+)?)?(?:_?[fF](?:32|64))?\\\\b\"\n            }, {\n                token: \"constant.numeric\",\n                regex: intNumber\n            }, {\n                token: \"constant.other.symbol\",\n                regex: ':\"',\n                push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"constant.other.symbol\",\n                        regex: '\"',\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"constant.other.symbol\"\n                    }]\n            }, {\n                token: \"constant.language.boolean\",\n                regex: \"(?:true|false)\\\\b\"\n            }, {\n                token: \"support.function\",\n                regex: \"(?:is_a\\\\?|nil\\\\?|responds_to\\\\?|as\\\\?)\"\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$!?]*\\\\b\"\n            }, {\n                token: \"variable.system\",\n                regex: \"\\\\$\\\\!|\\\\$\\\\?\"\n            }, {\n                token: \"punctuation.separator.key-value\",\n                regex: \"=>\"\n            }, {\n                stateName: \"heredoc\",\n                onMatch: function (value, currentState, stack) {\n                    var next = \"heredoc\";\n                    var tokens = value.split(this.splitRegex);\n                    stack.push(next, tokens[3]);\n                    return [\n                        { type: \"constant\", value: tokens[1] },\n                        { type: \"string\", value: tokens[2] },\n                        { type: \"support.class\", value: tokens[3] },\n                        { type: \"string\", value: tokens[4] }\n                    ];\n                },\n                regex: \"(<<-)([']?)([\\\\w]+)([']?)\",\n                rules: {\n                    heredoc: [{\n                            token: \"string\",\n                            regex: \"^ +\"\n                        }, {\n                            onMatch: function (value, currentState, stack) {\n                                if (value === stack[1]) {\n                                    stack.shift();\n                                    stack.shift();\n                                    this.next = stack[0] || \"start\";\n                                    return \"support.class\";\n                                }\n                                this.next = \"\";\n                                return \"string\";\n                            },\n                            regex: \".*$\",\n                            next: \"start\"\n                        }]\n                }\n            }, {\n                regex: \"$\",\n                token: \"empty\",\n                next: function (currentState, stack) {\n                    if (stack[0] === \"heredoc\")\n                        return stack[0];\n                    return currentState;\n                }\n            }, {\n                token: \"punctuation.operator\",\n                regex: /[.]\\s*(?![.])/,\n                push: [{\n                        token: \"punctuation.operator\",\n                        regex: /[.]\\s*(?![.])/\n                    }, {\n                        token: \"support.function\",\n                        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n                    }, {\n                        regex: \"\",\n                        token: \"empty\",\n                        next: \"pop\"\n                    }]\n            }, {\n                token: \"keyword.operator\",\n                regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|\\\\?|\\\\:|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\^|\\\\|\"\n            }, {\n                token: \"punctuation.operator\",\n                regex: /[?:,;.]/\n            }, {\n                token: \"paren.lparen\",\n                regex: \"[[({]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\])}]\"\n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }\n        ]\n    };\n    this.normalizeRules();\n};\noop.inherits(CrystalHighlightRules, TextHighlightRules);\nexports.CrystalHighlightRules = CrystalHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar FoldMode = exports.FoldMode = function () { };\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.commentBlock = function (session, row) {\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n            if (level == -1)\n                continue;\n            if (line[level] != \"#\")\n                break;\n            endRow = row;\n        }\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n        range = this.commentBlock(session, row);\n        if (range)\n            return range;\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        }\n        else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n        if (prevIndent != -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/crystal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/crystal_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\",\"ace/mode/folding/coffee\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar CrystalHighlightRules = require(\"./crystal_highlight_rules\").CrystalHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Range = require(\"../range\").Range;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = CrystalHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"#\";\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            var startingClassOrMethod = line.match(/^\\s*(class|def|module)\\s.*$/);\n            var startingDoBlock = line.match(/.*do(\\s*|\\s+\\|.*\\|\\s*)$/);\n            var startingConditional = line.match(/^\\s*(if|else|when)\\s*/);\n            if (match || startingClassOrMethod || startingDoBlock || startingConditional) {\n                indent += tab;\n            }\n        }\n        return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n        return /^\\s+(end|else)$/.test(line + input) || this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, session, row) {\n        var line = session.getLine(row);\n        if (/}/.test(line))\n            return this.$outdent.autoOutdent(session, row);\n        var indent = this.$getIndent(line);\n        var prevLine = session.getLine(row - 1);\n        var prevIndent = this.$getIndent(prevLine);\n        var tab = session.getTabString();\n        if (prevIndent.length <= indent.length) {\n            if (indent.slice(-tab.length) == tab)\n                session.remove(new Range(row, indent.length - tab.length, row, indent.length));\n        }\n    };\n    this.$id = \"ace/mode/crystal\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/crystal\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}